# 部署多主多从(测试版)
version: '3.8'
services:

  redis1:
    image: redis:6.0
    networks:
      - middleware
    ports:
      - target: 7001
        published: 7001
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7001' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.hostname == manager1

  redis2:
    image: redis:6.0
    networks:
      - middleware
    ports:
      - target: 7002
        published: 7002
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7002' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.hostname == manager1

  redis3:
    image: redis:6.0
    networks:
      - middleware
    ports:
      - target: 7003
        published: 7003
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7003' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.hostname == manager2

  redis4:
    image: redis:6.0
    networks:
      - middleware
    ports:
      - target: 7004
        published: 7004
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7004' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.hostname == manager3

  redis5:
    image: redis:6.0
    networks:
      - middleware
    ports:
      - target: 7005
        published: 7005
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7005' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.hostname == worker1

  redis6:
    image: redis:6.0
    networks:
      - middleware
    ports:
      - target: 7006
        published: 7006
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7006' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.hostname == worker2

networks:
  middleware:
    external: true

# 需创建网络，看/doc/docker-networks.md文件
# docker network create -d  overlay --attachable middleware

# 启动stack命令
# docker stack up -c redis.yml data

# 创建集群脚本
# sh redis-cluster.sh
