{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"source/images/微信图片_202210261942369c6902bf8d6d48de9cb9cb0dad21c88d.jpg","path":"images/微信图片_202210261942369c6902bf8d6d48de9cb9cb0dad21c88d.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"node_modules/hexo-theme-next/package.json","hash":"26e77380c9dd66388b9fd34eb9aac3e0ad510731","modified":1740364956999},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"312fa7c1ae472e18d88f6d01c54dc6f32f66255c","modified":1740364957034},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1740364957001},{"_id":"node_modules/hexo-theme-next/README.md","hash":"5dd295594b92dbe07b0376b505f29fb3884e77f9","modified":1740364957002},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dbbd054721541f4d1f4fed4bc983bc19ff1f259a","modified":1740364957034},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1740364957000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1740364957000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1740364957002},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1740364957033},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1740364957034},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1740364957034},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1740364957034},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1740364957034},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1740364957034},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1740364957035},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1740364957035},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1740364957035},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1740364957035},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1740364957035},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1740364957035},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1740364957035},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1740364957035},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1740364957036},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1740364957037},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"b62faaa767a45a613dd042b5f1903675eb5a8cf9","modified":1740364957036},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1740364957036},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1740364957038},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1740364957082},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1740364957077},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1740364957079},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1740364957082},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1740364957003},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1740364957105},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1740364957005},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1740364957004},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"8eb6a9f231ce1bfa54cc54418ccf14f01dcc9a31","modified":1740364957118},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1740364957008},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"5c0f00cdac3f4727b880dd223f622a535736fa8e","modified":1740364957168},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1740364957011},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"285d5c4dffb97da659851fb6e53379a614619fd9","modified":1740364957002},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1740364957001},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1740364956969},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1740364957012},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1740364956963},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1740364956991},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1740364956997},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1740364956965},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"f2d45eb3f03662033608075e3fa895498d08712d","modified":1740364956967},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1740364956993},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"25bb3ec3c7c456aa1d1650eb139605b7df7394eb","modified":1740364956994},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1740364957001},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1740364956993},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1740364956994},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1740364956994},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1740364956995},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1740364956951},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1740364956952},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1740364956952},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1740364956968},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1740364956969},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1740364956990},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1740364956990},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1740364956992},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1740364956995},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1740364956995},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1740364956998},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1740364956999},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1740364956999},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1740364957006},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"21567f1810f861b0a33db6514a4fcf18fb98467d","modified":1740364957002},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1740364957009},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1740364957011},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1740364957008},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"51704a2eadb0d363762ebf2e44994696e0843e40","modified":1740364957007},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1740364957006},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1740364957013},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1740364957008},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1740364957003},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1740364957006},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1740364957011},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1740364957011},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1740364957013},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1740364957013},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1740364956768},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1740364957013},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1740364957013},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1740364957033},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1740364957033},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"ebfe0954e3931431f46f913abe08d0212e06e7c2","modified":1740364957013},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1740364956936},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"e21309d4165ebb6645084eed8dd749846ae981f1","modified":1740364957016},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1740364956959},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1740364957027},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1740364956959},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1740364956962},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1740364956994},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1740364956993},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1740364956997},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1740364956961},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1740364956993},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1740364956998},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1740364956970},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1740364956956},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1740364956960},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1740364956962},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1740364956964},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1740364956964},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1740364956967},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1740364956970},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1740364956990},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1740364956999},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1740364956997},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1740364956998},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1740364957004},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1740364957007},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1740364957006},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d7954a623be2ee9fe3eadc785b17c17afac6c34d","modified":1740364956998},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1740364957006},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1740364957009},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1740364957007},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1740364957005},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1740364957006},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"1efeeda00db08a3c033798228dd0092ee532cc36","modified":1740364957009},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1740364957006},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1740364957008},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1740364957006},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1740364957008},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1740364957012},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1740364957005},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1740364957012},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1740364957003},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1740364957009},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"55c2468b2b7f035881d494085527d6554f37b556","modified":1740364957005},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1740364957008},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1740364957012},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1740364957009},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1740364957008},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1740364957006},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1740364957008},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1740364957004},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1740364957007},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1740364957009},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1740364957005},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1740364957009},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1740364957011},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1740364957012},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1740364957005},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1740364957009},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"93c1d103d9d16581c944c51f3d0638f57c80ee41","modified":1740364957007},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1740364957007},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1740364957013},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1740364957009},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1740364957011},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1740364957007},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1740364957012},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1740364957012},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1740364957008},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1740364957010},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1740364957020},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1740364957027},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"e814de4dab6aee6153d0a46438c231f94ed05e73","modified":1740364957017},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1740364956790},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1740364956966},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1740364956997},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1740364956995},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1740364957016},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1740364957021},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"48b2dfc04df6409c6e0736ccc11462ad97d349b1","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1740364957019},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1740364957019},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d898944f9a68da04c9c9bc4afeec4b5595b76783","modified":1740364957017},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1740364957030},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1740364957024},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1740364957025},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1740364957032},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1740364957027},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1740364957027},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1740364957013},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1740364957015},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1740364957032},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1740364957015},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1740364957016},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1740364957015},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1740364957015},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1740364957015},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1740364957016},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1740364957016},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"a03f16ffc7dfdbdc6053f9fd68d77257ba0c559e","modified":1740364957015},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1740364957015},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e792a6233e1d4dbc5fd2f10ae97b7a790b82568b","modified":1740364957016},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1740364957015},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1740364957016},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1740364956929},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1740364956968},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1740364956991},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1740364956959},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1740364956964},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1740364956968},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1740364956998},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1740364956967},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1740364956964},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1740364956958},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1740364956970},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1740364956991},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1740364956999},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1740364956999},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1740364957028},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1740364956968},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1740364956990},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"bcbf498d8d3ecea84324f0a59b7f95f389a52b8d","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1740364956991},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"111f60e26b82b4d5be4357737e9273617778c9a9","modified":1740364956866},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1740364956966},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1740364956997},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4262628e173b16c4c6c18f817173dd103fb9e9a8","modified":1740364956991},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1740364956993},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1740364957019},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1740364956999},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1740364956990},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1740364957021},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1740364957018},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1740364957021},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1740364957019},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1740364957023},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1740364957032},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1740364957020},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1740364957030},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1740364957032},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"be60b8dacd4dc9d2b1b68982dc4f0c5325b9a315","modified":1740364957031},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1740364957033},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1740364957021},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1740364957032},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"93f014809d6442da23f8b7d729f7375e2badba7d","modified":1740364957028},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1740364957021},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1740364957023},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1740364957029},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1740364957021},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1740364957030},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1740364957030},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1740364957029},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"21acb11e397526132605eef23bde7b307aa1eab5","modified":1740364957025},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1740364957028},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1740364957030},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1740364957031},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"86b110899eaae51b85c4c95eadfe7a912e58a813","modified":1740364957031},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1740364957031},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1740364957030},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1740364957031},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-copyright.styl","hash":"56805b77fe236fac19e19c716a49363bcf986311","modified":1740364957031},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1740364957031},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1740364957029},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1740364957032},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1740364957030},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1740364957032},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9b0217e1caecd91e05572c7e8e52d32016ca312f","modified":1740364957025},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1740364957021},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1740364957020},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1740364957020},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1740364957018},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1740364957025},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1740364957032},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"8213015d9cae45d2c9945f8aba9d8db39c734efc","modified":1740364957027},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"49329a7144f3413d1c832e52a1f4954171ef11e1","modified":1740364957026},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1740364957033},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1740364957027},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"c3be8b0738f693e750486bb71769c3dbbec174cc","modified":1740364957032},{"_id":"source/_posts/docker/index.md","hash":"6941a477970d9d6f9f83a78c99db78ef5ebed99b","modified":1740296611131},{"_id":"source/_posts/index.md","hash":"8ce18a24113d23b51835fd1bc32f98b206ed1ee5","modified":1740296611450},{"_id":"source/_posts/books/index.md","hash":"44b5a120049175ea28c5f800f6ea17121e15133b","modified":1740296610306},{"_id":"source/images/微信图片_202210261942369c6902bf8d6d48de9cb9cb0dad21c88d.jpg","hash":"c413f07412dde34fcb4d4019887bda1f3b0f03f9","modified":1740296611776},{"_id":"source/_posts/AI/index.md","hash":"5699242c83f31b1c145d10b640d7d461d3fe9fbd","modified":1740296610216},{"_id":"source/_posts/kubernetes/crictl.md","hash":"8a41a0e323066d398a0903417b4fe440937b0efe","modified":1740296611450},{"_id":"source/_posts/kubernetes/index.md","hash":"a55211e92eecd25a97e53c1626d9866a4a5a9e7b","modified":1740296611703},{"_id":"source/_posts/kubernetes/kubectl.md","hash":"a68659fb624318d8b271c49c83188f875f45fc8a","modified":1740296611693},{"_id":"source/_posts/lang/index.md","hash":"4bf71cba315bef649e2175f1174008b0731ba5ff","modified":1740296611716},{"_id":"source/_posts/materiel/index.md","hash":"f8cd8709dcd78096fe2a743b494a1ba7425db05b","modified":1740296611721},{"_id":"source/_posts/kubernetes/kubernetes.md","hash":"f3ff2ff03188f24eaaf7739199f90de6808f271f","modified":1740296611451},{"_id":"source/_posts/materiel/2025-01-31-xxx.md","hash":"583c17a7d2c38ca499d22642801810d65606a7e0","modified":1740296611736},{"_id":"source/_posts/middleware/index.md","hash":"4b5629a86d4f2af38a243ab0033430e980597806","modified":1740296611738},{"_id":"source/_posts/tools/index.md","hash":"64a1c74d6078da90b632ca29183341c2ada5b475","modified":1740296611773},{"_id":"source/_posts/network/index.md","hash":"a68642e49b06212f96a08eb6c1dc8fef4b2ca110","modified":1740296611751},{"_id":"source/_posts/os/index.md","hash":"ab0c849f32270b5e799d04d383541b8d7cf7d4f6","modified":1740296611753},{"_id":"source/_posts/AI/fine-tuning/demo1.ipynb","hash":"6223dc4a8ee7b52b924cb9aca5e61728ec8d01bc","modified":1740296610215},{"_id":"source/_posts/AI/prompts/index.md","hash":"60ed7d7c3018f0192705e142af6585551dcc8510","modified":1740296610220},{"_id":"source/_posts/docker/app/index.md","hash":"acb298adc6fa273268fbf34d0787096a512557f2","modified":1740296611077},{"_id":"source/_posts/AI/prompts/prompts.md","hash":"a9c6dfe1100130146596adbbbfc282f99bfc86d0","modified":1740296610223},{"_id":"source/_posts/docker/app/app.yml","hash":"b04ac02e6912f1a782562f783d914ad5b873c183","modified":1740296611080},{"_id":"source/_posts/docker/dev_utls/index.md","hash":"a8125ee3cc4ee95f550ec43c9a9472f8c6e706b0","modified":1740296611140},{"_id":"source/_posts/docker/mid/index.md","hash":"011284564831cee7937df9a7cf09eaba59b5cde0","modified":1740296611091},{"_id":"source/_posts/docker/dev_utls/.DS_Store","hash":"f79cac40a8f7e2aca3c0b2fe29a75b31727cd6cc","modified":1740296611132},{"_id":"source/_posts/docker/doc/aliyun.md","hash":"fd2e86bad90870e33c9a63bf313956188128ed89","modified":1740296611173},{"_id":"source/_posts/docker/doc/conda.md","hash":"9485a6c0974ac8a9e8a3dac0a789b93563b22ea6","modified":1740296611219},{"_id":"source/_posts/docker/doc/docker-compose.md","hash":"b70f65e622738129ef344e843171c90df2e74ee3","modified":1740296611190},{"_id":"source/_posts/docker/doc/docker-dns.md","hash":"e428fd79d195b09eb9b0e8b31c65c1135825d8db","modified":1740296611196},{"_id":"source/_posts/docker/doc/docker-error.md","hash":"4bcc1cb3b25b95fd5a09f78731e1a925fb84c0a8","modified":1740296611186},{"_id":"source/_posts/docker/doc/docker-networks.md","hash":"2ade710f88ff89f4122d1ff26c2f36623bde6b29","modified":1740296611174},{"_id":"source/_posts/docker/doc/dockerfile.md","hash":"016c5f5fd44922ec599376aee46a37045a5da6af","modified":1740296611174},{"_id":"source/_posts/docker/doc/index.md","hash":"cc0e99719cae2ac360f37bb89cd24b9393689651","modified":1740296611180},{"_id":"source/_posts/docker/doc/firewalld.md","hash":"7fc88336bf0b59929ee5259a65dab46ce376d72c","modified":1740296611211},{"_id":"source/_posts/docker/doc/docker-swarm.md","hash":"8fce51c51366d0f8c560a93c7d48d80c0016c6a7","modified":1740296611180},{"_id":"source/_posts/docker/doc/linux-network.md","hash":"8a08409cc64f82f3922af6226c08b79e86ca484c","modified":1740296611174},{"_id":"source/_posts/docker/doc/docker.md","hash":"5395f14f240197177ea8e025b86811ee4a7ab268","modified":1740296611200},{"_id":"source/_posts/docker/doc/java.md","hash":"35cc58229e85b2012b952076099bf7342c02e98e","modified":1740296611180},{"_id":"source/_posts/docker/doc/linux.md","hash":"2fcf22a92e8ce6df837d96bb2d6543be0df467e6","modified":1740296611178},{"_id":"source/_posts/docker/doc/nfs-server.md","hash":"2fa20a00431a132fa771bb00f164e9975b60826f","modified":1740296611449},{"_id":"source/_posts/docker/doc/soft.md","hash":"6ebdf844b17a0fb898159587a76dc9e31e474bc4","modified":1740296611449},{"_id":"source/_posts/docker/doc/remote.md","hash":"20b0d7579665d0957974eb083107c184d6b4d650","modified":1740296611449},{"_id":"source/_posts/docker/doc/ssl.md","hash":"428cf560ea94e171fde4bacad06cceb2f8b92948","modified":1740296611179},{"_id":"source/_posts/docker/doc/yum.md","hash":"cbca832e34a0b7c7018bf281b0b236a69a96c566","modified":1740296611174},{"_id":"source/_posts/docker/doc/virtualBox.md","hash":"abd3d149b503132e3e3a40cb0931ea82386b2c5f","modified":1740296611177},{"_id":"source/_posts/kubernetes/mid/index.md","hash":"250f221da6e2f174cc1c59e8737941bed2144458","modified":1740296611695},{"_id":"source/_posts/kubernetes/docs/index.md","hash":"d14bd1db941f0207f82db9cf43f751d21735fcd8","modified":1740296611702},{"_id":"source/_posts/kubernetes/app/index.md","hash":"4effe7f3660e5f84bf74100868426fbe376cee21","modified":1740296611559},{"_id":"source/_posts/kubernetes/storage-config/default-sc.yaml","hash":"18beaa66f68d05a9d40562cd0aafbc3a435ce3de","modified":1740296611712},{"_id":"source/_posts/kubernetes/storage-config/host-path-pv.yaml","hash":"efcdb465f5b9a7bf22d46d47c9298e0f4b9d80ac","modified":1740296611714},{"_id":"source/_posts/lang/python/python.md","hash":"abcfad21090f50300bd0a918215607b9b84341dd","modified":1740296611715},{"_id":"source/_posts/lang/python/index.md","hash":"75e38ab864f6ed25e775be1a5924c3e5f3495adc","modified":1740296611715},{"_id":"source/_posts/kubernetes/storage-config/host-path-pv2.yaml","hash":"ced283a42d2aa0325b5b56b37b1ed695c4cf1a58","modified":1740296611714},{"_id":"source/_posts/materiel/ai/index.md","hash":"09cb71c4f11cd5bf2bfef507eaf72522504767da","modified":1740296611728},{"_id":"source/_posts/materiel/ai/maven如何生成QueryDSL的q版实体类.md","hash":"5a22f8d7a0ee6d22b642aade14290325dbf264a6","modified":1740296611727},{"_id":"source/_posts/materiel/article/OutOfMemoryError : unable to create new native Thread.md","hash":"270600040dc3e248d5bad01b637c08fd967442b5","modified":1740296611737},{"_id":"source/_posts/materiel/article/arthas查看sql.md","hash":"a5e6222b620e879cdb09309cbdd983e11002be3e","modified":1740296611737},{"_id":"source/_posts/materiel/ai/spring-data-redis中的依赖的jedis添加了optional=true需要开发者主动显式依赖的问题.md","hash":"b604831d4866d24fe9da50b4e8d541b4612b2b1e","modified":1740296611734},{"_id":"source/_posts/materiel/article/postgresql表死锁问题的排查方式.md","hash":"3e78f60c74a7c1bb6d32cc93f5ce2849c14e6a3d","modified":1740296611736},{"_id":"source/_posts/materiel/article/index.md","hash":"5e6cd8569da381aa645a189bb8d07d9f1a120b53","modified":1740296611737},{"_id":"source/_posts/materiel/article/一键更换Linux优质的软件源和docker源.md","hash":"3827a239fd32d15a9d757170d12b3fff7001a54c","modified":1740296611736},{"_id":"source/_posts/materiel/draft/arthas查看sql_redis_es.md","hash":"3e32ae718c1b0ad4aacf856deb023fa6443f87a1","modified":1740296611719},{"_id":"source/_posts/materiel/draft/README.md","hash":"452543edfa97d9da9d9deb78bf97b212b11b2e21","modified":1740296611719},{"_id":"source/_posts/materiel/draft/centos7报错记录.md","hash":"4a28ebc5eccaf8fb0e0df028ca34c9dd9baf7cfc","modified":1740296611720},{"_id":"source/_posts/materiel/draft/index.md","hash":"fd82f13707612b76f637fcaa4e1e6b3b57399f26","modified":1740296611719},{"_id":"source/_posts/materiel/draft/proxyman和arthas结合监听java进程网络(包括feign调用等).md","hash":"8d4de5dec7ddebedd4b4d3ebee89e38aa8326d80","modified":1740296611720},{"_id":"source/_posts/materiel/draft/ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网.md","hash":"a3627ac8ce6ae6b5d50335a9da80c2f6ce527288","modified":1740296611718},{"_id":"source/_posts/materiel/draft/如何让docker走代理.md","hash":"94859a4231697688c53fcc8c8eb279d9d47cdb42","modified":1740296611720},{"_id":"source/_posts/materiel/draft/内网穿透工具.md","hash":"2713099eca2f74a62a193c57f66e9d2cdf8c3fb0","modified":1740296611718},{"_id":"source/_posts/materiel/draft/科学上网与VPN办公的完美结合.md","hash":"72354529440bc360f0ed309ba338ec490f9c577c","modified":1740296611718},{"_id":"source/_posts/materiel/draft/模拟死锁并解决死锁.md","hash":"25a9ffc11e72f88da7d544d0a817d1f2fddba4dc","modified":1740296611717},{"_id":"source/_posts/middleware/data/index.md","hash":"a038445e5b0b7587c11b7de120190965068c538a","modified":1740296611743},{"_id":"source/_posts/middleware/monitoring/index.md","hash":"071e738fc5ac71831b7a32534306c8f86088748f","modified":1740296611739},{"_id":"source/_posts/network/MiniUPnP/doc.md","hash":"5d926f162f9b5f05ace70377deddc15386964d85","modified":1740296611752},{"_id":"source/_posts/middleware/monitoring/monitoring.md","hash":"9e0a1a3b8efddba1688a491be2d6fabb1f0f7074","modified":1740296611739},{"_id":"source/_posts/network/dns/nip.io.md","hash":"9c5a8a146a58a490083f51b04f4377da9db856d2","modified":1740296611753},{"_id":"source/_posts/network/cpolar/doc.md","hash":"7112e8d135f3f6c38384081c74346cdd76af7f1b","modified":1740296611743},{"_id":"source/_posts/network/iepose/doc.md","hash":"175b4be252ce160b3ee4e1832d427e3f61719459","modified":1740296611745},{"_id":"source/_posts/middleware/data/.DS_Store","hash":"ef51477f4b2805055dc7dc81e6e31533125a5af0","modified":1740296611742},{"_id":"source/_posts/network/iepose/docker-compose.yml","hash":"fcbf2aea61d2f4821fbb213e66ad8d5a2fa2ed90","modified":1740296611746},{"_id":"source/_posts/network/pgyvpn/doc.md","hash":"d1448298fa8e4b4556eee567e8bea3abe4897fe1","modified":1740296611752},{"_id":"source/_posts/network/headscale/doc.md","hash":"e5411f68af1220732f0202fafd8f9743be82dd7b","modified":1740296611747},{"_id":"source/_posts/os/linux/index.md","hash":"feaff8993e49434858534e47cb62da3dbc68e7bf","modified":1740296611754},{"_id":"source/_posts/tools/code_lang/code_lang.md","hash":"eff0ff3bdc3cd7f88990f94988da1fb135d7e97e","modified":1740296611765},{"_id":"source/_posts/os/linux/linux.md","hash":"0ca6df41494808343a3619b1781ad7e36f3e8178","modified":1740296611754},{"_id":"source/_posts/tools/softs/index.md","hash":"0bff0b500d486b3b827a42df14f1cdfbfcef08a3","modified":1740296611760},{"_id":"source/_posts/tools/code_lang/index.md","hash":"7cc19d1b71d4379906fd9362cfb3d2bfb44fad36","modified":1740296611765},{"_id":"source/_posts/tools/softs/softs.md","hash":"5fcd234b02d23595efa7a53d4833b36c649fbd07","modified":1740296611759},{"_id":"source/_posts/tools/terminal/index.md","hash":"14cb05ed46342c784f650a435942d1e4b59835d9","modified":1740296611770},{"_id":"source/_posts/tools/terminal/terminal.md","hash":"3b1e4dcb04a8a964f4acbcea14a87d93fa1e21f5","modified":1740296611770},{"_id":"source/_posts/network/mkcert_freemyip_nginx/doc.md","hash":"f20d1e8e4c1880b255ffe6732a64f303454b93fe","modified":1740296611744},{"_id":"source/_posts/docker/app/firefox/firefox.md","hash":"2ca14a33fe1c3430e497b057d965fd7fd1487b90","modified":1740296610339},{"_id":"source/_posts/docker/app/firefox/index.md","hash":"507276aa27f3a0e18b1cb89e059c69619bf3c4a5","modified":1740296610340},{"_id":"source/_posts/docker/app/neko/docker-compose.yml","hash":"4778587d56a2c0ac9afab79db0022ca56010a003","modified":1740296611079},{"_id":"source/_posts/docker/app/devs/index.md","hash":"5d3d29c59b705ae2e3e7ba41fe30268a13799bea","modified":1740296610572},{"_id":"source/_posts/docker/app/neko/neko.md","hash":"202bf426f2f12b64495e9e678591e1d36bc01870","modified":1740296611079},{"_id":"source/_posts/docker/app/neko/index.md","hash":"2d0d1fb3b1b1892454c1927ec2f60789813a29ff","modified":1740296611079},{"_id":"source/_posts/docker/app/networks/index.md","hash":"4d3102b6476db8285354393994971db472f432fc","modified":1740296611076},{"_id":"source/_posts/docker/app/os/index.md","hash":"f9af012726d94f2dff7e464d2820b309f51f1eff","modified":1740296611078},{"_id":"source/_posts/docker/app/upSnap/upSnap.md","hash":"1e885a8cc4b9403dd00adab2d7cb4bd534d98c48","modified":1740296611080},{"_id":"source/_posts/docker/app/upSnap/index.md","hash":"dc2577f269504f4e93f3686fde29e0a40d86da11","modified":1740296611080},{"_id":"source/_posts/docker/app/os/os.md","hash":"0d9952ce7a64261bc17ce32c84d5379c0d980231","modified":1740296611078},{"_id":"source/_posts/docker/dev_utls/dev-container/index.md","hash":"011e019686659bc260dfaa13a7474d4a4be49843","modified":1740296611170},{"_id":"source/_posts/docker/dev_utls/ai/index.md","hash":"1a30bb43b713462edda57c2b3e594c8680644f94","modified":1740296611171},{"_id":"source/_posts/docker/dev_utls/dev-container/.DS_Store","hash":"e30d80b7e1621dd895b1bfa7e574dd0c59c035da","modified":1740296611156},{"_id":"source/_posts/docker/dev_utls/dev-container/dev-container.md","hash":"005658dcd64df3cf37e4b9b8d2a8791236c04a54","modified":1740296611170},{"_id":"source/_posts/docker/dev_utls/git/git.md","hash":"cfff28cd643844d594eb6114fdc018f141fda194","modified":1740296611173},{"_id":"source/_posts/docker/dev_utls/git/index.md","hash":"cfc421fbe1f12ff998a652f016fa327eb0ef7950","modified":1740296611173},{"_id":"source/_posts/docker/dev_utls/x11docker/index.md","hash":"7c16aefe67299c63ea7eeaf6984f5eb763d85cbc","modified":1740296611172},{"_id":"source/_posts/docker/dev_utls/serverless/index.md","hash":"65869b57251d9fa2a55ed6a12b3539201c816a6a","modified":1740296611139},{"_id":"source/_posts/docker/dev_utls/serverless/serverless.md","hash":"166a9634cae8b1ea34c924b924d17e838fd40532","modified":1740296611140},{"_id":"source/_posts/docker/dev_utls/x11docker/x11docker.md","hash":"a67954452b51d7c68f33bc5659d2f6706dd5ea48","modified":1740296611172},{"_id":"source/_posts/docker/mid/HAProxy/haproxy-1.yml","hash":"5e875abe80cc78f073e648b05eba6481a2c5ccbb","modified":1740296611130},{"_id":"source/_posts/docker/mid/HAProxy/haproxy-2.yml","hash":"7ea48db702ee9b413d260fe072e8ea595bc91e97","modified":1740296611130},{"_id":"source/_posts/docker/mid/HAProxy/HAProxy.md","hash":"5b2c222de72a6761f6f03bf9168c5db99090f06d","modified":1740296611129},{"_id":"source/_posts/docker/mid/HAProxy/index.md","hash":"1496cc09c844045bffb5d7a80c4487ea58558390","modified":1740296611130},{"_id":"source/_posts/docker/mid/HAProxy/haproxy-template.yml","hash":"b869c15934b11c8cead55c6b8a90cc804527b549","modified":1740296611129},{"_id":"source/_posts/docker/mid/HAProxy/my.cnf","hash":"6ef0d02da197ea4550411e897a83827d3c19af16","modified":1740296611129},{"_id":"source/_posts/docker/mid/MyPerf4J/MyPerf4J.md","hash":"3dd73140d49176255eead64f4ab525a8f5c9291f","modified":1740296611123},{"_id":"source/_posts/docker/mid/Telegraf/Telegraf.md","hash":"781b1f6dedd6b77d07326776457126053ef66d5e","modified":1740296611081},{"_id":"source/_posts/docker/mid/HAProxy/haproxy.yml","hash":"5fe88f46695016b5de9d9da3b634c0273e58e46e","modified":1740296611130},{"_id":"source/_posts/docker/mid/MyPerf4J/index.md","hash":"5444b6ebc92f5c40db8416c428f3afce88682c1d","modified":1740296611123},{"_id":"source/_posts/docker/mid/github/index.md","hash":"cfad8895bf7c06b79a94176a2d8dd1abd7f9b6d5","modified":1740296611090},{"_id":"source/_posts/docker/mid/RabbitMQ/index.md","hash":"8c417d8cc072d7312adda8bb62697c086df2f639","modified":1740296611087},{"_id":"source/_posts/docker/mid/Telegraf/index.md","hash":"d6c63eadae407405c1642bf1b6f627450aab5ef0","modified":1740296611081},{"_id":"source/_posts/docker/mid/nacos/index.md","hash":"351878dd76743d1d352a0ffd8b60bbd2dca37c78","modified":1740296611083},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-2.yml","hash":"39230efccbccc9338f7abc5594a10e60395f5bd2","modified":1740296611118},{"_id":"source/_posts/docker/mid/kafka/index.md","hash":"ba0ac3a739d7c7e74900c7b1b3c209bf517fa111","modified":1740296611119},{"_id":"source/_posts/docker/mid/nacos/docker-compose.yml","hash":"b2a2201ea1a931631c0d7049c8e90b414d02e271","modified":1740296611083},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-3.yml","hash":"3212599e9dc048a50fad363b987a5dcf1f08d926","modified":1740296611118},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-4.yml","hash":"f96d18a97f6319d8bfd8c0b92315d542bf6a0b8a","modified":1740296611117},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-6.yml","hash":"1b003fa4db205bb73148dc87c09b04098a16f479","modified":1740296611118},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-5.yml","hash":"ec8aa373948dd55379bdf246ad5a4fda71242057","modified":1740296611117},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-7.yml","hash":"2ceb31f9f84dff778c8ed2c6cbaf79b830783480","modified":1740296611118},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-template.yml","hash":"40195ebd27f96070eecafc2561d7789589034d30","modified":1740296611123},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-test-2.yml","hash":"a4f75d7643d5d7fa443f66645a69777a49a0015e","modified":1740296611117},{"_id":"source/_posts/docker/mid/kafka/kafka-compose.yml","hash":"d8a311a125b605f99fb7d2d18d27900e263ea801","modified":1740296611117},{"_id":"source/_posts/docker/mid/nginx/index.md","hash":"cfa5de6aae0b3d1521e7c16e19c2d4b6edb49750","modified":1740296611113},{"_id":"source/_posts/docker/mid/nginx/nginx-compose-test.yml","hash":"3e4536495dbee682aebeca0be0d5e74667e18278","modified":1740296611116},{"_id":"source/_posts/docker/mid/nginx/nginx-single-compose.yml","hash":"cde758151f7e9b5eeaab31cc633a724e74df7390","modified":1740296611113},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-test.yml","hash":"edcce10a48a4ffb7d0e7aa5a1ebfb517812f8a5f","modified":1740296611120},{"_id":"source/_posts/docker/mid/nginx/nginx-compose.yml","hash":"f5fe186bab8bd597148bc6a390b60ca1f0c790b2","modified":1740296611115},{"_id":"source/_posts/docker/mid/rocketMq/docker-compose-2.yml","hash":"8e4d81a1ccf31323cd9e9ba371ab50a23daf9f0b","modified":1740296611128},{"_id":"source/_posts/docker/mid/rocketMq/index.md","hash":"9255aa2acad43ccee8e6a16211ad683dff69eb8a","modified":1740296611127},{"_id":"source/_posts/docker/mid/rocketMq/docker-compose.yml","hash":"f9a1220d66e5b62f27ad2cb9dd2dee9a81815bc4","modified":1740296611127},{"_id":"source/_posts/docker/mid/seata/docker-compose.yml","hash":"3d767a3b748cf920fd2b52b39728e7786034bfc7","modified":1740296611086},{"_id":"source/_posts/docker/mid/zipkin/zipkin.md","hash":"db3be669045cd592995fd95e98becf67ec30999c","modified":1740296611091},{"_id":"source/_posts/docker/mid/zipkin/index.md","hash":"596ba95024381d575e55c490628bbd4093d9f812","modified":1740296611091},{"_id":"source/_posts/docker/doc/article/docker-compose服务间依赖通过自定义健康检查实现顺序启动.md","hash":"d36419ccb34476185b23e03d99a2bad932360de8","modified":1740296611199},{"_id":"source/_posts/docker/doc/container/container.md","hash":"1a053ff9066131c54cb9c19a8dcf50dfc93b6541","modified":1740296611179},{"_id":"source/_posts/docker/doc/article/docker镜像源.md","hash":"5720edc8e84882728c24aef4d956e7cb67d26937","modified":1740296611200},{"_id":"source/_posts/docker/doc/article/index.md","hash":"a591f9097bf3ab2df38b3f1b2b4659029c7c1c09","modified":1740296611198},{"_id":"source/_posts/docker/doc/docker-context/docker-context.md","hash":"60c8a8698c47e79c627e3f57fb9abaa77c59e477","modified":1740296611181},{"_id":"source/_posts/docker/doc/container/index.md","hash":"53904bc03c38f130e253ae14e06138d9a7c0a5f8","modified":1740296611179},{"_id":"source/_posts/docker/doc/material/index.md","hash":"cd6844320eff947d3512b236e7c69013a8f2eec1","modified":1740296611245},{"_id":"source/_posts/docker/doc/docker-context/index.md","hash":"31af9888b42af23743ed9a8bdf9d81babad33c82","modified":1740296611182},{"_id":"source/_posts/docker/doc/problems/docker-container-permission-denied.md","hash":"d0122dd3616178ec96539a920b18d266a7dcc899","modified":1740296611178},{"_id":"source/_posts/docker/doc/erlang/erlang.md","hash":"e2b2d14d7f457ad90f0c4af120e95e71e7cb0f36","modified":1740296611176},{"_id":"source/_posts/docker/doc/erlang/index.md","hash":"9c8ca9800ea78781935c3f3acb3d8bc1f6701192","modified":1740296611177},{"_id":"source/_posts/docker/doc/problems/docker-swarm-networks.md","hash":"7716239296e205bb8278759d2ac791d367e15f84","modified":1740296611177},{"_id":"source/_posts/docker/doc/problems/index.md","hash":"8f406325fff6df1019b412fdac97488c91709177","modified":1740296611178},{"_id":"source/_posts/docker/doc/test/index.md","hash":"047b2be4b4903d5440381d5a91277753cd8a8aa1","modified":1740296611175},{"_id":"source/_posts/docker/doc/test/test1.md","hash":"bec5af894f91ccbebe248a309c103af13813e3bc","modified":1740296611175},{"_id":"source/_posts/docker/doc/uat/init.sh","hash":"13080c9a41507bbab0dde27d2c2438707d8948bc","modified":1740296611176},{"_id":"source/_posts/kubernetes/app/dashboard/dashboard-ClusterRoleBinding.yaml","hash":"124f907a36263985c3f8da3c1a1aa085423e3f8d","modified":1740296611557},{"_id":"source/_posts/docker/doc/test/test2.md","hash":"0544559da4997edf5768e38e54c2f83f05d3462b","modified":1740296611175},{"_id":"source/_posts/kubernetes/app/dashboard/dashboard-ServiceAccount.yaml","hash":"917d4f457a5c954e3d4cd17198a49e4ff609635d","modified":1740296611557},{"_id":"source/_posts/kubernetes/app/dashboard/dashboard.md","hash":"4ff552c3319b84ea0025a4983325da6c6915befb","modified":1740296611557},{"_id":"source/_posts/kubernetes/app/dashboard/index.md","hash":"d3aa68af99d540c16b9280ffc90236b5dacfd0f2","modified":1740296611558},{"_id":"source/_posts/kubernetes/app/kuboard/index.md","hash":"8bbaf485d2bf4fff32a0733d3f503871736cf1e8","modified":1740296611558},{"_id":"source/_posts/kubernetes/app/kuboard/kuboard.md","hash":"5655fc923eeee0a06617cddd063781344201daf4","modified":1740296611558},{"_id":"source/_posts/kubernetes/app/harbor/index.md","hash":"2c65f46332b70cb25dab6a219d1932da62ccee1b","modified":1740296611552},{"_id":"source/_posts/kubernetes/app/devs/index.md","hash":"f73e0830a1d9c942e2441d66fcab494e81ddf1b1","modified":1740296611451},{"_id":"source/_posts/kubernetes/app/metersphere/index.md","hash":"2608c2e4eee0482b0e3f23d51dd9e21ff87c3596","modified":1740296611559},{"_id":"source/_posts/kubernetes/app/harbor/harbor.md","hash":"0c09cf8b9cfbb1407bd1f56a2204884225616702","modified":1740296611553},{"_id":"source/_posts/kubernetes/app/metersphere/ms-gateway-nodeport.yaml","hash":"7f89dbe815ac7a9d2c64699343774c2f5b73bba6","modified":1740296611560},{"_id":"source/_posts/kubernetes/app/metersphere/metersphere.md","hash":"0e83cdd4ed2efa95bf70a3a598237a3bd1fecba0","modified":1740296611559},{"_id":"source/_posts/kubernetes/app/nacos/nacos.md","hash":"01a194682abdc50262c8363323ff309b84a16305","modified":1740296611549},{"_id":"source/_posts/kubernetes/docs/cert-manager/index.md","hash":"caab94db6a5636aa210c6c9a0a167fd369cfaf84","modified":1740296611701},{"_id":"source/_posts/kubernetes/docs/cert-manager/cert-manager.md","hash":"27995455739ca89085490496f14a9bbb3858307f","modified":1740296611698},{"_id":"source/_posts/kubernetes/app/skywalking/skywalking.md","hash":"3a74cf9a408f24cb902df3e76e7da0c513048aaa","modified":1740296611690},{"_id":"source/_posts/kubernetes/app/elk/index.md","hash":"0f9e3c156941179b8a93d0a1b0b655a41f0c1f3b","modified":1740296611556},{"_id":"source/_posts/kubernetes/docs/problems/index.md","hash":"91f41450aed0a7e7ce9210cc7d98cadb5f1dcdd6","modified":1740296611702},{"_id":"source/_posts/kubernetes/docs/problems/problems.md","hash":"28f62392356ee895165d450e74df2ed20988fe7f","modified":1740296611702},{"_id":"source/_posts/kubernetes/docs/telepresence/index.md","hash":"cf417a28babb870b4ac1c393b223a5b5273120e8","modified":1740296611703},{"_id":"source/_posts/kubernetes/docs/telepresence/telepresence.md","hash":"cd18b5f66722725114092cdd82c22f43ea73b50c","modified":1740296611703},{"_id":"source/_posts/kubernetes/docs/temp/index.md","hash":"0adc09bc3ce62c8cc0430732f68da8f0a4352812","modified":1740296611697},{"_id":"source/_posts/kubernetes/app/nacos/index.md","hash":"6e41d16d9f67ea4aade544b56acfea895d9af873","modified":1740296611549},{"_id":"source/_posts/kubernetes/docs/temp/yum安装k8s.md","hash":"b486afd8f2c219332fc37c435ea7316e53378b79","modified":1740296611697},{"_id":"source/_posts/kubernetes/mid/RabbitMQ/index.md","hash":"e76933e2aceef86956af5f394ed4836b7f05c31e","modified":1740296611695},{"_id":"source/_posts/materiel/ai/cloud-native/index.md","hash":"73f8993db9032f7349fb01c9c833c895bb00646c","modified":1740296611725},{"_id":"source/_posts/kubernetes/mid/RabbitMQ/RabbitMQ.md","hash":"39ab1fbf36888214f2bce68bca34a6c892839391","modified":1740296611694},{"_id":"source/_posts/materiel/ai/devs/index.md","hash":"b3b9b4fa09d42b7e278925853d05c3adc05cd23a","modified":1740296611726},{"_id":"source/_posts/materiel/ai/docker/docker命令怎么控制远程docker.md","hash":"7234c949041f5329ecce6defec4221c4e98c88d1","modified":1740296611723},{"_id":"source/_posts/materiel/ai/docker/daemon.json配置,怎么配置远程控制.md","hash":"96d4641418c8850a188f1ea103266930de10ad0f","modified":1740296611724},{"_id":"source/_posts/materiel/ai/cloud-native/centos系统彻底卸载docker和k8s.md","hash":"f6035916e1e42d3f7408f90550655b4ee14b0b12","modified":1740296611725},{"_id":"source/_posts/materiel/ai/docker/index.md","hash":"71129e8cdd5bf97766d70b5260a340ad3d3478e2","modified":1740296611724},{"_id":"source/_posts/kubernetes/app/skywalking/index.md","hash":"52ecb451afad4131e05c24b8c308222f3c785269","modified":1740296611689},{"_id":"source/_posts/materiel/ai/docker/开启ssh的centos发行版的Dockerfile.md","hash":"9c34753875f759be19359f51a5cf7a4c9857e610","modified":1740296611723},{"_id":"source/_posts/materiel/ai/docker/通过ssh协议使本地docker无感控制远程docker.md","hash":"4dc3498748a53aea63a0193eea22e316c7821ffb","modified":1740296611724},{"_id":"source/_posts/materiel/ai/java/index.md","hash":"42e0762d21f6dc4a1a0ac5ce0c06cbba8a43411a","modified":1740296611727},{"_id":"source/_posts/materiel/ai/docker/修改docker容器的密码并且开启ssh远程连接.md","hash":"1e4dc9bf611c38f20d4a7fe8f616b63fca57fa8b","modified":1740296611723},{"_id":"source/_posts/materiel/ai/git/git只克隆指定某几个子模块到本地.md","hash":"12fbf3feee63857869c84652902785a3a9318399","modified":1740296611735},{"_id":"source/_posts/materiel/ai/git/git命令中的`--recurse-submodules`作用.md","hash":"56f857ff12ea99930d8dd124c8e613ed43f3350e","modified":1740296611735},{"_id":"source/_posts/materiel/ai/docker/如何让docker走代理.md","hash":"1abd2f43be600cc7beb8640ec1ccff3bd57960cc","modified":1740296611724},{"_id":"source/_posts/materiel/ai/git/git管理子项目的方式.md","hash":"c0d18ab902470a08961863a47e05d9a749f4852f","modified":1740296611735},{"_id":"source/_posts/materiel/ai/java/java中hprof文件如何导出.md","hash":"828b74c38df6581a1fd616d0ce704c05e8f26188","modified":1740296611727},{"_id":"source/_posts/materiel/ai/linux/Linux查看某个进程占用的内存大小.md","hash":"9d4f04d302260c2eba7b8a3e47e63c21435965e0","modified":1740296611730},{"_id":"source/_posts/materiel/ai/neural-network/index.md","hash":"824ca5ed1efb375970854d9ebc357f3a09077f1a","modified":1740296611722},{"_id":"source/_posts/materiel/ai/git/index.md","hash":"8a7054f73198c8b27c8cbaf0cb3e076c1552dfda","modified":1740296611735},{"_id":"source/_posts/materiel/ai/neural-network/神经元和参数的关系.md","hash":"d7abcc4151db21f8a05f18dfc284a184194044a6","modified":1740296611722},{"_id":"source/_posts/materiel/ai/linux/index.md","hash":"8fa10ea857373ef1ef37105ee80a926fe4b4f0dc","modified":1740296611730},{"_id":"source/_posts/materiel/ai/ssh/ssh -w要怎么使用ssh config配置文件配置以及它有哪些参数.md","hash":"84e3a1ef37b133d4cfe77180facf222d55de7f94","modified":1740390551370},{"_id":"source/_posts/materiel/ai/ssh/ssh vpn更智能的方案之sshuttle.md","hash":"71fdaa439b8112ae2153e53025220064662d2b78","modified":1740398271360},{"_id":"source/_posts/materiel/ai/ssh/定制化 SSH VPN 专用服务器方案.md","hash":"6423facc359b47e3bf237e1798f8ff374ed95a20","modified":1740398271358},{"_id":"source/_posts/materiel/ai/sandbox/如何使用macos系统的沙箱环境呢?.md","hash":"3c3cb88ba98fb84ddb90d5a1285782b100229587","modified":1740296611729},{"_id":"source/_posts/materiel/ai/prompts/index.md","hash":"8b8f4c0b855792b38ab06452d51ad4822608a811","modified":1740296611734},{"_id":"source/_posts/materiel/draft/temp/doc.txt","hash":"994fdf4bd96a756828b71793565f2f37072254dd","modified":1740296611718},{"_id":"source/_posts/middleware/data/clickhouse/index.md","hash":"13d67cb424a7e2a28c04cd423b92a2e010442c64","modified":1740296611740},{"_id":"source/_posts/middleware/data/clickhouse/clickhouse.md","hash":"397a9152842ddded6d2c4caf646b489409c0e1f8","modified":1740296611740},{"_id":"source/_posts/middleware/data/clickhouse/clickhouse-install.sh","hash":"65ae444db4955e09b2001154eeb3db5208c37938","modified":1740296611740},{"_id":"source/_posts/middleware/data/redis/index.md","hash":"c5e0fe704f914304917a4f0555a80fe7cbd580c2","modified":1740296611742},{"_id":"source/_posts/middleware/data/redis/redis.md","hash":"d8e284833e1e5a9c26393047b5fa4d2b84eb37a8","modified":1740296611742},{"_id":"source/_posts/middleware/data/clickhouse/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1740296611740},{"_id":"source/_posts/network/pgyvpn/temp/temp.md","hash":"3e95d873d3508175a58179d6e470046625cd4456","modified":1740296611752},{"_id":"source/_posts/network/headscale/local/doc.md","hash":"171fd316f6cf70e6186d2aa5dc18e201407cf993","modified":1740296611747},{"_id":"source/_posts/os/linux/problems/index.md","hash":"f4329c970d14e0fd49cc6e79205ed6f6aafb8b75","modified":1740296611754},{"_id":"source/_posts/network/mkcert_freemyip_nginx/test/doc.md","hash":"c677ec9d71665c958cc4337539c1890c5396ad7e","modified":1740296611744},{"_id":"source/_posts/materiel/ai/sandbox/index.md","hash":"eb666552a2a2951caa1d44ed91cf10be5652de1e","modified":1740296611729},{"_id":"source/_posts/os/linux/problems/problems.md","hash":"f2174b5e372f1bba135722752f1f7f88b25cd80d","modified":1740296611754},{"_id":"source/_posts/os/linux/process/index.md","hash":"02893d5d36a25b79ffdf3d9ab0e02550326e583e","modified":1740296611755},{"_id":"source/_posts/tools/softs/ComfyUI/index.md","hash":"c1940557faf15b9ffff11ad7cd76cff115184db4","modified":1740296611756},{"_id":"source/_posts/os/linux/process/process.md","hash":"206a6a837d7e85bb0c8780cafbf67a79921af55a","modified":1740296611755},{"_id":"source/_posts/tools/softs/ComfyUI/ComfyUI.md","hash":"5cac4dec71eead66a39d7524000d8139a689dd4e","modified":1740296611756},{"_id":"source/_posts/tools/softs/clash/index.md","hash":"ba61984aee4fb29e5c7fe83bd62764869b7e887d","modified":1740296611761},{"_id":"source/_posts/tools/softs/cursor/cursor.md","hash":"4dec6861b3877301d2dc19c1d75ac3ee14fc59a8","modified":1740296611757},{"_id":"source/_posts/tools/softs/idea/index.md","hash":"e9fefc6a089ba833df900e612f43f19a780de99c","modified":1740296611759},{"_id":"source/_posts/tools/softs/idea/idea.md","hash":"e623bd38455196eb3f6730fdc7f664ca2991278a","modified":1740296611759},{"_id":"source/_posts/tools/softs/windsurf/index.md","hash":"d5db087d97a40d4a670cfb3cae41bae9d636f90d","modified":1740296611761},{"_id":"source/_posts/tools/terminal/arthas/index.md","hash":"e86aa98b2becd4a0c5322949d76f936c44d03cd4","modified":1740296611766},{"_id":"source/_posts/tools/softs/windsurf/windsurf.md","hash":"5c99e140e7e09eb6c1cbfbd6a1aad99e14bee265","modified":1740296611760},{"_id":"source/_posts/tools/softs/cursor/index.md","hash":"fe19c43e3c4594384ec228d98638605c0a3b9708","modified":1740296611758},{"_id":"source/_posts/tools/softs/clash/clash.md","hash":"991d9b41ee7636911addb2d07d38312f64f3b7df","modified":1740296611762},{"_id":"source/_posts/tools/terminal/docker/index.md","hash":"2285320324de24e81507e3d2b8778ec219133f4a","modified":1740296611767},{"_id":"source/_posts/tools/terminal/arthas/arthas.md","hash":"2766a70b1c395c3fef4da792d99b7a1264175b22","modified":1740296611767},{"_id":"source/_posts/tools/terminal/git/git.md","hash":"41772510cad900b8b5e3649da4a6c01c9e610b71","modified":1740296611773},{"_id":"source/_posts/tools/terminal/git/index.md","hash":"fde94a1e5f228d5f39c47cad3c0f9fab28715142","modified":1740296611773},{"_id":"source/_posts/tools/terminal/interpreter/index.md","hash":"c163aeba3595d38f450de31861b005654edfb051","modified":1740296611766},{"_id":"source/_posts/tools/terminal/gradle/gradle.md","hash":"6854e49a5d73943ada507046a8b0ccbedfc3f009","modified":1740296611769},{"_id":"source/_posts/tools/terminal/gradle/index.md","hash":"722b8ac7a9175a96b7ec3f396cdc04e33428ce48","modified":1740296611769},{"_id":"source/_posts/tools/terminal/jmap/index.md","hash":"c7cd23f4c36cab860b5937883e6beabc0e340988","modified":1740296611771},{"_id":"source/_posts/tools/terminal/interpreter/interpreter.md","hash":"046b6242302152a5c0a7a46dfdaddae1a708d939","modified":1740296611766},{"_id":"source/_posts/tools/terminal/jmap/jmap.md","hash":"00971d1746f243e5b8903b8da3ba1c7c37b96858","modified":1740296611771},{"_id":"source/_posts/tools/terminal/sshuttle/doc.md","hash":"35de7126f8fa378c8a5734a2e02a8ba135b134fc","modified":1740296611772},{"_id":"source/_posts/docker/app/devs/camunda/camunda.md","hash":"bcdde2e9d94846bbde1d723288fd25929dd9999f","modified":1740296610485},{"_id":"source/_posts/docker/app/devs/camunda/camunda.yml","hash":"ee517ba2239de3905a55e304135cf5ad1334c032","modified":1740296610515},{"_id":"source/_posts/docker/app/devs/camunda/index.md","hash":"154b2e167f8dc6d2d9445b119bdcce7038d7c2a1","modified":1740296610523},{"_id":"source/_posts/docker/app/devs/openHands/openHands.md","hash":"c8e0d383277ae6c391b1e01cfca0bbf6fadb969e","modified":1740296610526},{"_id":"source/_posts/docker/app/devs/openHands/index.md","hash":"f2b1d4db17a8321071d65a67257b47cfebd248ae","modified":1740296610527},{"_id":"source/_posts/docker/app/devs/maven/index.md","hash":"253906a8bf9af4ef77f2df66e855cdbb90dc908c","modified":1740296610478},{"_id":"source/_posts/docker/app/devs/jenkins/index.md","hash":"0f964dad94b3c8cf548dc133f3eea7f7890cb93d","modified":1740296611003},{"_id":"source/_posts/docker/app/devs/maven/delLastUpdated.bat","hash":"01a9dcc4f6151cf21019ba7856a841f8a9398d4a","modified":1740296610480},{"_id":"source/_posts/docker/app/devs/data/index.md","hash":"c8487388ea913641d674c67b50c1327430153a4d","modified":1740296611045},{"_id":"source/_posts/docker/app/devs/watch/watch.md","hash":"974faf972d35e8108d061969776e2d01b3452db1","modified":1740296610709},{"_id":"source/_posts/docker/app/devs/watch/watch.yml","hash":"1c914571b6c298f8359c79aefce552131a88c0b3","modified":1740296610834},{"_id":"source/_posts/docker/app/devs/watch/index.md","hash":"e3aea5012f66546aea1c9c254d7f77b32f1b3095","modified":1740296610833},{"_id":"source/_posts/docker/app/devs/yapi/doc-test.md","hash":"18dfe7cdd2d8a7c5b6a8fdd9ce2979a31aa68792","modified":1740296610543},{"_id":"source/_posts/docker/app/devs/yapi/setup-2.js","hash":"f309064627f40e3c6e6c4ba3fc71e02b8ad6121d","modified":1740296610568},{"_id":"source/_posts/docker/app/devs/yapi/docker-entrypoint.sh","hash":"ce38421aa6e072a80e40c3796b1f4b2d267f480b","modified":1740296610563},{"_id":"source/_posts/docker/app/devs/yapi/index.md","hash":"f563365dead0a0491dee4e2862a7b3feefefc39b","modified":1740296610565},{"_id":"source/_posts/docker/app/devs/yapi/yapi.yml","hash":"c26c97d930d815525e4ca0512718120b754f5b98","modified":1740296610570},{"_id":"source/_posts/docker/app/devs/yapi/yapi.md","hash":"305b80a9156eee8d49abc047d79896a7a227dcb3","modified":1740296610572},{"_id":"source/_posts/docker/app/devs/zentao/index.md","hash":"b8c1e00bb106adc2c30d04c5b1eda7340783ca8a","modified":1740296610419},{"_id":"source/_posts/docker/app/devs/zentao/zentao.md","hash":"3b79b371d590bdbc5feb0c20cd2063fa923b9bbb","modified":1740296610411},{"_id":"source/_posts/docker/app/firefox/temp/index.md","hash":"266e1d5f69c58cc2404365efc205da97388cd761","modified":1740296610339},{"_id":"source/_posts/docker/app/networks/adguard/adguardhome-all.yml","hash":"cd100ab57bebc3c92eed6736d8805da9eb2405cb","modified":1740296611071},{"_id":"source/_posts/docker/app/firefox/temp/temp.md","hash":"9a8620c04484fc220169d273686f6da30f7e6a17","modified":1740296610327},{"_id":"source/_posts/docker/app/networks/adguard/adguard.md","hash":"b4c05076f85ab601f68bf72e536c581cff70b87d","modified":1740296611071},{"_id":"source/_posts/docker/app/networks/adguard/adguardhome.yml","hash":"ff81132e02496b97d7532b670d9257a26f751496","modified":1740296611072},{"_id":"source/_posts/docker/app/networks/adguard/adguardhome-simple.yml","hash":"90d869cfc0aee6cc002ba7809620be1d92499b61","modified":1740296611072},{"_id":"source/_posts/docker/app/networks/adguard/index.md","hash":"0d086738f8dbc76afd0feaf7e557a43faac6f34e","modified":1740296611072},{"_id":"source/_posts/docker/app/networks/netbird/index.md","hash":"b5ba852381218c63a515ed7a2eb2d13a3c9a5263","modified":1740296611075},{"_id":"source/_posts/docker/app/networks/netbird/netbird.md","hash":"4a50e786ca6ab1f75dab8f37f08b6cb79a446aa4","modified":1740296611076},{"_id":"source/_posts/docker/app/networks/rTorrent/index.md","hash":"bad76cbc5ec95151386f4efdbbbc7508c19ec424","modified":1740296611076},{"_id":"source/_posts/docker/app/networks/rTorrent/rTorrent.md","hash":"650d193ae1f8d22f10ac04ab3714a4b9ecb15f5a","modified":1740296611076},{"_id":"source/_posts/docker/app/networks/sub-web/sub-web.md","hash":"be07b360a89f4950c62b7540bf5f1a065ba31000","modified":1740296611077},{"_id":"source/_posts/docker/app/networks/sub-web/index.md","hash":"126943cf939ee1319ee92af4da02577a2d24fff5","modified":1740296611077},{"_id":"source/_posts/docker/app/networks/vpn/index.md","hash":"a4572c26ea368dd181ccd533b16b0e8f02d56dca","modified":1740296611074},{"_id":"source/_posts/docker/app/os/win/docker-compose.yml","hash":"5254ec969baa282fb4b545fcf74aafe57e3cc949","modified":1740296611078},{"_id":"source/_posts/docker/dev_utls/ai/wren/index.md","hash":"4b8297f78b3035316cf498237d6c54cc4723f4af","modified":1740296611171},{"_id":"source/_posts/docker/dev_utls/ai/wren/wren.md","hash":"41c5fc1e06c101eba018331fa1b645006bfee950","modified":1740296611171},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/Dockerfile","hash":"1a9bd238a2315187fcbbc6ece14b9dc0040a8ee5","modified":1740296611165},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/dockerfile.md","hash":"ac425f3a148f57e9957dedbdd747425f5cfc7c68","modified":1740390577332},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/docker-compose.yml","hash":"233f3e22bf2e3ee2fd049a85656aacf7a94120de","modified":1740296611165},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/index.md","hash":"cc4daedae4045833a32d15c09534f3db1b32a019","modified":1740296611165},{"_id":"source/_posts/docker/dev_utls/dev-container/ssh/Dockerfile","hash":"1a9bd238a2315187fcbbc6ece14b9dc0040a8ee5","modified":1740296611169},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/index.md","hash":"e329aff0bcd617e609e85979ead335ccead2e326","modified":1740296611155},{"_id":"source/_posts/docker/dev_utls/dev-container/ssh/Dockerfile_docker","hash":"d99285d86b154f956756ce49f518f32fb2e1615c","modified":1740296611170},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/.DS_Store","hash":"555b9fb04d825a4d2e0f383b12c4bdad5addd77d","modified":1740296611144},{"_id":"source/_posts/docker/dev_utls/dev-container/ssh/docker-compose.yml","hash":"902a058901a2226e258cd82c9611e7bc62208398","modified":1740296611169},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/.env","hash":"2bf94128c1b3adc45ed152ca37ada98601f583c6","modified":1740296611139},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/index.md","hash":"42eb35b9ddfdfbd0fe016b0b5f5117f28fc0117d","modified":1740296611138},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/Dockerfile","hash":"1a0a2bc5e2b25bedabbacd29ede99bd48fb45632","modified":1740296611133},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/exec.sh","hash":"235a7adb4621f6d5b9f41d9f7d337c067c121f58","modified":1740296611139},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/s.yaml.example","hash":"2e44c92dc6c44a0f1d486481b63d0b65b5f7b455","modified":1740296611138},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/setup.sh","hash":"9feb121db8551540abfac5eb340e97338b72a548","modified":1740296611132},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/nocobase.md","hash":"fcc641a7c52889ed45e87769e62cd11833fd5700","modified":1740296611133},{"_id":"source/_posts/docker/mid/RabbitMQ/doc/index.md","hash":"9dbc37735a1be30f2d3acda75c944f807668ec6c","modified":1740296611088},{"_id":"source/_posts/docker/mid/HAProxy/simple-doc/haproxy.yml","hash":"e7965d9e87c971cacf330c4c7e77447eb4e0d986","modified":1740296611131},{"_id":"source/_posts/docker/mid/MyPerf4J/java-agent/MyPerf4J.properties","hash":"067b4f1e638eae39adbf0d1a793bfce64b64dde6","modified":1740296611124},{"_id":"source/_posts/docker/mid/RabbitMQ/doc/doc.md","hash":"fb05ad9d9ead302d7f5c1e96f5f13ff3054a254d","modified":1740296611087},{"_id":"source/_posts/docker/mid/RabbitMQ/simple/rabbitmq.yml","hash":"d1f74ce3dab17e7b5ddee9de5aad56792cbce469","modified":1740296611087},{"_id":"source/_posts/docker/mid/Telegraf/conf/telegraf.conf","hash":"a5800ddf6dd922367ff95d1fd7ed6fa264e45402","modified":1740296611081},{"_id":"source/_posts/docker/mid/nacos/doc/doc.md","hash":"86eae2d7d120b2c1c9a008ec182fec1272b3383c","modified":1740296611083},{"_id":"source/_posts/docker/mid/github/actions-runner/actions-runner.md","hash":"cb5f435b0731db0d07b93fbfed0a032fca9f03c8","modified":1740296611089},{"_id":"source/_posts/docker/mid/github/actions-runner/Dockerfile","hash":"bdd1513c0c9fcb74c5a6b4a975b360958cfdd8e8","modified":1740296611088},{"_id":"source/_posts/docker/mid/nacos/doc/index.md","hash":"ed8dba4b84311d600cbd2805bc4e85e51c25c1df","modified":1740296611083},{"_id":"source/_posts/docker/mid/github/actions-runner/docker-compose.yml","hash":"71d8631687a80c97be2e901e4e1555e5560dae51","modified":1740296611090},{"_id":"source/_posts/docker/mid/nacos/simple/index.md","hash":"c809db3add46bd757181cf019d2f8aa8b167c39d","modified":1740296611082},{"_id":"source/_posts/docker/mid/github/actions-runner/index.md","hash":"41cbc6c379be4fbd31270495488a9c7a20c4d1bc","modified":1740296611090},{"_id":"source/_posts/docker/mid/kafka/doc/deploy.md","hash":"33749d3aaaebf3f933a69171156243502a222d78","modified":1740296611121},{"_id":"source/_posts/docker/mid/nacos/simple/simple.md","hash":"ac4b699de88ca1f97cd7ead11490af23360c9f45","modified":1740296611082},{"_id":"source/_posts/docker/mid/kafka/doc/index.md","hash":"8c9cb3c38d1b41c7505498f2ce1a36809260e111","modified":1740296611121},{"_id":"source/_posts/docker/mid/kafka/doc/zk.md","hash":"f2982c2fefba509a874d983633b6c353955aae78","modified":1740296611121},{"_id":"source/_posts/docker/mid/nacos/simple-swarm/docker-swarm.yml","hash":"65829561045a1f92faf3540d5babee473ec3d291","modified":1740296611086},{"_id":"source/_posts/docker/mid/nacos/simple-swarm/index.md","hash":"56259d41ee64b61a375120a6ea3aec78f9aa4edf","modified":1740296611085},{"_id":"source/_posts/docker/mid/nacos/simple-swarm/simple-swarm.md","hash":"0fdf1228b7e55de81bc424f1fcd595c024f0d3d2","modified":1740296611085},{"_id":"source/_posts/docker/mid/kafka/simple/zk.yml","hash":"d408aee023d8aa06a81a1a052c19b54eaa9e0aae","modified":1740296611119},{"_id":"source/_posts/docker/mid/kafka/simple/kafka-compose.yml","hash":"c9a88be66cc5517c983d93c58b4ad3ad05c5873f","modified":1740296611119},{"_id":"source/_posts/docker/mid/nginx/conf/nginx.conf","hash":"294f1d1a84a732b2eeb73160cc52305d1572fda6","modified":1740296611116},{"_id":"source/_posts/docker/mid/kafka/two/kafka-compose.yml","hash":"2618b856ecf5277ac9d0796251d073c9c1016181","modified":1740296611120},{"_id":"source/_posts/docker/mid/nginx/auto-ssl/docker-compose.yml","hash":"0cea05b51435e1d8abf7482b3fce8dd62427d6bd","modified":1740296611113},{"_id":"source/_posts/docker/mid/nginx/doc/doc.md","hash":"1afde312a3e92ba53de683b6cfadc4495a831519","modified":1740296611114},{"_id":"source/_posts/docker/mid/nginx/doc/problem.md","hash":"b1db81cc18cfd526310b4fdf96a893a84acc6680","modified":1740296611114},{"_id":"source/_posts/docker/mid/nginx/doc/index.md","hash":"94f22a1c774a9c2860c4ffcb085fa24824670720","modified":1740296611115},{"_id":"source/_posts/docker/mid/nginx/nginx-ui/docker-compose.yml","hash":"c3b1d7d786fe94b823142c254a55dae7b022f810","modified":1740296611116},{"_id":"source/_posts/docker/mid/nginx/doc/docker-registry-doc-test.md","hash":"80a3d254226f1eee3463e412ab145400feb43597","modified":1740296611114},{"_id":"source/_posts/docker/mid/nginx/nginx-ui/index.md","hash":"6d9e4eaf2d6db7968f3736b666e03163812daf66","modified":1740296611115},{"_id":"source/_posts/docker/mid/nginx/nginx-ui/nginx-ui.md","hash":"2cdc79b81f803821a4fae1c7ae87dc604dd6f4fa","modified":1740296611115},{"_id":"source/_posts/docker/mid/nginx/nodeJs/default.conf","hash":"d85389c8967fa233e942b2d4e5a0caab2bb8b26c","modified":1740296611092},{"_id":"source/_posts/docker/mid/nginx/nodeJs/Dockerfile","hash":"b290448497af74036261239104140a37fe3e359f","modified":1740296611092},{"_id":"source/_posts/docker/mid/nginx/simple/Dockerfile","hash":"a5e5fe8fba86c79c8f76fc51e74fddb6d7a3c54c","modified":1740296611108},{"_id":"source/_posts/docker/mid/nginx/simple/nginx-app.yml","hash":"d0bcd343d528ea6373af21d505381719c46076b6","modified":1740296611110},{"_id":"source/_posts/docker/mid/rocketMq/conf/broker-simple.conf","hash":"34589bc98f389e6650f96d40d07e57a3e808dddd","modified":1740296611128},{"_id":"source/_posts/docker/mid/rocketMq/conf/broker.conf","hash":"0badbab4e28508c695f1cda4b025991814b6438b","modified":1740296611128},{"_id":"source/_posts/docker/mid/nginx/simple-common/Dockerfile","hash":"d590026bbe09abc2ac5332635c635b49ee73a25a","modified":1740296611093},{"_id":"source/_posts/docker/mid/nginx/simple-common/nginx-simple.yml","hash":"c4741a859600273c70d3f2dc4ef9d26c9cd58aec","modified":1740296611100},{"_id":"source/_posts/docker/mid/nginx/simple-common/index.md","hash":"a774e423bd9b4bd079e83a60312eee5375544182","modified":1740296611098},{"_id":"source/_posts/docker/mid/nginx/simple-common/nginx.yml","hash":"578782ff1cae82e58eeca442791cc1dc1cb858d6","modified":1740296611093},{"_id":"source/_posts/docker/mid/nginx/simple-common/template-doc.md","hash":"3cebd46f2ced9c2753a74a49508ec93c93088a1d","modified":1740296611093},{"_id":"source/_posts/docker/mid/nginx/uat/Dockerfile","hash":"0acd0e921654df23c371fa2c1794448e0e1cfa6a","modified":1740296611101},{"_id":"source/_posts/docker/mid/nginx/uat/entrypoint.sh","hash":"01075a9cccc54053eab671ff9bbf84704dad49e4","modified":1740296611108},{"_id":"source/_posts/docker/mid/nginx/uat/nginx-compose-1.yml","hash":"1dd36f233fff0a2a83c099b2264317e6938704c3","modified":1740296611101},{"_id":"source/_posts/docker/mid/rocketMq/doc/deploy.md","hash":"d4b0107c0d08d4712b06b9c02df06cb774a9b6e8","modified":1740296611127},{"_id":"source/_posts/docker/mid/rocketMq/doc/index.md","hash":"46669e7486bbd7bf5b12ff9521907eaf1fd8044b","modified":1740296611127},{"_id":"source/_posts/docker/mid/nginx/uat/nginx-compose.yml","hash":"07cff5a416e61b24a89f4d1a2ff0e53ec07a24b6","modified":1740296611106},{"_id":"source/_posts/docker/mid/rocketMq/simple/docker-compose-inside.yml","hash":"37ce9e73fe694f15dbcd08b1380e2b941020b1aa","modified":1740296611126},{"_id":"source/_posts/docker/mid/rocketMq/uat/docker-compose.yml","hash":"23deebb894882fd41996d64bf8534215fcec7d2f","modified":1740296611125},{"_id":"source/_posts/docker/doc/docker-context/test/index.md","hash":"1bbec103489bfe371f06e1b4b12a191c711dc8b8","modified":1740296611181},{"_id":"source/_posts/docker/doc/docker-context/test/test.md","hash":"0786feb6f96c9d85cceccf90ad17c94635cee496","modified":1740296611182},{"_id":"source/_posts/docker/mid/rocketMq/simple/docker-compose-outside.yml","hash":"9327703690a48ba02783a10815375fd1e7df8a52","modified":1740296611126},{"_id":"source/_posts/docker/doc/material/ai/index.md","hash":"0a910463a8f54f69b82ead1e56d3c8746d074b80","modified":1740296611260},{"_id":"source/_posts/docker/doc/material/env/.nvmrc如何使用.md","hash":"5527dc1fa2a4ec3360dda5f5a7e560c5209db008","modified":1740296611242},{"_id":"source/_posts/docker/doc/material/env/.sdkmanrc如何使用.md","hash":"3191432471a00bc6d9eb9948f7bea5e031b6c84b","modified":1740296611242},{"_id":"source/_posts/docker/doc/material/manual/index.md","hash":"284799e59594ee8cc88820e48893d27e9c08e1ff","modified":1740296611243},{"_id":"source/_posts/docker/doc/material/ai/ssh动态代理.md","hash":"d20d5e9699834e31c86a2f93315c6fc81728a20e","modified":1740296611255},{"_id":"source/_posts/kubernetes/app/dashboard/deploy/mysql.yml","hash":"da19e19cb8af4f5444201cf4c037f4b6bb81510e","modified":1740296611558},{"_id":"source/_posts/kubernetes/app/devs/jenkins/jenkins.md","hash":"117e00dff5ea4cd1e2dc34cf4c6f9b8b3ec80938","modified":1740296611452},{"_id":"source/_posts/kubernetes/app/devs/jenkins/index.md","hash":"73930bc60167e8e14d200ff93887205ce13447ce","modified":1740296611453},{"_id":"source/_posts/kubernetes/app/elk/filebeat/filebeat.yml","hash":"ebb605ae2c64b094db8a8409f2673d8d1eff327e","modified":1740296611556},{"_id":"source/_posts/kubernetes/app/devs/kafka/zk.yml","hash":"f7abc8f643861eef845290e4b1bcb8e73ea4babe","modified":1740296611452},{"_id":"source/_posts/kubernetes/app/elk/logstash/index.md","hash":"e784b17f5a2e3aa10347b8472a3024ba1fd242b4","modified":1740296611555},{"_id":"source/_posts/kubernetes/app/elk/logstash/logstash.md","hash":"ce60a15a40fa10463df72910092f82c6f59efb23","modified":1740296611554},{"_id":"source/_posts/kubernetes/app/harbor/ingress/harbor-helm-nginx.yaml","hash":"c1e65446683c9078ac1c45555c59a7a3be332ce8","modified":1740296611550},{"_id":"source/_posts/kubernetes/app/harbor/temp/index.md","hash":"b9f38a83d50257a5d7c97e70f4e1928b2b1f6484","modified":1740296611550},{"_id":"source/_posts/kubernetes/app/harbor/temp/temp.md","hash":"890262cac0f0a635425ae035413c0580b5e1bf44","modified":1740296611550},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/ClusterIssuer.md","hash":"c1bd286be1ea3b67dd6e3a4b0ad7cdf3653baae5","modified":1740296611701},{"_id":"source/_posts/kubernetes/app/skywalking/java/index.md","hash":"a36fc69474bc481e75c00c299115258e534f3828","modified":1740296611689},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/ClusterIssuer.yaml","hash":"60017a6c05f647cdc4c704a2e4c600195c72e2e4","modified":1740296611700},{"_id":"source/_posts/materiel/ai/devs/gradle/<classifier>标签在gradle中怎么用.md","hash":"f149f92735e9bb5ec0f93149189ec67c9c2d5fa0","modified":1740296611726},{"_id":"source/_posts/kubernetes/mid/RabbitMQ/config/rabbitmq.yaml","hash":"8af3d9fc0a72e9c7892f41b891058d16d3c74454","modified":1740296611695},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/index.md","hash":"ca1e843933e78a9d746e85ba2e24dc2bc9e62059","modified":1740296611700},{"_id":"source/_posts/materiel/ai/devs/gradle/index.md","hash":"ea577839c24d810bdc0adde9c121fc5239b0b8e0","modified":1740296611726},{"_id":"source/_posts/materiel/ai/prompts/项目开发/.cursorrules","hash":"7c989e105e3d06ff6089b2806174781d39843fc7","modified":1740296611730},{"_id":"source/_posts/materiel/ai/prompts/项目开发/项目开发.md","hash":"afb7ba248474983057e0222b0259ee08507651a9","modified":1740296611732},{"_id":"source/_posts/materiel/ai/prompts/html+产品/.cursorrules","hash":"b13d9f8cbaa1580ec32760e9fa6ddaf8a2b90353","modified":1740296611733},{"_id":"source/_posts/materiel/ai/prompts/html+产品/index.md","hash":"8dfffe9639fe55ce7cba53e8202aa10f7581e45b","modified":1740296611734},{"_id":"source/_posts/network/headscale/local/headscale-all/docker-compose.yml","hash":"f82eb962c8137e87bcd7bad56667ab97c2377bed","modified":1740296611751},{"_id":"source/_posts/materiel/ai/prompts/项目开发/index.md","hash":"5d9c091f7aca902586a5d6a63cf3a0a127c743e3","modified":1740296611732},{"_id":"source/_posts/tools/softs/cursor/rules/.cursorrules","hash":"a86b9492cc5dd76de49addacc6c9c3104d5de8c1","modified":1740296611758},{"_id":"source/_posts/tools/softs/windsurf/rules/.windsurfrules","hash":"7b893f1c6f4a472303cb55aea563c7f3405fc6f6","modified":1740296611761},{"_id":"source/_posts/tools/terminal/docker/ciphey/2025-01-31-xxx1.md","hash":"986a1fe900f6590f3fdb4efe67fe6f9c14cb41a2","modified":1740296611767},{"_id":"source/_posts/tools/terminal/docker/ciphey/ciphey.md","hash":"c9ad3813a63d7d8e0900199bcbc2c33672aaaf8e","modified":1740296611768},{"_id":"source/_posts/tools/terminal/docker/ciphey/index.md","hash":"851511058714d353d7e249093d308a4d19a1d4ea","modified":1740296611768},{"_id":"source/_posts/tools/terminal/sshuttle/test/doc.md","hash":"d78ea2e61d16a1e518d5d047d9bafdfb1894cf23","modified":1740296611772},{"_id":"source/_posts/tools/terminal/docker/goodlink/index.md","hash":"46a3247b92261775639456cb4e5b77ad0d2146f4","modified":1740296611769},{"_id":"source/_posts/tools/terminal/docker/goodlink/goodlink.md","hash":"693ece00c9597d928773b0593b82160f20b96f11","modified":1740296611768},{"_id":"source/_posts/docker/app/devs/data/MongoDB/index.md","hash":"8dd41572f9cb530b5db9ac86c9af32c4380279d2","modified":1740296611045},{"_id":"source/_posts/docker/app/devs/data/MongoDB/mongodb-compose-template.yml","hash":"7f9722d4084569c8b071efa0c18cd7414086abe7","modified":1740296611043},{"_id":"source/_posts/docker/app/devs/data/MongoDB/mongodb-compose.yml","hash":"dce9a1f935ff20c4c1492bcdd8023e0d0cbce960","modified":1740296611044},{"_id":"source/_posts/docker/app/devs/data/PostgreSQL/postgresql.yml","hash":"994f23aeb54c5452ec2a46ae4e47ccf62c7b0ccc","modified":1740296611021},{"_id":"source/_posts/docker/app/devs/data/TiDB/TiDB.md","hash":"168e7577ed828c17c48c18149effd1ccf103fcac","modified":1740296611054},{"_id":"source/_posts/docker/app/devs/data/PostgreSQL/PostgreSQL.md","hash":"9b5b1b598b2fb7bbf27f44f6d9fbaa5dd0b8159f","modified":1740296611022},{"_id":"source/_posts/docker/app/devs/data/docker_registry/index.md","hash":"b6d20f2e79fbbd0220114c126461ad160917eda1","modified":1740296611019},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/index.md","hash":"c68da4f43b5575e91148de5d5c3283750e3b3080","modified":1740296611070},{"_id":"source/_posts/docker/app/devs/data/hadoop/docker-compose.yml","hash":"10b34d3578d37cb155c3b74709717ebdd1be5a82","modified":1740296611057},{"_id":"source/_posts/docker/app/devs/data/mysql/docker-compose-template.yml","hash":"9d10ce484c962bf99cd12637c7acc83bde488609","modified":1740296611058},{"_id":"source/_posts/docker/app/devs/data/mysql/docker-compose.yml","hash":"aed834fde38dcac0df364ad8f2384b13357d12b7","modified":1740296611060},{"_id":"source/_posts/docker/app/devs/data/mysql/index.md","hash":"1bb6d7453f242d698cae2927daca86a02c1a266a","modified":1740296611058},{"_id":"source/_posts/docker/app/devs/data/hadoop/index.md","hash":"6763ca13549c9dcf79094bc496135647fd9a724f","modified":1740296611056},{"_id":"source/_posts/docker/app/devs/data/PostgreSQL/index.md","hash":"109b86227c84258ab903d6dfa7bab65bf9ffe489","modified":1740296611022},{"_id":"source/_posts/docker/app/devs/data/nas/index.md","hash":"7c3c219cc1c72e6544e4028fbbf8e05d5c1ed6e3","modified":1740296611042},{"_id":"source/_posts/docker/app/devs/data/TiDB/index.md","hash":"07b5065c520cea45746ae2be6110b329a1be1b06","modified":1740296611055},{"_id":"source/_posts/docker/app/devs/data/nas/jellyfin.yml","hash":"62befda026d8d3c9498ae8e3a7ac50898124746b","modified":1740296611042},{"_id":"source/_posts/docker/app/devs/data/nas/nextCloud.yml","hash":"1dcb4adfadc007f2348df8b5422fd6eef06a1969","modified":1740296611041},{"_id":"source/_posts/docker/app/devs/data/nas/nas.md","hash":"3a46c70a1f6bd605e20e53e4e09bd3c6b07d3ca6","modified":1740296611041},{"_id":"source/_posts/docker/app/devs/data/nas/nextCloud_aio.yml","hash":"b5ad59cbfed867d272b8ff68ed0d154836ad7b38","modified":1740296611042},{"_id":"source/_posts/docker/app/devs/data/nas/samba.md","hash":"d935363b7a889ee4e8f545046d0c32eef4ab5b31","modified":1740296611042},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-2-host.yml","hash":"fe51097ef9d0aac930c7dbbd908297ea14ab44c0","modified":1740296611033},{"_id":"source/_posts/docker/app/devs/maven/doc/index.md","hash":"68625460bffe22dab3c3c49d0284844a102c7b6a","modified":1740296610484},{"_id":"source/_posts/docker/app/devs/maven/doc/doc.md","hash":"07df1b6cdcfb3d33fe43145ce6b7f6a9be7fc4a0","modified":1740296610483},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-3.yml","hash":"6a9e7416c400117e836adf3295e2e2b9c26cfc5f","modified":1740296611034},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-2.yml","hash":"94063bb513bd96f0e6d2a0d68b42dd9c75bfcce7","modified":1740296611034},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-6.yml","hash":"46364b79db5583902ddb7e796748433a0b184ca9","modified":1740296611035},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-4.yml","hash":"b699f121259dc7c713e9227ffebd9296fd074fc2","modified":1740296611036},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-5.yml","hash":"eae2d41356a81115322fb0bec0ea40e972296ded","modified":1740296611036},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-7.yml","hash":"9407ac20de671df16fe0303091cf5622cfb301af","modified":1740296611035},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-template.yml","hash":"6b3355f2d33436ce9dfe25b0cb70b9236b2d5d28","modified":1740296611031},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-test.yml","hash":"7ee9c223591af5e502d26597902bf728a25e08b9","modified":1740296611041},{"_id":"source/_posts/docker/app/devs/data/redis/Dockerfile","hash":"da9e63d8a3b1505c0de9f4867a95d3c62e27a20b","modified":1740296611033},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster.yml","hash":"f34447b450a231638a4d3cde7e9c2709b51a6407","modified":1740296611031},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-single.yml","hash":"15e2669c899ab0d106372f85eb54ede667e9fd68","modified":1740296611039},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose.yml","hash":"ffaf90f6d3f0c8bd21ee5de795d12b63338f7f09","modified":1740296611038},{"_id":"source/_posts/docker/app/devs/data/redis/docker-entrypoint.sh","hash":"f3b1eca91b56fe851a371108ce54afa7f701a4f3","modified":1740296611034},{"_id":"source/_posts/docker/app/devs/data/redis/xxx","hash":"9855a09fe906ea17126879e99609c08be444d4c1","modified":1740296611033},{"_id":"source/_posts/docker/app/devs/data/redis/redis.md","hash":"1a4153bf96c3d7d5a4896ad807b9efda5547c2d9","modified":1740296611031},{"_id":"source/_posts/docker/app/devs/data/redis/index.md","hash":"ca2d4bff443297096ef0c7dc273b90117d59e98d","modified":1740296611035},{"_id":"source/_posts/docker/app/devs/jenkins/simple/index.md","hash":"dcc10b45cdd6b217c098e64b732386db564e0c9b","modified":1740296611003},{"_id":"source/_posts/docker/app/devs/jenkins/simple/jenkins.yml","hash":"db47bd650d87500a78ea265240e663563c4a20ea","modified":1740296611001},{"_id":"source/_posts/docker/app/devs/jenkins/doc/index.md","hash":"c89365a57cf64621a6fb222eb43fb721f68ecf39","modified":1740296611016},{"_id":"source/_posts/docker/app/devs/jenkins/doc/java.md","hash":"6ddc9e45767d1161f5599ba5d6933f8bd7a95249","modified":1740296611016},{"_id":"source/_posts/docker/app/devs/jenkins/doc/doc.md","hash":"68d61d8ca7d8bce6d8ac4d0a5744f903822cb664","modified":1740296611004},{"_id":"source/_posts/docker/app/devs/jenkins/doc/problem.md","hash":"eaa46e74259aa97ec87afa98e4ea06c93946b6c8","modified":1740296611004},{"_id":"source/_posts/docker/app/devs/jenkins/doc/nodeJs-doc.md","hash":"1af2dfa3898085e0b2f29fa8d0357b633fb25628","modified":1740296611017},{"_id":"source/_posts/docker/app/devs/jenkins/doc/ssh-git.md","hash":"ac8a57a2a5f4e8c065212d34f134fca3810e87da","modified":1740296611006},{"_id":"source/_posts/docker/app/devs/jenkins/doc/ssh-remote.md","hash":"dc5c57331aa4b6ad7888260be783ba90f258f192","modified":1740296611007},{"_id":"source/_posts/docker/app/devs/jenkins/doc/tomcat-file-2.md","hash":"26fa916f0fb99f336db4dcf017afac14b0daf050","modified":1740296611017},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/index.md","hash":"4be811b246105eff5b8f1d1afb46b5629b61a522","modified":1740296610917},{"_id":"source/_posts/docker/app/devs/jenkins/doc/plugins.md","hash":"0bada5106abf60ca77a15d35292aa2b427e2af15","modified":1740296611016},{"_id":"source/_posts/docker/app/devs/jenkins/doc/tomcat-file.md","hash":"70afad13f2fb25dc012064c8d2882ab12ea1864c","modified":1740296611004},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/index.md","hash":"ad3d097b2eef0cd372ba2155a73972133056e01d","modified":1740296610998},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/springboot.md","hash":"a834af43c9a67d9dfb5b9cd176b97ff00ebd1c9e","modified":1740296610877},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/node-pnpm.md","hash":"a3ce7b886edb7d245564bf991b0fd5126f87f48b","modified":1740296610968},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/deploy.sh","hash":"2b933706918e028d7d10d0d7340274ca973dc0bd","modified":1740296610998},{"_id":"source/_posts/docker/app/devs/tomcat/simple2/Dockerfile","hash":"1b823fd5b35b98fb3d876a80d2e85cff8ec2a456","modified":1740296610454},{"_id":"source/_posts/docker/app/devs/watch/alertmanager/alertmanager.yml.email","hash":"2c380b24c25af79154649012db04d937f22f3d5f","modified":1740296610631},{"_id":"source/_posts/docker/app/devs/watch/alertmanager/alertmanager.yml.slack","hash":"14a9abc27af20848c3f9717fc32fb7b89ec269a7","modified":1740296610617},{"_id":"source/_posts/docker/app/devs/watch/prometheus/prometheus.yml","hash":"01fd0642aa7f4bd0b4687f5a76de78b555680cb0","modified":1740296610876},{"_id":"source/_posts/docker/app/devs/tomcat/simple2/start.sh","hash":"0e41d779903c55e182d5e5363fe10a1f56603552","modified":1740296610458},{"_id":"source/_posts/docker/app/devs/watch/simple/index.md","hash":"0a901143168396a8c3c72ec16090b99f38b3b2c6","modified":1740296610789},{"_id":"source/_posts/docker/app/devs/tomcat/simple/Dockerfile","hash":"6481979992c2921c5d2cc54482531ccea484f5b0","modified":1740296610448},{"_id":"source/_posts/docker/app/devs/watch/simple/simple.md","hash":"835a56ff394d5eb12de768833d5a27bed6db6f93","modified":1740296610730},{"_id":"source/_posts/docker/app/devs/yapi/simple/simple.md","hash":"02875e46b0f5f96c46dbeb6bff20d8a8b2d3e569","modified":1740296610528},{"_id":"source/_posts/docker/app/devs/yapi/simple/index.md","hash":"8409d0cce0e9b72719c507d389d15b1940dfe17e","modified":1740296610531},{"_id":"source/_posts/docker/app/devs/yapi/simpleV2/docker-stack.yml","hash":"bec9fd41203f6315a39e90f934add853e12b2592","modified":1740296610563},{"_id":"source/_posts/docker/app/devs/yapi/simpleV2/simpleV2.md","hash":"145421f0922ee9615ad4f50e1a16e1c81eb8cadc","modified":1740296610551},{"_id":"source/_posts/docker/app/devs/yapi/simpleV2/index.md","hash":"96fdc288d230a67d0c6ba80fb2bdf94a8a1589c7","modified":1740296610551},{"_id":"source/_posts/docker/app/devs/watch/grafana/grafana.ini","hash":"75a8d7aa9f8bf32db47780426d192a9ee07e86a6","modified":1740296610727},{"_id":"source/_posts/docker/app/devs/watch/simple/watch.yml","hash":"104eb1e3546e066f9f06d9a524a0c748c95a83fc","modified":1740296610796},{"_id":"source/_posts/docker/app/networks/adguard/serverless/Dockerfile","hash":"1cd37a9381bc908a8472b92765a19d73eb9357ad","modified":1740296611071},{"_id":"source/_posts/docker/app/networks/vpn/ipsec-vpn/index.md","hash":"b3d16ad8f8b17eefb6c909a3c8b44eca9043e1a1","modified":1740296611075},{"_id":"source/_posts/docker/app/networks/vpn/ipsec-vpn/ipsec-vpn.md","hash":"9c8e3401b4b955d1b26573fc3693f74ef62de41a","modified":1740296611075},{"_id":"source/_posts/docker/app/networks/vpn/openvpn/openvpn.md","hash":"035b85645890453e90ddd29b3d06c4650c825e44","modified":1740296611074},{"_id":"source/_posts/docker/app/networks/vpn/openvpn/index.md","hash":"e0fbe5abca6d6d91f7b4c2e1122acf60ad0a0223","modified":1740296611074},{"_id":"source/_posts/docker/dev_utls/dev-container/example/.devcontainer/devcontainer.json","hash":"a49b97675c0e565d7d0f6226f8ab2bd7a1b160ad","modified":1740296611167},{"_id":"source/_posts/docker/dev_utls/dev-container/example/.devcontainer/doc.md","hash":"adde2e576022f28aa7697b78b44a5259e42d7cf0","modified":1740296611167},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/front-end/Dockerfile","hash":"bcdc1f8493201efc53624da78cea25782c38ea83","modified":1740296611156},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/front-end/docker-compose.yml","hash":"aa126358e7e9ba4f2eb9cec76a1e5a0ee2853037","modified":1740296611156},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/index.md","hash":"40aa38fee8fd8b625ed8bcfaa3e52e7bfd190b20","modified":1740296611152},{"_id":"source/_posts/docker/dev_utls/dev-container/ssh/test/Dockerfile_docker","hash":"d99285d86b154f956756ce49f518f32fb2e1615c","modified":1740296611169},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/index.md","hash":"c7eada5317611fc6496b6ef0a782589f57965c26","modified":1740296611152},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/index.md","hash":"897df8401d84e0ab57679e1b8ffe780636ec41f9","modified":1740296611141},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/publish.yaml","hash":"62abb12e9280db88be0917c85eb8c7cd678426cd","modified":1740296611136},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/readme.md","hash":"859d740db125ced7c3d7df4261ee7fdf1de4244c","modified":1740296611136},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/version.md","hash":"f02580a83fe42f754b1d4b60e93cbc21ab9ac6ae","modified":1740296611136},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/index.md","hash":"c70805d07afd9864b84e434e28d036970135bba5","modified":1740296611137},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/publish.md","hash":"93893595f783293beb1e1c200b4016cf9c85d3d5","modified":1740296611136},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/.env","hash":"2bf94128c1b3adc45ed152ca37ada98601f583c6","modified":1740296611135},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/exec.sh","hash":"235a7adb4621f6d5b9f41d9f7d337c067c121f58","modified":1740296611135},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/index.md","hash":"806bb44fd9fad21d1fbc59de81557e03dac830ca","modified":1740296611134},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/s.yaml.example","hash":"8508f4d6170ded21447acdb1851e8991c7edf2d6","modified":1740296611134},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/setup.sh","hash":"9feb121db8551540abfac5eb340e97338b72a548","modified":1740296611133},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v3/Dockerfile","hash":"59981d51c97f2d243d492602dbbadf71ebfd4c7b","modified":1740296611139},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v3/s.yaml","hash":"1732aaabdb7cb7c9e95943c15076d6ad1249a846","modified":1740296611138},{"_id":"source/_posts/docker/mid/nacos/conf/mysql/my.cnf","hash":"05e1afafc0ba23592c80a0a2e2b85315311034e4","modified":1740296611084},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/v2.md","hash":"3cfeb4e7d06f62ff306bb5a1e34c558d013d9820","modified":1740296611134},{"_id":"source/_posts/docker/mid/nacos/conf/nacos/application.properties","hash":"c6c1358e13d3d102408c1f2aac574c2632042713","modified":1740296611084},{"_id":"source/_posts/docker/mid/nacos/conf/prometheus/prometheus-standalone.yaml","hash":"c5159ca2f50f0104880fb170e65b20d2273290c5","modified":1740296611085},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/Dockerfile","hash":"1a0a2bc5e2b25bedabbacd29ede99bd48fb45632","modified":1740296611134},{"_id":"source/_posts/docker/mid/kafka/doc/app-jar/Jenkinsfile","hash":"d2f3b1937823c8cdfc6de4e982fa19fcd8e3d734","modified":1740296611122},{"_id":"source/_posts/docker/mid/kafka/doc/app-jar/build-prod.sh","hash":"10c464cbf8869b293f42102ff6f6e998603c7162","modified":1740296611122},{"_id":"source/_posts/docker/mid/github/actions-runner/simple/docker-compose.yml","hash":"c62cfc1c00ae6f8860a2f8a34bf0fc44d133c224","modified":1740296611090},{"_id":"source/_posts/docker/mid/nginx/simple/simple/nginx.yml","hash":"183343bcb521ed5ffb910e35553920e340357d89","modified":1740296611109},{"_id":"source/_posts/docker/mid/nginx/simple/conf/cors.conf","hash":"638a829f96888fd959e9682dbc754bb3231a6c35","modified":1740296611111},{"_id":"source/_posts/docker/mid/nginx/simple/conf/nginx.conf","hash":"2f6fdf596f34b94cb7be03c653141dad0118d270","modified":1740296611111},{"_id":"source/_posts/docker/mid/nginx/auto-ssl/temp/docker-compose.yml","hash":"608144e419bf79bd4cab7fca2c701c4d2cbae3d5","modified":1740296611113},{"_id":"source/_posts/docker/mid/github/actions-runner/simple/Dockerfile","hash":"aa6b8fc21f323c12f691e5e5c121099d10867516","modified":1740296611089},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/cors.conf","hash":"638a829f96888fd959e9682dbc754bb3231a6c35","modified":1740296611099},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/nginx-common.yml","hash":"b3bf4629c586aa02cf730277e4aab45fc690e6c9","modified":1740296611095},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/index.md","hash":"1eb1124708d6bc73bcac4bf3159b4c05968fe10c","modified":1740296611094},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/common.md","hash":"4a9a2881affe19364ebb11ce680ff551ee3a27b3","modified":1740296611094},{"_id":"source/_posts/docker/mid/kafka/doc/app-jar/package-prod.sh","hash":"8c5b8fdee4f014480044a7e9a0c5c498f2ead68a","modified":1740296611123},{"_id":"source/_posts/docker/mid/nginx/uat/conf/nginx.conf","hash":"694fc19bac98a5e206c8c476fe060ce14aae04e3","modified":1740296611107},{"_id":"source/_posts/docker/mid/nginx/uat/template/admin.conf","hash":"3daea792bbcdad0b516580545432377f37b1c3d0","modified":1740296611106},{"_id":"source/_posts/docker/mid/nginx/uat/template/admin-api.conf","hash":"37bbb2e48da5bab7f4a17143f61d7593c383e8d6","modified":1740296611105},{"_id":"source/_posts/docker/mid/nginx/uat/template/da.conf","hash":"53492fe38bee44436a17464de62c99233ca2435f","modified":1740296611105},{"_id":"source/_posts/docker/mid/nginx/uat/template/haproxy.conf","hash":"8e71c3f0440082ac72a5ddba154ee16b8a7682fd","modified":1740296611102},{"_id":"source/_posts/docker/mid/nginx/uat/template/madata.conf","hash":"04ed9a05d264358232b1928432e847aef1ffd84d","modified":1740296611106},{"_id":"source/_posts/docker/mid/nginx/uat/conf/cors.conf","hash":"638a829f96888fd959e9682dbc754bb3231a6c35","modified":1740296611107},{"_id":"source/_posts/docker/mid/nginx/uat/template/image.conf","hash":"86e4bbd5160457b7ba29180b1caa7cdc2e7b62cc","modified":1740296611104},{"_id":"source/_posts/docker/mid/nginx/uat/template/jssdk.conf","hash":"c623e423f859d94afd0870257cee5bb765d2c253","modified":1740296611104},{"_id":"source/_posts/docker/mid/nginx/uat/template/static.conf","hash":"749596f1b5d88225a9a18282b95836998765d2d3","modified":1740296611103},{"_id":"source/_posts/docker/mid/nginx/uat/template/wap-api.conf","hash":"dd0da8e1da10369506cdb940050644142ec3dab8","modified":1740296611103},{"_id":"source/_posts/docker/mid/nginx/uat/template/mq.conf","hash":"a514c57f0cb1ab8ddaad8273ce34aa3d893cca68","modified":1740296611105},{"_id":"source/_posts/docker/mid/nginx/uat/template/wap.conf","hash":"a489dc0391b0dba0d2255c50453a537dc453993e","modified":1740296611105},{"_id":"source/_posts/docker/mid/nginx/uat/template/web-api.conf","hash":"a783ccfe20ad113fa850f9ce1de30843316ac361","modified":1740296611104},{"_id":"source/_posts/docker/mid/nginx/uat/template/web.conf","hash":"bc464b47ab3a47b72e5fb6bf0582f8cd2e463d66","modified":1740296611106},{"_id":"source/_posts/docker/mid/rocketMq/simple/test/docker-compose-auto.yml","hash":"40a86887fe392134c34da94df596e956614074b4","modified":1740296611126},{"_id":"source/_posts/docker/mid/nginx/uat/tomcat/Dockerfile","hash":"7a7c7bad6e051484572147fc22eabb80390cde88","modified":1740296611101},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/nginx.conf","hash":"3f2db0645071de61c15cd0f65e94e35e32e9523f","modified":1740296611099},{"_id":"source/_posts/docker/doc/material/ai/db/index.md","hash":"96f855af4e27b420be5c4896431d47724e542df8","modified":1740296611418},{"_id":"source/_posts/docker/mid/nginx/uat/template/zk.conf","hash":"4d197fa515317c01b878c9c5cd1681574e7a63e4","modified":1740296611103},{"_id":"source/_posts/docker/doc/material/ai/db/查询pgsql数据库中所有表数据量的sql.md","hash":"07352125db34b3155e9bcb9bbffd2b90b35a969c","modified":1740296611355},{"_id":"source/_posts/docker/mid/rocketMq/uat/conf/broker.conf","hash":"71a52eafd59fda9b1d8369767a0c3ad358a2b6d2","modified":1740296611125},{"_id":"source/_posts/docker/doc/material/ai/docker/docker compose 中 , 当我配置了副本的时候, IP怎么固定.md","hash":"55a383e447901e5e3f1e76a850bffbfd4f8119d8","modified":1740296611246},{"_id":"source/_posts/docker/doc/material/ai/docker/docker swarm 给节点打标和查看和移除.md","hash":"b953a10794ce5aae5abeec9114f432f0e6bc4c8a","modified":1740296611246},{"_id":"source/_posts/docker/doc/material/ai/os/centos使用date命令同步网络时间.md","hash":"d36fac2ff105cfbbf8dfdcd973767d706b9d2b44","modified":1740296611449},{"_id":"source/_posts/docker/doc/material/ai/os/index.md","hash":"774106888cb0d09f49c39643f0a9b4b557d94e12","modified":1740296611448},{"_id":"source/_posts/docker/doc/material/manual/article/index.md","hash":"721a8ea2f62be920ed73aefd4afa972c6023ae8f","modified":1740296611245},{"_id":"source/_posts/docker/doc/material/ai/os/curl 看连接是否通.md","hash":"dc9e3bb43b3470960d48fe4b1b91cff28d84073c","modified":1740296611447},{"_id":"source/_posts/docker/doc/material/ai/docker/index.md","hash":"1b37bdc9fa6a226cb123af40a88a4eb7463a7dee","modified":1740296611247},{"_id":"source/_posts/docker/doc/material/ai/os/为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?.md","hash":"693229b3fedd3a150b2a584ca3d06a0b420b9c09","modified":1740296611445},{"_id":"source/_posts/docker/doc/material/manual/os/index.md","hash":"04db5070e3f5b3a7f6529b04598edf1db1963f64","modified":1740296611244},{"_id":"source/_posts/docker/doc/material/manual/os/centos时间相关操作.md","hash":"79d215b814fbc2c46b19df68c7841ab785c7edba","modified":1740296611243},{"_id":"source/_posts/docker/doc/material/manual/article/ssh.md","hash":"06ce4a9d89a2960daa8d429113d4fc4d3f1db0d1","modified":1740296611244},{"_id":"source/_posts/docker/doc/material/ai/os/timedatectl命令怎么同步网络时间.md","hash":"7e589a53d0b0ee457158a081729a9b044232f763","modified":1740296611420},{"_id":"source/_posts/kubernetes/app/elk/logstash/config/6.0.3-values.yaml","hash":"f1a363592c32a11c488dd0e7ec96ccac508d801a","modified":1740296611554},{"_id":"source/_posts/kubernetes/app/elk/logstash/temp/index.md","hash":"464eff1b861ed271bd1b47a0e11239475795761d","modified":1740296611554},{"_id":"source/_posts/kubernetes/app/skywalking/java/docker/.env","hash":"85a105481aa98ac9644d5d7bcad18abe30b59b2b","modified":1740296611608},{"_id":"source/_posts/kubernetes/app/skywalking/java/docker/docker-compose.yml","hash":"95ad44e52a3986ef6798384f1647af4c84f51ace","modified":1740296611608},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/index.md","hash":"38a7c427310536ab479b672ab865e9182a2f6a5f","modified":1740296611682},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/app-service.yml","hash":"18bac9957b2606fd51faff5470639915764f3f98","modified":1740296611684},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/index.md","hash":"bd28cba97ef4bf5bea56c9b44f70ab75eeb94642","modified":1740296611700},{"_id":"source/_posts/materiel/ai/prompts/html+产品/优化版/.cursorrules","hash":"39d38905b55669163affa01c68c2ff17cf13bbe4","modified":1740296611733},{"_id":"source/_posts/kubernetes/app/elk/logstash/temp/temp.md","hash":"8b93696ad09dc64deb160262179be5599c37abce","modified":1740296611553},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/temp.md","hash":"be6a5a60aaf1ad4513acd00701ef67c299f28b90","modified":1740296611700},{"_id":"source/_posts/materiel/ai/prompts/html+产品/优化版/优化版.md","hash":"d1626832bd9198aa7eff5b6f26e27838b6eb803f","modified":1740296611733},{"_id":"source/_posts/materiel/ai/prompts/html+产品/优化版/index.md","hash":"32466d4ccd34b763f6f75e888fbe9e4494dc8436","modified":1740296611733},{"_id":"source/_posts/materiel/ai/prompts/项目开发/AI优化版/.cursorrules","hash":"d01d8ab4d51560f3d772fcf2f965103ab57080e3","modified":1740296611731},{"_id":"source/_posts/materiel/ai/prompts/项目开发/补充工具版/.cursorrules","hash":"ca944206f6989cea6237ffd44ab4d02ec08f1f52","modified":1740296611732},{"_id":"source/_posts/network/headscale/local/demo1/headscale/docker-compose.yml","hash":"d21718c817f2c4f5b520c506cc4296cf9104fb56","modified":1740296611749},{"_id":"source/_posts/docker/app/devs/data/MongoDB/doc/deploy.md","hash":"c58a17b44d8168e01dab153aae21aee5fd059b30","modified":1740296611045},{"_id":"source/_posts/docker/app/devs/data/MongoDB/doc/index.md","hash":"b35074473270d91a708c84d56e215b779e335425","modified":1740296611045},{"_id":"source/_posts/docker/app/devs/data/MongoDB/setup/setup.js","hash":"270b36fb684831dc898aa19808adba84726d27b2","modified":1740296611044},{"_id":"source/_posts/docker/app/devs/data/MongoDB/test/docker-compose.yml","hash":"f8fd289dbb9540c3d13cd13d281700eb04ca68bc","modified":1740296611043},{"_id":"source/_posts/docker/app/devs/data/PostgreSQL/temp/postgresql.yml","hash":"f556a2c08ffab80bf0f6b60894a8ce40a47d58bc","modified":1740296611021},{"_id":"source/_posts/docker/app/devs/data/PostgreSQL/temp/postgresql-2.yml","hash":"252f87d7b87e50a7cd8362f578be5dcc645a3e65","modified":1740296611021},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/index.md","hash":"c475dc0083c0bad75d631eda160b5910909218b6","modified":1740296611054},{"_id":"source/_posts/docker/app/devs/data/MongoDB/dockerfile/Dockerfile","hash":"f179f80d88fcb41c810c23c47390f7f18ac4dcb7","modified":1740296611044},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/problems/index.md","hash":"905d9b514d8ac5c3f801366550357eb2883aabe3","modified":1740296611070},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/problems/problems.md","hash":"d59d2bd82bdecdbde470a54ae6fde6b0cbe7fee0","modified":1740296611069},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/docker-swarm.yml","hash":"bcb15f11b60c1bbfd7b9b3f876298307a3dea465","modified":1740296611054},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/bak/index.md","hash":"9620c016b68ef2b24c195019c9b67516a1a51665","modified":1740296611069},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/test/es.yml","hash":"afe64e78235c6479b13bf962695235f1c1e55757","modified":1740296611068},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/index.md","hash":"6e8b53bef59600ccc023932c89369926359bc41c","modified":1740296611067},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/bak/bak.md","hash":"20739fb787f92c85892d0a96d28160b72dea605f","modified":1740296611069},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/v1.md","hash":"ac3f989d4d3d85546451dd85630404f8f456c0c7","modified":1740296611067},{"_id":"source/_posts/docker/app/devs/data/docker_registry/simple/docker-registry.yml","hash":"1bf52b7e9387bacc2a6bf473ce82057e0b94fe00","modified":1740296611019},{"_id":"source/_posts/docker/app/devs/data/hadoop/env/hadoop.env","hash":"b3618ef3af673095860118bc995290f040db9987","modified":1740296611056},{"_id":"source/_posts/docker/app/devs/data/mariadb/simple/mariadb.yml","hash":"f44ca7a304b9b29c5ee5e4708dea223379e9aed2","modified":1740296611022},{"_id":"source/_posts/docker/app/devs/data/hadoop/simple/docker-compose.yml","hash":"a476644d8d52fd0ab4d70e0cff0bf1b5f7c54be2","modified":1740296611055},{"_id":"source/_posts/docker/app/devs/data/hadoop/simple/hadoop.env","hash":"0cb115f4864ac00ca545575892a1edef44597d04","modified":1740296611055},{"_id":"source/_posts/docker/app/devs/data/hadoop/doc/dec.md","hash":"9ee46cab25219d896a22d040240638589e880cdb","modified":1740296611057},{"_id":"source/_posts/docker/app/devs/data/hadoop/doc/index.md","hash":"ddd81af3a800d9a8ab44090a839b639803be47c6","modified":1740296611057},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/index.md","hash":"6baa515f69e4db38bfae5204a88ebf6720343c7f","modified":1740296611064},{"_id":"source/_posts/docker/app/devs/data/mysql/doc/doc.md","hash":"6d31e9b8e7448246c50634868e66beb139f32007","modified":1740296611058},{"_id":"source/_posts/docker/app/devs/data/docker_registry/doc/index.md","hash":"8c8e127d349cea99f8c15de488a485e0ef57b6e1","modified":1740296611020},{"_id":"source/_posts/docker/app/devs/data/mysql/doc/deploy.md","hash":"a0e8f6e91849411498eef04f9cdffee1642882b9","modified":1740296611059},{"_id":"source/_posts/docker/app/devs/data/docker_registry/doc/doc.md","hash":"cf8c21396f28e59af909060da5a0cb19a5ea0100","modified":1740296611020},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/MySQL_NDB_Cluster.md","hash":"a83958c712a5c621bb8087c290803d360b4c2042","modified":1740296611063},{"_id":"source/_posts/docker/app/devs/jenkins/conf/maven/settings.xml","hash":"7e8b7a01f404428be8d390f7841a8bec3ec6a5ea","modified":1740296611018},{"_id":"source/_posts/docker/app/devs/data/mysql/doc/index.md","hash":"5245e6f622333ba209cbb22b1529a9e4624fb8b7","modified":1740296611060},{"_id":"source/_posts/docker/app/devs/data/mysql/simple/docker-compose.yml","hash":"d0f11255103a613a7cf52791bd60bc11ea9cd23a","modified":1740296611058},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/cluster.md","hash":"5868dc39524dd435cc4a27ab4b16bd694a1681ba","modified":1740296611023},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/index.md","hash":"1b3f8ed3fb54bb9ecabc032192bdeb0e7ef5bc05","modified":1740296611029},{"_id":"source/_posts/docker/app/devs/data/redis/conf/redis-simple.conf","hash":"5b2f40ac668d699ef28681cd245560b975dda4cd","modified":1740296611039},{"_id":"source/_posts/docker/app/devs/data/redis/client/client.md","hash":"82bb8ad18988c0d49092b1f6ae09ce48178aeb86","modified":1740296611040},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/docker-compose-cluster-5.yml","hash":"2a5c7735149d02989883d028c182446b19da8afb","modified":1740296611030},{"_id":"source/_posts/docker/app/devs/data/redis/client/index.md","hash":"76778f97616bd2620f7ad0aec325fb06b3fdf8c6","modified":1740296611040},{"_id":"source/_posts/docker/app/devs/data/redis/doc/deploy-single.md","hash":"d9fd48d96f910baf873d0420260b282e94e54bd6","modified":1740296611038},{"_id":"source/_posts/docker/app/devs/data/redis/doc/index.md","hash":"9059ca861980d753f62ddee7a6d0fa2d4318f4fe","modified":1740296611037},{"_id":"source/_posts/docker/app/devs/data/redis/doc/docker-deploy.md","hash":"b46d69e3c585c0feb84332d12618bee5209427d1","modified":1740296611037},{"_id":"source/_posts/docker/app/devs/data/redis/doc/deploy.md","hash":"c203f9e42f0cba3d227238017f47165ef947463c","modified":1740296611037},{"_id":"source/_posts/docker/app/devs/data/redis/doc/refer.md","hash":"413d61619b649c5153d58fee1481a6b5acf1d0a4","modified":1740296611037},{"_id":"source/_posts/docker/app/devs/data/redis/simple/docker-compose-single-2.yml","hash":"fca88c729084371e97ec4117d69407d0a180d7ab","modified":1740296611034},{"_id":"source/_posts/docker/app/devs/maven/doc/imgs/img.png","hash":"9fbc110473d97fe313f6df778499131971edb205","modified":1740296610484},{"_id":"source/_posts/docker/app/devs/data/redis/uat/redis.yml","hash":"79a7fca28535221aa6a520607cb66ed7f10bd396","modified":1740296611032},{"_id":"source/_posts/docker/app/devs/jenkins/simple/v2/docker-compose.yml","hash":"5e3ab7fc70180cfa63fa9960aaf56d91c2f8b4b4","modified":1740296611003},{"_id":"source/_posts/docker/app/devs/jenkins/simple/temp/jenkins.yml","hash":"822573ad7bef8fe02780adb1cbccf7bfe3bd7ef6","modified":1740296611001},{"_id":"source/_posts/docker/app/devs/jenkins/doc/jdk/jdk.md","hash":"944aa1e3a106a92b3231908acb07893058db5103","modified":1740296611005},{"_id":"source/_posts/docker/app/devs/jenkins/doc/jdk/index.md","hash":"88c7fcb37539404bec7a3cb3cf209e2fe28d99e8","modified":1740296611005},{"_id":"source/_posts/docker/app/devs/jenkins/simple/v2/index.md","hash":"35b4bb616b1c5c3a46b6997273e6cba6a5e028f6","modified":1740296611002},{"_id":"source/_posts/docker/app/devs/jenkins/simple/v2/v2.md","hash":"74e38835eaa24bdc47c78f99e0e6254968efe832","modified":1740296611002},{"_id":"source/_posts/docker/app/devs/jenkins/doc/maven/index.md","hash":"8805bfd794164a296044c8039e593b6f62cfd624","modified":1740296611006},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/dockerfile/index.md","hash":"93567e164c465a8fc504188ba13f92edbfc30dac","modified":1740296610882},{"_id":"source/_posts/docker/app/devs/jenkins/doc/maven/maven.md","hash":"0a904541d3c4a4a3f293afdf1449b9e3db950f6c","modified":1740296611006},{"_id":"source/_posts/docker/app/devs/jenkins/doc/maven/settings.xml","hash":"d2c366e157acbfa486569daa0ed8e60b85b48895","modified":1740296611006},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/dockerfile/dockerfile.md","hash":"3c0696aa32c556f7683f3f3a0fe895c41d8c7bc2","modified":1740296610878},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/simple/index.md","hash":"0f6f50e2cbcb1b0131caa8c845108153fcc5ab24","modified":1740296610900},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/img/img.png","hash":"4f350d21590b26d845038a5d77f5867fd4d8e209","modified":1740296610909},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/simple/simple.md","hash":"6441fb9c0e747111a79aa9e79aff12146af17b14","modified":1740296610899},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/img/img_2.png","hash":"199dc3189e134bf005c939659a853502b0d71c4d","modified":1740296610906},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/projects/index.md","hash":"31b00d32369272ec3297ffd84a89b82fa34d646a","modified":1740296610968},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/projects/java-server-jar.md","hash":"18f36ad840ac8166409099f33700a28bd985ae52","modified":1740296610925},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/java-jar.md","hash":"50a7069a1b4912c61c9a7a4cea15b33574711f66","modified":1740296611000},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/java-jar-remote-deploy.md","hash":"872d7304ddef8604f94689b275f723c089ddb3f0","modified":1740296611000},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/img/img_1.png","hash":"2c7d6a37c54b506ce3051f8f8fa515a3cb927852","modified":1740296610905},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/simple/index.md","hash":"3d6abc53423691dd7ab686553439c04d56ac8460","modified":1740296610984},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/index.md","hash":"d9bd573ba83a04181f26a72ef76d105e07911c71","modified":1740296611000},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/nginx-nodejs.md","hash":"adae7d171e302415c179aa2dfe0f25802003cce9","modified":1740296611000},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/simple/java-jar.md","hash":"a6457681bb7960ce00161a9db8af381d337420ce","modified":1740296610997},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/simple/java-jar-alpine.md","hash":"243cc1d0563d0901144ef74bafca2e7b35a79a35","modified":1740296610984},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/simple/tomcat-java.md","hash":"7f5aa39cafe6ca92e324137feb0763d6643c3cfe","modified":1740296610995},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/simple/nginx-nodejs.md","hash":"001d52bc1de8ed91b4e797c84ba4f8dd90c18b11","modified":1740296610983},{"_id":"source/_posts/docker/app/devs/watch/alertmanager/template/email.tmpl","hash":"fe054974e1c9c0d2361f0d57483a108d328da0ca","modified":1740296610575},{"_id":"source/_posts/docker/app/devs/tomcat/simple2/deploy/.env","hash":"d78ded3f3f34ba48f5ee4214a71a0460efe4f29a","modified":1740296610455},{"_id":"source/_posts/docker/app/devs/tomcat/simple2/deploy/docker-start.sh","hash":"9e3dab1eabb2dca727db34073dc6761cf8b0ff13","modified":1740296610458},{"_id":"source/_posts/docker/app/devs/watch/other/netdata/netdata.yml","hash":"25362bfaa2e3ca735f33e2f3bca3fb4447743ffd","modified":1740296610662},{"_id":"source/_posts/docker/app/devs/watch/influxdb/conf/run-basic.sh","hash":"5c479b04bd15ea2616a596a44b672e9f112456ba","modified":1740296610828},{"_id":"source/_posts/docker/app/devs/tomcat/simple/type2/Dockerfile","hash":"008888d6cc3876045862771508ffd14719de167e","modified":1740296610451},{"_id":"source/_posts/docker/app/devs/watch/simple/prometheus/prometheus.yml","hash":"16206409611b55a6c1ef1e05a858c91d6b38e95e","modified":1740296610800},{"_id":"source/_posts/docker/app/devs/watch/prometheus/rules/example.yml","hash":"99b9e7091f5767a083a66001c4f5cddb6c8d03ea","modified":1740296610875},{"_id":"source/_posts/docker/app/devs/watch/influxdb/conf/influxdb.conf","hash":"642af041b25a34764f34bf83c5aaa1af1ffb89fd","modified":1740296610826},{"_id":"source/_posts/docker/app/devs/watch/grafana/simple/grafana.ini","hash":"58273c113b9bdefddf5426882120836c387ed72a","modified":1740296610729},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_11.png","hash":"aaeb7f711d6429b30b2c15379c32ceceeb36408e","modified":1740296610759},{"_id":"source/_posts/docker/app/networks/vpn/openvpn/docker/index.md","hash":"ea233274a500960f2c08b7c26c3f500800aff62d","modified":1740296611073},{"_id":"source/_posts/docker/dev_utls/dev-container/example/proxy_version/.devcontainer/devcontainer.json","hash":"ab732728d7ad0768c1e4bf0d2358bf90e853c72a","modified":1740296611166},{"_id":"source/_posts/docker/app/networks/vpn/openvpn/docker/docker-compose.yml","hash":"276d880ede561b860b45b3ad2c5df8e5f3aa8e0c","modified":1740296611073},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/temp/goodlink/Dockerfile","hash":"8a6f3858d2e106a3427f488f8f4aaff7311cedd7","modified":1740296611157},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/temp/goodlink/docker-compose.yml","hash":"233f3e22bf2e3ee2fd049a85656aacf7a94120de","modified":1740296611160},{"_id":"source/_posts/docker/dev_utls/dev-container/example/node&java/.devcontainer/devcontainer.json","hash":"cb38c7a94452f2abdf411d8de5ac4bbe6289d2ef","modified":1740296611168},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/index.md","hash":"396da29fb04b88cda71ee8239f062e1adafac060","modified":1740296611155},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/docker-compose.yml","hash":"c6f8ad709b0bdd746ac220b9c4e167c2b845bf59","modified":1740296611142},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/tomcat-war.md","hash":"8ab421e8c9c4b5720dd1e91b3b1b26be20d914a3","modified":1740296611155},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/index.md","hash":"81a6c9792900560e207959f972db4494ff07402e","modified":1740296611141},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/nginx.md","hash":"e843652b7e7917bb05dc9cae244e889f2cc42e98","modified":1740296611141},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/.env","hash":"52c71bb12d98d4f8cd796fe2d95ba247e774d0bd","modified":1740296611151},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/deploy_to_docker.sh","hash":"9bb790a95f688326c5e80897072a0e6b2584cd49","modified":1740296611151},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/README.md","hash":"f43d69a99bb54d6ab99df0be4b2c6f478f6a5373","modified":1740296611147},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/docker-compose.yml","hash":"0c46d7d6351971e2960793b97eec70abd29e618b","modified":1740296611151},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/index.md","hash":"50ff35284296e1dc357366e45fb2515077c2a262","modified":1740296611148},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/src/Dockerfile","hash":"36a6564a40c833ed75d8d4948d52ce81eaed6d46","modified":1740296611137},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/src/s.yaml","hash":"7a4055e2cadac57382d512a9ac87517caaa1ba4d","modified":1740296611137},{"_id":"source/_posts/docker/mid/kafka/doc/app-jar/resourse/application.yml","hash":"fd00f35dfb0f0675e27d81cff2a83e3514c1c40e","modified":1740296611122},{"_id":"source/_posts/docker/mid/nginx/simple/conf/conf.d/default.conf","hash":"db77dc7e6a8bf881a2376c8278e4266e35f4c297","modified":1740296611112},{"_id":"source/_posts/docker/mid/nginx/simple/conf/conf.d/wap.conf","hash":"2ddafabcdacbf49b51d314ba2021992c4484a576","modified":1740296611111},{"_id":"source/_posts/docker/mid/nginx/simple/simple/conf/cors.conf","hash":"638a829f96888fd959e9682dbc754bb3231a6c35","modified":1740296611109},{"_id":"source/_posts/docker/mid/nginx/simple/simple/conf/nginx.conf","hash":"3f2db0645071de61c15cd0f65e94e35e32e9523f","modified":1740296611109},{"_id":"source/_posts/docker/mid/nginx/simple/conf/conf.d/web.conf","hash":"9fdd38a39a2ad6bd9275cde9b09603f0c9fa20c5","modified":1740296611112},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/conf/nginx.conf","hash":"3f2db0645071de61c15cd0f65e94e35e32e9523f","modified":1740296611098},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/cors.conf.template","hash":"638a829f96888fd959e9682dbc754bb3231a6c35","modified":1740296611096},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/default.conf.template","hash":"d450470b2588b4a43bef43b2c3aaa314d70b6c31","modified":1740296611097},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/mall-admin-web.conf.template","hash":"8daf4ee8acd5d47ff136ebc70715be53e3a4ce2a","modified":1740296611096},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/jenkins.conf.template","hash":"ed5ddfb6966d05eacd3b4e867dc4a3d199952613","modified":1740296611095},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/ssl.conf.template","hash":"0c4a5937a28e84b3c41f2cf09c04839fe39fe995","modified":1740296611096},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/.DS_Store","hash":"814d917611405852c650a082f6576077e5a45f30","modified":1740296611095},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/common.conf","hash":"c80fa4e12a423ac8a7dbbc848afc02188024aa86","modified":1740296611100},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/docker-registry.conf","hash":"d8f47bdc5ba5d742f6f5a2710894b1ccee5201e1","modified":1740296611099},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/jenkins-test.conf","hash":"97c40e589eafca05694dc788561339cb6211d66b","modified":1740296611100},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/default.conf","hash":"9fe6e84dce8d722d34030dc22e5672f55405b056","modified":1740296611100},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/jenkins.conf","hash":"37c7a2aa9dfb36cb25c76462e0beba102cc2bbd8","modified":1740296611100},{"_id":"source/_posts/docker/doc/material/ai/os/proxy/index.md","hash":"b9e78f3ccc96058cbd19e5b8e1600e5d3b76d37e","modified":1740296611438},{"_id":"source/_posts/docker/doc/material/ai/os/proxy/ssh加nginx实现内网穿透.md","hash":"7715474cc5a5c03c45cd56560286c9041cd50654","modified":1740296611437},{"_id":"source/_posts/kubernetes/app/elk/logstash/config/app/logstash.conf","hash":"7bfe0b3f829c339742a6b8fcc25f1299ca5b5123","modified":1740296611555},{"_id":"source/_posts/kubernetes/app/elk/logstash/config/filebeat/logstash.conf","hash":"a52e03df1d7ee8e46a9b3d4e6d74f5a476f009b7","modified":1740296611555},{"_id":"source/_posts/kubernetes/app/skywalking/java/docker/local/Dockerfile","hash":"e503d33d4c7398f010c27b0a6f8fab0eb4678589","modified":1740296611607},{"_id":"source/_posts/kubernetes/app/skywalking/java/docker/local/startup.sh","hash":"47b982cdcf25ec2a4200d94145612f53c83fbdcc","modified":1740296611608},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/inject.md","hash":"2f186bfba0e1a5e431389f680ae2e3e8841bbf75","modified":1740296611611},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/demo1.yaml","hash":"38e11abd63852ffd8f4ef605611db92247e77a63","modified":1740296611680},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/index.md","hash":"c3cbf8c1ffe1df0d18989a2270b0a2ff410c7272","modified":1740296611674},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/zerossl/index.md","hash":"9dfa15b47dc91ff445116e051e7e8f11b3d5a2de","modified":1740296611699},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/swagent.yaml","hash":"c196ad9eab1e28e7c94c447b79e8f33debde89d7","modified":1740296611677},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/zerossl/ingress.yaml","hash":"db83f8b0cdf8936b82a3843946850af4b9f7d56f","modified":1740296611698},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/zerossl/zerossl-production.yaml","hash":"66127f8a01624cc057246e029b94fd860f778f59","modified":1740296611699},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/zerossl/zerossl.md","hash":"0cb7613a44559c835aae620b52f54131ec416e26","modified":1740296611699},{"_id":"source/_posts/network/headscale/local/demo1/headscale/config/config.yaml","hash":"84590fa1583fdae5fc45d876efbd8842a0450d76","modified":1740296611748},{"_id":"source/_posts/network/headscale/local/headscale-all/headscale/config/config.yaml","hash":"7fb73c23b6fa47467cf1335d0cad6d3bec546fd5","modified":1740296611750},{"_id":"source/_posts/network/headscale/local/demo1/headscale/nginx/nginx.conf","hash":"5e7e1aacfc200a249238cf2d1e1b62ac8b106357","modified":1740296611749},{"_id":"source/_posts/network/iepose/temp/store/OWData/.onewu/.dmac","hash":"0c344238600f172f497162912d4f5f750b18be31","modified":1740296611746},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/index.md","hash":"783ede8ff2344cea86728b92f6a6ce5a17365cfc","modified":1740296611049},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/pd.rules.yml","hash":"7bbaace90d2eb66c1aadf827bc4c3830ad005bf5","modified":1740296611049},{"_id":"source/_posts/docker/app/devs/data/MongoDB/test/setup/setup.js","hash":"270b36fb684831dc898aa19808adba84726d27b2","modified":1740296611043},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/pd.toml","hash":"adccbca360c6170dd77adca7e422dac4f8bdca6c","modified":1740296611046},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/prometheus.yml","hash":"af40c0e6effe2e0bee07df9cfdb3028859a11625","modified":1740296611053},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/spark-defaults.conf","hash":"f52efaaea435defee261b05156754d1771dc5cff","modified":1740296611046},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/tidb.rules.yml","hash":"996b6e8d7fe31bdbb66e8dc39f3292f21cd6029f","modified":1740296611052},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/tidb.toml","hash":"ad70dc44b10046b00a24f5b576f25189b5c97553","modified":1740296611053},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/tikv.rules.yml","hash":"27043be2538962c9348db9c586b2495d3cca1b07","modified":1740296611053},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/8.x/.DS_Store","hash":"21cb977dd17ec059e7f4a5da4b1a4dafa1f21ab3","modified":1740296611067},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/docker-compose-es-cluster-tls.yml","hash":"a01810ab55140eba096a23f059a156cd164a3a97","modified":1740296611065},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/tikv.toml","hash":"d9ba127187e60ac826bb1dbe834a5f7d906d2dd2","modified":1740296611048},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/test.md","hash":"e6d7ab5ada55f5f28f5db694e3a5cffb51a87cdf","modified":1740296611065},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/index.md","hash":"d6a1d54840219aae8fc02dfffc6afcf568e60cbb","modified":1740296611065},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/swarm.md","hash":"90973cead7b43411e5771feea7f7ae7259cc46d0","modified":1740296611063},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/v1/docker-compose.yml","hash":"91bab89d6950c15739f693e08339791b98509ce8","modified":1740296611061},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/v1/mysql-cluster.cnf","hash":"f46c6b1ea7ec5f273db554db7db5c50b8649392e","modified":1740296611061},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/index.md","hash":"00a32ccd208f064655023950432914def4c14a84","modified":1740296611063},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/v1/my.cnf","hash":"41f54f1bb4924fb41439535c71c83e253ed4d7c0","modified":1740296611060},{"_id":"source/_posts/docker/app/devs/data/mysql/doc/temp/temp.md","hash":"ea89370a2e2a7f8b5fbe25332c34f576e742ba34","modified":1740296611059},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/index.md","hash":"8b038d7066525260521c812c07483377cb87d304","modified":1740296611026},{"_id":"source/_posts/docker/app/devs/data/mysql/doc/temp/index.md","hash":"9a90e95574ead48a6c2330c2e353f9ce7648b6d2","modified":1740296611059},{"_id":"source/_posts/docker/app/devs/jenkins/conf/maven/temp/settings.xml","hash":"2cbd9cfb747be034986f41defd861f551164e7f5","modified":1740296611018},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/redis.yml","hash":"cf28b62ba3d4c7f29b40e63856d00d37221ee8ce","modified":1740296611025},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test/docker-compose-cluster-5-label.yml","hash":"59301d17923232497485883f0865cda2d2e47c28","modified":1740296611024},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test/redis-cluster.sh","hash":"f4bcde005f2cf80a251a4759942559a7cd5cc7d8","modified":1740296611024},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test/docker-compose-cluster-5.yml","hash":"52476e65327434ade5b2c90d73677a16117e88f6","modified":1740296611024},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test/docker-compose-cluster-6-label-test.yml","hash":"827599d904e8d22654bfe5f780409a0833fbda39","modified":1740296611023},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test-v2/redis-cluster.sh","hash":"f4bcde005f2cf80a251a4759942559a7cd5cc7d8","modified":1740296611030},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test-v2/docker-compose-cluster-6-label-test.yml","hash":"4a5e55d419da9d8fcd244cb1e8dceb0c140b9de2","modified":1740296611029},{"_id":"source/_posts/docker/app/devs/data/redis/uat/conf/Dockerfile","hash":"548a7c6c0d9c303f1ca4ba64f6753246c24c7950","modified":1740296611032},{"_id":"source/_posts/docker/app/devs/data/redis/uat/conf/redis.conf","hash":"f742f39dcef2081eb1ff3b6b2f4de19538c100f2","modified":1740296611032},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test-v3/redis.yml","hash":"bda9ee840881664919c37c91c3f7b01782d478b0","modified":1740296611030},{"_id":"source/_posts/docker/app/devs/jenkins/simple/temp/remote/jenkins.yml","hash":"f3908007d5c89c9136af9919b56eea1f2354c525","modified":1740296611001},{"_id":"source/_posts/docker/app/devs/data/redis/uat/conf/docker-entrypoint.sh","hash":"814e4f3cbe5a2c5ea9ad21d0b60272a35f03704b","modified":1740296611032},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/ssh-git/ssh-username-with-private-key.png","hash":"a69ce462f0c62701cb87b110687cc3d831b460a2","modified":1740296611015},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/不能下载maven插件依赖/img.png","hash":"37ddd326b2e9fa01b1df2c49f83478146184408b","modified":1740296611008},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建nodeJs项目/img.png","hash":"f6c64393ff86211e03586fae09c333d6a0f22b25","modified":1740296611013},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建nodeJs项目/img_1.png","hash":"ab3e11b6aed0daa81bd6d8473dabfa5c038416ba","modified":1740296611012},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建nodeJs项目/img_2.png","hash":"e448035096f37a1c77d4123f628c5fb7c9fb8d71","modified":1740296611013},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_1.png","hash":"fd3917415e9d9e62e53b143e6b86ae19d6ee4850","modified":1740296611009},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_3.png","hash":"1960d5c47badbd58fbb721bd7f85afd02b43d1a7","modified":1740296611010},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_2.png","hash":"150afef1382b65c979dff2ae886307b0821ec095","modified":1740296611009},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_5.png","hash":"0afb77b5432b61ab33f0e17b1449414cce7a8a9a","modified":1740296611011},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_6.png","hash":"d6931b2c24b44208cfd20e829be756ed8f6002f0","modified":1740296611010},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_4.png","hash":"59f54e055fcd5bb82574ea50afd50529d3719c7b","modified":1740296611010},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/dockerfile/libreoffice/Dockerfile","hash":"e0df8365c32348a16424da2e7190e24e1e16cdb8","modified":1740296610899},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/temp/java-jar.md","hash":"caa8d59a9491e803d623d3251c93565e1ea7f327","modified":1740296610999},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/temp/nginx-nodejs.md","hash":"50b6bbacd310d89af49ea7c05a1cc1e94c9e2613","modified":1740296610999},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/temp/index.md","hash":"b8bf254460cecb6d4fc27324092bbb787756a098","modified":1740296610999},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/simple/include-nothing/index.md","hash":"391ab2bb07b7ccb5e5c6983a1c3fe10ea6b2bda7","modified":1740296610993},{"_id":"source/_posts/docker/app/networks/vpn/openvpn/docker/client/client.md","hash":"789ea1f2f1429938c26017cc34cf638b64d3a2bb","modified":1740296611074},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/simple/include-nothing/java-jar.md","hash":"49ecd854d2af9d8cd95ff70728b0a91bc55f4cae","modified":1740296610994},{"_id":"source/_posts/docker/app/networks/vpn/openvpn/docker/client/docker-compose.yml","hash":"d763a827545ef21c8eb3c45f771566d3b3631945","modified":1740296611074},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/wap-api/Dockerfile","hash":"92354fd2769554467262b907f62c0ae6203e3314","modified":1740296611153},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/wap-api/docker-compose.yml","hash":"474cdd7bc364b4df0f8f5e2e3e2362bf35326feb","modified":1740296611153},{"_id":"source/_posts/docker/app/networks/vpn/openvpn/docker/client/index.md","hash":"6c90b49a0463d96013edbbcc7ec7c7c3f288582b","modified":1740296611073},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/wap/Dockerfile","hash":"b29e96462def2651e373e87992f29b8e1d568c01","modified":1740296611145},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/cors.conf","hash":"638a829f96888fd959e9682dbc754bb3231a6c35","modified":1740296611142},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/wap/build.sh","hash":"cc5df31398bd94f274077a413016a497f5d23c50","modified":1740296611145},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/nginx.conf","hash":"51916f914616c7967b09878d180c55f987ac63ec","modified":1740296611142},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/wap-api/Dockerfile","hash":"92354fd2769554467262b907f62c0ae6203e3314","modified":1740296611145},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/wap-api/build.sh","hash":"cc5df31398bd94f274077a413016a497f5d23c50","modified":1740296611146},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/web/Dockerfile","hash":"cbccba829730b5424801547426d8ca1979e543e9","modified":1740296611146},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/web/build.sh","hash":"cc5df31398bd94f274077a413016a497f5d23c50","modified":1740296611147},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/web-api/build.sh","hash":"cc5df31398bd94f274077a413016a497f5d23c50","modified":1740296611148},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/web-api/Dockerfile","hash":"0513138642af50024ca634c6bc7199948b64f3f0","modified":1740296611147},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/back/docker-entrypoint.d/20-envsubst-on-templates.sh","hash":"ce309caa2b7ad26b56c000486d37b16c5b9d4c81","modified":1740296611094},{"_id":"source/_posts/docker/mid/nginx/simple/simple/conf/conf.d/default.conf","hash":"cab15803c566e85f828e43e545bb8b12a46f6b31","modified":1740296611110},{"_id":"source/_posts/docker/mid/nginx/simple/simple/conf/conf.d/jenkins.conf","hash":"903af030eb1aeb625aa9c5e838a27eb38961152f","modified":1740296611110},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/cert/7700854_iuin.xyz.key","hash":"a4f36222d475b25f8de49d291f38d9b2160cf955","modified":1740296611097},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/cert/7700854_iuin.xyz.pem","hash":"718213a5258935169cee02df95ba5e40da30403f","modified":1740296611097},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/index.md","hash":"ffa46f07bfef212e700aa92f3e82da209c67e719","modified":1740296611609},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/swagent.yaml","hash":"eba5f2348380170aeffb34d275e8d6a8fb184bef","modified":1740296611610},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/temp.md","hash":"452c20ebf8747e037eb6e8b6ea1cd01380b7adf8","modified":1740296611609},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/temp_guide.md","hash":"a5bf3b24776fac4ec9656bb52878696e94b1e550","modified":1740296611610},{"_id":"source/_posts/network/headscale/local/demo1/headscale/nginx/certs/cert.pem","hash":"8ae3e87f2c9847dc0f9d2ea53210f859013beffd","modified":1740296611749},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/README.md","hash":"0f2ae27a31baa2cd4c6183cf7cd56086de5f9960","modified":1740296611050},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/index.md","hash":"3d8fed3d2a25291dc1d1c857e3f5131c7cb71e64","modified":1740296611052},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/8.x/singleton/docker-compose.yml","hash":"8b847174b1d107c720851ed8e7b7efa23a64a7f9","modified":1740296611068},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/grafana/grafana.ini","hash":"521702badeb35f23f5b635d3e0f686656ac698ed","modified":1740296611047},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/8.x/docker-compose.yml","hash":"3af1465cea9ef8dfaca5b69fd1bd25f9c24e420d","modified":1740296611066},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/v1/docker-compose.yml","hash":"156ff2c7b8aa64865d9737f74a3dcf5180172c40","modified":1740296611062},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/usable/docker-compose.yml","hash":"ecdf56020c7cf700db5da231289d8b830ebdcc4f","modified":1740296611065},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/intranet/intranet.md","hash":"634ce8cbc9326b72167b0954b283e4b601050f84","modified":1740296611028},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/intranet/redis.yml","hash":"3d2e5214a16f805a4aaac92e07d5f90f79fce4de","modified":1740296611028},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/intranet/index.md","hash":"80828a18d4841f2e966430cc90a34b55e652addc","modified":1740296611028},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v11/redis.yml","hash":"11465b644d6138502127f1a4c94c2743aeda64bb","modified":1740296611027},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v11/v11.md","hash":"3d965a0da06e3e4552c1a8eb168cce313ac40f0d","modified":1740296611027},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v11/index.md","hash":"c93f63648f96418156f485e9a1c282f9051381fc","modified":1740296611028},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v2/v2.md","hash":"98001000f12ea79b67e5eb4f74d9c5a546db6793","modified":1740296611025},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v2/index.md","hash":"919a9fa1978be66045979a5a5a8a910bef8c187a","modified":1740296611026},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v3/index.md","hash":"1e01732889b5c876c5c8cb9c106fe7a3a026f184","modified":1740296611027},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v3/v3.md","hash":"9fed3c1fa2212bc272735f5c336c9794950fe36f","modified":1740296611026},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v2/redis.yml","hash":"170b11f03c9e14d18d1f4bc3bdcaa652b4ebc485","modified":1740296611025},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v3/redis.yml","hash":"170b11f03c9e14d18d1f4bc3bdcaa652b4ebc485","modified":1740296611026},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/web-api/has-font/Dockerfile","hash":"3be898c17b63e855c1999a9bafd5b82763315b88","modified":1740296611154},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/web-api/has-font/docker-compose.yml","hash":"029d78459129b54b015d7c02bc968e4388972d55","modified":1740296611154},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/conf.d/default.conf","hash":"9fe6e84dce8d722d34030dc22e5672f55405b056","modified":1740296611143},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/conf.d/web.conf","hash":"892e9fddd7b37c9bf1eb78c20472667173deec50","modified":1740296611143},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/cors.conf","hash":"638a829f96888fd959e9682dbc754bb3231a6c35","modified":1740296611149},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/conf.d/wap.conf","hash":"32d20d1a69548c181fbbfbc793ffe3b7d1dd1d59","modified":1740296611143},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/nginx.conf","hash":"ff0a3db0576528ec706d0bb429651183f028711e","modified":1740296611149},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/conf.d/default.conf","hash":"9fe6e84dce8d722d34030dc22e5672f55405b056","modified":1740296611150},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/v1/mysql.conf/my.cnf","hash":"5c6c2cc997b50673f7a01d70d9152051222c6017","modified":1740296611062},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/8.x/singleton/docker-compose.yml","hash":"8b847174b1d107c720851ed8e7b7efa23a64a7f9","modified":1740296611066},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/v1/mysql.conf/mysql-cluster.cnf","hash":"e0ee9030cac54ab8a980f95344700721af0df2da","modified":1740296611062},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/conf.d/wap.conf","hash":"441613dd0f5b054e098907d0640b3645dc62f37b","modified":1740296611150},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/grafana/provisioning/datasources/datasources.yaml","hash":"d04e6db8674caaec5d0e13de7bc08a7af284989d","modified":1740296611048},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/conf.d/web.conf","hash":"ace0459f054fd897b376e908ea609bc12cea9852","modified":1740296611150},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/grafana/provisioning/dashboards/dashboards.yaml","hash":"3a826fa48de67558879048f46f80e5b1aa9cb3b2","modified":1740296611048},{"_id":"source/_posts/docker/app/devs/data/redis/conf/redis.conf","hash":"34106775312f2bd619a5d0e3bdb1394e5bbc72f4","modified":1740296611039},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img.png","hash":"716bfec2dbd683c2079560e4e6c08cbba227c8f4","modified":1740296610785},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_10.png","hash":"a1f1d42d85a5a5d47e06676b626d18f6116b180c","modified":1740296610731},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_0.png","hash":"12f413b36f92ff547e71d1151bf1d888094e0936","modified":1740296610737},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_5.png","hash":"ed290a7d76e1dc9be7caf37a76d84b27f83117a4","modified":1740296610785},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_3.png","hash":"a628b55e55cade4d9f22f3c33c0200e486e5c164","modified":1740296610763},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/ssh-remote/ssh-service.png","hash":"f197457b1c0c20da43eef89413505d00b3b9ba87","modified":1740296611008},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/多分支参数构建/img.png","hash":"2184991f51bff20eda8516429213e5010b90fcc0","modified":1740296611015},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/多分支参数构建/img_2.png","hash":"3011a4ce2b1dbec93968b996fc6026d063786466","modified":1740296611015},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/多分支参数构建/img_1.png","hash":"365fe1a8c144a3522d51c8973daf2abde96b4226","modified":1740296611014},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img.png","hash":"c782570403f29d8579c17f53e10868aed052f255","modified":1740296611011},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/skywalking-helm-4.5.0.tgz","hash":"fb9d4016c3d585392a2fc639c027f7e64de12294","modified":1740296611611},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/overview.json","hash":"037ec020f2eb2ed80f7e50cc5a08ccc5963eb78c","modified":1740296611051},{"_id":"source/_posts/books/蛤蟆先生去看心理医生/# 心灵成长之旅：《蛤蟆先生去看心理医生》快速阅读.pdf","hash":"7db039a5d5af7457a80c54ed3d64f65408bd3419","modified":1740296610301},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_2.png","hash":"a6500146ff0e94e51ddf9596a12f7c13477c9fab","modified":1740296610762},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_1.png","hash":"4b8a76bcc5f2ec84f981bd40a5953ee2efb96e87","modified":1740296610736},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/tidb.json","hash":"c0cf532378a2d3a229846a415a6ab26db3620051","modified":1740296611050},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/pd.json","hash":"201699f456226a985c73c2b9629523375fc0048c","modified":1740296611052},{"_id":"source/_posts/kubernetes/app/harbor/img/image-1.png","hash":"eb83639ebd4e1d0a26366c52a61ab7b77a3ec27c","modified":1740296611551},{"_id":"source/_posts/kubernetes/app/harbor/img/image-2.png","hash":"7150be3aa93f9aa160c639e7ea6d7e8295ef206c","modified":1740296611552},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_4.png","hash":"d3f60925c1a672cdd41b5bcb06985899a6d50164","modified":1740296610783},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_9.png","hash":"3a4e308b6cb60d52e35c5b13c3ca08eae69a77cc","modified":1740296610787},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_7.png","hash":"31e45361d9199d7fa227c6e2fe22395030bc1ac4","modified":1740296610769},{"_id":"source/_posts/kubernetes/app/harbor/img/image.png","hash":"fbb516f339a46ae7907f82ed83e6c351eae2991d","modified":1740296611552},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_8.png","hash":"83edae166f178db14013edf66df606e173bed5ea","modified":1740296610786},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_6.png","hash":"589812fe3d594532630d3ac8f1b7efbd5d220b94","modified":1740296610776},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/tikv_pull.json","hash":"906610cf9014ca2d354629ab68a1fccbba3a0e62","modified":1740296611050},{"_id":"source/_posts/books/蛤蟆先生去看心理医生/蛤蟆先生去看心理医生 -- (英)罗伯特•戴博德 -- 2020 -- 天津人民出版社 -- ead7305f6c4ce6426759a49a2c5cfcad -- Anna’s Archive.mobi","hash":"92d6b1f08e8bc70573cf62cad1f6096f02ed6280","modified":1740296610305},{"_id":"source/_posts/books/失落的百年致富圣经 -- 华勒思·华特斯  & chenjin5_com -- 2008 -- chenjin5_com 万千书友聚集地 -- 280cc84a0da5295c3af6da4fae7174db -- Anna’s Archive.mobi","hash":"8d57c4b0735c97aa12dab062f75560e8dd78d494","modified":1740296610233},{"_id":"source/_posts/books/小狗钱钱(套装全2册) -- 〔德〕博多·舍费尔 & chenjin5_com -- 2014 -- cj5 -- 182c22dbb05bafcc291300eae36f2335 -- Anna’s Archive.epub","hash":"2f08c414ba63fe535826f4fc4273ab2c79c3299c","modified":1740296610231},{"_id":"source/_posts/books/富爸爸穷爸爸(20周年修订版) (富爸爸财商教育系列) -- 〔美〕罗伯特·清崎  & chenjin5_com -- 2017 -- chenjin5_com 万千书友聚集地 -- ea6b836618afddb564f15598e7c4be57 -- Anna’s Archive.mobi","hash":"508e8273e4f7ba7bb891f05c77542bc482ecf1c7","modified":1740296610228},{"_id":"source/_posts/tools/softs/clash/clash-linux-amd64-v1.18.0.gz","hash":"7137c68ae7f843c33c02a35e52f44528689adbbf","modified":1740296611764},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/temp/goodlink/goodlink-linux-arm64-cmd","hash":"d76cda30a1eb2b618f4fc3ecc8f418c5cfe53156","modified":1740296611159},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/temp/goodlink/goodlink-linux-amd64-cmd","hash":"bbbc0e0abaca1566db28bd26670611a9a86d827b","modified":1740296611164},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/skywalking-swck/skywalking-swck-0.9.0-bin.tgz","hash":"106a3ca686efcc87ce39fd7fddca591c5feb8493","modified":1740296611671}],"Category":[{"name":"materiel","_id":"cm7k5rwaq0052msws9mzdhycg"},{"name":"ai","parent":"cm7k5rwaq0052msws9mzdhycg","_id":"cm7k5rwas005bmswshmi28j2h"},{"name":"ssh","parent":"cm7k5rwas005bmswshmi28j2h","_id":"cm7k5rwat005omsws6k716vtd"}],"Data":[],"Page":[],"Post":[{"layout":"default","title":"AI","nav_order":8,"has_children":true,"parent":"AI","_content":"\n# AI\n\n这里包含了 AI 相关的所有文档，包括：\n\n## 核心内容\n\n- **提示工程**: Prompt 编写和优化\n- **模型应用**: 各类 AI 模型的应用实践\n- **工具集成**: AI 工具链的集成方案\n- **最佳实践**: AI 应用的最佳实践指南\n","source":"_posts/AI/index.md","raw":"---\nlayout: default\ntitle: AI\nnav_order: 8\nhas_children: true\npermalink: \"/ai/\"\nparent: AI\n---\n\n# AI\n\n这里包含了 AI 相关的所有文档，包括：\n\n## 核心内容\n\n- **提示工程**: Prompt 编写和优化\n- **模型应用**: 各类 AI 模型的应用实践\n- **工具集成**: AI 工具链的集成方案\n- **最佳实践**: AI 应用的最佳实践指南\n","slug":"AI/index","published":1,"date":"2025-02-23T07:43:30.215Z","updated":"2025-02-23T07:43:30.216Z","__permalink":"/ai/","comments":1,"photos":[],"_id":"cm7k5rw9w0000msws53d9aa2h","content":"<h1 id=\"AI\"><a href=\"#AI\" class=\"headerlink\" title=\"AI\"></a>AI</h1><p>这里包含了 AI 相关的所有文档，包括：</p>\n<h2 id=\"核心内容\"><a href=\"#核心内容\" class=\"headerlink\" title=\"核心内容\"></a>核心内容</h2><ul>\n<li><strong>提示工程</strong>: Prompt 编写和优化</li>\n<li><strong>模型应用</strong>: 各类 AI 模型的应用实践</li>\n<li><strong>工具集成</strong>: AI 工具链的集成方案</li>\n<li><strong>最佳实践</strong>: AI 应用的最佳实践指南</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"AI\"><a href=\"#AI\" class=\"headerlink\" title=\"AI\"></a>AI</h1><p>这里包含了 AI 相关的所有文档，包括：</p>\n<h2 id=\"核心内容\"><a href=\"#核心内容\" class=\"headerlink\" title=\"核心内容\"></a>核心内容</h2><ul>\n<li><strong>提示工程</strong>: Prompt 编写和优化</li>\n<li><strong>模型应用</strong>: 各类 AI 模型的应用实践</li>\n<li><strong>工具集成</strong>: AI 工具链的集成方案</li>\n<li><strong>最佳实践</strong>: AI 应用的最佳实践指南</li>\n</ul>\n"},{"layout":"default","title":"首页","nav_order":1,"has_children":true,"_content":"\n# Doc Record\n\n欢迎来到文档中心！这里收集了各类技术文档和解决方案。\n\n## 主要分类\n\n- **Docker**: 容器化相关文档\n- **Kubernetes**: 容器编排与管理\n- **操作系统**: Linux、Windows 等系统配置和使用\n- **中间件**: 各类中间件的配置和使用\n- **工具**: 开发工具和实用程序\n- **编程语言**: 各类编程语言的使用指南\n- **网络**: 网络配置和问题解决\n- **AI**: AI 相关技术和应用\n- **资料**: 各类技术资料和学习笔记\n","source":"_posts/index.md","raw":"---\nlayout: default\ntitle: 首页\nnav_order: 1\nhas_children: true\npermalink: \"/index/\"\n---\n\n# Doc Record\n\n欢迎来到文档中心！这里收集了各类技术文档和解决方案。\n\n## 主要分类\n\n- **Docker**: 容器化相关文档\n- **Kubernetes**: 容器编排与管理\n- **操作系统**: Linux、Windows 等系统配置和使用\n- **中间件**: 各类中间件的配置和使用\n- **工具**: 开发工具和实用程序\n- **编程语言**: 各类编程语言的使用指南\n- **网络**: 网络配置和问题解决\n- **AI**: AI 相关技术和应用\n- **资料**: 各类技术资料和学习笔记\n","slug":"index","published":1,"date":"2025-02-23T07:43:31.450Z","updated":"2025-02-23T07:43:31.450Z","__permalink":"/index/","comments":1,"photos":[],"_id":"cm7k5rw9y0001mswsgzc6b8qx","content":"<h1 id=\"Doc-Record\"><a href=\"#Doc-Record\" class=\"headerlink\" title=\"Doc Record\"></a>Doc Record</h1><p>欢迎来到文档中心！这里收集了各类技术文档和解决方案。</p>\n<h2 id=\"主要分类\"><a href=\"#主要分类\" class=\"headerlink\" title=\"主要分类\"></a>主要分类</h2><ul>\n<li><strong>Docker</strong>: 容器化相关文档</li>\n<li><strong>Kubernetes</strong>: 容器编排与管理</li>\n<li><strong>操作系统</strong>: Linux、Windows 等系统配置和使用</li>\n<li><strong>中间件</strong>: 各类中间件的配置和使用</li>\n<li><strong>工具</strong>: 开发工具和实用程序</li>\n<li><strong>编程语言</strong>: 各类编程语言的使用指南</li>\n<li><strong>网络</strong>: 网络配置和问题解决</li>\n<li><strong>AI</strong>: AI 相关技术和应用</li>\n<li><strong>资料</strong>: 各类技术资料和学习笔记</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Doc-Record\"><a href=\"#Doc-Record\" class=\"headerlink\" title=\"Doc Record\"></a>Doc Record</h1><p>欢迎来到文档中心！这里收集了各类技术文档和解决方案。</p>\n<h2 id=\"主要分类\"><a href=\"#主要分类\" class=\"headerlink\" title=\"主要分类\"></a>主要分类</h2><ul>\n<li><strong>Docker</strong>: 容器化相关文档</li>\n<li><strong>Kubernetes</strong>: 容器编排与管理</li>\n<li><strong>操作系统</strong>: Linux、Windows 等系统配置和使用</li>\n<li><strong>中间件</strong>: 各类中间件的配置和使用</li>\n<li><strong>工具</strong>: 开发工具和实用程序</li>\n<li><strong>编程语言</strong>: 各类编程语言的使用指南</li>\n<li><strong>网络</strong>: 网络配置和问题解决</li>\n<li><strong>AI</strong>: AI 相关技术和应用</li>\n<li><strong>资料</strong>: 各类技术资料和学习笔记</li>\n</ul>\n"},{"layout":"default","title":"Docker","nav_order":2,"has_children":true,"parent":"Docker","_content":"\n# Docker 文档中心\n\n这里包含了 Docker 相关的所有文档，包括：\n\n## 核心内容\n\n- **基础知识**: Docker 基本概念和使用方法\n- **应用部署**: 各类应用的 Docker 化部署方案\n- **开发工具**: Docker 开发环境和工具链\n- **中间件**: 常用中间件的 Docker 配置\n- **网络**: Docker 网络配置和问题解决\n- **存储**: Docker 存储方案和最佳实践\n\n## 最佳实践\n\n- Docker Compose 使用指南\n- Docker Swarm 集群管理\n- 容器安全性配置\n- 性能优化建议\n","source":"_posts/docker/index.md","raw":"---\nlayout: default\ntitle: Docker\nnav_order: 2\nhas_children: true\npermalink: \"/docker/\"\nparent: Docker\n---\n\n# Docker 文档中心\n\n这里包含了 Docker 相关的所有文档，包括：\n\n## 核心内容\n\n- **基础知识**: Docker 基本概念和使用方法\n- **应用部署**: 各类应用的 Docker 化部署方案\n- **开发工具**: Docker 开发环境和工具链\n- **中间件**: 常用中间件的 Docker 配置\n- **网络**: Docker 网络配置和问题解决\n- **存储**: Docker 存储方案和最佳实践\n\n## 最佳实践\n\n- Docker Compose 使用指南\n- Docker Swarm 集群管理\n- 容器安全性配置\n- 性能优化建议\n","slug":"docker/index","published":1,"date":"2025-02-23T07:43:31.131Z","updated":"2025-02-23T07:43:31.131Z","__permalink":"/docker/","comments":1,"photos":[],"_id":"cm7k5rw9y0002mswsd6zbc0cg","content":"<h1 id=\"Docker-文档中心\"><a href=\"#Docker-文档中心\" class=\"headerlink\" title=\"Docker 文档中心\"></a>Docker 文档中心</h1><p>这里包含了 Docker 相关的所有文档，包括：</p>\n<h2 id=\"核心内容\"><a href=\"#核心内容\" class=\"headerlink\" title=\"核心内容\"></a>核心内容</h2><ul>\n<li><strong>基础知识</strong>: Docker 基本概念和使用方法</li>\n<li><strong>应用部署</strong>: 各类应用的 Docker 化部署方案</li>\n<li><strong>开发工具</strong>: Docker 开发环境和工具链</li>\n<li><strong>中间件</strong>: 常用中间件的 Docker 配置</li>\n<li><strong>网络</strong>: Docker 网络配置和问题解决</li>\n<li><strong>存储</strong>: Docker 存储方案和最佳实践</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ul>\n<li>Docker Compose 使用指南</li>\n<li>Docker Swarm 集群管理</li>\n<li>容器安全性配置</li>\n<li>性能优化建议</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Docker-文档中心\"><a href=\"#Docker-文档中心\" class=\"headerlink\" title=\"Docker 文档中心\"></a>Docker 文档中心</h1><p>这里包含了 Docker 相关的所有文档，包括：</p>\n<h2 id=\"核心内容\"><a href=\"#核心内容\" class=\"headerlink\" title=\"核心内容\"></a>核心内容</h2><ul>\n<li><strong>基础知识</strong>: Docker 基本概念和使用方法</li>\n<li><strong>应用部署</strong>: 各类应用的 Docker 化部署方案</li>\n<li><strong>开发工具</strong>: Docker 开发环境和工具链</li>\n<li><strong>中间件</strong>: 常用中间件的 Docker 配置</li>\n<li><strong>网络</strong>: Docker 网络配置和问题解决</li>\n<li><strong>存储</strong>: Docker 存储方案和最佳实践</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ul>\n<li>Docker Compose 使用指南</li>\n<li>Docker Swarm 集群管理</li>\n<li>容器安全性配置</li>\n<li>性能优化建议</li>\n</ul>\n"},{"layout":"default","title":"资料","nav_order":9,"has_children":true,"parent":"资料","_content":"\n# 资料\n\n这里包含了资料相关的所有文档。\n","source":"_posts/books/index.md","raw":"---\nlayout: default\ntitle: 资料\nnav_order: 9\nhas_children: true\npermalink: \"/books/\"\nparent: 资料\n---\n\n# 资料\n\n这里包含了资料相关的所有文档。\n","slug":"books/index","published":1,"date":"2025-02-23T07:43:30.306Z","updated":"2025-02-23T07:43:30.306Z","__permalink":"/books/","comments":1,"photos":[],"_id":"cm7k5rw9z0003mswsaii83ue9","content":"<h1 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h1><p>这里包含了资料相关的所有文档。</p>\n","excerpt":"","more":"<h1 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h1><p>这里包含了资料相关的所有文档。</p>\n"},{"layout":"default","title":"crictl","nav_order":11,"description":"k8s容器运行时命令行工具","parent":"Kubernetes","has_children":false,"_content":"\n# k8s容器运行时命令行工具\n\ncontainerd运行时\n\n```bash\n# 列出所有容器\ncrictl ps\n```\n\n- 配置不安全的镜像仓库\n\n```bash\nmkdir /etc/containerd/\n# 写入默认配置\ncontainerd config default > /etc/containerd/config.toml\n# 修改配置文件\n# [plugins.\"io.containerd.grpc.v1.cri\".registry]\n#       [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n#         [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n#           endpoint = [\"https://registry-1.docker.io\"]\n# 添加以下内容\n#         [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"harbor.harbor6\"]\n#           endpoint = [\"http://harbor.harbor6\"]\n# 重启下\nsystemctl daemon-reload\nsystemctl restart containerd.service\n\n```\n\n```bash\n# 带端口的配置\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"harbor.harbor6:30003\"]\n          endpoint = [\"http://harbor.harbor6:30003\"]\n```\n","source":"_posts/kubernetes/crictl.md","raw":"---\nlayout: default\ntitle: crictl\nnav_order: 11\ndescription: k8s容器运行时命令行工具\nparent: Kubernetes\nhas_children: false\npermalink: \"/kubernetes/crictl/\"\n---\n\n# k8s容器运行时命令行工具\n\ncontainerd运行时\n\n```bash\n# 列出所有容器\ncrictl ps\n```\n\n- 配置不安全的镜像仓库\n\n```bash\nmkdir /etc/containerd/\n# 写入默认配置\ncontainerd config default > /etc/containerd/config.toml\n# 修改配置文件\n# [plugins.\"io.containerd.grpc.v1.cri\".registry]\n#       [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n#         [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n#           endpoint = [\"https://registry-1.docker.io\"]\n# 添加以下内容\n#         [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"harbor.harbor6\"]\n#           endpoint = [\"http://harbor.harbor6\"]\n# 重启下\nsystemctl daemon-reload\nsystemctl restart containerd.service\n\n```\n\n```bash\n# 带端口的配置\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"harbor.harbor6:30003\"]\n          endpoint = [\"http://harbor.harbor6:30003\"]\n```\n","slug":"kubernetes/crictl","published":1,"date":"2025-02-23T07:43:31.450Z","updated":"2025-02-23T07:43:31.450Z","__permalink":"/kubernetes/crictl/","comments":1,"photos":[],"_id":"cm7k5rw9z0004mswsaygta3nr","content":"<h1 id=\"k8s容器运行时命令行工具\"><a href=\"#k8s容器运行时命令行工具\" class=\"headerlink\" title=\"k8s容器运行时命令行工具\"></a>k8s容器运行时命令行工具</h1><p>containerd运行时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有容器</span></span><br><span class=\"line\">crictl ps</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置不安全的镜像仓库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /etc/containerd/</span><br><span class=\"line\"><span class=\"comment\"># 写入默认配置</span></span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span></span><br><span class=\"line\"><span class=\"comment\">#       [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span></span><br><span class=\"line\"><span class=\"comment\">#         [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#           endpoint = [&quot;https://registry-1.docker.io&quot;]</span></span><br><span class=\"line\"><span class=\"comment\"># 添加以下内容</span></span><br><span class=\"line\"><span class=\"comment\">#         [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;harbor.harbor6&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#           endpoint = [&quot;http://harbor.harbor6&quot;]</span></span><br><span class=\"line\"><span class=\"comment\"># 重启下</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart containerd.service</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 带端口的配置</span></span><br><span class=\"line\">        [plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class=\"string\">&quot;harbor.harbor6:30003&quot;</span>]</span><br><span class=\"line\">          endpoint = [<span class=\"string\">&quot;http://harbor.harbor6:30003&quot;</span>]</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"k8s容器运行时命令行工具\"><a href=\"#k8s容器运行时命令行工具\" class=\"headerlink\" title=\"k8s容器运行时命令行工具\"></a>k8s容器运行时命令行工具</h1><p>containerd运行时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有容器</span></span><br><span class=\"line\">crictl ps</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置不安全的镜像仓库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /etc/containerd/</span><br><span class=\"line\"><span class=\"comment\"># 写入默认配置</span></span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span></span><br><span class=\"line\"><span class=\"comment\">#       [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span></span><br><span class=\"line\"><span class=\"comment\">#         [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#           endpoint = [&quot;https://registry-1.docker.io&quot;]</span></span><br><span class=\"line\"><span class=\"comment\"># 添加以下内容</span></span><br><span class=\"line\"><span class=\"comment\">#         [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;harbor.harbor6&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#           endpoint = [&quot;http://harbor.harbor6&quot;]</span></span><br><span class=\"line\"><span class=\"comment\"># 重启下</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart containerd.service</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 带端口的配置</span></span><br><span class=\"line\">        [plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class=\"string\">&quot;harbor.harbor6:30003&quot;</span>]</span><br><span class=\"line\">          endpoint = [<span class=\"string\">&quot;http://harbor.harbor6:30003&quot;</span>]</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Kubernetes","nav_order":3,"has_children":true,"parent":"Kubernetes","_content":"\n# Kubernetes 文档中心\n\n这里包含了 Kubernetes 相关的所有文档。\n\n## 核心内容\n\n- **基础概念**: Pod、Service、Deployment 等\n- **集群管理**: 节点管理、资源调度\n- **应用部署**: 应用配置、滚动更新\n- **网络**: 网络策略、Service Mesh\n- **存储**: 持久化存储、动态供应\n- **安全**: RBAC、准入控制\n\n## 最佳实践\n\n- 高可用部署方案\n- 监控告警配置\n- 日志收集方案\n- 性能调优指南\n- 故障排查流程\n","source":"_posts/kubernetes/index.md","raw":"---\nlayout: default\ntitle: Kubernetes\nnav_order: 3\nhas_children: true\npermalink: \"/kubernetes/\"\nparent: Kubernetes\n---\n\n# Kubernetes 文档中心\n\n这里包含了 Kubernetes 相关的所有文档。\n\n## 核心内容\n\n- **基础概念**: Pod、Service、Deployment 等\n- **集群管理**: 节点管理、资源调度\n- **应用部署**: 应用配置、滚动更新\n- **网络**: 网络策略、Service Mesh\n- **存储**: 持久化存储、动态供应\n- **安全**: RBAC、准入控制\n\n## 最佳实践\n\n- 高可用部署方案\n- 监控告警配置\n- 日志收集方案\n- 性能调优指南\n- 故障排查流程\n","slug":"kubernetes/index","published":1,"date":"2025-02-23T07:43:31.703Z","updated":"2025-02-23T07:43:31.703Z","__permalink":"/kubernetes/","comments":1,"photos":[],"_id":"cm7k5rw9z0005mswsevnhd9qn","content":"<h1 id=\"Kubernetes-文档中心\"><a href=\"#Kubernetes-文档中心\" class=\"headerlink\" title=\"Kubernetes 文档中心\"></a>Kubernetes 文档中心</h1><p>这里包含了 Kubernetes 相关的所有文档。</p>\n<h2 id=\"核心内容\"><a href=\"#核心内容\" class=\"headerlink\" title=\"核心内容\"></a>核心内容</h2><ul>\n<li><strong>基础概念</strong>: Pod、Service、Deployment 等</li>\n<li><strong>集群管理</strong>: 节点管理、资源调度</li>\n<li><strong>应用部署</strong>: 应用配置、滚动更新</li>\n<li><strong>网络</strong>: 网络策略、Service Mesh</li>\n<li><strong>存储</strong>: 持久化存储、动态供应</li>\n<li><strong>安全</strong>: RBAC、准入控制</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ul>\n<li>高可用部署方案</li>\n<li>监控告警配置</li>\n<li>日志收集方案</li>\n<li>性能调优指南</li>\n<li>故障排查流程</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Kubernetes-文档中心\"><a href=\"#Kubernetes-文档中心\" class=\"headerlink\" title=\"Kubernetes 文档中心\"></a>Kubernetes 文档中心</h1><p>这里包含了 Kubernetes 相关的所有文档。</p>\n<h2 id=\"核心内容\"><a href=\"#核心内容\" class=\"headerlink\" title=\"核心内容\"></a>核心内容</h2><ul>\n<li><strong>基础概念</strong>: Pod、Service、Deployment 等</li>\n<li><strong>集群管理</strong>: 节点管理、资源调度</li>\n<li><strong>应用部署</strong>: 应用配置、滚动更新</li>\n<li><strong>网络</strong>: 网络策略、Service Mesh</li>\n<li><strong>存储</strong>: 持久化存储、动态供应</li>\n<li><strong>安全</strong>: RBAC、准入控制</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ul>\n<li>高可用部署方案</li>\n<li>监控告警配置</li>\n<li>日志收集方案</li>\n<li>性能调优指南</li>\n<li>故障排查流程</li>\n</ul>\n"},{"layout":"default","title":"doc","nav_order":11,"description":"k8s相关使用记录","parent":"Kubernetes","has_children":false,"_content":"\n# k8s相关使用记录\n\n## k8s安装\n\n- 通过`KuboardSpray`安装\n  - [官网地址](https://kuboard-spray.cn/)\n\n```bash\n# 进入指定目录\ncd /data/docker/k8s\n# 快速安装\ndocker run -d \\\n  --dns=223.5.5.5 \\\n  --privileged \\\n  --restart=unless-stopped \\\n  --name=kuboard-spray \\\n  -p 80:80/tcp \\\n  -e TZ=Asia/Shanghai \\\n  -e https_proxy=http://10.0.16.17:7890 \\\n  -e http_proxy=http://10.0.16.17:7890 \\\n  -e all_proxy=socks5://10.0.16.17:7890 \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v ~/kuboard-spray-data:/data \\\n  eipwork/kuboard-spray:latest-amd64\n# 在浏览器地址栏中输入 http://这台机器的IP地址，输入用户名 admin，默认密码 Kuboard123\ndocker run -d \\\n  --dns=223.5.5.5 \\\n  --privileged \\\n  --restart=unless-stopped \\\n  --name=kuboard-spray \\\n  -p 80:80/tcp \\\n  -e TZ=Asia/Shanghai \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  eipwork/kuboard-spray:latest-amd64\n```\n\n## yum安装k8s\n\n- [文档详情地址](./docs/temp/yum安装k8s.md)(PS: AI提供的内容，还未测试过)\n\n## helm命令\n\n```bash\n# 安装\nbrew install helm\n\n# 使用\n\n# 安装\nhelm install my-release skywalking -n <namespace>\n# 查看列表\nhelm list\n# 卸载\n$ helm uninstall my-release -n <namespace>\n```\n\n## minikube\n\n```bash\n# 安装(需要依赖docker)\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n# 请注意，这种方法会继续以root权限运行minikube，但它可能会带来安全风险，因为\"docker\"驱动不应该以root权限使用。\nminikube start --force\n# 仪表盘\nminikube dashboard\n```\n\n## kuboard可视化界面\n\n- [也可以使用helm方式部署](./kuboard/doc.md)\n- docker 方式安装\n\n```bash\n# KUBOARD_ENDPOINT=\"http://内网IP:80\"\ndocker run -d \\\n  --restart=unless-stopped \\\n  --name=kuboard \\\n  -p 80:80/tcp \\\n  -p 10081:10081/tcp \\\n  -e KUBOARD_ENDPOINT=\"http://10.0.16.17:80\" \\\n  -e KUBOARD_AGENT_SERVER_TCP_PORT=\"10081\" \\\n  -v /root/kuboard-data:/data \\\n  eipwork/kuboard:v3\n```\n\n- kubectl 方式安装\n\n```bash\n# 部署\nkubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml\n# 查看\nkubectl get pods -n kuboard\n# 卸载\nkubectl delete -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml\n  # 清理遗留数据\n    # 在 master 节点以及带有 k8s.kuboard.cn/role=etcd 标签的节点上执行\nrm -rf /usr/share/kuboard\n\n---\n\n## 常见问题\n# 查看节点\nkubectl get nodes\n# 打标\nkubectl label nodes docker-desktop k8s.kuboard.cn/role=etcd\n\n---\n\n## 访问 Kuboard\n# 在浏览器中打开链接 http://your-node-ip-address:30080 (eg: http://localhost:30080)\n# 输入初始用户名和密码，并登录\n# 用户名： admin\n# 密码： Kuboard123\n```\n\n### 参考链接\n\n- [官方链接](https://kuboard.cn/install/v3/install-in-k8s.html#%E5%AE%89%E8%A3%85)\n","source":"_posts/kubernetes/kubernetes.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 11\ndescription: k8s相关使用记录\nparent: Kubernetes\nhas_children: false\npermalink: \"/kubernetes/kubernetes/\"\n---\n\n# k8s相关使用记录\n\n## k8s安装\n\n- 通过`KuboardSpray`安装\n  - [官网地址](https://kuboard-spray.cn/)\n\n```bash\n# 进入指定目录\ncd /data/docker/k8s\n# 快速安装\ndocker run -d \\\n  --dns=223.5.5.5 \\\n  --privileged \\\n  --restart=unless-stopped \\\n  --name=kuboard-spray \\\n  -p 80:80/tcp \\\n  -e TZ=Asia/Shanghai \\\n  -e https_proxy=http://10.0.16.17:7890 \\\n  -e http_proxy=http://10.0.16.17:7890 \\\n  -e all_proxy=socks5://10.0.16.17:7890 \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v ~/kuboard-spray-data:/data \\\n  eipwork/kuboard-spray:latest-amd64\n# 在浏览器地址栏中输入 http://这台机器的IP地址，输入用户名 admin，默认密码 Kuboard123\ndocker run -d \\\n  --dns=223.5.5.5 \\\n  --privileged \\\n  --restart=unless-stopped \\\n  --name=kuboard-spray \\\n  -p 80:80/tcp \\\n  -e TZ=Asia/Shanghai \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  eipwork/kuboard-spray:latest-amd64\n```\n\n## yum安装k8s\n\n- [文档详情地址](./docs/temp/yum安装k8s.md)(PS: AI提供的内容，还未测试过)\n\n## helm命令\n\n```bash\n# 安装\nbrew install helm\n\n# 使用\n\n# 安装\nhelm install my-release skywalking -n <namespace>\n# 查看列表\nhelm list\n# 卸载\n$ helm uninstall my-release -n <namespace>\n```\n\n## minikube\n\n```bash\n# 安装(需要依赖docker)\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n# 请注意，这种方法会继续以root权限运行minikube，但它可能会带来安全风险，因为\"docker\"驱动不应该以root权限使用。\nminikube start --force\n# 仪表盘\nminikube dashboard\n```\n\n## kuboard可视化界面\n\n- [也可以使用helm方式部署](./kuboard/doc.md)\n- docker 方式安装\n\n```bash\n# KUBOARD_ENDPOINT=\"http://内网IP:80\"\ndocker run -d \\\n  --restart=unless-stopped \\\n  --name=kuboard \\\n  -p 80:80/tcp \\\n  -p 10081:10081/tcp \\\n  -e KUBOARD_ENDPOINT=\"http://10.0.16.17:80\" \\\n  -e KUBOARD_AGENT_SERVER_TCP_PORT=\"10081\" \\\n  -v /root/kuboard-data:/data \\\n  eipwork/kuboard:v3\n```\n\n- kubectl 方式安装\n\n```bash\n# 部署\nkubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml\n# 查看\nkubectl get pods -n kuboard\n# 卸载\nkubectl delete -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml\n  # 清理遗留数据\n    # 在 master 节点以及带有 k8s.kuboard.cn/role=etcd 标签的节点上执行\nrm -rf /usr/share/kuboard\n\n---\n\n## 常见问题\n# 查看节点\nkubectl get nodes\n# 打标\nkubectl label nodes docker-desktop k8s.kuboard.cn/role=etcd\n\n---\n\n## 访问 Kuboard\n# 在浏览器中打开链接 http://your-node-ip-address:30080 (eg: http://localhost:30080)\n# 输入初始用户名和密码，并登录\n# 用户名： admin\n# 密码： Kuboard123\n```\n\n### 参考链接\n\n- [官方链接](https://kuboard.cn/install/v3/install-in-k8s.html#%E5%AE%89%E8%A3%85)\n","slug":"kubernetes/kubernetes","published":1,"date":"2025-02-23T07:43:31.450Z","updated":"2025-02-23T07:43:31.451Z","__permalink":"/kubernetes/kubernetes/","comments":1,"photos":[],"_id":"cm7k5rw9z0006mswseypac73k","content":"<h1 id=\"k8s相关使用记录\"><a href=\"#k8s相关使用记录\" class=\"headerlink\" title=\"k8s相关使用记录\"></a>k8s相关使用记录</h1><h2 id=\"k8s安装\"><a href=\"#k8s安装\" class=\"headerlink\" title=\"k8s安装\"></a>k8s安装</h2><ul>\n<li>通过<code>KuboardSpray</code>安装<ul>\n<li><a href=\"https://kuboard-spray.cn/\">官网地址</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入指定目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/docker/k8s</span><br><span class=\"line\"><span class=\"comment\"># 快速安装</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --dns=223.5.5.5 \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  --restart=unless-stopped \\</span><br><span class=\"line\">  --name=kuboard-spray \\</span><br><span class=\"line\">  -p 80:80/tcp \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e https_proxy=http://10.0.16.17:7890 \\</span><br><span class=\"line\">  -e http_proxy=http://10.0.16.17:7890 \\</span><br><span class=\"line\">  -e all_proxy=socks5://10.0.16.17:7890 \\</span><br><span class=\"line\">  -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">  -v ~/kuboard-spray-data:/data \\</span><br><span class=\"line\">  eipwork/kuboard-spray:latest-amd64</span><br><span class=\"line\"><span class=\"comment\"># 在浏览器地址栏中输入 http://这台机器的IP地址，输入用户名 admin，默认密码 Kuboard123</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --dns=223.5.5.5 \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  --restart=unless-stopped \\</span><br><span class=\"line\">  --name=kuboard-spray \\</span><br><span class=\"line\">  -p 80:80/tcp \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">  eipwork/kuboard-spray:latest-amd64</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yum安装k8s\"><a href=\"#yum安装k8s\" class=\"headerlink\" title=\"yum安装k8s\"></a>yum安装k8s</h2><ul>\n<li><a href=\"./docs/temp/yum%E5%AE%89%E8%A3%85k8s.md\">文档详情地址</a>(PS: AI提供的内容，还未测试过)</li>\n</ul>\n<h2 id=\"helm命令\"><a href=\"#helm命令\" class=\"headerlink\" title=\"helm命令\"></a>helm命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">brew install helm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">helm install my-release skywalking -n &lt;namespace&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查看列表</span></span><br><span class=\"line\">helm list</span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">$ helm uninstall my-release -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"minikube\"><a href=\"#minikube\" class=\"headerlink\" title=\"minikube\"></a>minikube</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装(需要依赖docker)</span></span><br><span class=\"line\">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> install minikube-linux-amd64 /usr/local/bin/minikube</span><br><span class=\"line\"><span class=\"comment\"># 请注意，这种方法会继续以root权限运行minikube，但它可能会带来安全风险，因为&quot;docker&quot;驱动不应该以root权限使用。</span></span><br><span class=\"line\">minikube start --force</span><br><span class=\"line\"><span class=\"comment\"># 仪表盘</span></span><br><span class=\"line\">minikube dashboard</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"kuboard可视化界面\"><a href=\"#kuboard可视化界面\" class=\"headerlink\" title=\"kuboard可视化界面\"></a>kuboard可视化界面</h2><ul>\n<li><a href=\"./kuboard/doc.md\">也可以使用helm方式部署</a></li>\n<li>docker 方式安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># KUBOARD_ENDPOINT=&quot;http://内网IP:80&quot;</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --restart=unless-stopped \\</span><br><span class=\"line\">  --name=kuboard \\</span><br><span class=\"line\">  -p 80:80/tcp \\</span><br><span class=\"line\">  -p 10081:10081/tcp \\</span><br><span class=\"line\">  -e KUBOARD_ENDPOINT=<span class=\"string\">&quot;http://10.0.16.17:80&quot;</span> \\</span><br><span class=\"line\">  -e KUBOARD_AGENT_SERVER_TCP_PORT=<span class=\"string\">&quot;10081&quot;</span> \\</span><br><span class=\"line\">  -v /root/kuboard-data:/data \\</span><br><span class=\"line\">  eipwork/kuboard:v3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>kubectl 方式安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">kubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml</span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">kubectl get pods -n kuboard</span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">kubectl delete -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml</span><br><span class=\"line\">  <span class=\"comment\"># 清理遗留数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 在 master 节点以及带有 k8s.kuboard.cn/role=etcd 标签的节点上执行</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /usr/share/kuboard</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 常见问题</span></span><br><span class=\"line\"><span class=\"comment\"># 查看节点</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"><span class=\"comment\"># 打标</span></span><br><span class=\"line\">kubectl label nodes docker-desktop k8s.kuboard.cn/role=etcd</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 访问 Kuboard</span></span><br><span class=\"line\"><span class=\"comment\"># 在浏览器中打开链接 http://your-node-ip-address:30080 (eg: http://localhost:30080)</span></span><br><span class=\"line\"><span class=\"comment\"># 输入初始用户名和密码，并登录</span></span><br><span class=\"line\"><span class=\"comment\"># 用户名： admin</span></span><br><span class=\"line\"><span class=\"comment\"># 密码： Kuboard123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://kuboard.cn/install/v3/install-in-k8s.html#%E5%AE%89%E8%A3%85\">官方链接</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"k8s相关使用记录\"><a href=\"#k8s相关使用记录\" class=\"headerlink\" title=\"k8s相关使用记录\"></a>k8s相关使用记录</h1><h2 id=\"k8s安装\"><a href=\"#k8s安装\" class=\"headerlink\" title=\"k8s安装\"></a>k8s安装</h2><ul>\n<li>通过<code>KuboardSpray</code>安装<ul>\n<li><a href=\"https://kuboard-spray.cn/\">官网地址</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入指定目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/docker/k8s</span><br><span class=\"line\"><span class=\"comment\"># 快速安装</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --dns=223.5.5.5 \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  --restart=unless-stopped \\</span><br><span class=\"line\">  --name=kuboard-spray \\</span><br><span class=\"line\">  -p 80:80/tcp \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e https_proxy=http://10.0.16.17:7890 \\</span><br><span class=\"line\">  -e http_proxy=http://10.0.16.17:7890 \\</span><br><span class=\"line\">  -e all_proxy=socks5://10.0.16.17:7890 \\</span><br><span class=\"line\">  -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">  -v ~/kuboard-spray-data:/data \\</span><br><span class=\"line\">  eipwork/kuboard-spray:latest-amd64</span><br><span class=\"line\"><span class=\"comment\"># 在浏览器地址栏中输入 http://这台机器的IP地址，输入用户名 admin，默认密码 Kuboard123</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --dns=223.5.5.5 \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  --restart=unless-stopped \\</span><br><span class=\"line\">  --name=kuboard-spray \\</span><br><span class=\"line\">  -p 80:80/tcp \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">  eipwork/kuboard-spray:latest-amd64</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yum安装k8s\"><a href=\"#yum安装k8s\" class=\"headerlink\" title=\"yum安装k8s\"></a>yum安装k8s</h2><ul>\n<li><a href=\"./docs/temp/yum%E5%AE%89%E8%A3%85k8s.md\">文档详情地址</a>(PS: AI提供的内容，还未测试过)</li>\n</ul>\n<h2 id=\"helm命令\"><a href=\"#helm命令\" class=\"headerlink\" title=\"helm命令\"></a>helm命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">brew install helm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">helm install my-release skywalking -n &lt;namespace&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查看列表</span></span><br><span class=\"line\">helm list</span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">$ helm uninstall my-release -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"minikube\"><a href=\"#minikube\" class=\"headerlink\" title=\"minikube\"></a>minikube</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装(需要依赖docker)</span></span><br><span class=\"line\">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> install minikube-linux-amd64 /usr/local/bin/minikube</span><br><span class=\"line\"><span class=\"comment\"># 请注意，这种方法会继续以root权限运行minikube，但它可能会带来安全风险，因为&quot;docker&quot;驱动不应该以root权限使用。</span></span><br><span class=\"line\">minikube start --force</span><br><span class=\"line\"><span class=\"comment\"># 仪表盘</span></span><br><span class=\"line\">minikube dashboard</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"kuboard可视化界面\"><a href=\"#kuboard可视化界面\" class=\"headerlink\" title=\"kuboard可视化界面\"></a>kuboard可视化界面</h2><ul>\n<li><a href=\"./kuboard/doc.md\">也可以使用helm方式部署</a></li>\n<li>docker 方式安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># KUBOARD_ENDPOINT=&quot;http://内网IP:80&quot;</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --restart=unless-stopped \\</span><br><span class=\"line\">  --name=kuboard \\</span><br><span class=\"line\">  -p 80:80/tcp \\</span><br><span class=\"line\">  -p 10081:10081/tcp \\</span><br><span class=\"line\">  -e KUBOARD_ENDPOINT=<span class=\"string\">&quot;http://10.0.16.17:80&quot;</span> \\</span><br><span class=\"line\">  -e KUBOARD_AGENT_SERVER_TCP_PORT=<span class=\"string\">&quot;10081&quot;</span> \\</span><br><span class=\"line\">  -v /root/kuboard-data:/data \\</span><br><span class=\"line\">  eipwork/kuboard:v3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>kubectl 方式安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">kubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml</span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">kubectl get pods -n kuboard</span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">kubectl delete -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml</span><br><span class=\"line\">  <span class=\"comment\"># 清理遗留数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 在 master 节点以及带有 k8s.kuboard.cn/role=etcd 标签的节点上执行</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /usr/share/kuboard</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 常见问题</span></span><br><span class=\"line\"><span class=\"comment\"># 查看节点</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"><span class=\"comment\"># 打标</span></span><br><span class=\"line\">kubectl label nodes docker-desktop k8s.kuboard.cn/role=etcd</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 访问 Kuboard</span></span><br><span class=\"line\"><span class=\"comment\"># 在浏览器中打开链接 http://your-node-ip-address:30080 (eg: http://localhost:30080)</span></span><br><span class=\"line\"><span class=\"comment\"># 输入初始用户名和密码，并登录</span></span><br><span class=\"line\"><span class=\"comment\"># 用户名： admin</span></span><br><span class=\"line\"><span class=\"comment\"># 密码： Kuboard123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://kuboard.cn/install/v3/install-in-k8s.html#%E5%AE%89%E8%A3%85\">官方链接</a></li>\n</ul>\n"},{"layout":"default","title":"编程语言","nav_order":9,"has_children":true,"parent":"编程语言","_content":"\n# 编程语言\n\n这里包含了编程语言相关的所有文档。\n","source":"_posts/lang/index.md","raw":"---\nlayout: default\ntitle: 编程语言\nnav_order: 9\nhas_children: true\npermalink: \"/lang/\"\nparent: 编程语言\n---\n\n# 编程语言\n\n这里包含了编程语言相关的所有文档。\n","slug":"lang/index","published":1,"date":"2025-02-23T07:43:31.716Z","updated":"2025-02-23T07:43:31.716Z","__permalink":"/lang/","comments":1,"photos":[],"_id":"cm7k5rwa00007mswsedeq1f2i","content":"<h1 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h1><p>这里包含了编程语言相关的所有文档。</p>\n","excerpt":"","more":"<h1 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h1><p>这里包含了编程语言相关的所有文档。</p>\n"},{"layout":"default","title":"xxx","nav_order":1738252800,"description":"","has_children":false,"date":"2025-01-31T09:23:53.000Z","preview":"","parent":"素材库","_content":"\n","source":"_posts/materiel/2025-01-31-xxx.md","raw":"---\nlayout: default\ntitle: xxx\nnav_order: 1738252800\ndescription: ''\nhas_children: false\npermalink: \"/materiel/2025-01-31-xxx/\"\ndate: 2025-01-31 09:23:53 UTC\npreview: ''\ntags: []\ncategories: []\nparent: 素材库\n---\n\n","slug":"materiel/2025-01-31-xxx","published":1,"updated":"2025-02-23T07:43:31.736Z","__permalink":"/materiel/2025-01-31-xxx/","comments":1,"photos":[],"_id":"cm7k5rwa00008msws0rr911ll","content":"","excerpt":"","more":""},{"layout":"default","title":"素材库","nav_order":10,"has_children":true,"parent":"素材库","_content":"\n# 素材库\n\n这里包含了素材库相关的所有文档。\n","source":"_posts/materiel/index.md","raw":"---\nlayout: default\ntitle: 素材库\nnav_order: 10\nhas_children: true\npermalink: \"/materiel/\"\nparent: 素材库\n---\n\n# 素材库\n\n这里包含了素材库相关的所有文档。\n","slug":"materiel/index","published":1,"date":"2025-02-23T07:43:31.721Z","updated":"2025-02-23T07:43:31.721Z","__permalink":"/materiel/","comments":1,"photos":[],"_id":"cm7k5rwa00009msws69ogcms2","content":"<h1 id=\"素材库\"><a href=\"#素材库\" class=\"headerlink\" title=\"素材库\"></a>素材库</h1><p>这里包含了素材库相关的所有文档。</p>\n","excerpt":"","more":"<h1 id=\"素材库\"><a href=\"#素材库\" class=\"headerlink\" title=\"素材库\"></a>素材库</h1><p>这里包含了素材库相关的所有文档。</p>\n"},{"layout":"default","title":"中间件","nav_order":4,"has_children":true,"parent":"中间件","_content":"\n# 中间件\n\n这里包含了中间件相关的所有文档。\n","source":"_posts/middleware/index.md","raw":"---\nlayout: default\ntitle: 中间件\nnav_order: 4\nhas_children: true\npermalink: \"/middleware/\"\nparent: 中间件\n---\n\n# 中间件\n\n这里包含了中间件相关的所有文档。\n","slug":"middleware/index","published":1,"date":"2025-02-23T07:43:31.738Z","updated":"2025-02-23T07:43:31.738Z","__permalink":"/middleware/","comments":1,"photos":[],"_id":"cm7k5rwa0000amswsdph9b426","content":"<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><p>这里包含了中间件相关的所有文档。</p>\n","excerpt":"","more":"<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><p>这里包含了中间件相关的所有文档。</p>\n"},{"layout":"default","title":"kubectl","nav_order":11,"description":"kubectl使用记录","parent":"Kubernetes","has_children":false,"_content":"\n# kubectl使用记录\n\n## 初级应用\n\n### 连接到集群\n\n```shell\n# 修改配置文件, 将集群的kubeconfig文件内容添加到文件中\ncode ~/.kube/config\n\n## 查看集群上下文\nkubectl config get-contexts\n## 使用集群上下文\nkubectl config use-context <context-name>\n```\n\n### 命令使用示例\n\n```shell\n# 创建命名空间\nkubectl create namespace test\n```\n\n## 高级应用\n\n### 连接多个集群\n\n```yml\n# 示例: 手动将下载下来的kubeconfig合并到当前配置中\napiVersion: v1\nclusters:\n- cluster:\n    server: https://k8smanager-xxx.cn/k8s/clusters/sss\n  name: aaa\n\n- cluster:\n    certificate-authority-data: ******\n    server: https://apiserver.cluster.local:6443\n  name: kubernetes\n\ncontexts:\n- context:\n    cluster: aaa\n    namespace: test1\n    user: aaa\n  name: aaa\n\n- context:\n    cluster: kubernetes\n    user: kubernetes-admin\n  name: kubernetes-admin@kubernetes\n\ncurrent-context: aaa\nkind: Config\npreferences: {}\nusers:\n- name: aaa\n  user:\n    token: *****\n\n- name: kubernetes-admin\n  user:\n    client-certificate-data: ****\n    client-key-data: ***\n\n```\n\n### 通过docker使用kubectl命令\n\n```shell\n# 通过docker使用kubectl命令, 需要将kubeconfig文件挂载到容器中\n# docker run --rm -it --entrypoint=kubectl kubernetes/kubectl <kubectl-commands>\ndocker run --rm --name kubectl -p 8081:8081 -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6\n# host模式绑定主机端口\ndocker run --net=\"host\" --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6\n# 还可以通过设置别名的方式\nalias kubectl='docker run --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest'\nalias kubectl='docker run --net=\"host\" --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest'\n# 或者通过sudo docker run的方式, 获得权限(用于映射像80:8080这样的需要权限的端口)\nalias kubectl='sudo docker run --user=root --net=\"host\" --rm  --entrypoint=\"kubectl\" --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest'\n\nkubectl port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6\n```\n","source":"_posts/kubernetes/kubectl.md","raw":"---\nlayout: default\ntitle: kubectl\nnav_order: 11\ndescription: kubectl使用记录\nparent: Kubernetes\nhas_children: false\npermalink: \"/kubernetes/kubectl/\"\n---\n\n# kubectl使用记录\n\n## 初级应用\n\n### 连接到集群\n\n```shell\n# 修改配置文件, 将集群的kubeconfig文件内容添加到文件中\ncode ~/.kube/config\n\n## 查看集群上下文\nkubectl config get-contexts\n## 使用集群上下文\nkubectl config use-context <context-name>\n```\n\n### 命令使用示例\n\n```shell\n# 创建命名空间\nkubectl create namespace test\n```\n\n## 高级应用\n\n### 连接多个集群\n\n```yml\n# 示例: 手动将下载下来的kubeconfig合并到当前配置中\napiVersion: v1\nclusters:\n- cluster:\n    server: https://k8smanager-xxx.cn/k8s/clusters/sss\n  name: aaa\n\n- cluster:\n    certificate-authority-data: ******\n    server: https://apiserver.cluster.local:6443\n  name: kubernetes\n\ncontexts:\n- context:\n    cluster: aaa\n    namespace: test1\n    user: aaa\n  name: aaa\n\n- context:\n    cluster: kubernetes\n    user: kubernetes-admin\n  name: kubernetes-admin@kubernetes\n\ncurrent-context: aaa\nkind: Config\npreferences: {}\nusers:\n- name: aaa\n  user:\n    token: *****\n\n- name: kubernetes-admin\n  user:\n    client-certificate-data: ****\n    client-key-data: ***\n\n```\n\n### 通过docker使用kubectl命令\n\n```shell\n# 通过docker使用kubectl命令, 需要将kubeconfig文件挂载到容器中\n# docker run --rm -it --entrypoint=kubectl kubernetes/kubectl <kubectl-commands>\ndocker run --rm --name kubectl -p 8081:8081 -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6\n# host模式绑定主机端口\ndocker run --net=\"host\" --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6\n# 还可以通过设置别名的方式\nalias kubectl='docker run --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest'\nalias kubectl='docker run --net=\"host\" --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest'\n# 或者通过sudo docker run的方式, 获得权限(用于映射像80:8080这样的需要权限的端口)\nalias kubectl='sudo docker run --user=root --net=\"host\" --rm  --entrypoint=\"kubectl\" --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest'\n\nkubectl port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6\n```\n","slug":"kubernetes/kubectl","published":1,"date":"2025-02-23T07:43:31.692Z","updated":"2025-02-23T07:43:31.693Z","__permalink":"/kubernetes/kubectl/","comments":1,"photos":[],"_id":"cm7k5rwa1000bmsws9t2uc3py","content":"<h1 id=\"kubectl使用记录\"><a href=\"#kubectl使用记录\" class=\"headerlink\" title=\"kubectl使用记录\"></a>kubectl使用记录</h1><h2 id=\"初级应用\"><a href=\"#初级应用\" class=\"headerlink\" title=\"初级应用\"></a>初级应用</h2><h3 id=\"连接到集群\"><a href=\"#连接到集群\" class=\"headerlink\" title=\"连接到集群\"></a>连接到集群</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改配置文件, 将集群的kubeconfig文件内容添加到文件中</span></span><br><span class=\"line\">code ~/.kube/config</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看集群上下文</span></span></span><br><span class=\"line\">kubectl config get-contexts</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 使用集群上下文</span></span></span><br><span class=\"line\">kubectl config use-context &lt;context-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令使用示例\"><a href=\"#命令使用示例\" class=\"headerlink\" title=\"命令使用示例\"></a>命令使用示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建命名空间</span></span><br><span class=\"line\">kubectl create namespace test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级应用\"><a href=\"#高级应用\" class=\"headerlink\" title=\"高级应用\"></a>高级应用</h2><h3 id=\"连接多个集群\"><a href=\"#连接多个集群\" class=\"headerlink\" title=\"连接多个集群\"></a>连接多个集群</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例: 手动将下载下来的kubeconfig合并到当前配置中</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">clusters:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">cluster:</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">https://k8smanager-xxx.cn/k8s/clusters/sss</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">cluster:</span></span><br><span class=\"line\">    <span class=\"attr\">certificate-authority-data:</span> <span class=\"string\">******</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">https://apiserver.cluster.local:6443</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">contexts:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">context:</span></span><br><span class=\"line\">    <span class=\"attr\">cluster:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">test1</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">context:</span></span><br><span class=\"line\">    <span class=\"attr\">cluster:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">kubernetes-admin</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-admin@kubernetes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">current-context:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Config</span></span><br><span class=\"line\"><span class=\"attr\">preferences:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">users:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">token:</span> <span class=\"string\">*****</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-admin</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">client-certificate-data:</span> <span class=\"string\">****</span></span><br><span class=\"line\">    <span class=\"attr\">client-key-data:</span> <span class=\"string\">***</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过docker使用kubectl命令\"><a href=\"#通过docker使用kubectl命令\" class=\"headerlink\" title=\"通过docker使用kubectl命令\"></a>通过docker使用kubectl命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过docker使用kubectl命令, 需要将kubeconfig文件挂载到容器中</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker run --<span class=\"built_in\">rm</span> -it --entrypoint=kubectl kubernetes/kubectl &lt;kubectl-commands&gt;</span></span><br><span class=\"line\">docker run --rm --name kubectl -p 8081:8081 -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host模式绑定主机端口</span></span><br><span class=\"line\">docker run --net=&quot;host&quot; --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">还可以通过设置别名的方式</span></span><br><span class=\"line\">alias kubectl=&#x27;docker run --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest&#x27;</span><br><span class=\"line\">alias kubectl=&#x27;docker run --net=&quot;host&quot; --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者通过<span class=\"built_in\">sudo</span> docker run的方式, 获得权限(用于映射像80:8080这样的需要权限的端口)</span></span><br><span class=\"line\">alias kubectl=&#x27;sudo docker run --user=root --net=&quot;host&quot; --rm  --entrypoint=&quot;kubectl&quot; --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"kubectl使用记录\"><a href=\"#kubectl使用记录\" class=\"headerlink\" title=\"kubectl使用记录\"></a>kubectl使用记录</h1><h2 id=\"初级应用\"><a href=\"#初级应用\" class=\"headerlink\" title=\"初级应用\"></a>初级应用</h2><h3 id=\"连接到集群\"><a href=\"#连接到集群\" class=\"headerlink\" title=\"连接到集群\"></a>连接到集群</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改配置文件, 将集群的kubeconfig文件内容添加到文件中</span></span><br><span class=\"line\">code ~/.kube/config</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看集群上下文</span></span></span><br><span class=\"line\">kubectl config get-contexts</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 使用集群上下文</span></span></span><br><span class=\"line\">kubectl config use-context &lt;context-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令使用示例\"><a href=\"#命令使用示例\" class=\"headerlink\" title=\"命令使用示例\"></a>命令使用示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建命名空间</span></span><br><span class=\"line\">kubectl create namespace test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级应用\"><a href=\"#高级应用\" class=\"headerlink\" title=\"高级应用\"></a>高级应用</h2><h3 id=\"连接多个集群\"><a href=\"#连接多个集群\" class=\"headerlink\" title=\"连接多个集群\"></a>连接多个集群</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例: 手动将下载下来的kubeconfig合并到当前配置中</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">clusters:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">cluster:</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">https://k8smanager-xxx.cn/k8s/clusters/sss</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">cluster:</span></span><br><span class=\"line\">    <span class=\"attr\">certificate-authority-data:</span> <span class=\"string\">******</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">https://apiserver.cluster.local:6443</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">contexts:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">context:</span></span><br><span class=\"line\">    <span class=\"attr\">cluster:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">test1</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">context:</span></span><br><span class=\"line\">    <span class=\"attr\">cluster:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">kubernetes-admin</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-admin@kubernetes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">current-context:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Config</span></span><br><span class=\"line\"><span class=\"attr\">preferences:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">users:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aaa</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">token:</span> <span class=\"string\">*****</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-admin</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">client-certificate-data:</span> <span class=\"string\">****</span></span><br><span class=\"line\">    <span class=\"attr\">client-key-data:</span> <span class=\"string\">***</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过docker使用kubectl命令\"><a href=\"#通过docker使用kubectl命令\" class=\"headerlink\" title=\"通过docker使用kubectl命令\"></a>通过docker使用kubectl命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过docker使用kubectl命令, 需要将kubeconfig文件挂载到容器中</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker run --<span class=\"built_in\">rm</span> -it --entrypoint=kubectl kubernetes/kubectl &lt;kubectl-commands&gt;</span></span><br><span class=\"line\">docker run --rm --name kubectl -p 8081:8081 -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host模式绑定主机端口</span></span><br><span class=\"line\">docker run --net=&quot;host&quot; --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">还可以通过设置别名的方式</span></span><br><span class=\"line\">alias kubectl=&#x27;docker run --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest&#x27;</span><br><span class=\"line\">alias kubectl=&#x27;docker run --net=&quot;host&quot; --rm --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者通过<span class=\"built_in\">sudo</span> docker run的方式, 获得权限(用于映射像80:8080这样的需要权限的端口)</span></span><br><span class=\"line\">alias kubectl=&#x27;sudo docker run --user=root --net=&quot;host&quot; --rm  --entrypoint=&quot;kubectl&quot; --name kubectl -v /etc/hosts:/etc/hosts -v ~/.kube/config:/.kube/config bitnami/kubectl:latest&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl port-forward pods/harbor-helm-core-786c9f5db5-ddbkn 8081:8080 -n harbor6</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"网络","nav_order":7,"has_children":true,"parent":"网络","_content":"\n# 网络\n\n这里包含了网络相关的所有文档。\n","source":"_posts/network/index.md","raw":"---\nlayout: default\ntitle: 网络\nnav_order: 7\nhas_children: true\npermalink: \"/network/\"\nparent: 网络\n---\n\n# 网络\n\n这里包含了网络相关的所有文档。\n","slug":"network/index","published":1,"date":"2025-02-23T07:43:31.751Z","updated":"2025-02-23T07:43:31.751Z","__permalink":"/network/","comments":1,"photos":[],"_id":"cm7k5rwa1000cmswsgbste8dq","content":"<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><p>这里包含了网络相关的所有文档。</p>\n","excerpt":"","more":"<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><p>这里包含了网络相关的所有文档。</p>\n"},{"layout":"default","title":"操作系统","nav_order":2,"has_children":true,"parent":"操作系统","_content":"\n# 操作系统\n\n这里包含了各种操作系统相关的文档：\n\n- Linux 系统相关文档\n- Windows 系统相关文档\n\n## 内容分类\n\n1. Linux 系统\n   - 系统配置\n   - 性能优化\n   - 问题排查\n\n2. Windows 系统\n   - 环境配置\n   - 工具使用\n   - 常见问题\n\n3. 系统运维\n   - 监控方案\n   - 备份策略\n   - 安全加固\n","source":"_posts/os/index.md","raw":"---\nlayout: default\ntitle: 操作系统\nnav_order: 2\nhas_children: true\npermalink: \"/os/\"\nparent: 操作系统\n---\n\n# 操作系统\n\n这里包含了各种操作系统相关的文档：\n\n- Linux 系统相关文档\n- Windows 系统相关文档\n\n## 内容分类\n\n1. Linux 系统\n   - 系统配置\n   - 性能优化\n   - 问题排查\n\n2. Windows 系统\n   - 环境配置\n   - 工具使用\n   - 常见问题\n\n3. 系统运维\n   - 监控方案\n   - 备份策略\n   - 安全加固\n","slug":"os/index","published":1,"date":"2025-02-23T07:43:31.753Z","updated":"2025-02-23T07:43:31.753Z","__permalink":"/os/","comments":1,"photos":[],"_id":"cm7k5rwa1000dmswshlc2apyd","content":"<h1 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h1><p>这里包含了各种操作系统相关的文档：</p>\n<ul>\n<li>Linux 系统相关文档</li>\n<li>Windows 系统相关文档</li>\n</ul>\n<h2 id=\"内容分类\"><a href=\"#内容分类\" class=\"headerlink\" title=\"内容分类\"></a>内容分类</h2><ol>\n<li><p>Linux 系统</p>\n<ul>\n<li>系统配置</li>\n<li>性能优化</li>\n<li>问题排查</li>\n</ul>\n</li>\n<li><p>Windows 系统</p>\n<ul>\n<li>环境配置</li>\n<li>工具使用</li>\n<li>常见问题</li>\n</ul>\n</li>\n<li><p>系统运维</p>\n<ul>\n<li>监控方案</li>\n<li>备份策略</li>\n<li>安全加固</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h1><p>这里包含了各种操作系统相关的文档：</p>\n<ul>\n<li>Linux 系统相关文档</li>\n<li>Windows 系统相关文档</li>\n</ul>\n<h2 id=\"内容分类\"><a href=\"#内容分类\" class=\"headerlink\" title=\"内容分类\"></a>内容分类</h2><ol>\n<li><p>Linux 系统</p>\n<ul>\n<li>系统配置</li>\n<li>性能优化</li>\n<li>问题排查</li>\n</ul>\n</li>\n<li><p>Windows 系统</p>\n<ul>\n<li>环境配置</li>\n<li>工具使用</li>\n<li>常见问题</li>\n</ul>\n</li>\n<li><p>系统运维</p>\n<ul>\n<li>监控方案</li>\n<li>备份策略</li>\n<li>安全加固</li>\n</ul>\n</li>\n</ol>\n"},{"layout":"default","title":"工具集","nav_order":5,"description":"工具集文档","has_children":true,"parent":"工具集","_content":"\n# 工具集文档\n\n开发和运维常用工具的使用指南。\n\n## 内容分类\n\n1. 开发工具\n   - IDE 配置\n   - 版本控制\n   - 调试工具\n\n2. 运维工具\n   - 监控工具\n   - 日志工具\n   - 自动化工具\n\n3. 效率工具\n   - 命令行工具\n   - 脚本工具\n   - 辅助工具\n","source":"_posts/tools/index.md","raw":"---\nlayout: default\ntitle: 工具集\nnav_order: 5\ndescription: 工具集文档\nhas_children: true\npermalink: \"/tools/\"\nparent: 工具集\n---\n\n# 工具集文档\n\n开发和运维常用工具的使用指南。\n\n## 内容分类\n\n1. 开发工具\n   - IDE 配置\n   - 版本控制\n   - 调试工具\n\n2. 运维工具\n   - 监控工具\n   - 日志工具\n   - 自动化工具\n\n3. 效率工具\n   - 命令行工具\n   - 脚本工具\n   - 辅助工具\n","slug":"tools/index","published":1,"date":"2025-02-23T07:43:31.773Z","updated":"2025-02-23T07:43:31.773Z","__permalink":"/tools/","comments":1,"photos":[],"_id":"cm7k5rwa1000emswsd02bc3c0","content":"<h1 id=\"工具集文档\"><a href=\"#工具集文档\" class=\"headerlink\" title=\"工具集文档\"></a>工具集文档</h1><p>开发和运维常用工具的使用指南。</p>\n<h2 id=\"内容分类\"><a href=\"#内容分类\" class=\"headerlink\" title=\"内容分类\"></a>内容分类</h2><ol>\n<li><p>开发工具</p>\n<ul>\n<li>IDE 配置</li>\n<li>版本控制</li>\n<li>调试工具</li>\n</ul>\n</li>\n<li><p>运维工具</p>\n<ul>\n<li>监控工具</li>\n<li>日志工具</li>\n<li>自动化工具</li>\n</ul>\n</li>\n<li><p>效率工具</p>\n<ul>\n<li>命令行工具</li>\n<li>脚本工具</li>\n<li>辅助工具</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"工具集文档\"><a href=\"#工具集文档\" class=\"headerlink\" title=\"工具集文档\"></a>工具集文档</h1><p>开发和运维常用工具的使用指南。</p>\n<h2 id=\"内容分类\"><a href=\"#内容分类\" class=\"headerlink\" title=\"内容分类\"></a>内容分类</h2><ol>\n<li><p>开发工具</p>\n<ul>\n<li>IDE 配置</li>\n<li>版本控制</li>\n<li>调试工具</li>\n</ul>\n</li>\n<li><p>运维工具</p>\n<ul>\n<li>监控工具</li>\n<li>日志工具</li>\n<li>自动化工具</li>\n</ul>\n</li>\n<li><p>效率工具</p>\n<ul>\n<li>命令行工具</li>\n<li>脚本工具</li>\n<li>辅助工具</li>\n</ul>\n</li>\n</ol>\n"},{"layout":"default","title":"Prompts","nav_order":2,"has_children":true,"parent":"Prompts","_content":"\n# Prompts\n","source":"_posts/AI/prompts/index.md","raw":"---\nlayout: default\ntitle: Prompts\nnav_order: 2\nhas_children: true\nparent: Prompts\npermalink: \"/ai/prompts/\"\n---\n\n# Prompts\n","slug":"AI/prompts/index","published":1,"date":"2025-02-23T07:43:30.219Z","updated":"2025-02-23T07:43:30.220Z","__permalink":"/ai/prompts/","comments":1,"photos":[],"_id":"cm7k5rwa1000fmsws4xvycv06","content":"<h1 id=\"Prompts\"><a href=\"#Prompts\" class=\"headerlink\" title=\"Prompts\"></a>Prompts</h1>","excerpt":"","more":"<h1 id=\"Prompts\"><a href=\"#Prompts\" class=\"headerlink\" title=\"Prompts\"></a>Prompts</h1>"},{"layout":"default","title":"文档首页","nav_order":1,"description":"文档首页","has_children":false,"parent":"Prompts","grand_parent":"Ai","_content":"\n# 提示词\n\n## AI IDE\n\n[相关文章](https://mp.weixin.qq.com/s/fcCGnVYm7LV_67UimUcq5A)\n\n```text\n如果你觉得这些提示语还不能完全 cover 你的需求，你还可以把插件下载到本地，替换成自己喜欢的提示语。\n也可以从下面这两个网址淘淘宝：\n提示词1：https://cursor.directory/\n提示词2：https://cursorlist.com/\n\n这里我还想额外介绍一个提示语小技巧：\n给已有的提示语追加上下面一个规则\nResearch in English , respond in English, also follow by Chinese\n\n这样一来，模型在搜索资源和思考时会默认使用英语，回复就转换成中文。\n如果想再灵活一点，那就 reply in query language，这样你问其他语言的时候，模型照样能 Cover。(技巧来源 @eviljer)\n```\n","source":"_posts/AI/prompts/prompts.md","raw":"---\nlayout: default\ntitle: 文档首页\nnav_order: 1\ndescription: 文档首页\nhas_children: false\npermalink: \"/ai/prompts/prompts/\"\nparent: Prompts\ngrand_parent: Ai\n---\n\n# 提示词\n\n## AI IDE\n\n[相关文章](https://mp.weixin.qq.com/s/fcCGnVYm7LV_67UimUcq5A)\n\n```text\n如果你觉得这些提示语还不能完全 cover 你的需求，你还可以把插件下载到本地，替换成自己喜欢的提示语。\n也可以从下面这两个网址淘淘宝：\n提示词1：https://cursor.directory/\n提示词2：https://cursorlist.com/\n\n这里我还想额外介绍一个提示语小技巧：\n给已有的提示语追加上下面一个规则\nResearch in English , respond in English, also follow by Chinese\n\n这样一来，模型在搜索资源和思考时会默认使用英语，回复就转换成中文。\n如果想再灵活一点，那就 reply in query language，这样你问其他语言的时候，模型照样能 Cover。(技巧来源 @eviljer)\n```\n","slug":"AI/prompts/prompts","published":1,"date":"2025-02-23T07:43:30.223Z","updated":"2025-02-23T07:43:30.223Z","__permalink":"/ai/prompts/prompts/","comments":1,"photos":[],"_id":"cm7k5rwa1000gmsws5v3sd5zy","content":"<h1 id=\"提示词\"><a href=\"#提示词\" class=\"headerlink\" title=\"提示词\"></a>提示词</h1><h2 id=\"AI-IDE\"><a href=\"#AI-IDE\" class=\"headerlink\" title=\"AI IDE\"></a>AI IDE</h2><p><a href=\"https://mp.weixin.qq.com/s/fcCGnVYm7LV_67UimUcq5A\">相关文章</a></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你觉得这些提示语还不能完全 cover 你的需求，你还可以把插件下载到本地，替换成自己喜欢的提示语。</span><br><span class=\"line\">也可以从下面这两个网址淘淘宝：</span><br><span class=\"line\">提示词1：https://cursor.directory/</span><br><span class=\"line\">提示词2：https://cursorlist.com/</span><br><span class=\"line\"></span><br><span class=\"line\">这里我还想额外介绍一个提示语小技巧：</span><br><span class=\"line\">给已有的提示语追加上下面一个规则</span><br><span class=\"line\">Research in English , respond in English, also follow by Chinese</span><br><span class=\"line\"></span><br><span class=\"line\">这样一来，模型在搜索资源和思考时会默认使用英语，回复就转换成中文。</span><br><span class=\"line\">如果想再灵活一点，那就 reply in query language，这样你问其他语言的时候，模型照样能 Cover。(技巧来源 @eviljer)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"提示词\"><a href=\"#提示词\" class=\"headerlink\" title=\"提示词\"></a>提示词</h1><h2 id=\"AI-IDE\"><a href=\"#AI-IDE\" class=\"headerlink\" title=\"AI IDE\"></a>AI IDE</h2><p><a href=\"https://mp.weixin.qq.com/s/fcCGnVYm7LV_67UimUcq5A\">相关文章</a></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你觉得这些提示语还不能完全 cover 你的需求，你还可以把插件下载到本地，替换成自己喜欢的提示语。</span><br><span class=\"line\">也可以从下面这两个网址淘淘宝：</span><br><span class=\"line\">提示词1：https://cursor.directory/</span><br><span class=\"line\">提示词2：https://cursorlist.com/</span><br><span class=\"line\"></span><br><span class=\"line\">这里我还想额外介绍一个提示语小技巧：</span><br><span class=\"line\">给已有的提示语追加上下面一个规则</span><br><span class=\"line\">Research in English , respond in English, also follow by Chinese</span><br><span class=\"line\"></span><br><span class=\"line\">这样一来，模型在搜索资源和思考时会默认使用英语，回复就转换成中文。</span><br><span class=\"line\">如果想再灵活一点，那就 reply in query language，这样你问其他语言的时候，模型照样能 Cover。(技巧来源 @eviljer)</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"App","nav_order":2,"has_children":true,"parent":"App","_content":"\n# App\n","source":"_posts/docker/app/index.md","raw":"---\nlayout: default\ntitle: App\nnav_order: 2\nhas_children: true\nparent: App\npermalink: \"/docker/app/\"\n---\n\n# App\n","slug":"docker/app/index","published":1,"date":"2025-02-23T07:43:31.077Z","updated":"2025-02-23T07:43:31.077Z","__permalink":"/docker/app/","comments":1,"photos":[],"_id":"cm7k5rwa2000hmswsfner9ggj","content":"<h1 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h1>","excerpt":"","more":"<h1 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h1>"},{"layout":"default","title":"Dev Utls","nav_order":2,"has_children":true,"parent":"Dev Utls","_content":"\n# Dev Utls\n","source":"_posts/docker/dev_utls/index.md","raw":"---\nlayout: default\ntitle: Dev Utls\nnav_order: 2\nhas_children: true\nparent: Dev Utls\npermalink: \"/docker/dev_utls/\"\n---\n\n# Dev Utls\n","slug":"docker/dev_utls/index","published":1,"date":"2025-02-23T07:43:31.140Z","updated":"2025-02-23T07:43:31.140Z","__permalink":"/docker/dev_utls/","comments":1,"photos":[],"_id":"cm7k5rwa2000imswsfgcfgz77","content":"<h1 id=\"Dev-Utls\"><a href=\"#Dev-Utls\" class=\"headerlink\" title=\"Dev Utls\"></a>Dev Utls</h1>","excerpt":"","more":"<h1 id=\"Dev-Utls\"><a href=\"#Dev-Utls\" class=\"headerlink\" title=\"Dev Utls\"></a>Dev Utls</h1>"},{"layout":"default","title":"Mid","nav_order":2,"has_children":true,"parent":"Mid","_content":"\n# Mid\n","source":"_posts/docker/mid/index.md","raw":"---\nlayout: default\ntitle: Mid\nnav_order: 2\nhas_children: true\nparent: Mid\npermalink: \"/docker/mid/\"\n---\n\n# Mid\n","slug":"docker/mid/index","published":1,"date":"2025-02-23T07:43:31.091Z","updated":"2025-02-23T07:43:31.091Z","__permalink":"/docker/mid/","comments":1,"photos":[],"_id":"cm7k5rwa2000jmsws9s049n0o","content":"<h1 id=\"Mid\"><a href=\"#Mid\" class=\"headerlink\" title=\"Mid\"></a>Mid</h1>","excerpt":"","more":"<h1 id=\"Mid\"><a href=\"#Mid\" class=\"headerlink\" title=\"Mid\"></a>Mid</h1>"},{"layout":"default","title":"aliyun","nav_order":12,"description":"阿里云相关记录","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# 阿里云相关记录\n\n## 云效\n\n- [云效-通用制品仓库地址](https://packages.aliyun.com/generic) -- 其中maven和npm的仓库也在这个页面\n\n## 容器镜像服务\n\n- [容器镜像服务地址](https://cr.console.aliyun.com/cn-zhangjiakou/instances)\n","source":"_posts/docker/doc/aliyun.md","raw":"---\nlayout: default\ntitle: aliyun\nnav_order: 12\ndescription: 阿里云相关记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/aliyun/\"\ngrand_parent: Docker\n---\n\n# 阿里云相关记录\n\n## 云效\n\n- [云效-通用制品仓库地址](https://packages.aliyun.com/generic) -- 其中maven和npm的仓库也在这个页面\n\n## 容器镜像服务\n\n- [容器镜像服务地址](https://cr.console.aliyun.com/cn-zhangjiakou/instances)\n","slug":"docker/doc/aliyun","published":1,"date":"2025-02-23T07:43:31.173Z","updated":"2025-02-23T07:43:31.173Z","__permalink":"/docker/doc/aliyun/","comments":1,"photos":[],"_id":"cm7k5rwa2000kmsws79zkgvom","content":"<h1 id=\"阿里云相关记录\"><a href=\"#阿里云相关记录\" class=\"headerlink\" title=\"阿里云相关记录\"></a>阿里云相关记录</h1><h2 id=\"云效\"><a href=\"#云效\" class=\"headerlink\" title=\"云效\"></a>云效</h2><ul>\n<li><a href=\"https://packages.aliyun.com/generic\">云效-通用制品仓库地址</a> – 其中maven和npm的仓库也在这个页面</li>\n</ul>\n<h2 id=\"容器镜像服务\"><a href=\"#容器镜像服务\" class=\"headerlink\" title=\"容器镜像服务\"></a>容器镜像服务</h2><ul>\n<li><a href=\"https://cr.console.aliyun.com/cn-zhangjiakou/instances\">容器镜像服务地址</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"阿里云相关记录\"><a href=\"#阿里云相关记录\" class=\"headerlink\" title=\"阿里云相关记录\"></a>阿里云相关记录</h1><h2 id=\"云效\"><a href=\"#云效\" class=\"headerlink\" title=\"云效\"></a>云效</h2><ul>\n<li><a href=\"https://packages.aliyun.com/generic\">云效-通用制品仓库地址</a> – 其中maven和npm的仓库也在这个页面</li>\n</ul>\n<h2 id=\"容器镜像服务\"><a href=\"#容器镜像服务\" class=\"headerlink\" title=\"容器镜像服务\"></a>容器镜像服务</h2><ul>\n<li><a href=\"https://cr.console.aliyun.com/cn-zhangjiakou/instances\">容器镜像服务地址</a></li>\n</ul>\n"},{"layout":"default","title":"conda","nav_order":12,"description":"使用记录","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# 使用记录\n\n- [conda官网](https://docs.conda.io/en/latest/index.html)\n\n## 安装\n\n```shell\n# 下载安装脚本\nwget https://repo.anaconda.com/miniconda/Miniconda3-py38_23.1.0-1-Linux-aarch64.sh\n# 执行脚本安装\nbash bash Miniconda3-py38_23.1.0-1-Linux-aarch64.sh\n# 最后，重新打开终端执行下面的命令验证是否安装成功\nconda list\n# 更新\nconda update conda\n```\n\n## 创建环境\n\n```shell\nconda create -n python3.4 python=3.4\n\n## 示例\n`bash\n    # create and activate the virtual environment\n    conda create --name animated_drawings python=3.8.13\n    conda activate animated_drawings\n\n    # clone AnimatedDrawings and use pip to install\n    git clone https://github.com/facebookresearch/AnimatedDrawings.git\n    cd AnimatedDrawings\n    pip install -e .\n`\n\n```\n","source":"_posts/docker/doc/conda.md","raw":"---\nlayout: default\ntitle: conda\nnav_order: 12\ndescription: 使用记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/conda/\"\ngrand_parent: Docker\n---\n\n# 使用记录\n\n- [conda官网](https://docs.conda.io/en/latest/index.html)\n\n## 安装\n\n```shell\n# 下载安装脚本\nwget https://repo.anaconda.com/miniconda/Miniconda3-py38_23.1.0-1-Linux-aarch64.sh\n# 执行脚本安装\nbash bash Miniconda3-py38_23.1.0-1-Linux-aarch64.sh\n# 最后，重新打开终端执行下面的命令验证是否安装成功\nconda list\n# 更新\nconda update conda\n```\n\n## 创建环境\n\n```shell\nconda create -n python3.4 python=3.4\n\n## 示例\n`bash\n    # create and activate the virtual environment\n    conda create --name animated_drawings python=3.8.13\n    conda activate animated_drawings\n\n    # clone AnimatedDrawings and use pip to install\n    git clone https://github.com/facebookresearch/AnimatedDrawings.git\n    cd AnimatedDrawings\n    pip install -e .\n`\n\n```\n","slug":"docker/doc/conda","published":1,"date":"2025-02-23T07:43:31.215Z","updated":"2025-02-23T07:43:31.219Z","__permalink":"/docker/doc/conda/","comments":1,"photos":[],"_id":"cm7k5rwa2000lmsws1ukbagnk","content":"<h1 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h1><ul>\n<li><a href=\"https://docs.conda.io/en/latest/index.html\">conda官网</a></li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装脚本</span></span><br><span class=\"line\">wget https://repo.anaconda.com/miniconda/Miniconda3-py38_23.1.0-1-Linux-aarch64.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行脚本安装</span></span><br><span class=\"line\">bash bash Miniconda3-py38_23.1.0-1-Linux-aarch64.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">最后，重新打开终端执行下面的命令验证是否安装成功</span></span><br><span class=\"line\">conda list</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新</span></span><br><span class=\"line\">conda update conda</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建环境\"><a href=\"#创建环境\" class=\"headerlink\" title=\"创建环境\"></a>创建环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n python3.4 python=3.4</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 示例</span></span></span><br><span class=\"line\">`bash</span><br><span class=\"line\">    # create and activate the virtual environment</span><br><span class=\"line\">    conda create --name animated_drawings python=3.8.13</span><br><span class=\"line\">    conda activate animated_drawings</span><br><span class=\"line\"></span><br><span class=\"line\">    # clone AnimatedDrawings and use pip to install</span><br><span class=\"line\">    git clone https://github.com/facebookresearch/AnimatedDrawings.git</span><br><span class=\"line\">    cd AnimatedDrawings</span><br><span class=\"line\">    pip install -e .</span><br><span class=\"line\">`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h1><ul>\n<li><a href=\"https://docs.conda.io/en/latest/index.html\">conda官网</a></li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装脚本</span></span><br><span class=\"line\">wget https://repo.anaconda.com/miniconda/Miniconda3-py38_23.1.0-1-Linux-aarch64.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行脚本安装</span></span><br><span class=\"line\">bash bash Miniconda3-py38_23.1.0-1-Linux-aarch64.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">最后，重新打开终端执行下面的命令验证是否安装成功</span></span><br><span class=\"line\">conda list</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新</span></span><br><span class=\"line\">conda update conda</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建环境\"><a href=\"#创建环境\" class=\"headerlink\" title=\"创建环境\"></a>创建环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n python3.4 python=3.4</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 示例</span></span></span><br><span class=\"line\">`bash</span><br><span class=\"line\">    # create and activate the virtual environment</span><br><span class=\"line\">    conda create --name animated_drawings python=3.8.13</span><br><span class=\"line\">    conda activate animated_drawings</span><br><span class=\"line\"></span><br><span class=\"line\">    # clone AnimatedDrawings and use pip to install</span><br><span class=\"line\">    git clone https://github.com/facebookresearch/AnimatedDrawings.git</span><br><span class=\"line\">    cd AnimatedDrawings</span><br><span class=\"line\">    pip install -e .</span><br><span class=\"line\">`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"docker-dns","nav_order":12,"description":"docker内置DNS记录","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# docker内置DNS记录\n\n- 相关文章\n  - [Docker DNS](https://www.hwchiu.com/docs/2023/kind-network)\n\n```bash\n# 使用ps查询容器的 PID\nps -ef | grep redis\n# 其中 ss 顯示了環境中 127.0.0.11 有監聽兩個 Port，分別對應 TCP 與 UDP 的 DNS 請求，而 iptables 則顯示的相關 DNAT 的規則\nsudo nsenter -n -t ${pid} ss -tunlp\nsudo nsenter -n -t ${pid} iptables-save -t nat\n# 进入容器查看容器内的DNS记录`docker run -it --rm --network middleware busybox`\nnslookup redis\n```\n","source":"_posts/docker/doc/docker-dns.md","raw":"---\nlayout: default\ntitle: docker-dns\nnav_order: 12\ndescription: docker内置DNS记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/docker-dns/\"\ngrand_parent: Docker\n---\n\n# docker内置DNS记录\n\n- 相关文章\n  - [Docker DNS](https://www.hwchiu.com/docs/2023/kind-network)\n\n```bash\n# 使用ps查询容器的 PID\nps -ef | grep redis\n# 其中 ss 顯示了環境中 127.0.0.11 有監聽兩個 Port，分別對應 TCP 與 UDP 的 DNS 請求，而 iptables 則顯示的相關 DNAT 的規則\nsudo nsenter -n -t ${pid} ss -tunlp\nsudo nsenter -n -t ${pid} iptables-save -t nat\n# 进入容器查看容器内的DNS记录`docker run -it --rm --network middleware busybox`\nnslookup redis\n```\n","slug":"docker/doc/docker-dns","published":1,"date":"2025-02-23T07:43:31.195Z","updated":"2025-02-23T07:43:31.196Z","__permalink":"/docker/doc/docker-dns/","comments":1,"photos":[],"_id":"cm7k5rwa3000mmswsgn5obs4h","content":"<h1 id=\"docker内置DNS记录\"><a href=\"#docker内置DNS记录\" class=\"headerlink\" title=\"docker内置DNS记录\"></a>docker内置DNS记录</h1><ul>\n<li>相关文章<ul>\n<li><a href=\"https://www.hwchiu.com/docs/2023/kind-network\">Docker DNS</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用ps查询容器的 PID</span></span><br><span class=\"line\">ps -ef | grep redis</span><br><span class=\"line\"><span class=\"comment\"># 其中 ss 顯示了環境中 127.0.0.11 有監聽兩個 Port，分別對應 TCP 與 UDP 的 DNS 請求，而 iptables 則顯示的相關 DNAT 的規則</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> nsenter -n -t <span class=\"variable\">$&#123;pid&#125;</span> ss -tunlp</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> nsenter -n -t <span class=\"variable\">$&#123;pid&#125;</span> iptables-save -t nat</span><br><span class=\"line\"><span class=\"comment\"># 进入容器查看容器内的DNS记录`docker run -it --rm --network middleware busybox`</span></span><br><span class=\"line\">nslookup redis</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker内置DNS记录\"><a href=\"#docker内置DNS记录\" class=\"headerlink\" title=\"docker内置DNS记录\"></a>docker内置DNS记录</h1><ul>\n<li>相关文章<ul>\n<li><a href=\"https://www.hwchiu.com/docs/2023/kind-network\">Docker DNS</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用ps查询容器的 PID</span></span><br><span class=\"line\">ps -ef | grep redis</span><br><span class=\"line\"><span class=\"comment\"># 其中 ss 顯示了環境中 127.0.0.11 有監聽兩個 Port，分別對應 TCP 與 UDP 的 DNS 請求，而 iptables 則顯示的相關 DNAT 的規則</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> nsenter -n -t <span class=\"variable\">$&#123;pid&#125;</span> ss -tunlp</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> nsenter -n -t <span class=\"variable\">$&#123;pid&#125;</span> iptables-save -t nat</span><br><span class=\"line\"><span class=\"comment\"># 进入容器查看容器内的DNS记录`docker run -it --rm --network middleware busybox`</span></span><br><span class=\"line\">nslookup redis</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"docker-error","nav_order":12,"description":"docker相关报错记录","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# docker相关报错记录\n\n## docker info 报warning\n\n```shell\n# WARNING: IPv4 forwarding is disabled. Networking will not work.\n# 解决办法：\nvi /etc/sysctl.conf\n# 或者\nvi /usr/lib/sysctl.d/00-system.conf\n# 添加如下代码：\n    net.ipv4.ip_forward=1\n\n# 重启network服务\nsystemctl restart network\n\n# 查看是否修改成功\nsysctl net.ipv4.ip_forward\n\n# 如果返回为“ net.ipv4.ip_forward = 1 ”则表示成功了\n```\n\n```shell\n# 执行 docker info 时出现警告\n# WARNING: bridge-nf-call-iptables is disabled\n# WARNING: bridge-nf-call-ip6tables is disabled\n# 解决办法：\n\nvi /etc/sysctl.conf\n# 在文件里添加下面两行代码：\n\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\n# 然后 ESC 退出后 :wq 保存，执行下面代码：\n\nsysctl -p\n# 再试一次 docker info 问题应该解决了\n```\n\n## 使用docker stack deploy 时遇到image could not be accessed on a registry to record its digest\n\n- 首先说一下遇到的坑，当执行命令时，会在work节点上pull配置文件中指定好的镜像，如果是DockerHub中存在的镜像则无问题，如果是私有镜像，就算是登录了也无法获取\n- 解决办法：在stack deploy后添加 --with-registry-auth即可\n","source":"_posts/docker/doc/docker-error.md","raw":"---\nlayout: default\ntitle: docker-error\nnav_order: 12\ndescription: docker相关报错记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/docker-error/\"\ngrand_parent: Docker\n---\n\n# docker相关报错记录\n\n## docker info 报warning\n\n```shell\n# WARNING: IPv4 forwarding is disabled. Networking will not work.\n# 解决办法：\nvi /etc/sysctl.conf\n# 或者\nvi /usr/lib/sysctl.d/00-system.conf\n# 添加如下代码：\n    net.ipv4.ip_forward=1\n\n# 重启network服务\nsystemctl restart network\n\n# 查看是否修改成功\nsysctl net.ipv4.ip_forward\n\n# 如果返回为“ net.ipv4.ip_forward = 1 ”则表示成功了\n```\n\n```shell\n# 执行 docker info 时出现警告\n# WARNING: bridge-nf-call-iptables is disabled\n# WARNING: bridge-nf-call-ip6tables is disabled\n# 解决办法：\n\nvi /etc/sysctl.conf\n# 在文件里添加下面两行代码：\n\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\n# 然后 ESC 退出后 :wq 保存，执行下面代码：\n\nsysctl -p\n# 再试一次 docker info 问题应该解决了\n```\n\n## 使用docker stack deploy 时遇到image could not be accessed on a registry to record its digest\n\n- 首先说一下遇到的坑，当执行命令时，会在work节点上pull配置文件中指定好的镜像，如果是DockerHub中存在的镜像则无问题，如果是私有镜像，就算是登录了也无法获取\n- 解决办法：在stack deploy后添加 --with-registry-auth即可\n","slug":"docker/doc/docker-error","published":1,"date":"2025-02-23T07:43:31.182Z","updated":"2025-02-23T07:43:31.186Z","__permalink":"/docker/doc/docker-error/","comments":1,"photos":[],"_id":"cm7k5rwa3000nmswsaaxua649","content":"<h1 id=\"docker相关报错记录\"><a href=\"#docker相关报错记录\" class=\"headerlink\" title=\"docker相关报错记录\"></a>docker相关报错记录</h1><h2 id=\"docker-info-报warning\"><a href=\"#docker-info-报warning\" class=\"headerlink\" title=\"docker info 报warning\"></a>docker info 报warning</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">WARNING: IPv4 forwarding is disabled. Networking will not work.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解决办法：</span></span><br><span class=\"line\">vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者</span></span><br><span class=\"line\">vi /usr/lib/sysctl.d/00-system.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加如下代码：</span></span><br><span class=\"line\">    net.ipv4.ip_forward=1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启network服务</span></span><br><span class=\"line\">systemctl restart network</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看是否修改成功</span></span><br><span class=\"line\">sysctl net.ipv4.ip_forward</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果返回为“ net.ipv4.ip_forward = 1 ”则表示成功了</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行 docker info 时出现警告</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">WARNING: bridge-nf-call-iptables is disabled</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">WARNING: bridge-nf-call-ip6tables is disabled</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解决办法：</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在文件里添加下面两行代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后 ESC 退出后 :wq 保存，执行下面代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">再试一次 docker info 问题应该解决了</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用docker-stack-deploy-时遇到image-could-not-be-accessed-on-a-registry-to-record-its-digest\"><a href=\"#使用docker-stack-deploy-时遇到image-could-not-be-accessed-on-a-registry-to-record-its-digest\" class=\"headerlink\" title=\"使用docker stack deploy 时遇到image could not be accessed on a registry to record its digest\"></a>使用docker stack deploy 时遇到image could not be accessed on a registry to record its digest</h2><ul>\n<li>首先说一下遇到的坑，当执行命令时，会在work节点上pull配置文件中指定好的镜像，如果是DockerHub中存在的镜像则无问题，如果是私有镜像，就算是登录了也无法获取</li>\n<li>解决办法：在stack deploy后添加 –with-registry-auth即可</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"docker相关报错记录\"><a href=\"#docker相关报错记录\" class=\"headerlink\" title=\"docker相关报错记录\"></a>docker相关报错记录</h1><h2 id=\"docker-info-报warning\"><a href=\"#docker-info-报warning\" class=\"headerlink\" title=\"docker info 报warning\"></a>docker info 报warning</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">WARNING: IPv4 forwarding is disabled. Networking will not work.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解决办法：</span></span><br><span class=\"line\">vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者</span></span><br><span class=\"line\">vi /usr/lib/sysctl.d/00-system.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加如下代码：</span></span><br><span class=\"line\">    net.ipv4.ip_forward=1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启network服务</span></span><br><span class=\"line\">systemctl restart network</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看是否修改成功</span></span><br><span class=\"line\">sysctl net.ipv4.ip_forward</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果返回为“ net.ipv4.ip_forward = 1 ”则表示成功了</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行 docker info 时出现警告</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">WARNING: bridge-nf-call-iptables is disabled</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">WARNING: bridge-nf-call-ip6tables is disabled</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解决办法：</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在文件里添加下面两行代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后 ESC 退出后 :wq 保存，执行下面代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">再试一次 docker info 问题应该解决了</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用docker-stack-deploy-时遇到image-could-not-be-accessed-on-a-registry-to-record-its-digest\"><a href=\"#使用docker-stack-deploy-时遇到image-could-not-be-accessed-on-a-registry-to-record-its-digest\" class=\"headerlink\" title=\"使用docker stack deploy 时遇到image could not be accessed on a registry to record its digest\"></a>使用docker stack deploy 时遇到image could not be accessed on a registry to record its digest</h2><ul>\n<li>首先说一下遇到的坑，当执行命令时，会在work节点上pull配置文件中指定好的镜像，如果是DockerHub中存在的镜像则无问题，如果是私有镜像，就算是登录了也无法获取</li>\n<li>解决办法：在stack deploy后添加 –with-registry-auth即可</li>\n</ul>\n"},{"layout":"default","title":"docker-networks","nav_order":12,"description":"创建网络```shelldocker network create -d  overlay --attachable middleware","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n## 创建网络\n```shell\ndocker network create -d  overlay --attachable middleware\n\ndocker network create --driver=overlay --gateway 192.168.1.1 --subnet 192.168.1.0/24 --attachable my_network\n```\n\n## 使用host模式\n```shell script\ndocker run --net=\"host\" \ndocker-compose -f file.yml up # yml 文件中，在services:[serviceName]:network_mode: \"host\"\ndocker stack up -c file.yml \n# yml 文件中\n# services:\n#   nginx:\n#     networks:\n#       hostnet: {}\n# networks:\n#   hostnet:\n#     external: true\n#     name: host\n```\n","source":"_posts/docker/doc/docker-networks.md","raw":"---\nlayout: default\ntitle: docker-networks\nnav_order: 12\ndescription: 创建网络```shelldocker network create -d  overlay --attachable middleware\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/docker-networks/\"\ngrand_parent: Docker\n---\n\n## 创建网络\n```shell\ndocker network create -d  overlay --attachable middleware\n\ndocker network create --driver=overlay --gateway 192.168.1.1 --subnet 192.168.1.0/24 --attachable my_network\n```\n\n## 使用host模式\n```shell script\ndocker run --net=\"host\" \ndocker-compose -f file.yml up # yml 文件中，在services:[serviceName]:network_mode: \"host\"\ndocker stack up -c file.yml \n# yml 文件中\n# services:\n#   nginx:\n#     networks:\n#       hostnet: {}\n# networks:\n#   hostnet:\n#     external: true\n#     name: host\n```\n","slug":"docker/doc/docker-networks","published":1,"date":"2025-02-23T07:43:31.173Z","updated":"2025-02-23T07:43:31.174Z","__permalink":"/docker/doc/docker-networks/","comments":1,"photos":[],"_id":"cm7k5rwa3000omswse9n00kqq","content":"<h2 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create -d  overlay --attachable middleware</span><br><span class=\"line\"></span><br><span class=\"line\">docker network create --driver=overlay --gateway 192.168.1.1 --subnet 192.168.1.0/24 --attachable my_network</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用host模式\"><a href=\"#使用host模式\" class=\"headerlink\" title=\"使用host模式\"></a>使用host模式</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --net=&quot;host&quot; </span><br><span class=\"line\">docker-compose -f file.yml up # yml 文件中，在services:[serviceName]:network_mode: &quot;host&quot;</span><br><span class=\"line\">docker stack up -c file.yml </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yml 文件中</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">services:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  nginx:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    networks:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">      hostnet: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">networks:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  hostnet:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    external: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    name: host</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create -d  overlay --attachable middleware</span><br><span class=\"line\"></span><br><span class=\"line\">docker network create --driver=overlay --gateway 192.168.1.1 --subnet 192.168.1.0/24 --attachable my_network</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用host模式\"><a href=\"#使用host模式\" class=\"headerlink\" title=\"使用host模式\"></a>使用host模式</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --net=&quot;host&quot; </span><br><span class=\"line\">docker-compose -f file.yml up # yml 文件中，在services:[serviceName]:network_mode: &quot;host&quot;</span><br><span class=\"line\">docker stack up -c file.yml </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yml 文件中</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">services:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  nginx:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    networks:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">      hostnet: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">networks:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  hostnet:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    external: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    name: host</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"docker-compose","nav_order":12,"description":"docker-compose相关记录","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# docker-compose相关记录\n\n## 安装或升级指定版本\n\n```shell\n# 查看之前下载的程序\nll /usr/local/bin/docker-compose\n# 删除之前下载的程序\nrm /usr/local/bin/docker-compose\n\n# 下载安装程序到指定目录\n# sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nsudo curl -L https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-linux-x86_64 > /usr/local/bin/docker-compose\n\n# 添加执行权限\nchmod +x /usr/local/bin/docker-compose\n\n```\n\n- 使用包管理器安装\n\n```shell\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\nsudo yum install -y docker-compose\n\n```\n\n- 使用python安装docker-compose\n  - [参考文章](https://help.aliyun.com/zh/ecs/use-cases/deploy-and-use-docker-on-alibaba-cloud-linux-2-instances)\n\n```shell\n# 重要: 仅Python 3及以上版本支持docker-compose，并请确保已安装pip。\npip3 install -U pip setuptools\npip3 install docker-compose\ndocker-compose --version\n```\n\n> 请注意，使用包管理器安装的方式可以确保安装的是官方支持的稳定版本。而使用pip安装的方式可能会安装最新版本，但在某些情况下可能会遇到依赖关系或兼容性问题。\n\n## 示例命令\n\n```bash\ndocker compose -f ./docker-compose.yml -p project_name up -d --build service_name\n```\n","source":"_posts/docker/doc/docker-compose.md","raw":"---\nlayout: default\ntitle: docker-compose\nnav_order: 12\ndescription: docker-compose相关记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/docker-compose/\"\ngrand_parent: Docker\n---\n\n# docker-compose相关记录\n\n## 安装或升级指定版本\n\n```shell\n# 查看之前下载的程序\nll /usr/local/bin/docker-compose\n# 删除之前下载的程序\nrm /usr/local/bin/docker-compose\n\n# 下载安装程序到指定目录\n# sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nsudo curl -L https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-linux-x86_64 > /usr/local/bin/docker-compose\n\n# 添加执行权限\nchmod +x /usr/local/bin/docker-compose\n\n```\n\n- 使用包管理器安装\n\n```shell\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\nsudo yum install -y docker-compose\n\n```\n\n- 使用python安装docker-compose\n  - [参考文章](https://help.aliyun.com/zh/ecs/use-cases/deploy-and-use-docker-on-alibaba-cloud-linux-2-instances)\n\n```shell\n# 重要: 仅Python 3及以上版本支持docker-compose，并请确保已安装pip。\npip3 install -U pip setuptools\npip3 install docker-compose\ndocker-compose --version\n```\n\n> 请注意，使用包管理器安装的方式可以确保安装的是官方支持的稳定版本。而使用pip安装的方式可能会安装最新版本，但在某些情况下可能会遇到依赖关系或兼容性问题。\n\n## 示例命令\n\n```bash\ndocker compose -f ./docker-compose.yml -p project_name up -d --build service_name\n```\n","slug":"docker/doc/docker-compose","published":1,"date":"2025-02-23T07:43:31.187Z","updated":"2025-02-23T07:43:31.190Z","__permalink":"/docker/doc/docker-compose/","comments":1,"photos":[],"_id":"cm7k5rwa3000pmsws2k8z6uom","content":"<h1 id=\"docker-compose相关记录\"><a href=\"#docker-compose相关记录\" class=\"headerlink\" title=\"docker-compose相关记录\"></a>docker-compose相关记录</h1><h2 id=\"安装或升级指定版本\"><a href=\"#安装或升级指定版本\" class=\"headerlink\" title=\"安装或升级指定版本\"></a>安装或升级指定版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看之前下载的程序</span></span><br><span class=\"line\">ll /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除之前下载的程序</span></span><br><span class=\"line\">rm /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装程序到指定目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">sudo</span> curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`<span class=\"built_in\">uname</span> -s`-`<span class=\"built_in\">uname</span> -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-linux-x86_64 &gt; /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加执行权限</span></span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用包管理器安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install -y docker-compose</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用python安装docker-compose<ul>\n<li><a href=\"https://help.aliyun.com/zh/ecs/use-cases/deploy-and-use-docker-on-alibaba-cloud-linux-2-instances\">参考文章</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重要: 仅Python 3及以上版本支持docker-compose，并请确保已安装pip。</span></span><br><span class=\"line\">pip3 install -U pip setuptools</span><br><span class=\"line\">pip3 install docker-compose</span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>请注意，使用包管理器安装的方式可以确保安装的是官方支持的稳定版本。而使用pip安装的方式可能会安装最新版本，但在某些情况下可能会遇到依赖关系或兼容性问题。</p>\n</blockquote>\n<h2 id=\"示例命令\"><a href=\"#示例命令\" class=\"headerlink\" title=\"示例命令\"></a>示例命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose -f ./docker-compose.yml -p project_name up -d --build service_name</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker-compose相关记录\"><a href=\"#docker-compose相关记录\" class=\"headerlink\" title=\"docker-compose相关记录\"></a>docker-compose相关记录</h1><h2 id=\"安装或升级指定版本\"><a href=\"#安装或升级指定版本\" class=\"headerlink\" title=\"安装或升级指定版本\"></a>安装或升级指定版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看之前下载的程序</span></span><br><span class=\"line\">ll /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除之前下载的程序</span></span><br><span class=\"line\">rm /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装程序到指定目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">sudo</span> curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`<span class=\"built_in\">uname</span> -s`-`<span class=\"built_in\">uname</span> -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-linux-x86_64 &gt; /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加执行权限</span></span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用包管理器安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install -y docker-compose</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用python安装docker-compose<ul>\n<li><a href=\"https://help.aliyun.com/zh/ecs/use-cases/deploy-and-use-docker-on-alibaba-cloud-linux-2-instances\">参考文章</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重要: 仅Python 3及以上版本支持docker-compose，并请确保已安装pip。</span></span><br><span class=\"line\">pip3 install -U pip setuptools</span><br><span class=\"line\">pip3 install docker-compose</span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>请注意，使用包管理器安装的方式可以确保安装的是官方支持的稳定版本。而使用pip安装的方式可能会安装最新版本，但在某些情况下可能会遇到依赖关系或兼容性问题。</p>\n</blockquote>\n<h2 id=\"示例命令\"><a href=\"#示例命令\" class=\"headerlink\" title=\"示例命令\"></a>示例命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose -f ./docker-compose.yml -p project_name up -d --build service_name</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"docker-swarm","nav_order":12,"description":"创建Swarm集群```shell scriptdocker swarm init --advertise-addr 192.168.31.43 --advertise-addr参数表示其它swarm中的worker节点使用此ip地址与manager联系。docker swarm init --advertise-addr enp0s8 --advertise-addr 该参数也可使用网卡名```","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n## 创建Swarm集群\n```shell script\ndocker swarm init --advertise-addr 192.168.31.43\n# --advertise-addr参数表示其它swarm中的worker节点使用此ip地址与manager联系。\ndocker swarm init --advertise-addr enp0s8\n# --advertise-addr 该参数也可使用网卡名\n```\n\n## 查询加入Swarm集群的命令\n```shell script\ndocker swarm join-token manager\n```\n\n## 离开Swarm集群\n```shell script\ndocker swarm leave\n```\n\n## 给node节点添加标签\n```shell\n# docker node update --label-add client=true <node-name>\ndocker node update --label-add func=nginx worker1\n```\n\n## 创建网络\n\n- overlay网络\n  - [No route to host的问题](./problems/docker-swarm-networks.md#网段冲突问题解决方案)\n\n```shell\ndocker network create middleware -d overlay --scope swarm \n\n# 指定子网范围(PS: 防止和宿主机IP冲突(error: No route to host))\ndocker swarm init --default-addr-pool 192.168.0.0/16\n```\n\n## 部署命令\n```shell script\ndocker stack up -c docker-compose.yml rmq\n```\n## docker swarm 端口映射问题\n```shell\n  <serviceName>:\n    ports:\n      - target: 6379\n        published: 6379\n        protocol: tcp\n        mode: host\n```\n\n## docker swarm 端口开放\n```shell\n# Before starting, verify its status:\nsystemctl status firewalld\n# It should not be running, so start it:\nsystemctl start firewalld\n# Then enable it so that it starts on boot:\nsystemctl enable firewalld\n# Afterwards, reload the firewall:\nfirewall-cmd --reload\n# Then restart Docker.\nsystemctl restart docker\n```\n> ###### Note: If you make a mistake and need to remove an entry, type:\n> firewall-cmd --remove-port=port-number/tcp —permanent.\n> \n> ######On the node that will be a Swarm manager, use the following commands to open the necessary ports:\n> firewall-cmd --add-port=2376/tcp --permanent\\\n> firewall-cmd --add-port=2377/tcp --permanent\\\n> firewall-cmd --add-port=7946/tcp --permanent\\\n> firewall-cmd --add-port=7946/udp --permanent\\\n> firewall-cmd --add-port=4789/udp --permanent\n> \n> ######Then on each node that will function as a Swarm worker, execute the following commands:\n> firewall-cmd --add-port=2376/tcp --permanent\\\n> firewall-cmd --add-port=7946/tcp --permanent\\\n> firewall-cmd --add-port=7946/udp --permanent\\\n> firewall-cmd --add-port=4789/udp --permanent\n```shell\n# docker machine\nfirewall-cmd --add-port=2376/tcp --permanent\n# manager\nfirewall-cmd --add-port=2377/tcp --permanent\n# communication among nodes (container network discovery).\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\n# overlay network traffic (container ingress networking).\nfirewall-cmd --add-port=4789/udp --permanent\n\n# 2376 用于docker machine 在实体机，一般不需要。\n\n```\n> docker swarm 端口开放[参考链接](https://www.digitalocean.com/community/tutorials/how-to-configure-the-linux-firewall-for-docker-swarm-on-centos-7)\n```shell script\n# xml开放端口\n# 通过以下命令查找xml文件存放路径(这里查找的是系统存放路径)\nfind / -name ssh.xml\n# 查找docker相关xml\nls | grep docker\n# 如果有(docker-swarm.xml)则可直接开启它，可省去下面自己新建文件的过程\n\nvi /etc/firewalld/services/docker.xml # 这个是用户存放路径，可能不在这个路径，可以通过上面那条命令查找路径\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n      <service>\n        <short>docker</short>\n        <description>docker daemon for remote access</description>\n        <port protocol=\"tcp\" port=\"2376\"/>\n        <port protocol=\"tcp\" port=\"2377\"/> # manager节点才需要\n        <port protocol=\"tcp\" port=\"7946\"/>\n        <port protocol=\"udp\" port=\"7946\"/>\n        <port protocol=\"udp\" port=\"4789\"/>\n      </service>\n      \n# 查看默认zone(一般是public)\nfirewall-cmd --get-default-zone\n# 在zone中加入这个service\nfirewall-cmd --zone=public --add-service=docker --permanent\n# 重新加载\nfirewall-cmd --reload\n# 详见linux.md 和 firewalld.md文件\n```\n","source":"_posts/docker/doc/docker-swarm.md","raw":"---\nlayout: default\ntitle: docker-swarm\nnav_order: 12\ndescription: 创建Swarm集群```shell scriptdocker swarm init --advertise-addr 192.168.31.43\n  --advertise-addr参数表示其它swarm中的worker节点使用此ip地址与manager联系。docker swarm init --advertise-addr\n  enp0s8 --advertise-addr 该参数也可使用网卡名```\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/docker-swarm/\"\ngrand_parent: Docker\n---\n\n## 创建Swarm集群\n```shell script\ndocker swarm init --advertise-addr 192.168.31.43\n# --advertise-addr参数表示其它swarm中的worker节点使用此ip地址与manager联系。\ndocker swarm init --advertise-addr enp0s8\n# --advertise-addr 该参数也可使用网卡名\n```\n\n## 查询加入Swarm集群的命令\n```shell script\ndocker swarm join-token manager\n```\n\n## 离开Swarm集群\n```shell script\ndocker swarm leave\n```\n\n## 给node节点添加标签\n```shell\n# docker node update --label-add client=true <node-name>\ndocker node update --label-add func=nginx worker1\n```\n\n## 创建网络\n\n- overlay网络\n  - [No route to host的问题](./problems/docker-swarm-networks.md#网段冲突问题解决方案)\n\n```shell\ndocker network create middleware -d overlay --scope swarm \n\n# 指定子网范围(PS: 防止和宿主机IP冲突(error: No route to host))\ndocker swarm init --default-addr-pool 192.168.0.0/16\n```\n\n## 部署命令\n```shell script\ndocker stack up -c docker-compose.yml rmq\n```\n## docker swarm 端口映射问题\n```shell\n  <serviceName>:\n    ports:\n      - target: 6379\n        published: 6379\n        protocol: tcp\n        mode: host\n```\n\n## docker swarm 端口开放\n```shell\n# Before starting, verify its status:\nsystemctl status firewalld\n# It should not be running, so start it:\nsystemctl start firewalld\n# Then enable it so that it starts on boot:\nsystemctl enable firewalld\n# Afterwards, reload the firewall:\nfirewall-cmd --reload\n# Then restart Docker.\nsystemctl restart docker\n```\n> ###### Note: If you make a mistake and need to remove an entry, type:\n> firewall-cmd --remove-port=port-number/tcp —permanent.\n> \n> ######On the node that will be a Swarm manager, use the following commands to open the necessary ports:\n> firewall-cmd --add-port=2376/tcp --permanent\\\n> firewall-cmd --add-port=2377/tcp --permanent\\\n> firewall-cmd --add-port=7946/tcp --permanent\\\n> firewall-cmd --add-port=7946/udp --permanent\\\n> firewall-cmd --add-port=4789/udp --permanent\n> \n> ######Then on each node that will function as a Swarm worker, execute the following commands:\n> firewall-cmd --add-port=2376/tcp --permanent\\\n> firewall-cmd --add-port=7946/tcp --permanent\\\n> firewall-cmd --add-port=7946/udp --permanent\\\n> firewall-cmd --add-port=4789/udp --permanent\n```shell\n# docker machine\nfirewall-cmd --add-port=2376/tcp --permanent\n# manager\nfirewall-cmd --add-port=2377/tcp --permanent\n# communication among nodes (container network discovery).\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\n# overlay network traffic (container ingress networking).\nfirewall-cmd --add-port=4789/udp --permanent\n\n# 2376 用于docker machine 在实体机，一般不需要。\n\n```\n> docker swarm 端口开放[参考链接](https://www.digitalocean.com/community/tutorials/how-to-configure-the-linux-firewall-for-docker-swarm-on-centos-7)\n```shell script\n# xml开放端口\n# 通过以下命令查找xml文件存放路径(这里查找的是系统存放路径)\nfind / -name ssh.xml\n# 查找docker相关xml\nls | grep docker\n# 如果有(docker-swarm.xml)则可直接开启它，可省去下面自己新建文件的过程\n\nvi /etc/firewalld/services/docker.xml # 这个是用户存放路径，可能不在这个路径，可以通过上面那条命令查找路径\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n      <service>\n        <short>docker</short>\n        <description>docker daemon for remote access</description>\n        <port protocol=\"tcp\" port=\"2376\"/>\n        <port protocol=\"tcp\" port=\"2377\"/> # manager节点才需要\n        <port protocol=\"tcp\" port=\"7946\"/>\n        <port protocol=\"udp\" port=\"7946\"/>\n        <port protocol=\"udp\" port=\"4789\"/>\n      </service>\n      \n# 查看默认zone(一般是public)\nfirewall-cmd --get-default-zone\n# 在zone中加入这个service\nfirewall-cmd --zone=public --add-service=docker --permanent\n# 重新加载\nfirewall-cmd --reload\n# 详见linux.md 和 firewalld.md文件\n```\n","slug":"docker/doc/docker-swarm","published":1,"date":"2025-02-23T07:43:31.180Z","updated":"2025-02-23T07:43:31.180Z","__permalink":"/docker/doc/docker-swarm/","comments":1,"photos":[],"_id":"cm7k5rwa3000qmswsh8p8emrl","content":"<h2 id=\"创建Swarm集群\"><a href=\"#创建Swarm集群\" class=\"headerlink\" title=\"创建Swarm集群\"></a>创建Swarm集群</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm init --advertise-addr 192.168.31.43</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--advertise-addr参数表示其它swarm中的worker节点使用此ip地址与manager联系。</span></span><br><span class=\"line\">docker swarm init --advertise-addr enp0s8</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--advertise-addr 该参数也可使用网卡名</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询加入Swarm集群的命令\"><a href=\"#查询加入Swarm集群的命令\" class=\"headerlink\" title=\"查询加入Swarm集群的命令\"></a>查询加入Swarm集群的命令</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm join-token manager</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"离开Swarm集群\"><a href=\"#离开Swarm集群\" class=\"headerlink\" title=\"离开Swarm集群\"></a>离开Swarm集群</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm leave</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给node节点添加标签\"><a href=\"#给node节点添加标签\" class=\"headerlink\" title=\"给node节点添加标签\"></a>给node节点添加标签</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker node update --label-add client=<span class=\"literal\">true</span> &lt;node-name&gt;</span></span><br><span class=\"line\">docker node update --label-add func=nginx worker1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h2><ul>\n<li>overlay网络<ul>\n<li><a href=\"./problems/docker-swarm-networks.md#%E7%BD%91%E6%AE%B5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">No route to host的问题</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create middleware -d overlay --scope swarm </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定子网范围(PS: 防止和宿主机IP冲突(error: No route to host))</span></span><br><span class=\"line\">docker swarm init --default-addr-pool 192.168.0.0/16</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署命令\"><a href=\"#部署命令\" class=\"headerlink\" title=\"部署命令\"></a>部署命令</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack up -c docker-compose.yml rmq</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-swarm-端口映射问题\"><a href=\"#docker-swarm-端口映射问题\" class=\"headerlink\" title=\"docker swarm 端口映射问题\"></a>docker swarm 端口映射问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;serviceName&gt;:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - target: 6379</span><br><span class=\"line\">      published: 6379</span><br><span class=\"line\">      protocol: tcp</span><br><span class=\"line\">      mode: host</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-swarm-端口开放\"><a href=\"#docker-swarm-端口开放\" class=\"headerlink\" title=\"docker swarm 端口开放\"></a>docker swarm 端口开放</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Before starting, verify its status:</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">It should not be running, so start it:</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Then <span class=\"built_in\">enable</span> it so that it starts on boot:</span></span><br><span class=\"line\">systemctl enable firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Afterwards, reload the firewall:</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Then restart Docker.</span></span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h6 id=\"Note-If-you-make-a-mistake-and-need-to-remove-an-entry-type\"><a href=\"#Note-If-you-make-a-mistake-and-need-to-remove-an-entry-type\" class=\"headerlink\" title=\"Note: If you make a mistake and need to remove an entry, type:\"></a>Note: If you make a mistake and need to remove an entry, type:</h6><p>firewall-cmd –remove-port&#x3D;port-number&#x2F;tcp —permanent.</p>\n<p>######On the node that will be a Swarm manager, use the following commands to open the necessary ports:<br>firewall-cmd –add-port&#x3D;2376&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;2377&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;7946&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;7946&#x2F;udp –permanent<br>firewall-cmd –add-port&#x3D;4789&#x2F;udp –permanent</p>\n<p>######Then on each node that will function as a Swarm worker, execute the following commands:<br>firewall-cmd –add-port&#x3D;2376&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;7946&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;7946&#x2F;udp –permanent<br>firewall-cmd –add-port&#x3D;4789&#x2F;udp –permanent</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker machine</span></span><br><span class=\"line\">firewall-cmd --add-port=2376/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">manager</span></span><br><span class=\"line\">firewall-cmd --add-port=2377/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">communication among nodes (container network discovery).</span></span><br><span class=\"line\">firewall-cmd --add-port=7946/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=7946/udp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">overlay network traffic (container ingress networking).</span></span><br><span class=\"line\">firewall-cmd --add-port=4789/udp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2376 用于docker machine 在实体机，一般不需要。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>docker swarm 端口开放<a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-the-linux-firewall-for-docker-swarm-on-centos-7\">参考链接</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">xml开放端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过以下命令查找xml文件存放路径(这里查找的是系统存放路径)</span></span><br><span class=\"line\">find / -name ssh.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查找docker相关xml</span></span><br><span class=\"line\">ls | grep docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果有(docker-swarm.xml)则可直接开启它，可省去下面自己新建文件的过程</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/firewalld/services/docker.xml # 这个是用户存放路径，可能不在这个路径，可以通过上面那条命令查找路径</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">      &lt;service&gt;</span><br><span class=\"line\">        &lt;short&gt;docker&lt;/short&gt;</span><br><span class=\"line\">        &lt;description&gt;docker daemon for remote access&lt;/description&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;tcp&quot; port=&quot;2376&quot;/&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;tcp&quot; port=&quot;2377&quot;/&gt; # manager节点才需要</span><br><span class=\"line\">        &lt;port protocol=&quot;tcp&quot; port=&quot;7946&quot;/&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;udp&quot; port=&quot;7946&quot;/&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;udp&quot; port=&quot;4789&quot;/&gt;</span><br><span class=\"line\">      &lt;/service&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看默认zone(一般是public)</span></span><br><span class=\"line\">firewall-cmd --get-default-zone</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在zone中加入这个service</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-service=docker --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重新加载</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">详见linux.md 和 firewalld.md文件</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"创建Swarm集群\"><a href=\"#创建Swarm集群\" class=\"headerlink\" title=\"创建Swarm集群\"></a>创建Swarm集群</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm init --advertise-addr 192.168.31.43</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--advertise-addr参数表示其它swarm中的worker节点使用此ip地址与manager联系。</span></span><br><span class=\"line\">docker swarm init --advertise-addr enp0s8</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--advertise-addr 该参数也可使用网卡名</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询加入Swarm集群的命令\"><a href=\"#查询加入Swarm集群的命令\" class=\"headerlink\" title=\"查询加入Swarm集群的命令\"></a>查询加入Swarm集群的命令</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm join-token manager</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"离开Swarm集群\"><a href=\"#离开Swarm集群\" class=\"headerlink\" title=\"离开Swarm集群\"></a>离开Swarm集群</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm leave</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给node节点添加标签\"><a href=\"#给node节点添加标签\" class=\"headerlink\" title=\"给node节点添加标签\"></a>给node节点添加标签</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker node update --label-add client=<span class=\"literal\">true</span> &lt;node-name&gt;</span></span><br><span class=\"line\">docker node update --label-add func=nginx worker1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h2><ul>\n<li>overlay网络<ul>\n<li><a href=\"./problems/docker-swarm-networks.md#%E7%BD%91%E6%AE%B5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">No route to host的问题</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create middleware -d overlay --scope swarm </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定子网范围(PS: 防止和宿主机IP冲突(error: No route to host))</span></span><br><span class=\"line\">docker swarm init --default-addr-pool 192.168.0.0/16</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署命令\"><a href=\"#部署命令\" class=\"headerlink\" title=\"部署命令\"></a>部署命令</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack up -c docker-compose.yml rmq</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-swarm-端口映射问题\"><a href=\"#docker-swarm-端口映射问题\" class=\"headerlink\" title=\"docker swarm 端口映射问题\"></a>docker swarm 端口映射问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;serviceName&gt;:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - target: 6379</span><br><span class=\"line\">      published: 6379</span><br><span class=\"line\">      protocol: tcp</span><br><span class=\"line\">      mode: host</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-swarm-端口开放\"><a href=\"#docker-swarm-端口开放\" class=\"headerlink\" title=\"docker swarm 端口开放\"></a>docker swarm 端口开放</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Before starting, verify its status:</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">It should not be running, so start it:</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Then <span class=\"built_in\">enable</span> it so that it starts on boot:</span></span><br><span class=\"line\">systemctl enable firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Afterwards, reload the firewall:</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Then restart Docker.</span></span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h6 id=\"Note-If-you-make-a-mistake-and-need-to-remove-an-entry-type\"><a href=\"#Note-If-you-make-a-mistake-and-need-to-remove-an-entry-type\" class=\"headerlink\" title=\"Note: If you make a mistake and need to remove an entry, type:\"></a>Note: If you make a mistake and need to remove an entry, type:</h6><p>firewall-cmd –remove-port&#x3D;port-number&#x2F;tcp —permanent.</p>\n<p>######On the node that will be a Swarm manager, use the following commands to open the necessary ports:<br>firewall-cmd –add-port&#x3D;2376&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;2377&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;7946&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;7946&#x2F;udp –permanent<br>firewall-cmd –add-port&#x3D;4789&#x2F;udp –permanent</p>\n<p>######Then on each node that will function as a Swarm worker, execute the following commands:<br>firewall-cmd –add-port&#x3D;2376&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;7946&#x2F;tcp –permanent<br>firewall-cmd –add-port&#x3D;7946&#x2F;udp –permanent<br>firewall-cmd –add-port&#x3D;4789&#x2F;udp –permanent</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker machine</span></span><br><span class=\"line\">firewall-cmd --add-port=2376/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">manager</span></span><br><span class=\"line\">firewall-cmd --add-port=2377/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">communication among nodes (container network discovery).</span></span><br><span class=\"line\">firewall-cmd --add-port=7946/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=7946/udp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">overlay network traffic (container ingress networking).</span></span><br><span class=\"line\">firewall-cmd --add-port=4789/udp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2376 用于docker machine 在实体机，一般不需要。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>docker swarm 端口开放<a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-the-linux-firewall-for-docker-swarm-on-centos-7\">参考链接</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">xml开放端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过以下命令查找xml文件存放路径(这里查找的是系统存放路径)</span></span><br><span class=\"line\">find / -name ssh.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查找docker相关xml</span></span><br><span class=\"line\">ls | grep docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果有(docker-swarm.xml)则可直接开启它，可省去下面自己新建文件的过程</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/firewalld/services/docker.xml # 这个是用户存放路径，可能不在这个路径，可以通过上面那条命令查找路径</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">      &lt;service&gt;</span><br><span class=\"line\">        &lt;short&gt;docker&lt;/short&gt;</span><br><span class=\"line\">        &lt;description&gt;docker daemon for remote access&lt;/description&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;tcp&quot; port=&quot;2376&quot;/&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;tcp&quot; port=&quot;2377&quot;/&gt; # manager节点才需要</span><br><span class=\"line\">        &lt;port protocol=&quot;tcp&quot; port=&quot;7946&quot;/&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;udp&quot; port=&quot;7946&quot;/&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;udp&quot; port=&quot;4789&quot;/&gt;</span><br><span class=\"line\">      &lt;/service&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看默认zone(一般是public)</span></span><br><span class=\"line\">firewall-cmd --get-default-zone</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在zone中加入这个service</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-service=docker --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重新加载</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">详见linux.md 和 firewalld.md文件</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"docker","nav_order":12,"description":"docker笔记","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# docker笔记\n\n## 安装docker\n\n```shell\n# 目前使用的方式\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nsudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n# 开机自启\nsystemctl enable docker\n# 启动docker\nsystemctl start docker\n# 配置国内镜像源(阿里镜像源)\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://ipl2fa8y.mirror.aliyuncs.com\"\n    ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n```shell\n# 目前使用的方式(网络不通了)\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum install -y docker-ce docker-ce-cli containerd.io\n```\n\n```shell\n# 使用官方安装脚本自动安装\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n# 使用国内 daocloud 一键安装命令\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n## 设置docker开机自启\n\n```shell\nsystemctl enable docker\n```\n\n## 配置docker镜像源\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://ipl2fa8y.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n```shell script\n# docker镜像源\nhttps://docker.mirrors.ustc.edu.cn\n```\n\n## 部署\n\n```shell script\n# 对性能要求高 用 --net=host(对应docker-stack.yml文件下的(service.serviceName.network_mode=host)network_mode: \"host\") ， 不用-p\n# 参考网上的测试：上次对对使用Docker的两台Redis做压力测试，A台使用-p，B台使用--net=host。但是发现A的效率只有B的1/3-2/3 ，这么大的性能影响，-p应该不适合生产环境吧？望大师们指教。谢谢。\n```\n\n## 删除空镜像\n\n```shell script\nsudo docker images | awk '{if($2==\"<none>\") print $3}' | xargs sudo docker rmi\n\n# 您需要先停止运行容器然后将其删除\ndocker stop $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\n# 对于图像，请尝试删除悬空图像\ndocker rmi $(docker images -f dangling=true -q)\n# 删除所有未被使用的镜像\ndocker image prune  -a \n```\n\n## 找镜像的地址\n\n  https://hub.docker.com/\n\n## 修改宿主机的docker配置，让其可以远程访问\n\n```shell\n# 默认,我们的linux的 docker ,IDEA 是不可以访问的,所以需要修改下配置,让我们的IDEA 可以访问\nvi /lib/systemd/system/docker.service\n# 在 其中的ExecStart=后添加配置 > tip: 2375是为Docker开启的远程访问API的端口\n-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\n\n# 刷新配置，重启服务\nsystemctl daemon‐reload  # 刷新服务\nsystemctl restart docker # 重新启动docker\ndocker start registry  # 启动registry\n\n```\n\n## docker compose文件root用户权限控制\n\n```yaml\ncontainers:\n      - name: snake\n        image: docker.io/kelysa/snake:lastest\n        imagePullPolicy: Always\n        securityContext:\n          privileged: true\n          capabilities:\n            add: [\"NET_ADMIN\",\"NET_RAW\"]\n            \n# Linux capabilities\n#  在linux中，root权限被分割成一下29中能力：\n#\n#  CAP_CHOWN:修改文件属主的权限\n#\n#  CAP_DAC_OVERRIDE:忽略文件的DAC访问限制\n#\n#  CAP_DAC_READ_SEARCH:忽略文件读及目录搜索的DAC访问限制\n#\n#  CAP_FOWNER：忽略文件属主ID必须和进程用户ID相匹配的限制\n#\n#  CAP_FSETID:允许设置文件的setuid位\n#\n#  CAP_KILL:允许对不属于自己的进程发送信号\n#\n#  CAP_SETGID:允许改变进程的组ID\n#\n#  CAP_SETUID:允许改变进程的用户ID\n#\n#  CAP_SETPCAP:允许向其他进程转移能力以及删除其他进程的能力\n#\n#  CAP_LINUX_IMMUTABLE:允许修改文件的IMMUTABLE和APPEND属性标志\n#\n#  CAP_NET_BIND_SERVICE:允许绑定到小于1024的端口\n#\n#  CAP_NET_BROADCAST:允许网络广播和多播访问\n#\n#  CAP_NET_ADMIN:允许执行网络管理任务\n#\n#  CAP_NET_RAW:允许使用原始套接字\n#\n#  CAP_IPC_LOCK:允许锁定共享内存片段\n#\n#  CAP_IPC_OWNER:忽略IPC所有权检查\n#\n#  CAP_SYS_MODULE:允许插入和删除内核模块\n#\n#  CAP_SYS_RAWIO:允许直接访问/devport,/dev/mem,/dev/kmem及原始块设备\n#\n#  CAP_SYS_CHROOT:允许使用chroot()系统调用\n#\n#  CAP_SYS_PTRACE:允许跟踪任何进程\n#\n#  CAP_SYS_PACCT:允许执行进程的BSD式审计\n#\n#  CAP_SYS_ADMIN:允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等\n#\n#  CAP_SYS_BOOT:允许重新启动系统\n#\n#  CAP_SYS_NICE:允许提升优先级及设置其他进程的优先级\n#\n#  CAP_SYS_RESOURCE:忽略资源限制\n#\n#  CAP_SYS_TIME:允许改变系统时钟\n#\n#  CAP_SYS_TTY_CONFIG:允许配置TTY设备\n#\n#  CAP_MKNOD:允许使用mknod()系统调用\n#\n#  CAP_LEASE:允许修改文件锁的FL_LEASE标志\n```\n\n## docker compose文件资源权限控制\n\n```yaml\ncontainers:\n    security_opt:\n      - apparmor:unconfined\n```\n\n## 镜像仓库\n\n```shell\n# 地址https://cr.console.aliyun.com/cn-hangzhou/instance/credentials\nregistry.cn-hangzhou.aliyuncs.com/fa\n\n\nregistry.cn-hangzhou.aliyuncs.com\n\n```\n\n## 查看docker容器\n\n```shell\n# 查询已死亡的docker容器\ndocker ps -aq -f status=dead\n# 查询已退出的docker容器\ndocker ps -aq -f status=exited\n```\n\n## 查看磁盘占用\n\n```shell\n# linux命令\ndf -h\n# Docker 的内置 CLI 指令\ndocker system df\n# 查看详情\ndocker system df -v\n```\n\n## 磁盘空间清理\n\n- [参考文章](https://blog.csdn.net/longailk/article/details/122728982)\n\n```shell\n## 通过 Docker 内置的 CLI 指令docker system prune来进行自动空间清理。\n\n# 该指令默认会清除所有如下资源：\n# 已停止的容器（container）\n# 未被任何容器所使用的卷（volume）\n# 未被任何容器所关联的网络（network）\n# 所有悬空镜像（image）。\n# 使用这个命令查看帮助 docker system prune --help\ndocker system prune -a\n\n# 删除无用的卷\ndocker volume prune\n# 删除无用的网络\ndocker network prune\n\n## 手动清除\n\n# 镜像清理\n# 删除所有悬空镜像，不删除未使用镜像：\ndocker rmi $(docker images -f \"dangling=true\" -q)\n# 删除所有未使用镜像和悬空镜像\ndocker rmi $(docker images -q)\n\n# 清理卷\n# 删除所有未被容器引用的卷\ndocker volume rm $(docker volume ls -qf dangling=true)\n\n# 容器清理\n# 删除所有已退出的容器：\ndocker rm -v $(docker ps -aq -f status=exited)\n# 删除所有状态为dead的容器\ndocker rm -v $(docker ps -aq -f status=dead)\n# 删除孤立的容器\ndocker container prune\n\n## 查找系统中的大文件【以上三步仍然不可以的时候执行】\n\n# 查找指定目录下所有大于100M的所有文件\nfind /var/lib/docker/overlay2/ -type f -size +100M -print0 | xargs -0 du -h | sort -nr\n\n## 对标准输入日志大小与数量进行限制\n# 新建或修改/etc/docker/daemon.json，添加log-dirver和log-opts参数\nvi /etc/docker/daemon.json\n    {\n       \"log-driver\":\"json-file\",\n       \"log-opts\": {\"max-size\":\"3m\", \"max-file\":\"1\"}\n    }\n# 重启docker的守护线程\nsystemctl daemon-reload\nsystemctl restart docker\n\n## 实在没办法，只有把/var目录下所有日志文件清空\nfor i in `find /var -name *.log*`;do >$i;done\n# 然后重启node节点，因为有些日志文件被占用，清空后空间仍然无法释放\n\n```\n\n## docker 工作根目录\n\n- [参考文章](https://blog.csdn.net/weixin_32820767/article/details/81196250)\n\n```shell\n## 迁移 /var/lib/docker 目录。\n# 停止docker服务。\nsystemctl stop docker\n# 创建新的docker目录，执行命令df -h,找一个大的磁盘。 我在 /home目录下面建了 /home/docker/lib目录，执行的命令是：\nmkdir -p /home/docker/lib\n# 迁移/var/lib/docker目录下面的文件到 /home/docker/lib：\nrsync -avz /var/lib/docker /home/docker/lib/\n# 配置 /etc/systemd/system/docker.service.d/devicemapper.conf。查看 devicemapper.conf 是否存在。如果不存在，就新建。\nsudo mkdir -p /etc/systemd/system/docker.service.d/\nsudo vi /etc/systemd/system/docker.service.d/devicemapper.conf\n# 然后在 devicemapper.conf 写入：（同步的时候把父文件夹一并同步过来，实际上的目录应在 /home/docker/lib/docker ）\n[Service]\nExecStart=\nExecStart=/usr/bin/dockerd  --graph=/home/docker/lib/docker\n# 重新加载 docker\nsystemctl daemon-reload\nsystemctl restart docker\nsystemctl enable docker\n# 检查Docker 的根目录.它将被更改为 /home/docker/lib/docker\n# Docker Root Dir: /home/docker/lib/docker\ndocker info\n# 再确认之前的镜像还在：\ndocker images\n# 确定容器没问题后删除/var/lib/docker/目录中的文件。\n\n# 改回去的方法：\n# 将4.5中：--graph=/home/docker/lib/docker改为--graph=/var/lib/docker\n# systemctl daemon-reload\n# systemctl restart docker\n# systemctl enable docker\n# ps：不建议改docker配置，可将/var/lib/docker迁移后重新挂载，比较保险。\n\n# /var/lib/docker拷贝到目标目录中，可以直接把目标目录mount到/var/lib/docker里。修改/etc/fstab设置为开机自动挂载，这样docker的配置文件一点都不用动了\n\n```\n\n## 利用docker run --rm 命令实现使用宿主机中没有的命令\n\n- 使用容器中的jar命令解压jar包，并将解压内容输出到挂载在宿主机中的目录里\n\n```shell\ndocker run -it --name java -v /www/temp/java:/www/temp/java openjdk:11-jdk-slim sh -c \"cd /www/temp/java && jar -xvf /www/temp/java/mall-server.jar\"\n\n```\n\n- 使用宿主机中没有的nmap命令来通过端口找IP\n\n```shell\n# 在10.0.16.*范围内找开放了50000端口的IP，并将结果输出到宿主机的output.txt文件中\ndocker run --rm --name nmap securecodebox/nmap sh -c \"nmap -p 50000 10.0.16.0/24\" > output.txt\n\n# 直接筛选已开放指定端口的内容\ndocker run --rm --name nmap securecodebox/nmap sh -c \"nmap -p 9200 10.7.7.0/24 | grep -C 5 open\"\n\n# 以下为部分结果，状态为open则对应端口被开放(即10.0.16.27则是目标IP)\n\"\nNmap scan report for 10.0.16.26\nHost is up (0.00065s latency).\n\nPORT      STATE    SERVICE\n50000/tcp filtered ibm-db2\n\nNmap scan report for 10.0.16.27\nHost is up (0.0017s latency).\n\nPORT      STATE SERVICE\n50000/tcp open  ibm-db2\n\"\n\n```\n\n## 下载、保存和加载镜像\n\n```shell\n# 1. 下载 Docker 镜像\n\n## 使用 docker pull 命令来下载 Docker 镜像，例如：\n\ndocker pull nginx:latest\n\n## 以上命令将下载 Nginx 最新版本的镜像。\n\n# 1. 保存 Docker 镜像\n\n## 使用 docker save 命令将 Docker 镜像保存为 tar 归档文件，例如：\n\ndocker save nginx:latest > nginx_latest.tar\n\n## 以上命令将保存 Nginx 最新版本的镜像为 nginx_latest.tar 文件。\n\n# 1. 加载 Docker 镜像\n\n## 使用 docker load 命令将已保存的 Docker 镜像加载到本地镜像库中，例如：\n\ndocker load < nginx_latest.tar\n\n## 以上命令将加载 nginx_latest.tar 文件中的 Nginx 最新版本镜像到本地。加载完成后，可以通过 docker images 命令查看本地镜像库中是否存在该镜像。\n```\n\n## 本地docker命令无感远程控制服务器docker\n\n```shell\n# 两种协议, 把这个配置添加到环境变量中, `~/.zshrc`和`~/.bash_profile`\n# 一种是tcp协议，需要先在服务器上开放2375端口，然后在本机上执行\n# export DOCKER_HOST=tcp://127.0.0.1:2375\n# 另一种是ssh协议，需要在本机上安装sshpass工具，然后在本机上执行(PS: AI写的, 不知道sshpass工具是啥, 我貌似没安装)\nexport DOCKER_HOST=ssh://root@23-zq.internet.company\n```\n\n- 相关文章\n  - [通过ssh协议使本地docker无感控制远程docker](https://gitee.com/LFa/doc-record/raw/f0fe47892a0ac9c4ad0c5fa908f304d63f81130d/materiel/ai/docker/%E9%80%9A%E8%BF%87ssh%E5%8D%8F%E8%AE%AE%E4%BD%BF%E6%9C%AC%E5%9C%B0docker%E6%97%A0%E6%84%9F%E6%8E%A7%E5%88%B6%E8%BF%9C%E7%A8%8Bdocker.md)\n  - [ssy_config的ssh配置](https://gitee.com/LFa/doc/raw/efd164a538c1ee1b3780aa870b0dac06864f0313/workspace/me/conf/ssh/company/ssy_config) `23-zq.internet.company`这个host来源于这个配置文件\n  \n## docker gid 查看命令\n\n[参考地址1](https://www.doubao.com/thread/w9e714164e14f12b9)\n[参考地址2](https://github.com/influxdata/sandbox/issues/79)(PS: 貌似没啥用的样子)\n\n```bash\nstat -c '%g' /var/run/docker.sock\n```\n","source":"_posts/docker/doc/docker.md","raw":"---\nlayout: default\ntitle: docker\nnav_order: 12\ndescription: docker笔记\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/docker/\"\ngrand_parent: Docker\n---\n\n# docker笔记\n\n## 安装docker\n\n```shell\n# 目前使用的方式\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nsudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n# 开机自启\nsystemctl enable docker\n# 启动docker\nsystemctl start docker\n# 配置国内镜像源(阿里镜像源)\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://ipl2fa8y.mirror.aliyuncs.com\"\n    ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n```shell\n# 目前使用的方式(网络不通了)\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum install -y docker-ce docker-ce-cli containerd.io\n```\n\n```shell\n# 使用官方安装脚本自动安装\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n# 使用国内 daocloud 一键安装命令\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n## 设置docker开机自启\n\n```shell\nsystemctl enable docker\n```\n\n## 配置docker镜像源\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://ipl2fa8y.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n```shell script\n# docker镜像源\nhttps://docker.mirrors.ustc.edu.cn\n```\n\n## 部署\n\n```shell script\n# 对性能要求高 用 --net=host(对应docker-stack.yml文件下的(service.serviceName.network_mode=host)network_mode: \"host\") ， 不用-p\n# 参考网上的测试：上次对对使用Docker的两台Redis做压力测试，A台使用-p，B台使用--net=host。但是发现A的效率只有B的1/3-2/3 ，这么大的性能影响，-p应该不适合生产环境吧？望大师们指教。谢谢。\n```\n\n## 删除空镜像\n\n```shell script\nsudo docker images | awk '{if($2==\"<none>\") print $3}' | xargs sudo docker rmi\n\n# 您需要先停止运行容器然后将其删除\ndocker stop $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\n# 对于图像，请尝试删除悬空图像\ndocker rmi $(docker images -f dangling=true -q)\n# 删除所有未被使用的镜像\ndocker image prune  -a \n```\n\n## 找镜像的地址\n\n  https://hub.docker.com/\n\n## 修改宿主机的docker配置，让其可以远程访问\n\n```shell\n# 默认,我们的linux的 docker ,IDEA 是不可以访问的,所以需要修改下配置,让我们的IDEA 可以访问\nvi /lib/systemd/system/docker.service\n# 在 其中的ExecStart=后添加配置 > tip: 2375是为Docker开启的远程访问API的端口\n-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\n\n# 刷新配置，重启服务\nsystemctl daemon‐reload  # 刷新服务\nsystemctl restart docker # 重新启动docker\ndocker start registry  # 启动registry\n\n```\n\n## docker compose文件root用户权限控制\n\n```yaml\ncontainers:\n      - name: snake\n        image: docker.io/kelysa/snake:lastest\n        imagePullPolicy: Always\n        securityContext:\n          privileged: true\n          capabilities:\n            add: [\"NET_ADMIN\",\"NET_RAW\"]\n            \n# Linux capabilities\n#  在linux中，root权限被分割成一下29中能力：\n#\n#  CAP_CHOWN:修改文件属主的权限\n#\n#  CAP_DAC_OVERRIDE:忽略文件的DAC访问限制\n#\n#  CAP_DAC_READ_SEARCH:忽略文件读及目录搜索的DAC访问限制\n#\n#  CAP_FOWNER：忽略文件属主ID必须和进程用户ID相匹配的限制\n#\n#  CAP_FSETID:允许设置文件的setuid位\n#\n#  CAP_KILL:允许对不属于自己的进程发送信号\n#\n#  CAP_SETGID:允许改变进程的组ID\n#\n#  CAP_SETUID:允许改变进程的用户ID\n#\n#  CAP_SETPCAP:允许向其他进程转移能力以及删除其他进程的能力\n#\n#  CAP_LINUX_IMMUTABLE:允许修改文件的IMMUTABLE和APPEND属性标志\n#\n#  CAP_NET_BIND_SERVICE:允许绑定到小于1024的端口\n#\n#  CAP_NET_BROADCAST:允许网络广播和多播访问\n#\n#  CAP_NET_ADMIN:允许执行网络管理任务\n#\n#  CAP_NET_RAW:允许使用原始套接字\n#\n#  CAP_IPC_LOCK:允许锁定共享内存片段\n#\n#  CAP_IPC_OWNER:忽略IPC所有权检查\n#\n#  CAP_SYS_MODULE:允许插入和删除内核模块\n#\n#  CAP_SYS_RAWIO:允许直接访问/devport,/dev/mem,/dev/kmem及原始块设备\n#\n#  CAP_SYS_CHROOT:允许使用chroot()系统调用\n#\n#  CAP_SYS_PTRACE:允许跟踪任何进程\n#\n#  CAP_SYS_PACCT:允许执行进程的BSD式审计\n#\n#  CAP_SYS_ADMIN:允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等\n#\n#  CAP_SYS_BOOT:允许重新启动系统\n#\n#  CAP_SYS_NICE:允许提升优先级及设置其他进程的优先级\n#\n#  CAP_SYS_RESOURCE:忽略资源限制\n#\n#  CAP_SYS_TIME:允许改变系统时钟\n#\n#  CAP_SYS_TTY_CONFIG:允许配置TTY设备\n#\n#  CAP_MKNOD:允许使用mknod()系统调用\n#\n#  CAP_LEASE:允许修改文件锁的FL_LEASE标志\n```\n\n## docker compose文件资源权限控制\n\n```yaml\ncontainers:\n    security_opt:\n      - apparmor:unconfined\n```\n\n## 镜像仓库\n\n```shell\n# 地址https://cr.console.aliyun.com/cn-hangzhou/instance/credentials\nregistry.cn-hangzhou.aliyuncs.com/fa\n\n\nregistry.cn-hangzhou.aliyuncs.com\n\n```\n\n## 查看docker容器\n\n```shell\n# 查询已死亡的docker容器\ndocker ps -aq -f status=dead\n# 查询已退出的docker容器\ndocker ps -aq -f status=exited\n```\n\n## 查看磁盘占用\n\n```shell\n# linux命令\ndf -h\n# Docker 的内置 CLI 指令\ndocker system df\n# 查看详情\ndocker system df -v\n```\n\n## 磁盘空间清理\n\n- [参考文章](https://blog.csdn.net/longailk/article/details/122728982)\n\n```shell\n## 通过 Docker 内置的 CLI 指令docker system prune来进行自动空间清理。\n\n# 该指令默认会清除所有如下资源：\n# 已停止的容器（container）\n# 未被任何容器所使用的卷（volume）\n# 未被任何容器所关联的网络（network）\n# 所有悬空镜像（image）。\n# 使用这个命令查看帮助 docker system prune --help\ndocker system prune -a\n\n# 删除无用的卷\ndocker volume prune\n# 删除无用的网络\ndocker network prune\n\n## 手动清除\n\n# 镜像清理\n# 删除所有悬空镜像，不删除未使用镜像：\ndocker rmi $(docker images -f \"dangling=true\" -q)\n# 删除所有未使用镜像和悬空镜像\ndocker rmi $(docker images -q)\n\n# 清理卷\n# 删除所有未被容器引用的卷\ndocker volume rm $(docker volume ls -qf dangling=true)\n\n# 容器清理\n# 删除所有已退出的容器：\ndocker rm -v $(docker ps -aq -f status=exited)\n# 删除所有状态为dead的容器\ndocker rm -v $(docker ps -aq -f status=dead)\n# 删除孤立的容器\ndocker container prune\n\n## 查找系统中的大文件【以上三步仍然不可以的时候执行】\n\n# 查找指定目录下所有大于100M的所有文件\nfind /var/lib/docker/overlay2/ -type f -size +100M -print0 | xargs -0 du -h | sort -nr\n\n## 对标准输入日志大小与数量进行限制\n# 新建或修改/etc/docker/daemon.json，添加log-dirver和log-opts参数\nvi /etc/docker/daemon.json\n    {\n       \"log-driver\":\"json-file\",\n       \"log-opts\": {\"max-size\":\"3m\", \"max-file\":\"1\"}\n    }\n# 重启docker的守护线程\nsystemctl daemon-reload\nsystemctl restart docker\n\n## 实在没办法，只有把/var目录下所有日志文件清空\nfor i in `find /var -name *.log*`;do >$i;done\n# 然后重启node节点，因为有些日志文件被占用，清空后空间仍然无法释放\n\n```\n\n## docker 工作根目录\n\n- [参考文章](https://blog.csdn.net/weixin_32820767/article/details/81196250)\n\n```shell\n## 迁移 /var/lib/docker 目录。\n# 停止docker服务。\nsystemctl stop docker\n# 创建新的docker目录，执行命令df -h,找一个大的磁盘。 我在 /home目录下面建了 /home/docker/lib目录，执行的命令是：\nmkdir -p /home/docker/lib\n# 迁移/var/lib/docker目录下面的文件到 /home/docker/lib：\nrsync -avz /var/lib/docker /home/docker/lib/\n# 配置 /etc/systemd/system/docker.service.d/devicemapper.conf。查看 devicemapper.conf 是否存在。如果不存在，就新建。\nsudo mkdir -p /etc/systemd/system/docker.service.d/\nsudo vi /etc/systemd/system/docker.service.d/devicemapper.conf\n# 然后在 devicemapper.conf 写入：（同步的时候把父文件夹一并同步过来，实际上的目录应在 /home/docker/lib/docker ）\n[Service]\nExecStart=\nExecStart=/usr/bin/dockerd  --graph=/home/docker/lib/docker\n# 重新加载 docker\nsystemctl daemon-reload\nsystemctl restart docker\nsystemctl enable docker\n# 检查Docker 的根目录.它将被更改为 /home/docker/lib/docker\n# Docker Root Dir: /home/docker/lib/docker\ndocker info\n# 再确认之前的镜像还在：\ndocker images\n# 确定容器没问题后删除/var/lib/docker/目录中的文件。\n\n# 改回去的方法：\n# 将4.5中：--graph=/home/docker/lib/docker改为--graph=/var/lib/docker\n# systemctl daemon-reload\n# systemctl restart docker\n# systemctl enable docker\n# ps：不建议改docker配置，可将/var/lib/docker迁移后重新挂载，比较保险。\n\n# /var/lib/docker拷贝到目标目录中，可以直接把目标目录mount到/var/lib/docker里。修改/etc/fstab设置为开机自动挂载，这样docker的配置文件一点都不用动了\n\n```\n\n## 利用docker run --rm 命令实现使用宿主机中没有的命令\n\n- 使用容器中的jar命令解压jar包，并将解压内容输出到挂载在宿主机中的目录里\n\n```shell\ndocker run -it --name java -v /www/temp/java:/www/temp/java openjdk:11-jdk-slim sh -c \"cd /www/temp/java && jar -xvf /www/temp/java/mall-server.jar\"\n\n```\n\n- 使用宿主机中没有的nmap命令来通过端口找IP\n\n```shell\n# 在10.0.16.*范围内找开放了50000端口的IP，并将结果输出到宿主机的output.txt文件中\ndocker run --rm --name nmap securecodebox/nmap sh -c \"nmap -p 50000 10.0.16.0/24\" > output.txt\n\n# 直接筛选已开放指定端口的内容\ndocker run --rm --name nmap securecodebox/nmap sh -c \"nmap -p 9200 10.7.7.0/24 | grep -C 5 open\"\n\n# 以下为部分结果，状态为open则对应端口被开放(即10.0.16.27则是目标IP)\n\"\nNmap scan report for 10.0.16.26\nHost is up (0.00065s latency).\n\nPORT      STATE    SERVICE\n50000/tcp filtered ibm-db2\n\nNmap scan report for 10.0.16.27\nHost is up (0.0017s latency).\n\nPORT      STATE SERVICE\n50000/tcp open  ibm-db2\n\"\n\n```\n\n## 下载、保存和加载镜像\n\n```shell\n# 1. 下载 Docker 镜像\n\n## 使用 docker pull 命令来下载 Docker 镜像，例如：\n\ndocker pull nginx:latest\n\n## 以上命令将下载 Nginx 最新版本的镜像。\n\n# 1. 保存 Docker 镜像\n\n## 使用 docker save 命令将 Docker 镜像保存为 tar 归档文件，例如：\n\ndocker save nginx:latest > nginx_latest.tar\n\n## 以上命令将保存 Nginx 最新版本的镜像为 nginx_latest.tar 文件。\n\n# 1. 加载 Docker 镜像\n\n## 使用 docker load 命令将已保存的 Docker 镜像加载到本地镜像库中，例如：\n\ndocker load < nginx_latest.tar\n\n## 以上命令将加载 nginx_latest.tar 文件中的 Nginx 最新版本镜像到本地。加载完成后，可以通过 docker images 命令查看本地镜像库中是否存在该镜像。\n```\n\n## 本地docker命令无感远程控制服务器docker\n\n```shell\n# 两种协议, 把这个配置添加到环境变量中, `~/.zshrc`和`~/.bash_profile`\n# 一种是tcp协议，需要先在服务器上开放2375端口，然后在本机上执行\n# export DOCKER_HOST=tcp://127.0.0.1:2375\n# 另一种是ssh协议，需要在本机上安装sshpass工具，然后在本机上执行(PS: AI写的, 不知道sshpass工具是啥, 我貌似没安装)\nexport DOCKER_HOST=ssh://root@23-zq.internet.company\n```\n\n- 相关文章\n  - [通过ssh协议使本地docker无感控制远程docker](https://gitee.com/LFa/doc-record/raw/f0fe47892a0ac9c4ad0c5fa908f304d63f81130d/materiel/ai/docker/%E9%80%9A%E8%BF%87ssh%E5%8D%8F%E8%AE%AE%E4%BD%BF%E6%9C%AC%E5%9C%B0docker%E6%97%A0%E6%84%9F%E6%8E%A7%E5%88%B6%E8%BF%9C%E7%A8%8Bdocker.md)\n  - [ssy_config的ssh配置](https://gitee.com/LFa/doc/raw/efd164a538c1ee1b3780aa870b0dac06864f0313/workspace/me/conf/ssh/company/ssy_config) `23-zq.internet.company`这个host来源于这个配置文件\n  \n## docker gid 查看命令\n\n[参考地址1](https://www.doubao.com/thread/w9e714164e14f12b9)\n[参考地址2](https://github.com/influxdata/sandbox/issues/79)(PS: 貌似没啥用的样子)\n\n```bash\nstat -c '%g' /var/run/docker.sock\n```\n","slug":"docker/doc/docker","published":1,"date":"2025-02-23T07:43:31.200Z","updated":"2025-02-23T07:43:31.200Z","__permalink":"/docker/doc/docker/","comments":1,"photos":[],"_id":"cm7k5rwa3000rmswsfyysg86h","content":"<h1 id=\"docker笔记\"><a href=\"#docker笔记\" class=\"headerlink\" title=\"docker笔记\"></a>docker笔记</h1><h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目前使用的方式</span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开机自启</span></span><br><span class=\"line\">systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置国内镜像源(阿里镜像源)</span></span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">        &quot;https://ipl2fa8y.mirror.aliyuncs.com&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目前使用的方式(网络不通了)</span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用官方安装脚本自动安装</span></span><br><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用国内 daocloud 一键安装命令</span></span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置docker开机自启\"><a href=\"#设置docker开机自启\" class=\"headerlink\" title=\"设置docker开机自启\"></a>设置docker开机自启</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置docker镜像源\"><a href=\"#配置docker镜像源\" class=\"headerlink\" title=\"配置docker镜像源\"></a>配置docker镜像源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://ipl2fa8y.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker镜像源</span></span><br><span class=\"line\">https://docker.mirrors.ustc.edu.cn</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">对性能要求高 用 --net=host(对应docker-stack.yml文件下的(service.serviceName.network_mode=host)network_mode: <span class=\"string\">&quot;host&quot;</span>) ， 不用-p</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参考网上的测试：上次对对使用Docker的两台Redis做压力测试，A台使用-p，B台使用--net=host。但是发现A的效率只有B的1/3-2/3 ，这么大的性能影响，-p应该不适合生产环境吧？望大师们指教。谢谢。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除空镜像\"><a href=\"#删除空镜像\" class=\"headerlink\" title=\"删除空镜像\"></a>删除空镜像</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker images | awk &#x27;&#123;if($2==&quot;&lt;none&gt;&quot;) print $3&#125;&#x27; | xargs sudo docker rmi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">您需要先停止运行容器然后将其删除</span></span><br><span class=\"line\">docker stop $(docker ps -a -q)</span><br><span class=\"line\">docker rm $(docker ps -a -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">对于图像，请尝试删除悬空图像</span></span><br><span class=\"line\">docker rmi $(docker images -f dangling=true -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有未被使用的镜像</span></span><br><span class=\"line\">docker image prune  -a </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"找镜像的地址\"><a href=\"#找镜像的地址\" class=\"headerlink\" title=\"找镜像的地址\"></a>找镜像的地址</h2><p>  <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<h2 id=\"修改宿主机的docker配置，让其可以远程访问\"><a href=\"#修改宿主机的docker配置，让其可以远程访问\" class=\"headerlink\" title=\"修改宿主机的docker配置，让其可以远程访问\"></a>修改宿主机的docker配置，让其可以远程访问</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认,我们的linux的 docker ,IDEA 是不可以访问的,所以需要修改下配置,让我们的IDEA 可以访问</span></span><br><span class=\"line\">vi /lib/systemd/system/docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 其中的ExecStart=后添加配置 &gt; tip: 2375是为Docker开启的远程访问API的端口</span></span><br><span class=\"line\">-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">刷新配置，重启服务</span></span><br><span class=\"line\">systemctl daemon‐reload  # 刷新服务</span><br><span class=\"line\">systemctl restart docker # 重新启动docker</span><br><span class=\"line\">docker start registry  # 启动registry</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-compose文件root用户权限控制\"><a href=\"#docker-compose文件root用户权限控制\" class=\"headerlink\" title=\"docker compose文件root用户权限控制\"></a>docker compose文件root用户权限控制</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">snake</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">docker.io/kelysa/snake:lastest</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">capabilities:</span></span><br><span class=\"line\">            <span class=\"attr\">add:</span> [<span class=\"string\">&quot;NET_ADMIN&quot;</span>,<span class=\"string\">&quot;NET_RAW&quot;</span>]</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\"># Linux capabilities</span></span><br><span class=\"line\"><span class=\"comment\">#  在linux中，root权限被分割成一下29中能力：</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_CHOWN:修改文件属主的权限</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_DAC_OVERRIDE:忽略文件的DAC访问限制</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_DAC_READ_SEARCH:忽略文件读及目录搜索的DAC访问限制</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_FOWNER：忽略文件属主ID必须和进程用户ID相匹配的限制</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_FSETID:允许设置文件的setuid位</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_KILL:允许对不属于自己的进程发送信号</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SETGID:允许改变进程的组ID</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SETUID:允许改变进程的用户ID</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SETPCAP:允许向其他进程转移能力以及删除其他进程的能力</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_LINUX_IMMUTABLE:允许修改文件的IMMUTABLE和APPEND属性标志</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_NET_BIND_SERVICE:允许绑定到小于1024的端口</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_NET_BROADCAST:允许网络广播和多播访问</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_NET_ADMIN:允许执行网络管理任务</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_NET_RAW:允许使用原始套接字</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_IPC_LOCK:允许锁定共享内存片段</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_IPC_OWNER:忽略IPC所有权检查</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_MODULE:允许插入和删除内核模块</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_RAWIO:允许直接访问/devport,/dev/mem,/dev/kmem及原始块设备</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_CHROOT:允许使用chroot()系统调用</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_PTRACE:允许跟踪任何进程</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_PACCT:允许执行进程的BSD式审计</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_ADMIN:允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_BOOT:允许重新启动系统</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_NICE:允许提升优先级及设置其他进程的优先级</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_RESOURCE:忽略资源限制</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_TIME:允许改变系统时钟</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_TTY_CONFIG:允许配置TTY设备</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_MKNOD:允许使用mknod()系统调用</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_LEASE:允许修改文件锁的FL_LEASE标志</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-compose文件资源权限控制\"><a href=\"#docker-compose文件资源权限控制\" class=\"headerlink\" title=\"docker compose文件资源权限控制\"></a>docker compose文件资源权限控制</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"attr\">security_opt:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apparmor:unconfined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">地址https://cr.console.aliyun.com/cn-hangzhou/instance/credentials</span></span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/fa</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看docker容器\"><a href=\"#查看docker容器\" class=\"headerlink\" title=\"查看docker容器\"></a>查看docker容器</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询已死亡的docker容器</span></span><br><span class=\"line\">docker ps -aq -f status=dead</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询已退出的docker容器</span></span><br><span class=\"line\">docker ps -aq -f status=exited</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看磁盘占用\"><a href=\"#查看磁盘占用\" class=\"headerlink\" title=\"查看磁盘占用\"></a>查看磁盘占用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">linux命令</span></span><br><span class=\"line\">df -h</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Docker 的内置 CLI 指令</span></span><br><span class=\"line\">docker system df</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看详情</span></span><br><span class=\"line\">docker system df -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"磁盘空间清理\"><a href=\"#磁盘空间清理\" class=\"headerlink\" title=\"磁盘空间清理\"></a>磁盘空间清理</h2><ul>\n<li><a href=\"https://blog.csdn.net/longailk/article/details/122728982\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 通过 Docker 内置的 CLI 指令docker system prune来进行自动空间清理。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">该指令默认会清除所有如下资源：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">已停止的容器（container）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">未被任何容器所使用的卷（volume）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">未被任何容器所关联的网络（network）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有悬空镜像（image）。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用这个命令查看帮助 docker system prune --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">docker system prune -a</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除无用的卷</span></span><br><span class=\"line\">docker volume prune</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除无用的网络</span></span><br><span class=\"line\">docker network prune</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 手动清除</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">镜像清理</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有悬空镜像，不删除未使用镜像：</span></span><br><span class=\"line\">docker rmi $(docker images -f &quot;dangling=true&quot; -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有未使用镜像和悬空镜像</span></span><br><span class=\"line\">docker rmi $(docker images -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清理卷</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有未被容器引用的卷</span></span><br><span class=\"line\">docker volume rm $(docker volume ls -qf dangling=true)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">容器清理</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有已退出的容器：</span></span><br><span class=\"line\">docker rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有状态为dead的容器</span></span><br><span class=\"line\">docker rm -v $(docker ps -aq -f status=dead)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除孤立的容器</span></span><br><span class=\"line\">docker container prune</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查找系统中的大文件【以上三步仍然不可以的时候执行】</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查找指定目录下所有大于100M的所有文件</span></span><br><span class=\"line\">find /var/lib/docker/overlay2/ -type f -size +100M -print0 | xargs -0 du -h | sort -nr</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 对标准输入日志大小与数量进行限制</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建或修改/etc/docker/daemon.json，添加log-dirver和log-opts参数</span></span><br><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       &quot;log-driver&quot;:&quot;json-file&quot;,</span><br><span class=\"line\">       &quot;log-opts&quot;: &#123;&quot;max-size&quot;:&quot;3m&quot;, &quot;max-file&quot;:&quot;1&quot;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启docker的守护线程</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 实在没办法，只有把/var目录下所有日志文件清空</span></span></span><br><span class=\"line\">for i in `find /var -name *.log*`;do &gt;$i;done</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后重启node节点，因为有些日志文件被占用，清空后空间仍然无法释放</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-工作根目录\"><a href=\"#docker-工作根目录\" class=\"headerlink\" title=\"docker 工作根目录\"></a>docker 工作根目录</h2><ul>\n<li><a href=\"https://blog.csdn.net/weixin_32820767/article/details/81196250\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 迁移 /var/lib/docker 目录。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止docker服务。</span></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建新的docker目录，执行命令<span class=\"built_in\">df</span> -h,找一个大的磁盘。 我在 /home目录下面建了 /home/docker/lib目录，执行的命令是：</span></span><br><span class=\"line\">mkdir -p /home/docker/lib</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">迁移/var/lib/docker目录下面的文件到 /home/docker/lib：</span></span><br><span class=\"line\">rsync -avz /var/lib/docker /home/docker/lib/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置 /etc/systemd/system/docker.service.d/devicemapper.conf。查看 devicemapper.conf 是否存在。如果不存在，就新建。</span></span><br><span class=\"line\">sudo mkdir -p /etc/systemd/system/docker.service.d/</span><br><span class=\"line\">sudo vi /etc/systemd/system/docker.service.d/devicemapper.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后在 devicemapper.conf 写入：（同步的时候把父文件夹一并同步过来，实际上的目录应在 /home/docker/lib/docker ）</span></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd  --graph=/home/docker/lib/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重新加载 docker</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\">systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查Docker 的根目录.它将被更改为 /home/docker/lib/docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Docker Root Dir: /home/docker/lib/docker</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">再确认之前的镜像还在：</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">确定容器没问题后删除/var/lib/docker/目录中的文件。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">改回去的方法：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将4.5中：--graph=/home/docker/lib/docker改为--graph=/var/lib/docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemctl daemon-reload</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemctl restart docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemctl <span class=\"built_in\">enable</span> docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ps：不建议改docker配置，可将/var/lib/docker迁移后重新挂载，比较保险。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/var/lib/docker拷贝到目标目录中，可以直接把目标目录mount到/var/lib/docker里。修改/etc/fstab设置为开机自动挂载，这样docker的配置文件一点都不用动了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"利用docker-run-–rm-命令实现使用宿主机中没有的命令\"><a href=\"#利用docker-run-–rm-命令实现使用宿主机中没有的命令\" class=\"headerlink\" title=\"利用docker run –rm 命令实现使用宿主机中没有的命令\"></a>利用docker run –rm 命令实现使用宿主机中没有的命令</h2><ul>\n<li>使用容器中的jar命令解压jar包，并将解压内容输出到挂载在宿主机中的目录里</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name java -v /www/temp/java:/www/temp/java openjdk:11-jdk-slim sh -c &quot;cd /www/temp/java &amp;&amp; jar -xvf /www/temp/java/mall-server.jar&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用宿主机中没有的nmap命令来通过端口找IP</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在10.0.16.*范围内找开放了50000端口的IP，并将结果输出到宿主机的output.txt文件中</span></span><br><span class=\"line\">docker run --rm --name nmap securecodebox/nmap sh -c &quot;nmap -p 50000 10.0.16.0/24&quot; &gt; output.txt</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接筛选已开放指定端口的内容</span></span><br><span class=\"line\">docker run --rm --name nmap securecodebox/nmap sh -c &quot;nmap -p 9200 10.7.7.0/24 | grep -C 5 open&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以下为部分结果，状态为open则对应端口被开放(即10.0.16.27则是目标IP)</span></span><br><span class=\"line\">&quot;</span><br><span class=\"line\">Nmap scan report for 10.0.16.26</span><br><span class=\"line\">Host is up (0.00065s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT      STATE    SERVICE</span><br><span class=\"line\">50000/tcp filtered ibm-db2</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap scan report for 10.0.16.27</span><br><span class=\"line\">Host is up (0.0017s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT      STATE SERVICE</span><br><span class=\"line\">50000/tcp open  ibm-db2</span><br><span class=\"line\">&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载、保存和加载镜像\"><a href=\"#下载、保存和加载镜像\" class=\"headerlink\" title=\"下载、保存和加载镜像\"></a>下载、保存和加载镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 下载 Docker 镜像</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 使用 docker pull 命令来下载 Docker 镜像，例如：</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">docker pull nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 以上命令将下载 Nginx 最新版本的镜像。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 保存 Docker 镜像</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 使用 docker save 命令将 Docker 镜像保存为 tar 归档文件，例如：</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">docker save nginx:latest &gt; nginx_latest.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 以上命令将保存 Nginx 最新版本的镜像为 nginx_latest.tar 文件。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 加载 Docker 镜像</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 使用 docker load 命令将已保存的 Docker 镜像加载到本地镜像库中，例如：</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">docker load &lt; nginx_latest.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 以上命令将加载 nginx_latest.tar 文件中的 Nginx 最新版本镜像到本地。加载完成后，可以通过 docker images 命令查看本地镜像库中是否存在该镜像。</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地docker命令无感远程控制服务器docker\"><a href=\"#本地docker命令无感远程控制服务器docker\" class=\"headerlink\" title=\"本地docker命令无感远程控制服务器docker\"></a>本地docker命令无感远程控制服务器docker</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">两种协议, 把这个配置添加到环境变量中, `~/.zshrc`和`~/.bash_profile`</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">一种是tcp协议，需要先在服务器上开放2375端口，然后在本机上执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">export</span> DOCKER_HOST=tcp://127.0.0.1:2375</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">另一种是ssh协议，需要在本机上安装sshpass工具，然后在本机上执行(PS: AI写的, 不知道sshpass工具是啥, 我貌似没安装)</span></span><br><span class=\"line\">export DOCKER_HOST=ssh://root@23-zq.internet.company</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>相关文章<ul>\n<li><a href=\"https://gitee.com/LFa/doc-record/raw/f0fe47892a0ac9c4ad0c5fa908f304d63f81130d/materiel/ai/docker/%E9%80%9A%E8%BF%87ssh%E5%8D%8F%E8%AE%AE%E4%BD%BF%E6%9C%AC%E5%9C%B0docker%E6%97%A0%E6%84%9F%E6%8E%A7%E5%88%B6%E8%BF%9C%E7%A8%8Bdocker.md\">通过ssh协议使本地docker无感控制远程docker</a></li>\n<li><a href=\"https://gitee.com/LFa/doc/raw/efd164a538c1ee1b3780aa870b0dac06864f0313/workspace/me/conf/ssh/company/ssy_config\">ssy_config的ssh配置</a> <code>23-zq.internet.company</code>这个host来源于这个配置文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"docker-gid-查看命令\"><a href=\"#docker-gid-查看命令\" class=\"headerlink\" title=\"docker gid 查看命令\"></a>docker gid 查看命令</h2><p><a href=\"https://www.doubao.com/thread/w9e714164e14f12b9\">参考地址1</a><br><a href=\"https://github.com/influxdata/sandbox/issues/79\">参考地址2</a>(PS: 貌似没啥用的样子)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">&#x27;%g&#x27;</span> /var/run/docker.sock</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker笔记\"><a href=\"#docker笔记\" class=\"headerlink\" title=\"docker笔记\"></a>docker笔记</h1><h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目前使用的方式</span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开机自启</span></span><br><span class=\"line\">systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置国内镜像源(阿里镜像源)</span></span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">        &quot;https://ipl2fa8y.mirror.aliyuncs.com&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目前使用的方式(网络不通了)</span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用官方安装脚本自动安装</span></span><br><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用国内 daocloud 一键安装命令</span></span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置docker开机自启\"><a href=\"#设置docker开机自启\" class=\"headerlink\" title=\"设置docker开机自启\"></a>设置docker开机自启</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置docker镜像源\"><a href=\"#配置docker镜像源\" class=\"headerlink\" title=\"配置docker镜像源\"></a>配置docker镜像源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://ipl2fa8y.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker镜像源</span></span><br><span class=\"line\">https://docker.mirrors.ustc.edu.cn</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">对性能要求高 用 --net=host(对应docker-stack.yml文件下的(service.serviceName.network_mode=host)network_mode: <span class=\"string\">&quot;host&quot;</span>) ， 不用-p</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参考网上的测试：上次对对使用Docker的两台Redis做压力测试，A台使用-p，B台使用--net=host。但是发现A的效率只有B的1/3-2/3 ，这么大的性能影响，-p应该不适合生产环境吧？望大师们指教。谢谢。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除空镜像\"><a href=\"#删除空镜像\" class=\"headerlink\" title=\"删除空镜像\"></a>删除空镜像</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker images | awk &#x27;&#123;if($2==&quot;&lt;none&gt;&quot;) print $3&#125;&#x27; | xargs sudo docker rmi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">您需要先停止运行容器然后将其删除</span></span><br><span class=\"line\">docker stop $(docker ps -a -q)</span><br><span class=\"line\">docker rm $(docker ps -a -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">对于图像，请尝试删除悬空图像</span></span><br><span class=\"line\">docker rmi $(docker images -f dangling=true -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有未被使用的镜像</span></span><br><span class=\"line\">docker image prune  -a </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"找镜像的地址\"><a href=\"#找镜像的地址\" class=\"headerlink\" title=\"找镜像的地址\"></a>找镜像的地址</h2><p>  <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<h2 id=\"修改宿主机的docker配置，让其可以远程访问\"><a href=\"#修改宿主机的docker配置，让其可以远程访问\" class=\"headerlink\" title=\"修改宿主机的docker配置，让其可以远程访问\"></a>修改宿主机的docker配置，让其可以远程访问</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认,我们的linux的 docker ,IDEA 是不可以访问的,所以需要修改下配置,让我们的IDEA 可以访问</span></span><br><span class=\"line\">vi /lib/systemd/system/docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 其中的ExecStart=后添加配置 &gt; tip: 2375是为Docker开启的远程访问API的端口</span></span><br><span class=\"line\">-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">刷新配置，重启服务</span></span><br><span class=\"line\">systemctl daemon‐reload  # 刷新服务</span><br><span class=\"line\">systemctl restart docker # 重新启动docker</span><br><span class=\"line\">docker start registry  # 启动registry</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-compose文件root用户权限控制\"><a href=\"#docker-compose文件root用户权限控制\" class=\"headerlink\" title=\"docker compose文件root用户权限控制\"></a>docker compose文件root用户权限控制</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">snake</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">docker.io/kelysa/snake:lastest</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">capabilities:</span></span><br><span class=\"line\">            <span class=\"attr\">add:</span> [<span class=\"string\">&quot;NET_ADMIN&quot;</span>,<span class=\"string\">&quot;NET_RAW&quot;</span>]</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\"># Linux capabilities</span></span><br><span class=\"line\"><span class=\"comment\">#  在linux中，root权限被分割成一下29中能力：</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_CHOWN:修改文件属主的权限</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_DAC_OVERRIDE:忽略文件的DAC访问限制</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_DAC_READ_SEARCH:忽略文件读及目录搜索的DAC访问限制</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_FOWNER：忽略文件属主ID必须和进程用户ID相匹配的限制</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_FSETID:允许设置文件的setuid位</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_KILL:允许对不属于自己的进程发送信号</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SETGID:允许改变进程的组ID</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SETUID:允许改变进程的用户ID</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SETPCAP:允许向其他进程转移能力以及删除其他进程的能力</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_LINUX_IMMUTABLE:允许修改文件的IMMUTABLE和APPEND属性标志</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_NET_BIND_SERVICE:允许绑定到小于1024的端口</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_NET_BROADCAST:允许网络广播和多播访问</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_NET_ADMIN:允许执行网络管理任务</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_NET_RAW:允许使用原始套接字</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_IPC_LOCK:允许锁定共享内存片段</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_IPC_OWNER:忽略IPC所有权检查</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_MODULE:允许插入和删除内核模块</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_RAWIO:允许直接访问/devport,/dev/mem,/dev/kmem及原始块设备</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_CHROOT:允许使用chroot()系统调用</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_PTRACE:允许跟踪任何进程</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_PACCT:允许执行进程的BSD式审计</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_ADMIN:允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_BOOT:允许重新启动系统</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_NICE:允许提升优先级及设置其他进程的优先级</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_RESOURCE:忽略资源限制</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_TIME:允许改变系统时钟</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_SYS_TTY_CONFIG:允许配置TTY设备</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_MKNOD:允许使用mknod()系统调用</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  CAP_LEASE:允许修改文件锁的FL_LEASE标志</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-compose文件资源权限控制\"><a href=\"#docker-compose文件资源权限控制\" class=\"headerlink\" title=\"docker compose文件资源权限控制\"></a>docker compose文件资源权限控制</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"attr\">security_opt:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apparmor:unconfined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">地址https://cr.console.aliyun.com/cn-hangzhou/instance/credentials</span></span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/fa</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看docker容器\"><a href=\"#查看docker容器\" class=\"headerlink\" title=\"查看docker容器\"></a>查看docker容器</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询已死亡的docker容器</span></span><br><span class=\"line\">docker ps -aq -f status=dead</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询已退出的docker容器</span></span><br><span class=\"line\">docker ps -aq -f status=exited</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看磁盘占用\"><a href=\"#查看磁盘占用\" class=\"headerlink\" title=\"查看磁盘占用\"></a>查看磁盘占用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">linux命令</span></span><br><span class=\"line\">df -h</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Docker 的内置 CLI 指令</span></span><br><span class=\"line\">docker system df</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看详情</span></span><br><span class=\"line\">docker system df -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"磁盘空间清理\"><a href=\"#磁盘空间清理\" class=\"headerlink\" title=\"磁盘空间清理\"></a>磁盘空间清理</h2><ul>\n<li><a href=\"https://blog.csdn.net/longailk/article/details/122728982\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 通过 Docker 内置的 CLI 指令docker system prune来进行自动空间清理。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">该指令默认会清除所有如下资源：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">已停止的容器（container）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">未被任何容器所使用的卷（volume）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">未被任何容器所关联的网络（network）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有悬空镜像（image）。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用这个命令查看帮助 docker system prune --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">docker system prune -a</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除无用的卷</span></span><br><span class=\"line\">docker volume prune</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除无用的网络</span></span><br><span class=\"line\">docker network prune</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 手动清除</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">镜像清理</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有悬空镜像，不删除未使用镜像：</span></span><br><span class=\"line\">docker rmi $(docker images -f &quot;dangling=true&quot; -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有未使用镜像和悬空镜像</span></span><br><span class=\"line\">docker rmi $(docker images -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清理卷</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有未被容器引用的卷</span></span><br><span class=\"line\">docker volume rm $(docker volume ls -qf dangling=true)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">容器清理</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有已退出的容器：</span></span><br><span class=\"line\">docker rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有状态为dead的容器</span></span><br><span class=\"line\">docker rm -v $(docker ps -aq -f status=dead)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除孤立的容器</span></span><br><span class=\"line\">docker container prune</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查找系统中的大文件【以上三步仍然不可以的时候执行】</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查找指定目录下所有大于100M的所有文件</span></span><br><span class=\"line\">find /var/lib/docker/overlay2/ -type f -size +100M -print0 | xargs -0 du -h | sort -nr</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 对标准输入日志大小与数量进行限制</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建或修改/etc/docker/daemon.json，添加log-dirver和log-opts参数</span></span><br><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       &quot;log-driver&quot;:&quot;json-file&quot;,</span><br><span class=\"line\">       &quot;log-opts&quot;: &#123;&quot;max-size&quot;:&quot;3m&quot;, &quot;max-file&quot;:&quot;1&quot;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启docker的守护线程</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 实在没办法，只有把/var目录下所有日志文件清空</span></span></span><br><span class=\"line\">for i in `find /var -name *.log*`;do &gt;$i;done</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后重启node节点，因为有些日志文件被占用，清空后空间仍然无法释放</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-工作根目录\"><a href=\"#docker-工作根目录\" class=\"headerlink\" title=\"docker 工作根目录\"></a>docker 工作根目录</h2><ul>\n<li><a href=\"https://blog.csdn.net/weixin_32820767/article/details/81196250\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 迁移 /var/lib/docker 目录。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止docker服务。</span></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建新的docker目录，执行命令<span class=\"built_in\">df</span> -h,找一个大的磁盘。 我在 /home目录下面建了 /home/docker/lib目录，执行的命令是：</span></span><br><span class=\"line\">mkdir -p /home/docker/lib</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">迁移/var/lib/docker目录下面的文件到 /home/docker/lib：</span></span><br><span class=\"line\">rsync -avz /var/lib/docker /home/docker/lib/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置 /etc/systemd/system/docker.service.d/devicemapper.conf。查看 devicemapper.conf 是否存在。如果不存在，就新建。</span></span><br><span class=\"line\">sudo mkdir -p /etc/systemd/system/docker.service.d/</span><br><span class=\"line\">sudo vi /etc/systemd/system/docker.service.d/devicemapper.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后在 devicemapper.conf 写入：（同步的时候把父文件夹一并同步过来，实际上的目录应在 /home/docker/lib/docker ）</span></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd  --graph=/home/docker/lib/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重新加载 docker</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\">systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查Docker 的根目录.它将被更改为 /home/docker/lib/docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Docker Root Dir: /home/docker/lib/docker</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">再确认之前的镜像还在：</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">确定容器没问题后删除/var/lib/docker/目录中的文件。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">改回去的方法：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将4.5中：--graph=/home/docker/lib/docker改为--graph=/var/lib/docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemctl daemon-reload</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemctl restart docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemctl <span class=\"built_in\">enable</span> docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ps：不建议改docker配置，可将/var/lib/docker迁移后重新挂载，比较保险。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/var/lib/docker拷贝到目标目录中，可以直接把目标目录mount到/var/lib/docker里。修改/etc/fstab设置为开机自动挂载，这样docker的配置文件一点都不用动了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"利用docker-run-–rm-命令实现使用宿主机中没有的命令\"><a href=\"#利用docker-run-–rm-命令实现使用宿主机中没有的命令\" class=\"headerlink\" title=\"利用docker run –rm 命令实现使用宿主机中没有的命令\"></a>利用docker run –rm 命令实现使用宿主机中没有的命令</h2><ul>\n<li>使用容器中的jar命令解压jar包，并将解压内容输出到挂载在宿主机中的目录里</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name java -v /www/temp/java:/www/temp/java openjdk:11-jdk-slim sh -c &quot;cd /www/temp/java &amp;&amp; jar -xvf /www/temp/java/mall-server.jar&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用宿主机中没有的nmap命令来通过端口找IP</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在10.0.16.*范围内找开放了50000端口的IP，并将结果输出到宿主机的output.txt文件中</span></span><br><span class=\"line\">docker run --rm --name nmap securecodebox/nmap sh -c &quot;nmap -p 50000 10.0.16.0/24&quot; &gt; output.txt</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接筛选已开放指定端口的内容</span></span><br><span class=\"line\">docker run --rm --name nmap securecodebox/nmap sh -c &quot;nmap -p 9200 10.7.7.0/24 | grep -C 5 open&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以下为部分结果，状态为open则对应端口被开放(即10.0.16.27则是目标IP)</span></span><br><span class=\"line\">&quot;</span><br><span class=\"line\">Nmap scan report for 10.0.16.26</span><br><span class=\"line\">Host is up (0.00065s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT      STATE    SERVICE</span><br><span class=\"line\">50000/tcp filtered ibm-db2</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap scan report for 10.0.16.27</span><br><span class=\"line\">Host is up (0.0017s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT      STATE SERVICE</span><br><span class=\"line\">50000/tcp open  ibm-db2</span><br><span class=\"line\">&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载、保存和加载镜像\"><a href=\"#下载、保存和加载镜像\" class=\"headerlink\" title=\"下载、保存和加载镜像\"></a>下载、保存和加载镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 下载 Docker 镜像</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 使用 docker pull 命令来下载 Docker 镜像，例如：</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">docker pull nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 以上命令将下载 Nginx 最新版本的镜像。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 保存 Docker 镜像</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 使用 docker save 命令将 Docker 镜像保存为 tar 归档文件，例如：</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">docker save nginx:latest &gt; nginx_latest.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 以上命令将保存 Nginx 最新版本的镜像为 nginx_latest.tar 文件。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 加载 Docker 镜像</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 使用 docker load 命令将已保存的 Docker 镜像加载到本地镜像库中，例如：</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">docker load &lt; nginx_latest.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 以上命令将加载 nginx_latest.tar 文件中的 Nginx 最新版本镜像到本地。加载完成后，可以通过 docker images 命令查看本地镜像库中是否存在该镜像。</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地docker命令无感远程控制服务器docker\"><a href=\"#本地docker命令无感远程控制服务器docker\" class=\"headerlink\" title=\"本地docker命令无感远程控制服务器docker\"></a>本地docker命令无感远程控制服务器docker</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">两种协议, 把这个配置添加到环境变量中, `~/.zshrc`和`~/.bash_profile`</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">一种是tcp协议，需要先在服务器上开放2375端口，然后在本机上执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">export</span> DOCKER_HOST=tcp://127.0.0.1:2375</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">另一种是ssh协议，需要在本机上安装sshpass工具，然后在本机上执行(PS: AI写的, 不知道sshpass工具是啥, 我貌似没安装)</span></span><br><span class=\"line\">export DOCKER_HOST=ssh://root@23-zq.internet.company</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>相关文章<ul>\n<li><a href=\"https://gitee.com/LFa/doc-record/raw/f0fe47892a0ac9c4ad0c5fa908f304d63f81130d/materiel/ai/docker/%E9%80%9A%E8%BF%87ssh%E5%8D%8F%E8%AE%AE%E4%BD%BF%E6%9C%AC%E5%9C%B0docker%E6%97%A0%E6%84%9F%E6%8E%A7%E5%88%B6%E8%BF%9C%E7%A8%8Bdocker.md\">通过ssh协议使本地docker无感控制远程docker</a></li>\n<li><a href=\"https://gitee.com/LFa/doc/raw/efd164a538c1ee1b3780aa870b0dac06864f0313/workspace/me/conf/ssh/company/ssy_config\">ssy_config的ssh配置</a> <code>23-zq.internet.company</code>这个host来源于这个配置文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"docker-gid-查看命令\"><a href=\"#docker-gid-查看命令\" class=\"headerlink\" title=\"docker gid 查看命令\"></a>docker gid 查看命令</h2><p><a href=\"https://www.doubao.com/thread/w9e714164e14f12b9\">参考地址1</a><br><a href=\"https://github.com/influxdata/sandbox/issues/79\">参考地址2</a>(PS: 貌似没啥用的样子)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">&#x27;%g&#x27;</span> /var/run/docker.sock</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"dockerfile","nav_order":12,"description":"dockerfile的构建命令查看(以zk镜像为示例)```shell 查看构建过程的命令docker history a10 可以查看到zk在使用dockerfile构建镜像时，设置了以下docker-entrypoint.sh文件中需要使用到的环境变量，相当于给了环境变量一个默认值，可在使用该镜像启动容器时修改``` docker-entrypoint.sh文件参考(来自zk容器)```shell!/bin/bash","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n## dockerfile的构建命令查看(以zk镜像为示例)\n```shell\n# 查看构建过程的命令\ndocker history a10\n# 可以查看到zk在使用dockerfile构建镜像时，设置了以下docker-entrypoint.sh文件中需要使用到的环境变量，相当于给了环境变量一个默认值，可在使用该镜像启动容器时修改\n```\n## docker-entrypoint.sh文件参考(来自zk容器)\n```shell\n#!/bin/bash\n\nset -e\n\n# Allow the container to be started with `--user`\nif [[ \"$1\" = 'zkServer.sh' && \"$(id -u)\" = '0' ]]; then\n    chown -R zookeeper \"$ZOO_DATA_DIR\" \"$ZOO_DATA_LOG_DIR\" \"$ZOO_LOG_DIR\"\n    exec gosu zookeeper \"$0\" \"$@\"\nfi\n\n# Generate the config only if it doesn't exist\nif [[ ! -f \"$ZOO_CONF_DIR/zoo.cfg\" ]]; then\n    CONFIG=\"$ZOO_CONF_DIR/zoo.cfg\"\n    {\n        echo \"dataDir=$ZOO_DATA_DIR\"\n        echo \"dataLogDir=$ZOO_DATA_LOG_DIR\"\n\n        echo \"tickTime=$ZOO_TICK_TIME\"\n        echo \"initLimit=$ZOO_INIT_LIMIT\"\n        echo \"syncLimit=$ZOO_SYNC_LIMIT\"\n\n        echo \"autopurge.snapRetainCount=$ZOO_AUTOPURGE_SNAPRETAINCOUNT\"\n        echo \"autopurge.purgeInterval=$ZOO_AUTOPURGE_PURGEINTERVAL\"\n        echo \"maxClientCnxns=$ZOO_MAX_CLIENT_CNXNS\"\n        echo \"standaloneEnabled=$ZOO_STANDALONE_ENABLED\"\n        echo \"admin.enableServer=$ZOO_ADMINSERVER_ENABLED\"\n    } >> \"$CONFIG\"\n    if [[ -z $ZOO_SERVERS ]]; then\n      ZOO_SERVERS=\"server.1=localhost:2888:3888;2181\"\n    fi\n\n    for server in $ZOO_SERVERS; do\n        echo \"$server\" >> \"$CONFIG\"\n    done\n\n    if [[ -n $ZOO_4LW_COMMANDS_WHITELIST ]]; then\n        echo \"4lw.commands.whitelist=$ZOO_4LW_COMMANDS_WHITELIST\" >> \"$CONFIG\"\n    fi\n\n    for cfg_extra_entry in $ZOO_CFG_EXTRA; do\n        echo \"$cfg_extra_entry\" >> \"$CONFIG\"\n    done\nfi\n\n# Write myid only if it doesn't exist\nif [[ ! -f \"$ZOO_DATA_DIR/myid\" ]]; then\n    echo \"${ZOO_MY_ID:-1}\" > \"$ZOO_DATA_DIR/myid\"\nfi\n\nexec \"$@\"\n```\n","source":"_posts/docker/doc/dockerfile.md","raw":"---\nlayout: default\ntitle: dockerfile\nnav_order: 12\ndescription: dockerfile的构建命令查看(以zk镜像为示例)```shell 查看构建过程的命令docker history a10 可以查看到zk在使用dockerfile构建镜像时，设置了以下docker-entrypoint.sh文件中需要使用到的环境变量，相当于给了环境变量一个默认值，可在使用该镜像启动容器时修改```\n  docker-entrypoint.sh文件参考(来自zk容器)```shell!/bin/bash\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/dockerfile/\"\ngrand_parent: Docker\n---\n\n## dockerfile的构建命令查看(以zk镜像为示例)\n```shell\n# 查看构建过程的命令\ndocker history a10\n# 可以查看到zk在使用dockerfile构建镜像时，设置了以下docker-entrypoint.sh文件中需要使用到的环境变量，相当于给了环境变量一个默认值，可在使用该镜像启动容器时修改\n```\n## docker-entrypoint.sh文件参考(来自zk容器)\n```shell\n#!/bin/bash\n\nset -e\n\n# Allow the container to be started with `--user`\nif [[ \"$1\" = 'zkServer.sh' && \"$(id -u)\" = '0' ]]; then\n    chown -R zookeeper \"$ZOO_DATA_DIR\" \"$ZOO_DATA_LOG_DIR\" \"$ZOO_LOG_DIR\"\n    exec gosu zookeeper \"$0\" \"$@\"\nfi\n\n# Generate the config only if it doesn't exist\nif [[ ! -f \"$ZOO_CONF_DIR/zoo.cfg\" ]]; then\n    CONFIG=\"$ZOO_CONF_DIR/zoo.cfg\"\n    {\n        echo \"dataDir=$ZOO_DATA_DIR\"\n        echo \"dataLogDir=$ZOO_DATA_LOG_DIR\"\n\n        echo \"tickTime=$ZOO_TICK_TIME\"\n        echo \"initLimit=$ZOO_INIT_LIMIT\"\n        echo \"syncLimit=$ZOO_SYNC_LIMIT\"\n\n        echo \"autopurge.snapRetainCount=$ZOO_AUTOPURGE_SNAPRETAINCOUNT\"\n        echo \"autopurge.purgeInterval=$ZOO_AUTOPURGE_PURGEINTERVAL\"\n        echo \"maxClientCnxns=$ZOO_MAX_CLIENT_CNXNS\"\n        echo \"standaloneEnabled=$ZOO_STANDALONE_ENABLED\"\n        echo \"admin.enableServer=$ZOO_ADMINSERVER_ENABLED\"\n    } >> \"$CONFIG\"\n    if [[ -z $ZOO_SERVERS ]]; then\n      ZOO_SERVERS=\"server.1=localhost:2888:3888;2181\"\n    fi\n\n    for server in $ZOO_SERVERS; do\n        echo \"$server\" >> \"$CONFIG\"\n    done\n\n    if [[ -n $ZOO_4LW_COMMANDS_WHITELIST ]]; then\n        echo \"4lw.commands.whitelist=$ZOO_4LW_COMMANDS_WHITELIST\" >> \"$CONFIG\"\n    fi\n\n    for cfg_extra_entry in $ZOO_CFG_EXTRA; do\n        echo \"$cfg_extra_entry\" >> \"$CONFIG\"\n    done\nfi\n\n# Write myid only if it doesn't exist\nif [[ ! -f \"$ZOO_DATA_DIR/myid\" ]]; then\n    echo \"${ZOO_MY_ID:-1}\" > \"$ZOO_DATA_DIR/myid\"\nfi\n\nexec \"$@\"\n```\n","slug":"docker/doc/dockerfile","published":1,"date":"2025-02-23T07:43:31.174Z","updated":"2025-02-23T07:43:31.174Z","__permalink":"/docker/doc/dockerfile/","comments":1,"photos":[],"_id":"cm7k5rwa3000smswsageocpnj","content":"<h2 id=\"dockerfile的构建命令查看-以zk镜像为示例\"><a href=\"#dockerfile的构建命令查看-以zk镜像为示例\" class=\"headerlink\" title=\"dockerfile的构建命令查看(以zk镜像为示例)\"></a>dockerfile的构建命令查看(以zk镜像为示例)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看构建过程的命令</span></span><br><span class=\"line\">docker history a10</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可以查看到zk在使用dockerfile构建镜像时，设置了以下docker-entrypoint.sh文件中需要使用到的环境变量，相当于给了环境变量一个默认值，可在使用该镜像启动容器时修改</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-entrypoint-sh文件参考-来自zk容器\"><a href=\"#docker-entrypoint-sh文件参考-来自zk容器\" class=\"headerlink\" title=\"docker-entrypoint.sh文件参考(来自zk容器)\"></a>docker-entrypoint.sh文件参考(来自zk容器)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">set -e</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Allow the container to be started with `--user`</span></span><br><span class=\"line\">if [[ &quot;$1&quot; = &#x27;zkServer.sh&#x27; &amp;&amp; &quot;$(id -u)&quot; = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    chown -R zookeeper &quot;$ZOO_DATA_DIR&quot; &quot;$ZOO_DATA_LOG_DIR&quot; &quot;$ZOO_LOG_DIR&quot;</span><br><span class=\"line\">    exec gosu zookeeper &quot;$0&quot; &quot;$@&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Generate the config only <span class=\"keyword\">if</span> it doesn<span class=\"string\">&#x27;t exist</span></span></span><br><span class=\"line\">if [[ ! -f &quot;$ZOO_CONF_DIR/zoo.cfg&quot; ]]; then</span><br><span class=\"line\">    CONFIG=&quot;$ZOO_CONF_DIR/zoo.cfg&quot;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;dataDir=$ZOO_DATA_DIR&quot;</span><br><span class=\"line\">        echo &quot;dataLogDir=$ZOO_DATA_LOG_DIR&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo &quot;tickTime=$ZOO_TICK_TIME&quot;</span><br><span class=\"line\">        echo &quot;initLimit=$ZOO_INIT_LIMIT&quot;</span><br><span class=\"line\">        echo &quot;syncLimit=$ZOO_SYNC_LIMIT&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo &quot;autopurge.snapRetainCount=$ZOO_AUTOPURGE_SNAPRETAINCOUNT&quot;</span><br><span class=\"line\">        echo &quot;autopurge.purgeInterval=$ZOO_AUTOPURGE_PURGEINTERVAL&quot;</span><br><span class=\"line\">        echo &quot;maxClientCnxns=$ZOO_MAX_CLIENT_CNXNS&quot;</span><br><span class=\"line\">        echo &quot;standaloneEnabled=$ZOO_STANDALONE_ENABLED&quot;</span><br><span class=\"line\">        echo &quot;admin.enableServer=$ZOO_ADMINSERVER_ENABLED&quot;</span><br><span class=\"line\">    &#125; &gt;&gt; &quot;$CONFIG&quot;</span><br><span class=\"line\">    if [[ -z $ZOO_SERVERS ]]; then</span><br><span class=\"line\">      ZOO_SERVERS=&quot;server.1=localhost:2888:3888;2181&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    for server in $ZOO_SERVERS; do</span><br><span class=\"line\">        echo &quot;$server&quot; &gt;&gt; &quot;$CONFIG&quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ -n $ZOO_4LW_COMMANDS_WHITELIST ]]; then</span><br><span class=\"line\">        echo &quot;4lw.commands.whitelist=$ZOO_4LW_COMMANDS_WHITELIST&quot; &gt;&gt; &quot;$CONFIG&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    for cfg_extra_entry in $ZOO_CFG_EXTRA; do</span><br><span class=\"line\">        echo &quot;$cfg_extra_entry&quot; &gt;&gt; &quot;$CONFIG&quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">Write myid only if it doesn&#x27;</span>t exist</span></span><br><span class=\"line\">if [[ ! -f &quot;$ZOO_DATA_DIR/myid&quot; ]]; then</span><br><span class=\"line\">    echo &quot;$&#123;ZOO_MY_ID:-1&#125;&quot; &gt; &quot;$ZOO_DATA_DIR/myid&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"dockerfile的构建命令查看-以zk镜像为示例\"><a href=\"#dockerfile的构建命令查看-以zk镜像为示例\" class=\"headerlink\" title=\"dockerfile的构建命令查看(以zk镜像为示例)\"></a>dockerfile的构建命令查看(以zk镜像为示例)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看构建过程的命令</span></span><br><span class=\"line\">docker history a10</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可以查看到zk在使用dockerfile构建镜像时，设置了以下docker-entrypoint.sh文件中需要使用到的环境变量，相当于给了环境变量一个默认值，可在使用该镜像启动容器时修改</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-entrypoint-sh文件参考-来自zk容器\"><a href=\"#docker-entrypoint-sh文件参考-来自zk容器\" class=\"headerlink\" title=\"docker-entrypoint.sh文件参考(来自zk容器)\"></a>docker-entrypoint.sh文件参考(来自zk容器)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">set -e</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Allow the container to be started with `--user`</span></span><br><span class=\"line\">if [[ &quot;$1&quot; = &#x27;zkServer.sh&#x27; &amp;&amp; &quot;$(id -u)&quot; = &#x27;0&#x27; ]]; then</span><br><span class=\"line\">    chown -R zookeeper &quot;$ZOO_DATA_DIR&quot; &quot;$ZOO_DATA_LOG_DIR&quot; &quot;$ZOO_LOG_DIR&quot;</span><br><span class=\"line\">    exec gosu zookeeper &quot;$0&quot; &quot;$@&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Generate the config only <span class=\"keyword\">if</span> it doesn<span class=\"string\">&#x27;t exist</span></span></span><br><span class=\"line\">if [[ ! -f &quot;$ZOO_CONF_DIR/zoo.cfg&quot; ]]; then</span><br><span class=\"line\">    CONFIG=&quot;$ZOO_CONF_DIR/zoo.cfg&quot;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;dataDir=$ZOO_DATA_DIR&quot;</span><br><span class=\"line\">        echo &quot;dataLogDir=$ZOO_DATA_LOG_DIR&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo &quot;tickTime=$ZOO_TICK_TIME&quot;</span><br><span class=\"line\">        echo &quot;initLimit=$ZOO_INIT_LIMIT&quot;</span><br><span class=\"line\">        echo &quot;syncLimit=$ZOO_SYNC_LIMIT&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo &quot;autopurge.snapRetainCount=$ZOO_AUTOPURGE_SNAPRETAINCOUNT&quot;</span><br><span class=\"line\">        echo &quot;autopurge.purgeInterval=$ZOO_AUTOPURGE_PURGEINTERVAL&quot;</span><br><span class=\"line\">        echo &quot;maxClientCnxns=$ZOO_MAX_CLIENT_CNXNS&quot;</span><br><span class=\"line\">        echo &quot;standaloneEnabled=$ZOO_STANDALONE_ENABLED&quot;</span><br><span class=\"line\">        echo &quot;admin.enableServer=$ZOO_ADMINSERVER_ENABLED&quot;</span><br><span class=\"line\">    &#125; &gt;&gt; &quot;$CONFIG&quot;</span><br><span class=\"line\">    if [[ -z $ZOO_SERVERS ]]; then</span><br><span class=\"line\">      ZOO_SERVERS=&quot;server.1=localhost:2888:3888;2181&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    for server in $ZOO_SERVERS; do</span><br><span class=\"line\">        echo &quot;$server&quot; &gt;&gt; &quot;$CONFIG&quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ -n $ZOO_4LW_COMMANDS_WHITELIST ]]; then</span><br><span class=\"line\">        echo &quot;4lw.commands.whitelist=$ZOO_4LW_COMMANDS_WHITELIST&quot; &gt;&gt; &quot;$CONFIG&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    for cfg_extra_entry in $ZOO_CFG_EXTRA; do</span><br><span class=\"line\">        echo &quot;$cfg_extra_entry&quot; &gt;&gt; &quot;$CONFIG&quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">Write myid only if it doesn&#x27;</span>t exist</span></span><br><span class=\"line\">if [[ ! -f &quot;$ZOO_DATA_DIR/myid&quot; ]]; then</span><br><span class=\"line\">    echo &quot;$&#123;ZOO_MY_ID:-1&#125;&quot; &gt; &quot;$ZOO_DATA_DIR/myid&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"firewalld","nav_order":12,"description":"firewalld防火墙相关配置","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# firewalld防火墙相关配置\n\n- [阿里云开发者社区用户文章参考](https://developer.aliyun.com/article/292603)\n\n```shell\n# 安装\nyum install firewalld\n# 在开机时启用一个服务\nsystemctl enable firewalld.service\n# 在开机时禁用一个服务\nsystemctl disable firewalld.service\n# 查看服务是否开机启动\nsystemctl is-enabled firewalld.service\n\n# 使最新的防火墙设置规则生效\nfirewall-cmd --reload \n# 更新防火墙规则并重启服务(用不了)\nfirewall-cmd --completely-reload \n\n# 端口添加（--permanent永久生效，没有此参数重启后失效）\nfirewall-cmd --permanent --zone=public --add-port=80/tcp\n# 查看80端口\nfirewall-cmd --zone=public --query-port=80/tcp\n# 删除80端口\nfirewall-cmd --permanent --zone=public --remove-port=80/tcp\n\n# 查看所有打开的端口\nfirewall-cmd --zone=public --list-ports\n\n# 添加HTTP协议服务\nfirewall-cmd --permanent --zone=public --add-service=http\n# 删除HTTP协议服务\nfirewall-cmd --permanent --zone=public --remove-service=http\n\n# 查看当前的服务\nfirewall-cmd --zone=public --list-services\n# 查看还有哪些服务可以打开\nfirewall-cmd --get-services\n\n# 查看所有信息(所有services和ports都能看到)\nfirewall-cmd --list-all\n\n# 查询ssh协议服务是否被允许\nfirewall-cmd --zone=public --query-service=ssh\n# 查看已启动的服务列表\nsystemctl list-unit-files | grep enabled\n# 查看启动失败的服务列表\nsystemctl --failed\n\n# 查看区域信息\nfirewall-cmd --get-active-zones\n# 查看指定接口所属区域\nfirewall-cmd --get-zone-of-interface=eth0\n# 查看当前的区域\nfirewall-cmd --get-default-zone\n\n# 拒绝所有包\nfirewall-cmd --panic-on\n# 取消拒绝状态\nfirewall-cmd --panic-off\n# 查看是否拒绝\nfirewall-cmd --query-panic\n \n# 安装图形化用户接口工具 firewall-config，则以 root 用户身份运行下列命令\nyum install firewall-config\n\n```\n","source":"_posts/docker/doc/firewalld.md","raw":"---\nlayout: default\ntitle: firewalld\nnav_order: 12\ndescription: firewalld防火墙相关配置\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/firewalld/\"\ngrand_parent: Docker\n---\n\n# firewalld防火墙相关配置\n\n- [阿里云开发者社区用户文章参考](https://developer.aliyun.com/article/292603)\n\n```shell\n# 安装\nyum install firewalld\n# 在开机时启用一个服务\nsystemctl enable firewalld.service\n# 在开机时禁用一个服务\nsystemctl disable firewalld.service\n# 查看服务是否开机启动\nsystemctl is-enabled firewalld.service\n\n# 使最新的防火墙设置规则生效\nfirewall-cmd --reload \n# 更新防火墙规则并重启服务(用不了)\nfirewall-cmd --completely-reload \n\n# 端口添加（--permanent永久生效，没有此参数重启后失效）\nfirewall-cmd --permanent --zone=public --add-port=80/tcp\n# 查看80端口\nfirewall-cmd --zone=public --query-port=80/tcp\n# 删除80端口\nfirewall-cmd --permanent --zone=public --remove-port=80/tcp\n\n# 查看所有打开的端口\nfirewall-cmd --zone=public --list-ports\n\n# 添加HTTP协议服务\nfirewall-cmd --permanent --zone=public --add-service=http\n# 删除HTTP协议服务\nfirewall-cmd --permanent --zone=public --remove-service=http\n\n# 查看当前的服务\nfirewall-cmd --zone=public --list-services\n# 查看还有哪些服务可以打开\nfirewall-cmd --get-services\n\n# 查看所有信息(所有services和ports都能看到)\nfirewall-cmd --list-all\n\n# 查询ssh协议服务是否被允许\nfirewall-cmd --zone=public --query-service=ssh\n# 查看已启动的服务列表\nsystemctl list-unit-files | grep enabled\n# 查看启动失败的服务列表\nsystemctl --failed\n\n# 查看区域信息\nfirewall-cmd --get-active-zones\n# 查看指定接口所属区域\nfirewall-cmd --get-zone-of-interface=eth0\n# 查看当前的区域\nfirewall-cmd --get-default-zone\n\n# 拒绝所有包\nfirewall-cmd --panic-on\n# 取消拒绝状态\nfirewall-cmd --panic-off\n# 查看是否拒绝\nfirewall-cmd --query-panic\n \n# 安装图形化用户接口工具 firewall-config，则以 root 用户身份运行下列命令\nyum install firewall-config\n\n```\n","slug":"docker/doc/firewalld","published":1,"date":"2025-02-23T07:43:31.202Z","updated":"2025-02-23T07:43:31.211Z","__permalink":"/docker/doc/firewalld/","comments":1,"photos":[],"_id":"cm7k5rwa3000tmswshq93efqb","content":"<h1 id=\"firewalld防火墙相关配置\"><a href=\"#firewalld防火墙相关配置\" class=\"headerlink\" title=\"firewalld防火墙相关配置\"></a>firewalld防火墙相关配置</h1><ul>\n<li><a href=\"https://developer.aliyun.com/article/292603\">阿里云开发者社区用户文章参考</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">yum install firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在开机时启用一个服务</span></span><br><span class=\"line\">systemctl enable firewalld.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在开机时禁用一个服务</span></span><br><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看服务是否开机启动</span></span><br><span class=\"line\">systemctl is-enabled firewalld.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使最新的防火墙设置规则生效</span></span><br><span class=\"line\">firewall-cmd --reload </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新防火墙规则并重启服务(用不了)</span></span><br><span class=\"line\">firewall-cmd --completely-reload </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">端口添加（--permanent永久生效，没有此参数重启后失效）</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=80/tcp</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看80端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除80端口</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --remove-port=80/tcp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有打开的端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-ports</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加HTTP协议服务</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --add-service=http</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除HTTP协议服务</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --remove-service=http</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前的服务</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-services</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看还有哪些服务可以打开</span></span><br><span class=\"line\">firewall-cmd --get-services</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有信息(所有services和ports都能看到)</span></span><br><span class=\"line\">firewall-cmd --list-all</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询ssh协议服务是否被允许</span></span><br><span class=\"line\">firewall-cmd --zone=public --query-service=ssh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看已启动的服务列表</span></span><br><span class=\"line\">systemctl list-unit-files | grep enabled</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看启动失败的服务列表</span></span><br><span class=\"line\">systemctl --failed</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看区域信息</span></span><br><span class=\"line\">firewall-cmd --get-active-zones</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定接口所属区域</span></span><br><span class=\"line\">firewall-cmd --get-zone-of-interface=eth0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前的区域</span></span><br><span class=\"line\">firewall-cmd --get-default-zone</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拒绝所有包</span></span><br><span class=\"line\">firewall-cmd --panic-on</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">取消拒绝状态</span></span><br><span class=\"line\">firewall-cmd --panic-off</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看是否拒绝</span></span><br><span class=\"line\">firewall-cmd --query-panic</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装图形化用户接口工具 firewall-config，则以 root 用户身份运行下列命令</span></span><br><span class=\"line\">yum install firewall-config</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"firewalld防火墙相关配置\"><a href=\"#firewalld防火墙相关配置\" class=\"headerlink\" title=\"firewalld防火墙相关配置\"></a>firewalld防火墙相关配置</h1><ul>\n<li><a href=\"https://developer.aliyun.com/article/292603\">阿里云开发者社区用户文章参考</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">yum install firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在开机时启用一个服务</span></span><br><span class=\"line\">systemctl enable firewalld.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在开机时禁用一个服务</span></span><br><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看服务是否开机启动</span></span><br><span class=\"line\">systemctl is-enabled firewalld.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使最新的防火墙设置规则生效</span></span><br><span class=\"line\">firewall-cmd --reload </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新防火墙规则并重启服务(用不了)</span></span><br><span class=\"line\">firewall-cmd --completely-reload </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">端口添加（--permanent永久生效，没有此参数重启后失效）</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=80/tcp</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看80端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除80端口</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --remove-port=80/tcp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有打开的端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-ports</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加HTTP协议服务</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --add-service=http</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除HTTP协议服务</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --remove-service=http</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前的服务</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-services</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看还有哪些服务可以打开</span></span><br><span class=\"line\">firewall-cmd --get-services</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有信息(所有services和ports都能看到)</span></span><br><span class=\"line\">firewall-cmd --list-all</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询ssh协议服务是否被允许</span></span><br><span class=\"line\">firewall-cmd --zone=public --query-service=ssh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看已启动的服务列表</span></span><br><span class=\"line\">systemctl list-unit-files | grep enabled</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看启动失败的服务列表</span></span><br><span class=\"line\">systemctl --failed</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看区域信息</span></span><br><span class=\"line\">firewall-cmd --get-active-zones</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定接口所属区域</span></span><br><span class=\"line\">firewall-cmd --get-zone-of-interface=eth0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前的区域</span></span><br><span class=\"line\">firewall-cmd --get-default-zone</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拒绝所有包</span></span><br><span class=\"line\">firewall-cmd --panic-on</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">取消拒绝状态</span></span><br><span class=\"line\">firewall-cmd --panic-off</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看是否拒绝</span></span><br><span class=\"line\">firewall-cmd --query-panic</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装图形化用户接口工具 firewall-config，则以 root 用户身份运行下列命令</span></span><br><span class=\"line\">yum install firewall-config</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Doc","nav_order":2,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 2\nhas_children: true\nparent: Doc\npermalink: \"/docker/doc/\"\n---\n\n# Doc\n","slug":"docker/doc/index","published":1,"date":"2025-02-23T07:43:31.180Z","updated":"2025-02-23T07:43:31.180Z","__permalink":"/docker/doc/","comments":1,"photos":[],"_id":"cm7k5rwa4000umsws60x65c49","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"java","nav_order":12,"description":"java 相关记录","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# java 相关记录\n\n## 阿里开源jdk\n\n[dragonwell](https://www.aliyun.com/product/dragonwell)\n\n## openjdk下载\n\n[参考链接](https://www.cnblogs.com/haimishasha/p/9909055.html)\n\n    # openjdk官网 \n    http://hg.openjdk.java.net/\n    \n    # 亚马逊发行版\n    https://docs.aws.amazon.com/corretto/latest/corretto-8-ug/downloads-list.html\n    wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\n    wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n\n    tar  -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz # 下载后解压\n\n## openjdk编译\n\n    yum install unzip\n    unzip openjdk-8u40-src-b25-10_feb_2015.zip\n    cd openjdk/\n    sudo bash ./configure --with-target-bits=64 --with-boot-jdk=/home/jiazhifeng/workspace/jdk1.7.0_80/ --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FILES=0\n    sudo make all DISABLE_HOTSPOT_OS_VERSION_CHECK=OK ZIP_DEBUGINFO_FILES=0\n> 说明下第一条命令configure用到的参数作用：\\\n> –with-target-bits=64 ：指定生成64位jdk；\\\n> –with-boot-jdk=/usr/java/jdk1.7.0_80/：启动jdk的路径；\\\n> –with-debug-level=slowdebug：编译时debug的级别，有release, fastdebug, slowdebug 三种级别；\\\n> –enable-debug-symbols ZIP_DEBUGINFO_FILES=0：生成调试的符号信息，并且不压缩；\n","source":"_posts/docker/doc/java.md","raw":"---\nlayout: default\ntitle: java\nnav_order: 12\ndescription: java 相关记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/java/\"\ngrand_parent: Docker\n---\n\n# java 相关记录\n\n## 阿里开源jdk\n\n[dragonwell](https://www.aliyun.com/product/dragonwell)\n\n## openjdk下载\n\n[参考链接](https://www.cnblogs.com/haimishasha/p/9909055.html)\n\n    # openjdk官网 \n    http://hg.openjdk.java.net/\n    \n    # 亚马逊发行版\n    https://docs.aws.amazon.com/corretto/latest/corretto-8-ug/downloads-list.html\n    wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\n    wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n\n    tar  -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz # 下载后解压\n\n## openjdk编译\n\n    yum install unzip\n    unzip openjdk-8u40-src-b25-10_feb_2015.zip\n    cd openjdk/\n    sudo bash ./configure --with-target-bits=64 --with-boot-jdk=/home/jiazhifeng/workspace/jdk1.7.0_80/ --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FILES=0\n    sudo make all DISABLE_HOTSPOT_OS_VERSION_CHECK=OK ZIP_DEBUGINFO_FILES=0\n> 说明下第一条命令configure用到的参数作用：\\\n> –with-target-bits=64 ：指定生成64位jdk；\\\n> –with-boot-jdk=/usr/java/jdk1.7.0_80/：启动jdk的路径；\\\n> –with-debug-level=slowdebug：编译时debug的级别，有release, fastdebug, slowdebug 三种级别；\\\n> –enable-debug-symbols ZIP_DEBUGINFO_FILES=0：生成调试的符号信息，并且不压缩；\n","slug":"docker/doc/java","published":1,"date":"2025-02-23T07:43:31.180Z","updated":"2025-02-23T07:43:31.180Z","__permalink":"/docker/doc/java/","comments":1,"photos":[],"_id":"cm7k5rwa4000vmswscmlbdjhj","content":"<h1 id=\"java-相关记录\"><a href=\"#java-相关记录\" class=\"headerlink\" title=\"java 相关记录\"></a>java 相关记录</h1><h2 id=\"阿里开源jdk\"><a href=\"#阿里开源jdk\" class=\"headerlink\" title=\"阿里开源jdk\"></a>阿里开源jdk</h2><p><a href=\"https://www.aliyun.com/product/dragonwell\">dragonwell</a></p>\n<h2 id=\"openjdk下载\"><a href=\"#openjdk下载\" class=\"headerlink\" title=\"openjdk下载\"></a>openjdk下载</h2><p><a href=\"https://www.cnblogs.com/haimishasha/p/9909055.html\">参考链接</a></p>\n<pre><code># openjdk官网 \nhttp://hg.openjdk.java.net/\n\n# 亚马逊发行版\nhttps://docs.aws.amazon.com/corretto/latest/corretto-8-ug/downloads-list.html\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n\ntar  -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz # 下载后解压\n</code></pre>\n<h2 id=\"openjdk编译\"><a href=\"#openjdk编译\" class=\"headerlink\" title=\"openjdk编译\"></a>openjdk编译</h2><pre><code>yum install unzip\nunzip openjdk-8u40-src-b25-10_feb_2015.zip\ncd openjdk/\nsudo bash ./configure --with-target-bits=64 --with-boot-jdk=/home/jiazhifeng/workspace/jdk1.7.0_80/ --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FILES=0\nsudo make all DISABLE_HOTSPOT_OS_VERSION_CHECK=OK ZIP_DEBUGINFO_FILES=0\n</code></pre>\n<blockquote>\n<p>说明下第一条命令configure用到的参数作用：<br>–with-target-bits&#x3D;64 ：指定生成64位jdk；<br>–with-boot-jdk&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.7.0_80&#x2F;：启动jdk的路径；<br>–with-debug-level&#x3D;slowdebug：编译时debug的级别，有release, fastdebug, slowdebug 三种级别；<br>–enable-debug-symbols ZIP_DEBUGINFO_FILES&#x3D;0：生成调试的符号信息，并且不压缩；</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"java-相关记录\"><a href=\"#java-相关记录\" class=\"headerlink\" title=\"java 相关记录\"></a>java 相关记录</h1><h2 id=\"阿里开源jdk\"><a href=\"#阿里开源jdk\" class=\"headerlink\" title=\"阿里开源jdk\"></a>阿里开源jdk</h2><p><a href=\"https://www.aliyun.com/product/dragonwell\">dragonwell</a></p>\n<h2 id=\"openjdk下载\"><a href=\"#openjdk下载\" class=\"headerlink\" title=\"openjdk下载\"></a>openjdk下载</h2><p><a href=\"https://www.cnblogs.com/haimishasha/p/9909055.html\">参考链接</a></p>\n<pre><code># openjdk官网 \nhttp://hg.openjdk.java.net/\n\n# 亚马逊发行版\nhttps://docs.aws.amazon.com/corretto/latest/corretto-8-ug/downloads-list.html\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n\ntar  -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz # 下载后解压\n</code></pre>\n<h2 id=\"openjdk编译\"><a href=\"#openjdk编译\" class=\"headerlink\" title=\"openjdk编译\"></a>openjdk编译</h2><pre><code>yum install unzip\nunzip openjdk-8u40-src-b25-10_feb_2015.zip\ncd openjdk/\nsudo bash ./configure --with-target-bits=64 --with-boot-jdk=/home/jiazhifeng/workspace/jdk1.7.0_80/ --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FILES=0\nsudo make all DISABLE_HOTSPOT_OS_VERSION_CHECK=OK ZIP_DEBUGINFO_FILES=0\n</code></pre>\n<blockquote>\n<p>说明下第一条命令configure用到的参数作用：<br>–with-target-bits&#x3D;64 ：指定生成64位jdk；<br>–with-boot-jdk&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.7.0_80&#x2F;：启动jdk的路径；<br>–with-debug-level&#x3D;slowdebug：编译时debug的级别，有release, fastdebug, slowdebug 三种级别；<br>–enable-debug-symbols ZIP_DEBUGINFO_FILES&#x3D;0：生成调试的符号信息，并且不压缩；</p>\n</blockquote>\n"},{"layout":"default","title":"linux-network","nav_order":12,"description":"linux网络笔记","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# linux网络笔记\n\n## linux网卡的开启\n\n```shell\n# 网络配置文件位置\ncd /etc/sysconfig/network-scripts/　\n# 编辑配置文件\nvi ifcfg-eth0 \n# ONBOOT=\"no\"　　#默认是启动时不开启网卡，我们可以将这个设置为yes\n# 然后重启网络\nservice network restart\n```\n\n## firewalld docker 端口映射问题，firewall开放端口后，还是不能访问，解决方案\n\n` [参考文章](http://t.csdn.cn/Xo6XZ)\n\n```shell\n# 宿主机ip: 192.168.31.19\n \ndocker run -itd --name tomcat -p 8080:8080 tomcat /usr/local/apache-tomcat-9.0.30/bin/startup.sh\n# 防火墙放开8080端口\nfirewall-cmd --add-port=8080/tcp --permanent\n \n# 问题：发现访问：192.168.31.19:8080 访问不通，关闭firewall后，又可以访问通了\n \n# 解决方案，把docker0网卡添加到trusted域\nfirewall-cmd --permanent --zone=trusted --change-interface=docker0\n# 重启加载配置\nfirewall-cmd --reload\n \n# firewall-cmd相关命令：https://www.cnblogs.com/Raodi/p/11625487.html\n```\n\n> 以上无效那就使用重启大法吧，貌似有时折腾了老半天，结果，最后重启就好了~\n","source":"_posts/docker/doc/linux-network.md","raw":"---\nlayout: default\ntitle: linux-network\nnav_order: 12\ndescription: linux网络笔记\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/linux-network/\"\ngrand_parent: Docker\n---\n\n# linux网络笔记\n\n## linux网卡的开启\n\n```shell\n# 网络配置文件位置\ncd /etc/sysconfig/network-scripts/　\n# 编辑配置文件\nvi ifcfg-eth0 \n# ONBOOT=\"no\"　　#默认是启动时不开启网卡，我们可以将这个设置为yes\n# 然后重启网络\nservice network restart\n```\n\n## firewalld docker 端口映射问题，firewall开放端口后，还是不能访问，解决方案\n\n` [参考文章](http://t.csdn.cn/Xo6XZ)\n\n```shell\n# 宿主机ip: 192.168.31.19\n \ndocker run -itd --name tomcat -p 8080:8080 tomcat /usr/local/apache-tomcat-9.0.30/bin/startup.sh\n# 防火墙放开8080端口\nfirewall-cmd --add-port=8080/tcp --permanent\n \n# 问题：发现访问：192.168.31.19:8080 访问不通，关闭firewall后，又可以访问通了\n \n# 解决方案，把docker0网卡添加到trusted域\nfirewall-cmd --permanent --zone=trusted --change-interface=docker0\n# 重启加载配置\nfirewall-cmd --reload\n \n# firewall-cmd相关命令：https://www.cnblogs.com/Raodi/p/11625487.html\n```\n\n> 以上无效那就使用重启大法吧，貌似有时折腾了老半天，结果，最后重启就好了~\n","slug":"docker/doc/linux-network","published":1,"date":"2025-02-23T07:43:31.174Z","updated":"2025-02-23T07:43:31.174Z","__permalink":"/docker/doc/linux-network/","comments":1,"photos":[],"_id":"cm7k5rwa4000wmsws0kpg0u6d","content":"<h1 id=\"linux网络笔记\"><a href=\"#linux网络笔记\" class=\"headerlink\" title=\"linux网络笔记\"></a>linux网络笔记</h1><h2 id=\"linux网卡的开启\"><a href=\"#linux网卡的开启\" class=\"headerlink\" title=\"linux网卡的开启\"></a>linux网卡的开启</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">网络配置文件位置</span></span><br><span class=\"line\">cd /etc/sysconfig/network-scripts/　</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑配置文件</span></span><br><span class=\"line\">vi ifcfg-eth0 </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ONBOOT=<span class=\"string\">&quot;no&quot;</span>　　<span class=\"comment\">#默认是启动时不开启网卡，我们可以将这个设置为yes</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后重启网络</span></span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"firewalld-docker-端口映射问题，firewall开放端口后，还是不能访问，解决方案\"><a href=\"#firewalld-docker-端口映射问题，firewall开放端口后，还是不能访问，解决方案\" class=\"headerlink\" title=\"firewalld docker 端口映射问题，firewall开放端口后，还是不能访问，解决方案\"></a>firewalld docker 端口映射问题，firewall开放端口后，还是不能访问，解决方案</h2><p>&#96; <a href=\"http://t.csdn.cn/Xo6XZ\">参考文章</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">宿主机ip: 192.168.31.19</span></span><br><span class=\"line\"> </span><br><span class=\"line\">docker run -itd --name tomcat -p 8080:8080 tomcat /usr/local/apache-tomcat-9.0.30/bin/startup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">防火墙放开8080端口</span></span><br><span class=\"line\">firewall-cmd --add-port=8080/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">问题：发现访问：192.168.31.19:8080 访问不通，关闭firewall后，又可以访问通了</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解决方案，把docker0网卡添加到trusted域</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=trusted --change-interface=docker0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启加载配置</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">firewall-cmd相关命令：https://www.cnblogs.com/Raodi/p/11625487.html</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上无效那就使用重启大法吧，貌似有时折腾了老半天，结果，最后重启就好了~</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"linux网络笔记\"><a href=\"#linux网络笔记\" class=\"headerlink\" title=\"linux网络笔记\"></a>linux网络笔记</h1><h2 id=\"linux网卡的开启\"><a href=\"#linux网卡的开启\" class=\"headerlink\" title=\"linux网卡的开启\"></a>linux网卡的开启</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">网络配置文件位置</span></span><br><span class=\"line\">cd /etc/sysconfig/network-scripts/　</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑配置文件</span></span><br><span class=\"line\">vi ifcfg-eth0 </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ONBOOT=<span class=\"string\">&quot;no&quot;</span>　　<span class=\"comment\">#默认是启动时不开启网卡，我们可以将这个设置为yes</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后重启网络</span></span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"firewalld-docker-端口映射问题，firewall开放端口后，还是不能访问，解决方案\"><a href=\"#firewalld-docker-端口映射问题，firewall开放端口后，还是不能访问，解决方案\" class=\"headerlink\" title=\"firewalld docker 端口映射问题，firewall开放端口后，还是不能访问，解决方案\"></a>firewalld docker 端口映射问题，firewall开放端口后，还是不能访问，解决方案</h2><p>&#96; <a href=\"http://t.csdn.cn/Xo6XZ\">参考文章</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">宿主机ip: 192.168.31.19</span></span><br><span class=\"line\"> </span><br><span class=\"line\">docker run -itd --name tomcat -p 8080:8080 tomcat /usr/local/apache-tomcat-9.0.30/bin/startup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">防火墙放开8080端口</span></span><br><span class=\"line\">firewall-cmd --add-port=8080/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">问题：发现访问：192.168.31.19:8080 访问不通，关闭firewall后，又可以访问通了</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解决方案，把docker0网卡添加到trusted域</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=trusted --change-interface=docker0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启加载配置</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">firewall-cmd相关命令：https://www.cnblogs.com/Raodi/p/11625487.html</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上无效那就使用重启大法吧，貌似有时折腾了老半天，结果，最后重启就好了~</p>\n</blockquote>\n"},{"layout":"default","title":"linux","nav_order":12,"description":"linux相关命令使用记录","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# linux相关命令使用记录\n\n## 安装docker并配置加速器\n\n```shell\nyum -y install docker\n```\n\n## 修改主机名\n\n```shell\nhostnamectl set-hostname manager43\n```\n\n## 获取ip地址\n\n```bash\n$(hostname -I|cut -d\" \" -f 1)\n```\n\n## 配置hosts文件(可配置可不配置)\n\n```shell\nvi /etc/hosts\n```\n\n```shell\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n \n192.168.31.43 manager43\n192.168.31.188 node188\n192.168.31.139 node139\n```\n\n## 使用scp复制到node主机\n\n```shell\nscp /etc/hosts root@192.168.31.188:/etc/hosts\n```\n\n## 查看防火墙\n\n```shell\n`firewall-cmd --zone=public --list-ports` 和 `netstat -tlunp`\n```\n\n## 设置防火墙\n\n```shell\nsystemctl disable firewalld.service\nsystemctl stop firewalld.service\n```\n\n```shell\n# 防火墙配置\n# 官方文档\n\n# centos7采用firewalld来配置防火墙，默认不开放接口。官方文档中给出的方案比较底层。这里我们采取自定义Service的方式来配置\n\n# 创建文件\nvi /etc/firewalld/services/docker.xml\n# 加入以下内容\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n      <service>\n        <short>docker</short>\n        <description>docker daemon for remote access</description>\n        <port protocol=\"tcp\" port=\"2375\"/>\n      </service>\n# 查看默认zone(一般是public)\nfirewall-cmd --get-default-zone\n# 在zone中加入这个service\nfirewall-cmd --zone=public --add-service=docker --permanent\n# 重新加载\nfirewall-cmd --reload\n# 查询端口\nfirewall-cmd --service=docker --get-ports --permanent\n# 参考链接\nhttps://my.oschina.net/u/4560825/blog/4314028\n```\n\n## 添加dns\n\n```shell\nvi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n# DNS2=114.114.114.114\nsystemctl restart network\nvi /etc/resolv.conf # 查看结果\n```\n\n## 配置yum镜像源\n\n```shell\n# 备份你的原镜像文件，以免出错后可以恢复\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n# 下载新的CentOS-Base.repo 到/etc/yum.repos.d/\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n# 进入CentOS-Base.repo文件, 修改文件中的baseurl地址(可省略这步)\nvi   CentOS-Base.repo\n# 清楚原有yum缓存\nyum clean all\n# 生成缓存\nyum makecache\n# 查看配置好的yum源是否正常\nyum repolist\n```\n\n## 安装docker\n\n```shell\n# 使用官方安装脚本自动安装\n# 安装命令如下：\n\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n# 也可以使用国内 daocloud 一键安装命令：\n\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n```shell\n# 安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\nyum install -y yum-utils device-mapper-persistent-data lvm2\n# 配置镜像源\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# 通过命令把https://download-stage.docker.com替换为http://mirrors.aliyun.com/docker-ce\nvi /etc/yum.repos.d/docker-ce.repo\n# 命令如下：\n:%s#https://download.docker.com#http://mirrors.aliyun.com/docker-ce#g\n# 更新yum缓存\nyum makecache fast\n# 这时，可通过阿里镜像安装doker了\nyum install docker-ce\n```\n\n## 监控命令\n\n```shell\n# 查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\nwatch -n 1 docker stack services hadoop\n```\n\n## 打印信息\n\n```shell\n# 不打印正常信息，打印错误信息（/dev/null 代表空设备）\nxargs docker rmi > /dev/null\n# 正常和错误信息都不打印\nxargs docker rmi &> /dev/null\n```\n\n## 打印文件或文件夹列表时，排除文件或文件夹\n\n```shell\n# 排除多个文件或文件夹\nls | grep -v 'a\\|b'\n```\n\n## nodejs安装\n\n```shell\n# curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n# nvm install 14.16.0\n# npm install -g nrm\n# nrm ls\n# nrm use taobao\n# npm config ls\n# rm -rf ./node_modules\n# npm install\n# npm run build:test\n\n```\n\n## docker访问权限问题\n\n```shell\nsudo groupadd docker          #添加docker用户组\nsudo gpasswd -a $USER docker  #将当前用户添加至docker用户组\nnewgrp docker                 #更新docker用户组\n\n```\n\n## 查看端口占用\n\n``` shell\n# 查看53端口的占用情况\nsudo netstat -anlp | grep -w LISTEN | grep 53\n```\n\n## 定义环境变量\n\n```shell\nexport DOCKER_HOST=tcp://localhost:2375\n```\n\n## crontab使用\n\n```shell\n# 格式\nminute   hour   day   month   week   command\n# 添加任务\ncrontab -e\n# 查看任务列表\ncrontab -l\n# 删除任务\ncrontab -r\n# 查看已执行过的任务\ntail -f /var/log/cron\n```\n\n## 设置网络时间\n\n```shell\n# 查看当前时间\ndate \"+%Y-%m-%d %H:%M:%S\"\n# 查看时区\ndate \"+%Z\"\n# 使用cat /etc/sysconfig/clock查看当前时区\ncat /etc/sysconfig/clock\n# 设置时区\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n# 查看硬件时间\nhwclock\n# 同步硬件时间\nhwclock -w\n# 同步系统时间\nclock -w\n\n# ntpdate\n# 即使是硬件时间也会和网络时间有差异，想要和网络时间完全一致，我们就需要获取网络时间更新本地时间。\n# 安装工具： \nyum -y install ntp ntpdate\n# 设置系统时间与网络时间同步：\nntpdate cn.pool.ntp.org\n# 将系统时间写入硬件时间：\nhwclock –systohc\n\n# 同步时间服务器\nntpdate -u ntp.api.bz\n# ntp常用服务器：\n# 中国国家授时中心：210.72.145.44\n# NTP服务器(上海) ：ntp.api.bz\n# 美国： time.nist.gov\n# 复旦： ntp.fudan.edu.cn\n# 微软公司授时主机(美国) ：time.windows.com\n# 北京邮电大学 : s1a.time.edu.cn\n# 清华大学 : s1b.time.edu.cn\n# 北京大学 : s1c.time.edu.cn\n# 台警大授时中心(台湾)：asia.pool.ntp.org\n\n# simple\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nntpdate -u ntp.api.bz\nhwclock -w\n```\n\n## 查看linux系统版本\n\n```shell\n# 只适用于redhat系linux系统\ncat /etc/redhat-release\n```\n\n## Linux文件字符串替换命令\n\n```shell\n# perl命令替换\n# -e 执行指定的脚本。\n# -i 原地替换文件，并将旧文件用指定的扩展名备份。不指定扩展名则不备份。\n# -n 自动循环，相当于 while(<>) { 脚本; }\n# -p 自动循环+自动输出，相当于 while(<>) { 脚本; print; }\n\n# 用法示例：\n# 将所有C程序中的foo替换成bar，旧文件备份成.bak\nperl -p -i.bak -e 's/\\bfoo\\b/bar/g' *.c\n# 将当前文件夹下lishan.txt和lishan.txt.bak中的“shan”都替换为“hua”\nperl -p -i -e \"s/shan/hua/g\" ./lishan.txt ./lishan.txt.bak\n\n# ##################################################################\n\n# sed命令替换\n# -i 表示inplace edit，就地修改文件\n\n# s表示替换，d表示删除\n# 格式: sed -i \"s/查找字段/替换字段/g\" `grep 查找字段 -rl 路径` 文件名\n\n# 示例：\n# 把当前目录下lishan.txt里的shan都替换为hua\nsed -i \"s/shan/hua/g\" lishan.txt\n# 使用变量替换(使用双引号)\nsed -e \"s/$var1/$var2/g\" filename\n# 删除文本中空行和空格组成的行以及#号注释的行\ngrep -v ^# filename | sed /^[[:space:]]*$/d | sed /^$/d\n\n```\n\n## 复制命令\n\n- [参考文章](https://blog.csdn.net/qq_40880022/article/details/118937461)\n\n```shell\n# 复制目录 -- 即将[/www/temp/java/BOOT-INF/lib]里面的所有内容，复制到这个[/www/temp/java/lib]目录里面\ncp -a  /www/temp/java/BOOT-INF/lib /www/temp/java/lib\n```\n\n## top命令使用\n\n```shell\n# 使用`1`显示每个CPU的使用情况\n# 使用`t`显示CPU使用百分比进度条\n# 使用`m`显示内存使用百分比进度条\n```\n\n## 时间相关\n\n- 相关文章\n  - [[centos使用date命令同步网络时间]]\n  - [[timedatectl命令怎么同步网络时间]]\n  - [[timedatectl命令怎么同步网络时间]]\n\n```shell\n# 查看时间\ntimedatectl\ndate\n# 修改时间\ndate -s \"2024-01-19\"\ndate -s \"10:30:00\"\ntimedatectl set-time \"YYYY-MM-DD HH:MM:SS\"\n\n# 开启自动同步时间\ntimedatectl set-ntp true\n# 手动同步网络时间\ndate -s \"$(curl -s --head http://www.baidu.com | grep '^Date:' | cut -d' ' -f3-6)Z\"\n\n```\n","source":"_posts/docker/doc/linux.md","raw":"---\nlayout: default\ntitle: linux\nnav_order: 12\ndescription: linux相关命令使用记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/linux/\"\ngrand_parent: Docker\n---\n\n# linux相关命令使用记录\n\n## 安装docker并配置加速器\n\n```shell\nyum -y install docker\n```\n\n## 修改主机名\n\n```shell\nhostnamectl set-hostname manager43\n```\n\n## 获取ip地址\n\n```bash\n$(hostname -I|cut -d\" \" -f 1)\n```\n\n## 配置hosts文件(可配置可不配置)\n\n```shell\nvi /etc/hosts\n```\n\n```shell\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n \n192.168.31.43 manager43\n192.168.31.188 node188\n192.168.31.139 node139\n```\n\n## 使用scp复制到node主机\n\n```shell\nscp /etc/hosts root@192.168.31.188:/etc/hosts\n```\n\n## 查看防火墙\n\n```shell\n`firewall-cmd --zone=public --list-ports` 和 `netstat -tlunp`\n```\n\n## 设置防火墙\n\n```shell\nsystemctl disable firewalld.service\nsystemctl stop firewalld.service\n```\n\n```shell\n# 防火墙配置\n# 官方文档\n\n# centos7采用firewalld来配置防火墙，默认不开放接口。官方文档中给出的方案比较底层。这里我们采取自定义Service的方式来配置\n\n# 创建文件\nvi /etc/firewalld/services/docker.xml\n# 加入以下内容\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n      <service>\n        <short>docker</short>\n        <description>docker daemon for remote access</description>\n        <port protocol=\"tcp\" port=\"2375\"/>\n      </service>\n# 查看默认zone(一般是public)\nfirewall-cmd --get-default-zone\n# 在zone中加入这个service\nfirewall-cmd --zone=public --add-service=docker --permanent\n# 重新加载\nfirewall-cmd --reload\n# 查询端口\nfirewall-cmd --service=docker --get-ports --permanent\n# 参考链接\nhttps://my.oschina.net/u/4560825/blog/4314028\n```\n\n## 添加dns\n\n```shell\nvi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n# DNS2=114.114.114.114\nsystemctl restart network\nvi /etc/resolv.conf # 查看结果\n```\n\n## 配置yum镜像源\n\n```shell\n# 备份你的原镜像文件，以免出错后可以恢复\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n# 下载新的CentOS-Base.repo 到/etc/yum.repos.d/\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n# 进入CentOS-Base.repo文件, 修改文件中的baseurl地址(可省略这步)\nvi   CentOS-Base.repo\n# 清楚原有yum缓存\nyum clean all\n# 生成缓存\nyum makecache\n# 查看配置好的yum源是否正常\nyum repolist\n```\n\n## 安装docker\n\n```shell\n# 使用官方安装脚本自动安装\n# 安装命令如下：\n\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n# 也可以使用国内 daocloud 一键安装命令：\n\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n```shell\n# 安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\nyum install -y yum-utils device-mapper-persistent-data lvm2\n# 配置镜像源\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# 通过命令把https://download-stage.docker.com替换为http://mirrors.aliyun.com/docker-ce\nvi /etc/yum.repos.d/docker-ce.repo\n# 命令如下：\n:%s#https://download.docker.com#http://mirrors.aliyun.com/docker-ce#g\n# 更新yum缓存\nyum makecache fast\n# 这时，可通过阿里镜像安装doker了\nyum install docker-ce\n```\n\n## 监控命令\n\n```shell\n# 查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\nwatch -n 1 docker stack services hadoop\n```\n\n## 打印信息\n\n```shell\n# 不打印正常信息，打印错误信息（/dev/null 代表空设备）\nxargs docker rmi > /dev/null\n# 正常和错误信息都不打印\nxargs docker rmi &> /dev/null\n```\n\n## 打印文件或文件夹列表时，排除文件或文件夹\n\n```shell\n# 排除多个文件或文件夹\nls | grep -v 'a\\|b'\n```\n\n## nodejs安装\n\n```shell\n# curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n# nvm install 14.16.0\n# npm install -g nrm\n# nrm ls\n# nrm use taobao\n# npm config ls\n# rm -rf ./node_modules\n# npm install\n# npm run build:test\n\n```\n\n## docker访问权限问题\n\n```shell\nsudo groupadd docker          #添加docker用户组\nsudo gpasswd -a $USER docker  #将当前用户添加至docker用户组\nnewgrp docker                 #更新docker用户组\n\n```\n\n## 查看端口占用\n\n``` shell\n# 查看53端口的占用情况\nsudo netstat -anlp | grep -w LISTEN | grep 53\n```\n\n## 定义环境变量\n\n```shell\nexport DOCKER_HOST=tcp://localhost:2375\n```\n\n## crontab使用\n\n```shell\n# 格式\nminute   hour   day   month   week   command\n# 添加任务\ncrontab -e\n# 查看任务列表\ncrontab -l\n# 删除任务\ncrontab -r\n# 查看已执行过的任务\ntail -f /var/log/cron\n```\n\n## 设置网络时间\n\n```shell\n# 查看当前时间\ndate \"+%Y-%m-%d %H:%M:%S\"\n# 查看时区\ndate \"+%Z\"\n# 使用cat /etc/sysconfig/clock查看当前时区\ncat /etc/sysconfig/clock\n# 设置时区\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n# 查看硬件时间\nhwclock\n# 同步硬件时间\nhwclock -w\n# 同步系统时间\nclock -w\n\n# ntpdate\n# 即使是硬件时间也会和网络时间有差异，想要和网络时间完全一致，我们就需要获取网络时间更新本地时间。\n# 安装工具： \nyum -y install ntp ntpdate\n# 设置系统时间与网络时间同步：\nntpdate cn.pool.ntp.org\n# 将系统时间写入硬件时间：\nhwclock –systohc\n\n# 同步时间服务器\nntpdate -u ntp.api.bz\n# ntp常用服务器：\n# 中国国家授时中心：210.72.145.44\n# NTP服务器(上海) ：ntp.api.bz\n# 美国： time.nist.gov\n# 复旦： ntp.fudan.edu.cn\n# 微软公司授时主机(美国) ：time.windows.com\n# 北京邮电大学 : s1a.time.edu.cn\n# 清华大学 : s1b.time.edu.cn\n# 北京大学 : s1c.time.edu.cn\n# 台警大授时中心(台湾)：asia.pool.ntp.org\n\n# simple\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nntpdate -u ntp.api.bz\nhwclock -w\n```\n\n## 查看linux系统版本\n\n```shell\n# 只适用于redhat系linux系统\ncat /etc/redhat-release\n```\n\n## Linux文件字符串替换命令\n\n```shell\n# perl命令替换\n# -e 执行指定的脚本。\n# -i 原地替换文件，并将旧文件用指定的扩展名备份。不指定扩展名则不备份。\n# -n 自动循环，相当于 while(<>) { 脚本; }\n# -p 自动循环+自动输出，相当于 while(<>) { 脚本; print; }\n\n# 用法示例：\n# 将所有C程序中的foo替换成bar，旧文件备份成.bak\nperl -p -i.bak -e 's/\\bfoo\\b/bar/g' *.c\n# 将当前文件夹下lishan.txt和lishan.txt.bak中的“shan”都替换为“hua”\nperl -p -i -e \"s/shan/hua/g\" ./lishan.txt ./lishan.txt.bak\n\n# ##################################################################\n\n# sed命令替换\n# -i 表示inplace edit，就地修改文件\n\n# s表示替换，d表示删除\n# 格式: sed -i \"s/查找字段/替换字段/g\" `grep 查找字段 -rl 路径` 文件名\n\n# 示例：\n# 把当前目录下lishan.txt里的shan都替换为hua\nsed -i \"s/shan/hua/g\" lishan.txt\n# 使用变量替换(使用双引号)\nsed -e \"s/$var1/$var2/g\" filename\n# 删除文本中空行和空格组成的行以及#号注释的行\ngrep -v ^# filename | sed /^[[:space:]]*$/d | sed /^$/d\n\n```\n\n## 复制命令\n\n- [参考文章](https://blog.csdn.net/qq_40880022/article/details/118937461)\n\n```shell\n# 复制目录 -- 即将[/www/temp/java/BOOT-INF/lib]里面的所有内容，复制到这个[/www/temp/java/lib]目录里面\ncp -a  /www/temp/java/BOOT-INF/lib /www/temp/java/lib\n```\n\n## top命令使用\n\n```shell\n# 使用`1`显示每个CPU的使用情况\n# 使用`t`显示CPU使用百分比进度条\n# 使用`m`显示内存使用百分比进度条\n```\n\n## 时间相关\n\n- 相关文章\n  - [[centos使用date命令同步网络时间]]\n  - [[timedatectl命令怎么同步网络时间]]\n  - [[timedatectl命令怎么同步网络时间]]\n\n```shell\n# 查看时间\ntimedatectl\ndate\n# 修改时间\ndate -s \"2024-01-19\"\ndate -s \"10:30:00\"\ntimedatectl set-time \"YYYY-MM-DD HH:MM:SS\"\n\n# 开启自动同步时间\ntimedatectl set-ntp true\n# 手动同步网络时间\ndate -s \"$(curl -s --head http://www.baidu.com | grep '^Date:' | cut -d' ' -f3-6)Z\"\n\n```\n","slug":"docker/doc/linux","published":1,"date":"2025-02-23T07:43:31.178Z","updated":"2025-02-23T07:43:31.178Z","__permalink":"/docker/doc/linux/","comments":1,"photos":[],"_id":"cm7k5rwa4000xmsws8ng2a1ac","content":"<h1 id=\"linux相关命令使用记录\"><a href=\"#linux相关命令使用记录\" class=\"headerlink\" title=\"linux相关命令使用记录\"></a>linux相关命令使用记录</h1><h2 id=\"安装docker并配置加速器\"><a href=\"#安装docker并配置加速器\" class=\"headerlink\" title=\"安装docker并配置加速器\"></a>安装docker并配置加速器</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改主机名\"><a href=\"#修改主机名\" class=\"headerlink\" title=\"修改主机名\"></a>修改主机名</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname manager43</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取ip地址\"><a href=\"#获取ip地址\" class=\"headerlink\" title=\"获取ip地址\"></a>获取ip地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(hostname -I|<span class=\"built_in\">cut</span> -d<span class=\"string\">&quot; &quot;</span> -f 1)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置hosts文件-可配置可不配置\"><a href=\"#配置hosts文件-可配置可不配置\" class=\"headerlink\" title=\"配置hosts文件(可配置可不配置)\"></a>配置hosts文件(可配置可不配置)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\"> </span><br><span class=\"line\">192.168.31.43 manager43</span><br><span class=\"line\">192.168.31.188 node188</span><br><span class=\"line\">192.168.31.139 node139</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用scp复制到node主机\"><a href=\"#使用scp复制到node主机\" class=\"headerlink\" title=\"使用scp复制到node主机\"></a>使用scp复制到node主机</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /etc/hosts root@192.168.31.188:/etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看防火墙\"><a href=\"#查看防火墙\" class=\"headerlink\" title=\"查看防火墙\"></a>查看防火墙</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`firewall-cmd --zone=public --list-ports` 和 `netstat -tlunp`</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置防火墙\"><a href=\"#设置防火墙\" class=\"headerlink\" title=\"设置防火墙\"></a>设置防火墙</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">防火墙配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">官方文档</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">centos7采用firewalld来配置防火墙，默认不开放接口。官方文档中给出的方案比较底层。这里我们采取自定义Service的方式来配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建文件</span></span><br><span class=\"line\">vi /etc/firewalld/services/docker.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加入以下内容</span></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">      &lt;service&gt;</span><br><span class=\"line\">        &lt;short&gt;docker&lt;/short&gt;</span><br><span class=\"line\">        &lt;description&gt;docker daemon for remote access&lt;/description&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;tcp&quot; port=&quot;2375&quot;/&gt;</span><br><span class=\"line\">      &lt;/service&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看默认zone(一般是public)</span></span><br><span class=\"line\">firewall-cmd --get-default-zone</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在zone中加入这个service</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-service=docker --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重新加载</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询端口</span></span><br><span class=\"line\">firewall-cmd --service=docker --get-ports --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参考链接</span></span><br><span class=\"line\">https://my.oschina.net/u/4560825/blog/4314028</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加dns\"><a href=\"#添加dns\" class=\"headerlink\" title=\"添加dns\"></a>添加dns</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">DNS2=114.114.114.114</span></span><br><span class=\"line\">systemctl restart network</span><br><span class=\"line\">vi /etc/resolv.conf # 查看结果</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置yum镜像源\"><a href=\"#配置yum镜像源\" class=\"headerlink\" title=\"配置yum镜像源\"></a>配置yum镜像源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">备份你的原镜像文件，以免出错后可以恢复</span></span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载新的CentOS-Base.repo 到/etc/yum.repos.d/</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入CentOS-Base.repo文件, 修改文件中的baseurl地址(可省略这步)</span></span><br><span class=\"line\">vi   CentOS-Base.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清楚原有yum缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成缓存</span></span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看配置好的yum源是否正常</span></span><br><span class=\"line\">yum repolist</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用官方安装脚本自动安装</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装命令如下：</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可以使用国内 daocloud 一键安装命令：</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置镜像源</span></span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过命令把https://download-stage.docker.com替换为http://mirrors.aliyun.com/docker-ce</span></span><br><span class=\"line\">vi /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令如下：</span></span><br><span class=\"line\">:%s#https://download.docker.com#http://mirrors.aliyun.com/docker-ce#g</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新yum缓存</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这时，可通过阿里镜像安装doker了</span></span><br><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"监控命令\"><a href=\"#监控命令\" class=\"headerlink\" title=\"监控命令\"></a>监控命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看服务状态，一秒一次，启动之后可通过IP：端口访问界面</span></span><br><span class=\"line\">watch -n 1 docker stack services hadoop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打印信息\"><a href=\"#打印信息\" class=\"headerlink\" title=\"打印信息\"></a>打印信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不打印正常信息，打印错误信息（/dev/null 代表空设备）</span></span><br><span class=\"line\">xargs docker rmi &gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">正常和错误信息都不打印</span></span><br><span class=\"line\">xargs docker rmi &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打印文件或文件夹列表时，排除文件或文件夹\"><a href=\"#打印文件或文件夹列表时，排除文件或文件夹\" class=\"headerlink\" title=\"打印文件或文件夹列表时，排除文件或文件夹\"></a>打印文件或文件夹列表时，排除文件或文件夹</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">排除多个文件或文件夹</span></span><br><span class=\"line\">ls | grep -v &#x27;a\\|b&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nodejs安装\"><a href=\"#nodejs安装\" class=\"headerlink\" title=\"nodejs安装\"></a>nodejs安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nvm install 14.16.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm install -g nrm</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nrm <span class=\"built_in\">ls</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nrm use taobao</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm config <span class=\"built_in\">ls</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">rm</span> -rf ./node_modules</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm install</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm run build:<span class=\"built_in\">test</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker访问权限问题\"><a href=\"#docker访问权限问题\" class=\"headerlink\" title=\"docker访问权限问题\"></a>docker访问权限问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo groupadd docker          #添加docker用户组</span><br><span class=\"line\">sudo gpasswd -a $USER docker  #将当前用户添加至docker用户组</span><br><span class=\"line\">newgrp docker                 #更新docker用户组</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看端口占用\"><a href=\"#查看端口占用\" class=\"headerlink\" title=\"查看端口占用\"></a>查看端口占用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看53端口的占用情况</span></span><br><span class=\"line\">sudo netstat -anlp | grep -w LISTEN | grep 53</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义环境变量\"><a href=\"#定义环境变量\" class=\"headerlink\" title=\"定义环境变量\"></a>定义环境变量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export DOCKER_HOST=tcp://localhost:2375</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"crontab使用\"><a href=\"#crontab使用\" class=\"headerlink\" title=\"crontab使用\"></a>crontab使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">格式</span></span><br><span class=\"line\">minute   hour   day   month   week   command</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加任务</span></span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看任务列表</span></span><br><span class=\"line\">crontab -l</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除任务</span></span><br><span class=\"line\">crontab -r</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看已执行过的任务</span></span><br><span class=\"line\">tail -f /var/log/cron</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置网络时间\"><a href=\"#设置网络时间\" class=\"headerlink\" title=\"设置网络时间\"></a>设置网络时间</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前时间</span></span><br><span class=\"line\">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看时区</span></span><br><span class=\"line\">date &quot;+%Z&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用<span class=\"built_in\">cat</span> /etc/sysconfig/clock查看当前时区</span></span><br><span class=\"line\">cat /etc/sysconfig/clock</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置时区</span></span><br><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看硬件时间</span></span><br><span class=\"line\">hwclock</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">同步硬件时间</span></span><br><span class=\"line\">hwclock -w</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">同步系统时间</span></span><br><span class=\"line\">clock -w</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ntpdate</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">即使是硬件时间也会和网络时间有差异，想要和网络时间完全一致，我们就需要获取网络时间更新本地时间。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装工具：</span> </span><br><span class=\"line\">yum -y install ntp ntpdate</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置系统时间与网络时间同步：</span></span><br><span class=\"line\">ntpdate cn.pool.ntp.org</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将系统时间写入硬件时间：</span></span><br><span class=\"line\">hwclock –systohc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">同步时间服务器</span></span><br><span class=\"line\">ntpdate -u ntp.api.bz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ntp常用服务器：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">中国国家授时中心：210.72.145.44</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NTP服务器(上海) ：ntp.api.bz</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">美国： time.nist.gov</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复旦： ntp.fudan.edu.cn</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">微软公司授时主机(美国) ：time.windows.com</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">北京邮电大学 : s1a.time.edu.cn</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清华大学 : s1b.time.edu.cn</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">北京大学 : s1c.time.edu.cn</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">台警大授时中心(台湾)：asia.pool.ntp.org</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">simple</span></span><br><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\">ntpdate -u ntp.api.bz</span><br><span class=\"line\">hwclock -w</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看linux系统版本\"><a href=\"#查看linux系统版本\" class=\"headerlink\" title=\"查看linux系统版本\"></a>查看linux系统版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只适用于redhat系linux系统</span></span><br><span class=\"line\">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux文件字符串替换命令\"><a href=\"#Linux文件字符串替换命令\" class=\"headerlink\" title=\"Linux文件字符串替换命令\"></a>Linux文件字符串替换命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">perl命令替换</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-e 执行指定的脚本。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-i 原地替换文件，并将旧文件用指定的扩展名备份。不指定扩展名则不备份。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-n 自动循环，相当于 <span class=\"keyword\">while</span>(&lt;&gt;) &#123; 脚本; &#125;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-p 自动循环+自动输出，相当于 <span class=\"keyword\">while</span>(&lt;&gt;) &#123; 脚本; <span class=\"built_in\">print</span>; &#125;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用法示例：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将所有C程序中的foo替换成bar，旧文件备份成.bak</span></span><br><span class=\"line\">perl -p -i.bak -e &#x27;s/\\bfoo\\b/bar/g&#x27; *.c</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将当前文件夹下lishan.txt和lishan.txt.bak中的“shan”都替换为“hua”</span></span><br><span class=\"line\">perl -p -i -e &quot;s/shan/hua/g&quot; ./lishan.txt ./lishan.txt.bak</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\">##################################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sed命令替换</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-i 表示inplace edit，就地修改文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">s表示替换，d表示删除</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">格式: sed -i <span class=\"string\">&quot;s/查找字段/替换字段/g&quot;</span> `grep 查找字段 -rl 路径` 文件名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">示例：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">把当前目录下lishan.txt里的shan都替换为hua</span></span><br><span class=\"line\">sed -i &quot;s/shan/hua/g&quot; lishan.txt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用变量替换(使用双引号)</span></span><br><span class=\"line\">sed -e &quot;s/$var1/$var2/g&quot; filename</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除文本中空行和空格组成的行以及#号注释的行</span></span><br><span class=\"line\">grep -v ^# filename | sed /^[[:space:]]*$/d | sed /^$/d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制命令\"><a href=\"#复制命令\" class=\"headerlink\" title=\"复制命令\"></a>复制命令</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq_40880022/article/details/118937461\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制目录 -- 即将[/www/temp/java/BOOT-INF/lib]里面的所有内容，复制到这个[/www/temp/java/lib]目录里面</span></span><br><span class=\"line\">cp -a  /www/temp/java/BOOT-INF/lib /www/temp/java/lib</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"top命令使用\"><a href=\"#top命令使用\" class=\"headerlink\" title=\"top命令使用\"></a>top命令使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用`1`显示每个CPU的使用情况</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用`t`显示CPU使用百分比进度条</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用`m`显示内存使用百分比进度条</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间相关\"><a href=\"#时间相关\" class=\"headerlink\" title=\"时间相关\"></a>时间相关</h2><ul>\n<li>相关文章<ul>\n<li>[[centos使用date命令同步网络时间]]</li>\n<li>[[timedatectl命令怎么同步网络时间]]</li>\n<li>[[timedatectl命令怎么同步网络时间]]</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看时间</span></span><br><span class=\"line\">timedatectl</span><br><span class=\"line\">date</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改时间</span></span><br><span class=\"line\">date -s &quot;2024-01-19&quot;</span><br><span class=\"line\">date -s &quot;10:30:00&quot;</span><br><span class=\"line\">timedatectl set-time &quot;YYYY-MM-DD HH:MM:SS&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启自动同步时间</span></span><br><span class=\"line\">timedatectl set-ntp true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">手动同步网络时间</span></span><br><span class=\"line\">date -s &quot;$(curl -s --head http://www.baidu.com | grep &#x27;^Date:&#x27; | cut -d&#x27; &#x27; -f3-6)Z&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"linux相关命令使用记录\"><a href=\"#linux相关命令使用记录\" class=\"headerlink\" title=\"linux相关命令使用记录\"></a>linux相关命令使用记录</h1><h2 id=\"安装docker并配置加速器\"><a href=\"#安装docker并配置加速器\" class=\"headerlink\" title=\"安装docker并配置加速器\"></a>安装docker并配置加速器</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改主机名\"><a href=\"#修改主机名\" class=\"headerlink\" title=\"修改主机名\"></a>修改主机名</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname manager43</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取ip地址\"><a href=\"#获取ip地址\" class=\"headerlink\" title=\"获取ip地址\"></a>获取ip地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(hostname -I|<span class=\"built_in\">cut</span> -d<span class=\"string\">&quot; &quot;</span> -f 1)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置hosts文件-可配置可不配置\"><a href=\"#配置hosts文件-可配置可不配置\" class=\"headerlink\" title=\"配置hosts文件(可配置可不配置)\"></a>配置hosts文件(可配置可不配置)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\"> </span><br><span class=\"line\">192.168.31.43 manager43</span><br><span class=\"line\">192.168.31.188 node188</span><br><span class=\"line\">192.168.31.139 node139</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用scp复制到node主机\"><a href=\"#使用scp复制到node主机\" class=\"headerlink\" title=\"使用scp复制到node主机\"></a>使用scp复制到node主机</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /etc/hosts root@192.168.31.188:/etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看防火墙\"><a href=\"#查看防火墙\" class=\"headerlink\" title=\"查看防火墙\"></a>查看防火墙</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`firewall-cmd --zone=public --list-ports` 和 `netstat -tlunp`</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置防火墙\"><a href=\"#设置防火墙\" class=\"headerlink\" title=\"设置防火墙\"></a>设置防火墙</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">防火墙配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">官方文档</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">centos7采用firewalld来配置防火墙，默认不开放接口。官方文档中给出的方案比较底层。这里我们采取自定义Service的方式来配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建文件</span></span><br><span class=\"line\">vi /etc/firewalld/services/docker.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加入以下内容</span></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">      &lt;service&gt;</span><br><span class=\"line\">        &lt;short&gt;docker&lt;/short&gt;</span><br><span class=\"line\">        &lt;description&gt;docker daemon for remote access&lt;/description&gt;</span><br><span class=\"line\">        &lt;port protocol=&quot;tcp&quot; port=&quot;2375&quot;/&gt;</span><br><span class=\"line\">      &lt;/service&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看默认zone(一般是public)</span></span><br><span class=\"line\">firewall-cmd --get-default-zone</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在zone中加入这个service</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-service=docker --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重新加载</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询端口</span></span><br><span class=\"line\">firewall-cmd --service=docker --get-ports --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参考链接</span></span><br><span class=\"line\">https://my.oschina.net/u/4560825/blog/4314028</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加dns\"><a href=\"#添加dns\" class=\"headerlink\" title=\"添加dns\"></a>添加dns</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">DNS2=114.114.114.114</span></span><br><span class=\"line\">systemctl restart network</span><br><span class=\"line\">vi /etc/resolv.conf # 查看结果</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置yum镜像源\"><a href=\"#配置yum镜像源\" class=\"headerlink\" title=\"配置yum镜像源\"></a>配置yum镜像源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">备份你的原镜像文件，以免出错后可以恢复</span></span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载新的CentOS-Base.repo 到/etc/yum.repos.d/</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入CentOS-Base.repo文件, 修改文件中的baseurl地址(可省略这步)</span></span><br><span class=\"line\">vi   CentOS-Base.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清楚原有yum缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成缓存</span></span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看配置好的yum源是否正常</span></span><br><span class=\"line\">yum repolist</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用官方安装脚本自动安装</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装命令如下：</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可以使用国内 daocloud 一键安装命令：</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置镜像源</span></span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过命令把https://download-stage.docker.com替换为http://mirrors.aliyun.com/docker-ce</span></span><br><span class=\"line\">vi /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令如下：</span></span><br><span class=\"line\">:%s#https://download.docker.com#http://mirrors.aliyun.com/docker-ce#g</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新yum缓存</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这时，可通过阿里镜像安装doker了</span></span><br><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"监控命令\"><a href=\"#监控命令\" class=\"headerlink\" title=\"监控命令\"></a>监控命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看服务状态，一秒一次，启动之后可通过IP：端口访问界面</span></span><br><span class=\"line\">watch -n 1 docker stack services hadoop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打印信息\"><a href=\"#打印信息\" class=\"headerlink\" title=\"打印信息\"></a>打印信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不打印正常信息，打印错误信息（/dev/null 代表空设备）</span></span><br><span class=\"line\">xargs docker rmi &gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">正常和错误信息都不打印</span></span><br><span class=\"line\">xargs docker rmi &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打印文件或文件夹列表时，排除文件或文件夹\"><a href=\"#打印文件或文件夹列表时，排除文件或文件夹\" class=\"headerlink\" title=\"打印文件或文件夹列表时，排除文件或文件夹\"></a>打印文件或文件夹列表时，排除文件或文件夹</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">排除多个文件或文件夹</span></span><br><span class=\"line\">ls | grep -v &#x27;a\\|b&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nodejs安装\"><a href=\"#nodejs安装\" class=\"headerlink\" title=\"nodejs安装\"></a>nodejs安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nvm install 14.16.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm install -g nrm</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nrm <span class=\"built_in\">ls</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nrm use taobao</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm config <span class=\"built_in\">ls</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">rm</span> -rf ./node_modules</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm install</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm run build:<span class=\"built_in\">test</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker访问权限问题\"><a href=\"#docker访问权限问题\" class=\"headerlink\" title=\"docker访问权限问题\"></a>docker访问权限问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo groupadd docker          #添加docker用户组</span><br><span class=\"line\">sudo gpasswd -a $USER docker  #将当前用户添加至docker用户组</span><br><span class=\"line\">newgrp docker                 #更新docker用户组</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看端口占用\"><a href=\"#查看端口占用\" class=\"headerlink\" title=\"查看端口占用\"></a>查看端口占用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看53端口的占用情况</span></span><br><span class=\"line\">sudo netstat -anlp | grep -w LISTEN | grep 53</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义环境变量\"><a href=\"#定义环境变量\" class=\"headerlink\" title=\"定义环境变量\"></a>定义环境变量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export DOCKER_HOST=tcp://localhost:2375</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"crontab使用\"><a href=\"#crontab使用\" class=\"headerlink\" title=\"crontab使用\"></a>crontab使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">格式</span></span><br><span class=\"line\">minute   hour   day   month   week   command</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加任务</span></span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看任务列表</span></span><br><span class=\"line\">crontab -l</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除任务</span></span><br><span class=\"line\">crontab -r</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看已执行过的任务</span></span><br><span class=\"line\">tail -f /var/log/cron</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置网络时间\"><a href=\"#设置网络时间\" class=\"headerlink\" title=\"设置网络时间\"></a>设置网络时间</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前时间</span></span><br><span class=\"line\">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看时区</span></span><br><span class=\"line\">date &quot;+%Z&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用<span class=\"built_in\">cat</span> /etc/sysconfig/clock查看当前时区</span></span><br><span class=\"line\">cat /etc/sysconfig/clock</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置时区</span></span><br><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看硬件时间</span></span><br><span class=\"line\">hwclock</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">同步硬件时间</span></span><br><span class=\"line\">hwclock -w</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">同步系统时间</span></span><br><span class=\"line\">clock -w</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ntpdate</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">即使是硬件时间也会和网络时间有差异，想要和网络时间完全一致，我们就需要获取网络时间更新本地时间。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装工具：</span> </span><br><span class=\"line\">yum -y install ntp ntpdate</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置系统时间与网络时间同步：</span></span><br><span class=\"line\">ntpdate cn.pool.ntp.org</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将系统时间写入硬件时间：</span></span><br><span class=\"line\">hwclock –systohc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">同步时间服务器</span></span><br><span class=\"line\">ntpdate -u ntp.api.bz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ntp常用服务器：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">中国国家授时中心：210.72.145.44</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NTP服务器(上海) ：ntp.api.bz</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">美国： time.nist.gov</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复旦： ntp.fudan.edu.cn</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">微软公司授时主机(美国) ：time.windows.com</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">北京邮电大学 : s1a.time.edu.cn</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清华大学 : s1b.time.edu.cn</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">北京大学 : s1c.time.edu.cn</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">台警大授时中心(台湾)：asia.pool.ntp.org</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">simple</span></span><br><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\">ntpdate -u ntp.api.bz</span><br><span class=\"line\">hwclock -w</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看linux系统版本\"><a href=\"#查看linux系统版本\" class=\"headerlink\" title=\"查看linux系统版本\"></a>查看linux系统版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只适用于redhat系linux系统</span></span><br><span class=\"line\">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux文件字符串替换命令\"><a href=\"#Linux文件字符串替换命令\" class=\"headerlink\" title=\"Linux文件字符串替换命令\"></a>Linux文件字符串替换命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">perl命令替换</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-e 执行指定的脚本。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-i 原地替换文件，并将旧文件用指定的扩展名备份。不指定扩展名则不备份。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-n 自动循环，相当于 <span class=\"keyword\">while</span>(&lt;&gt;) &#123; 脚本; &#125;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-p 自动循环+自动输出，相当于 <span class=\"keyword\">while</span>(&lt;&gt;) &#123; 脚本; <span class=\"built_in\">print</span>; &#125;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用法示例：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将所有C程序中的foo替换成bar，旧文件备份成.bak</span></span><br><span class=\"line\">perl -p -i.bak -e &#x27;s/\\bfoo\\b/bar/g&#x27; *.c</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将当前文件夹下lishan.txt和lishan.txt.bak中的“shan”都替换为“hua”</span></span><br><span class=\"line\">perl -p -i -e &quot;s/shan/hua/g&quot; ./lishan.txt ./lishan.txt.bak</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\">##################################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sed命令替换</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-i 表示inplace edit，就地修改文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">s表示替换，d表示删除</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">格式: sed -i <span class=\"string\">&quot;s/查找字段/替换字段/g&quot;</span> `grep 查找字段 -rl 路径` 文件名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">示例：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">把当前目录下lishan.txt里的shan都替换为hua</span></span><br><span class=\"line\">sed -i &quot;s/shan/hua/g&quot; lishan.txt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用变量替换(使用双引号)</span></span><br><span class=\"line\">sed -e &quot;s/$var1/$var2/g&quot; filename</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除文本中空行和空格组成的行以及#号注释的行</span></span><br><span class=\"line\">grep -v ^# filename | sed /^[[:space:]]*$/d | sed /^$/d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制命令\"><a href=\"#复制命令\" class=\"headerlink\" title=\"复制命令\"></a>复制命令</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq_40880022/article/details/118937461\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制目录 -- 即将[/www/temp/java/BOOT-INF/lib]里面的所有内容，复制到这个[/www/temp/java/lib]目录里面</span></span><br><span class=\"line\">cp -a  /www/temp/java/BOOT-INF/lib /www/temp/java/lib</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"top命令使用\"><a href=\"#top命令使用\" class=\"headerlink\" title=\"top命令使用\"></a>top命令使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用`1`显示每个CPU的使用情况</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用`t`显示CPU使用百分比进度条</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用`m`显示内存使用百分比进度条</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间相关\"><a href=\"#时间相关\" class=\"headerlink\" title=\"时间相关\"></a>时间相关</h2><ul>\n<li>相关文章<ul>\n<li>[[centos使用date命令同步网络时间]]</li>\n<li>[[timedatectl命令怎么同步网络时间]]</li>\n<li>[[timedatectl命令怎么同步网络时间]]</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看时间</span></span><br><span class=\"line\">timedatectl</span><br><span class=\"line\">date</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改时间</span></span><br><span class=\"line\">date -s &quot;2024-01-19&quot;</span><br><span class=\"line\">date -s &quot;10:30:00&quot;</span><br><span class=\"line\">timedatectl set-time &quot;YYYY-MM-DD HH:MM:SS&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启自动同步时间</span></span><br><span class=\"line\">timedatectl set-ntp true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">手动同步网络时间</span></span><br><span class=\"line\">date -s &quot;$(curl -s --head http://www.baidu.com | grep &#x27;^Date:&#x27; | cut -d&#x27; &#x27; -f3-6)Z&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"nfs-server","nav_order":12,"description":"服务端安装NFS服务步骤：- 第一步：安装NFS和rpc。```shell[root@localhost ~] yum install -y  nfs-utils   安装nfs服务[root@localhost ~] yum install -y rpcbind安装rpc服务","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n## 服务端安装NFS服务步骤：\n- 第一步：安装NFS和rpc。\n```shell\n[root@localhost ~]# yum install -y  nfs-utils   \n#安装nfs服务\n[root@localhost ~]# yum install -y rpcbind\n#安装rpc服务\n\n```\n- 第二步：启动服务和设置开启启动：\n> 注意：先启动rpc服务，再启动nfs服务。\n```shell\n[root@localhost ~]# systemctl start rpcbind    #先启动rpc服务\n[root@localhost ~]# systemctl enable rpcbind   #设置开机启动\n[root@localhost ~]# systemctl start nfs-server nfs-secure-server      \n#启动nfs服务和nfs安全传输服务(nfs-secure-server 可不需要)\n[root@localhost ~]# systemctl enable nfs-server nfs-secure-server\n# 设置开启启动(nfs-secure-server 可不需要)\n\n```\n > 配置防火墙\n```shell\n[root@localhost /]# firewall-cmd --permanent --add-service=rpc-bind\nsuccess   #配置防火墙放行rpc-bind服务\n[root@localhost /]# firewall-cmd --permanent --add-service=nfs\nsuccess   #配置防火墙放行nfs服务 (未开启报错： clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host))\n[root@localhost /]# firewall-cmd --permanent --add-service=mountd\nsuccess   #配置防火墙放行mountd服务（未开启报错: rpc mount export: RPC: Unable to receive; errno = No route to host）\n[root@localhost /]# firewall-cmd  --reload \nsuccess\n\n```\n- 第三步：配置共享文件目录，编辑配置文件：\n  1. 首先创建共享目录，然后在/etc/exports配置文件中编辑配置即可。\n```shell\n[root@localhost /]# mkdir /public\n#创建public共享目录\n[root@localhost /]# vi /etc/exports\n\t/public 192.168.245.0/24(rw)\n\t/protected 192.168.245.0/24(ro)\n[root@localhost /]# systemctl reload nfs \n#重新加载NFS服务，使配置文件生效(取其一执行即可)\n[root@localhost /]# exportfs -rv\n#暴露NFS服务，使配置文件生效(取其一执行即可)\n\n```\n## NFS客户端挂载配置：\n- 第一步：使用showmount命令查看nfs服务器共享信息。输出格式为“共享的目录名称 允许使用客户端地址”。\n```shell\nyum -y install nfs-utils\n# 安装nfs-utils客户端\n[root@localhost ~]# showmount -e 192.168.245.128      \nExport list for 192.168.245.128:\n/protected 192.168.245.0/24\n/public    192.168.245.0/24\n\n```\n- 第二步，在客户端创建目录，并挂载共享目录。\n```shell\n[root@localhost ~]# mkdir /mnt/public\n[root@localhost ~]# mkdir /mnt/data\n[root@localhost ~]# vim /etc/fstab \n#在该文件中挂载，使系统每次启动时都能自动挂载\n\t192.168.245.128:/public  /mnt/public       nfs    defaults 0 0\n\t192.168.245.128:/protected /mnt/data     nfs    defaults  0 1\n[root@localhost ~]# mount -a   #是文件/etc/fstab生效\n\n```\n- 第三步：检查：\n```shell\nshowmount -e 192.168.56.103\n# 查看是否有权限访问\n[root@mail ~]# df -Th\n# 查看挂载情况\nFilesystem                 Type      Size  Used Avail Use% Mounted on\n/dev/mapper/rhel-root      xfs        17G  3.1G   14G  18% /\ndevtmpfs                   devtmpfs  1.4G     0  1.4G   0% /dev\ntmpfs                      tmpfs     1.4G  140K  1.4G   1% /dev/shm\ntmpfs                      tmpfs     1.4G  9.1M  1.4G   1% /run\ntmpfs                      tmpfs     1.4G     0  1.4G   0% /sys/fs/cgroup\n/dev/sda1                  xfs      1014M  173M  842M  18% /boot\ntmpfs                      tmpfs     280M   32K  280M   1% /run/user/0\n/dev/sr0                   iso9660   3.6G  3.6G     0 100% /mnt/cdrom\n192.168.245.128:/public    nfs4       17G  3.7G   14G  22% /mnt/public\n192.168.245.128:/protected nfs4       17G  3.7G   14G  22% /mnt/data\n\n```\n","source":"_posts/docker/doc/nfs-server.md","raw":"---\nlayout: default\ntitle: nfs-server\nnav_order: 12\ndescription: 服务端安装NFS服务步骤：- 第一步：安装NFS和rpc。```shell[root@localhost ~] yum install -y  nfs-utils   安装nfs服务[root@localhost\n  ~] yum install -y rpcbind安装rpc服务\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/nfs-server/\"\ngrand_parent: Docker\n---\n\n## 服务端安装NFS服务步骤：\n- 第一步：安装NFS和rpc。\n```shell\n[root@localhost ~]# yum install -y  nfs-utils   \n#安装nfs服务\n[root@localhost ~]# yum install -y rpcbind\n#安装rpc服务\n\n```\n- 第二步：启动服务和设置开启启动：\n> 注意：先启动rpc服务，再启动nfs服务。\n```shell\n[root@localhost ~]# systemctl start rpcbind    #先启动rpc服务\n[root@localhost ~]# systemctl enable rpcbind   #设置开机启动\n[root@localhost ~]# systemctl start nfs-server nfs-secure-server      \n#启动nfs服务和nfs安全传输服务(nfs-secure-server 可不需要)\n[root@localhost ~]# systemctl enable nfs-server nfs-secure-server\n# 设置开启启动(nfs-secure-server 可不需要)\n\n```\n > 配置防火墙\n```shell\n[root@localhost /]# firewall-cmd --permanent --add-service=rpc-bind\nsuccess   #配置防火墙放行rpc-bind服务\n[root@localhost /]# firewall-cmd --permanent --add-service=nfs\nsuccess   #配置防火墙放行nfs服务 (未开启报错： clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host))\n[root@localhost /]# firewall-cmd --permanent --add-service=mountd\nsuccess   #配置防火墙放行mountd服务（未开启报错: rpc mount export: RPC: Unable to receive; errno = No route to host）\n[root@localhost /]# firewall-cmd  --reload \nsuccess\n\n```\n- 第三步：配置共享文件目录，编辑配置文件：\n  1. 首先创建共享目录，然后在/etc/exports配置文件中编辑配置即可。\n```shell\n[root@localhost /]# mkdir /public\n#创建public共享目录\n[root@localhost /]# vi /etc/exports\n\t/public 192.168.245.0/24(rw)\n\t/protected 192.168.245.0/24(ro)\n[root@localhost /]# systemctl reload nfs \n#重新加载NFS服务，使配置文件生效(取其一执行即可)\n[root@localhost /]# exportfs -rv\n#暴露NFS服务，使配置文件生效(取其一执行即可)\n\n```\n## NFS客户端挂载配置：\n- 第一步：使用showmount命令查看nfs服务器共享信息。输出格式为“共享的目录名称 允许使用客户端地址”。\n```shell\nyum -y install nfs-utils\n# 安装nfs-utils客户端\n[root@localhost ~]# showmount -e 192.168.245.128      \nExport list for 192.168.245.128:\n/protected 192.168.245.0/24\n/public    192.168.245.0/24\n\n```\n- 第二步，在客户端创建目录，并挂载共享目录。\n```shell\n[root@localhost ~]# mkdir /mnt/public\n[root@localhost ~]# mkdir /mnt/data\n[root@localhost ~]# vim /etc/fstab \n#在该文件中挂载，使系统每次启动时都能自动挂载\n\t192.168.245.128:/public  /mnt/public       nfs    defaults 0 0\n\t192.168.245.128:/protected /mnt/data     nfs    defaults  0 1\n[root@localhost ~]# mount -a   #是文件/etc/fstab生效\n\n```\n- 第三步：检查：\n```shell\nshowmount -e 192.168.56.103\n# 查看是否有权限访问\n[root@mail ~]# df -Th\n# 查看挂载情况\nFilesystem                 Type      Size  Used Avail Use% Mounted on\n/dev/mapper/rhel-root      xfs        17G  3.1G   14G  18% /\ndevtmpfs                   devtmpfs  1.4G     0  1.4G   0% /dev\ntmpfs                      tmpfs     1.4G  140K  1.4G   1% /dev/shm\ntmpfs                      tmpfs     1.4G  9.1M  1.4G   1% /run\ntmpfs                      tmpfs     1.4G     0  1.4G   0% /sys/fs/cgroup\n/dev/sda1                  xfs      1014M  173M  842M  18% /boot\ntmpfs                      tmpfs     280M   32K  280M   1% /run/user/0\n/dev/sr0                   iso9660   3.6G  3.6G     0 100% /mnt/cdrom\n192.168.245.128:/public    nfs4       17G  3.7G   14G  22% /mnt/public\n192.168.245.128:/protected nfs4       17G  3.7G   14G  22% /mnt/data\n\n```\n","slug":"docker/doc/nfs-server","published":1,"date":"2025-02-23T07:43:31.449Z","updated":"2025-02-23T07:43:31.449Z","__permalink":"/docker/doc/nfs-server/","comments":1,"photos":[],"_id":"cm7k5rwa4000ymsws37v91sws","content":"<h2 id=\"服务端安装NFS服务步骤：\"><a href=\"#服务端安装NFS服务步骤：\" class=\"headerlink\" title=\"服务端安装NFS服务步骤：\"></a>服务端安装NFS服务步骤：</h2><ul>\n<li>第一步：安装NFS和rpc。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum install -y  nfs-utils   </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装nfs服务</span></span><br><span class=\"line\">[root@localhost ~]# yum install -y rpcbind</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装rpc服务</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>第二步：启动服务和设置开启启动：<blockquote>\n<p>注意：先启动rpc服务，再启动nfs服务。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl start rpcbind    #先启动rpc服务</span><br><span class=\"line\">[root@localhost ~]# systemctl enable rpcbind   #设置开机启动</span><br><span class=\"line\">[root@localhost ~]# systemctl start nfs-server nfs-secure-server      </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动nfs服务和nfs安全传输服务(nfs-secure-server 可不需要)</span></span><br><span class=\"line\">[root@localhost ~]# systemctl enable nfs-server nfs-secure-server</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置开启启动(nfs-secure-server 可不需要)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置防火墙</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /]# firewall-cmd --permanent --add-service=rpc-bind</span><br><span class=\"line\">success   #配置防火墙放行rpc-bind服务</span><br><span class=\"line\">[root@localhost /]# firewall-cmd --permanent --add-service=nfs</span><br><span class=\"line\">success   #配置防火墙放行nfs服务 (未开启报错： clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host))</span><br><span class=\"line\">[root@localhost /]# firewall-cmd --permanent --add-service=mountd</span><br><span class=\"line\">success   #配置防火墙放行mountd服务（未开启报错: rpc mount export: RPC: Unable to receive; errno = No route to host）</span><br><span class=\"line\">[root@localhost /]# firewall-cmd  --reload </span><br><span class=\"line\">success</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>第三步：配置共享文件目录，编辑配置文件：<ol>\n<li>首先创建共享目录，然后在&#x2F;etc&#x2F;exports配置文件中编辑配置即可。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /]# mkdir /public</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建public共享目录</span></span><br><span class=\"line\">[root@localhost /]# vi /etc/exports</span><br><span class=\"line\">\t/public 192.168.245.0/24(rw)</span><br><span class=\"line\">\t/protected 192.168.245.0/24(ro)</span><br><span class=\"line\">[root@localhost /]# systemctl reload nfs </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新加载NFS服务，使配置文件生效(取其一执行即可)</span></span><br><span class=\"line\">[root@localhost /]# exportfs -rv</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">暴露NFS服务，使配置文件生效(取其一执行即可)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"NFS客户端挂载配置：\"><a href=\"#NFS客户端挂载配置：\" class=\"headerlink\" title=\"NFS客户端挂载配置：\"></a>NFS客户端挂载配置：</h2><ul>\n<li>第一步：使用showmount命令查看nfs服务器共享信息。输出格式为“共享的目录名称 允许使用客户端地址”。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nfs-utils</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装nfs-utils客户端</span></span><br><span class=\"line\">[root@localhost ~]# showmount -e 192.168.245.128      </span><br><span class=\"line\">Export list for 192.168.245.128:</span><br><span class=\"line\">/protected 192.168.245.0/24</span><br><span class=\"line\">/public    192.168.245.0/24</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>第二步，在客户端创建目录，并挂载共享目录。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mkdir /mnt/public</span><br><span class=\"line\">[root@localhost ~]# mkdir /mnt/data</span><br><span class=\"line\">[root@localhost ~]# vim /etc/fstab </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在该文件中挂载，使系统每次启动时都能自动挂载</span></span><br><span class=\"line\">\t192.168.245.128:/public  /mnt/public       nfs    defaults 0 0</span><br><span class=\"line\">\t192.168.245.128:/protected /mnt/data     nfs    defaults  0 1</span><br><span class=\"line\">[root@localhost ~]# mount -a   #是文件/etc/fstab生效</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>第三步：检查：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showmount -e 192.168.56.103</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看是否有权限访问</span></span><br><span class=\"line\">[root@mail ~]# df -Th</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看挂载情况</span></span><br><span class=\"line\">Filesystem                 Type      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/mapper/rhel-root      xfs        17G  3.1G   14G  18% /</span><br><span class=\"line\">devtmpfs                   devtmpfs  1.4G     0  1.4G   0% /dev</span><br><span class=\"line\">tmpfs                      tmpfs     1.4G  140K  1.4G   1% /dev/shm</span><br><span class=\"line\">tmpfs                      tmpfs     1.4G  9.1M  1.4G   1% /run</span><br><span class=\"line\">tmpfs                      tmpfs     1.4G     0  1.4G   0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1                  xfs      1014M  173M  842M  18% /boot</span><br><span class=\"line\">tmpfs                      tmpfs     280M   32K  280M   1% /run/user/0</span><br><span class=\"line\">/dev/sr0                   iso9660   3.6G  3.6G     0 100% /mnt/cdrom</span><br><span class=\"line\">192.168.245.128:/public    nfs4       17G  3.7G   14G  22% /mnt/public</span><br><span class=\"line\">192.168.245.128:/protected nfs4       17G  3.7G   14G  22% /mnt/data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"服务端安装NFS服务步骤：\"><a href=\"#服务端安装NFS服务步骤：\" class=\"headerlink\" title=\"服务端安装NFS服务步骤：\"></a>服务端安装NFS服务步骤：</h2><ul>\n<li>第一步：安装NFS和rpc。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum install -y  nfs-utils   </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装nfs服务</span></span><br><span class=\"line\">[root@localhost ~]# yum install -y rpcbind</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装rpc服务</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>第二步：启动服务和设置开启启动：<blockquote>\n<p>注意：先启动rpc服务，再启动nfs服务。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl start rpcbind    #先启动rpc服务</span><br><span class=\"line\">[root@localhost ~]# systemctl enable rpcbind   #设置开机启动</span><br><span class=\"line\">[root@localhost ~]# systemctl start nfs-server nfs-secure-server      </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动nfs服务和nfs安全传输服务(nfs-secure-server 可不需要)</span></span><br><span class=\"line\">[root@localhost ~]# systemctl enable nfs-server nfs-secure-server</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置开启启动(nfs-secure-server 可不需要)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置防火墙</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /]# firewall-cmd --permanent --add-service=rpc-bind</span><br><span class=\"line\">success   #配置防火墙放行rpc-bind服务</span><br><span class=\"line\">[root@localhost /]# firewall-cmd --permanent --add-service=nfs</span><br><span class=\"line\">success   #配置防火墙放行nfs服务 (未开启报错： clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host))</span><br><span class=\"line\">[root@localhost /]# firewall-cmd --permanent --add-service=mountd</span><br><span class=\"line\">success   #配置防火墙放行mountd服务（未开启报错: rpc mount export: RPC: Unable to receive; errno = No route to host）</span><br><span class=\"line\">[root@localhost /]# firewall-cmd  --reload </span><br><span class=\"line\">success</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>第三步：配置共享文件目录，编辑配置文件：<ol>\n<li>首先创建共享目录，然后在&#x2F;etc&#x2F;exports配置文件中编辑配置即可。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /]# mkdir /public</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建public共享目录</span></span><br><span class=\"line\">[root@localhost /]# vi /etc/exports</span><br><span class=\"line\">\t/public 192.168.245.0/24(rw)</span><br><span class=\"line\">\t/protected 192.168.245.0/24(ro)</span><br><span class=\"line\">[root@localhost /]# systemctl reload nfs </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新加载NFS服务，使配置文件生效(取其一执行即可)</span></span><br><span class=\"line\">[root@localhost /]# exportfs -rv</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">暴露NFS服务，使配置文件生效(取其一执行即可)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"NFS客户端挂载配置：\"><a href=\"#NFS客户端挂载配置：\" class=\"headerlink\" title=\"NFS客户端挂载配置：\"></a>NFS客户端挂载配置：</h2><ul>\n<li>第一步：使用showmount命令查看nfs服务器共享信息。输出格式为“共享的目录名称 允许使用客户端地址”。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nfs-utils</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装nfs-utils客户端</span></span><br><span class=\"line\">[root@localhost ~]# showmount -e 192.168.245.128      </span><br><span class=\"line\">Export list for 192.168.245.128:</span><br><span class=\"line\">/protected 192.168.245.0/24</span><br><span class=\"line\">/public    192.168.245.0/24</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>第二步，在客户端创建目录，并挂载共享目录。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mkdir /mnt/public</span><br><span class=\"line\">[root@localhost ~]# mkdir /mnt/data</span><br><span class=\"line\">[root@localhost ~]# vim /etc/fstab </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在该文件中挂载，使系统每次启动时都能自动挂载</span></span><br><span class=\"line\">\t192.168.245.128:/public  /mnt/public       nfs    defaults 0 0</span><br><span class=\"line\">\t192.168.245.128:/protected /mnt/data     nfs    defaults  0 1</span><br><span class=\"line\">[root@localhost ~]# mount -a   #是文件/etc/fstab生效</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>第三步：检查：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showmount -e 192.168.56.103</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看是否有权限访问</span></span><br><span class=\"line\">[root@mail ~]# df -Th</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看挂载情况</span></span><br><span class=\"line\">Filesystem                 Type      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/mapper/rhel-root      xfs        17G  3.1G   14G  18% /</span><br><span class=\"line\">devtmpfs                   devtmpfs  1.4G     0  1.4G   0% /dev</span><br><span class=\"line\">tmpfs                      tmpfs     1.4G  140K  1.4G   1% /dev/shm</span><br><span class=\"line\">tmpfs                      tmpfs     1.4G  9.1M  1.4G   1% /run</span><br><span class=\"line\">tmpfs                      tmpfs     1.4G     0  1.4G   0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1                  xfs      1014M  173M  842M  18% /boot</span><br><span class=\"line\">tmpfs                      tmpfs     280M   32K  280M   1% /run/user/0</span><br><span class=\"line\">/dev/sr0                   iso9660   3.6G  3.6G     0 100% /mnt/cdrom</span><br><span class=\"line\">192.168.245.128:/public    nfs4       17G  3.7G   14G  22% /mnt/public</span><br><span class=\"line\">192.168.245.128:/protected nfs4       17G  3.7G   14G  22% /mnt/data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"layout":"default","title":"remote","nav_order":12,"description":"远程连接相关记录","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# 远程连接相关记录\n\n## 不用密码直接登陆 -- ssh密钥登陆\n\n打开你的git-bash，输入`ssh-keygen` ，然后输入时，三个空回车即可。\n\n接着执行`ssh-copy-id <用户名>@<主机IP>`\n\n最后使用ssh尝试连接，哇，一气呵成，直接连上了！\n> 需要远程多台时，`ssh-keygen`这个命令也只需一次即可，`ssh-copy-id <用户名>@<主机IP>`这个使用多次即可\n","source":"_posts/docker/doc/remote.md","raw":"---\nlayout: default\ntitle: remote\nnav_order: 12\ndescription: 远程连接相关记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/remote/\"\ngrand_parent: Docker\n---\n\n# 远程连接相关记录\n\n## 不用密码直接登陆 -- ssh密钥登陆\n\n打开你的git-bash，输入`ssh-keygen` ，然后输入时，三个空回车即可。\n\n接着执行`ssh-copy-id <用户名>@<主机IP>`\n\n最后使用ssh尝试连接，哇，一气呵成，直接连上了！\n> 需要远程多台时，`ssh-keygen`这个命令也只需一次即可，`ssh-copy-id <用户名>@<主机IP>`这个使用多次即可\n","slug":"docker/doc/remote","published":1,"date":"2025-02-23T07:43:31.449Z","updated":"2025-02-23T07:43:31.449Z","__permalink":"/docker/doc/remote/","comments":1,"photos":[],"_id":"cm7k5rwa4000zmsws25dfg6u5","content":"<h1 id=\"远程连接相关记录\"><a href=\"#远程连接相关记录\" class=\"headerlink\" title=\"远程连接相关记录\"></a>远程连接相关记录</h1><h2 id=\"不用密码直接登陆-–-ssh密钥登陆\"><a href=\"#不用密码直接登陆-–-ssh密钥登陆\" class=\"headerlink\" title=\"不用密码直接登陆 – ssh密钥登陆\"></a>不用密码直接登陆 – ssh密钥登陆</h2><p>打开你的git-bash，输入<code>ssh-keygen</code> ，然后输入时，三个空回车即可。</p>\n<p>接着执行<code>ssh-copy-id &lt;用户名&gt;@&lt;主机IP&gt;</code></p>\n<p>最后使用ssh尝试连接，哇，一气呵成，直接连上了！</p>\n<blockquote>\n<p>需要远程多台时，<code>ssh-keygen</code>这个命令也只需一次即可，<code>ssh-copy-id &lt;用户名&gt;@&lt;主机IP&gt;</code>这个使用多次即可</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"远程连接相关记录\"><a href=\"#远程连接相关记录\" class=\"headerlink\" title=\"远程连接相关记录\"></a>远程连接相关记录</h1><h2 id=\"不用密码直接登陆-–-ssh密钥登陆\"><a href=\"#不用密码直接登陆-–-ssh密钥登陆\" class=\"headerlink\" title=\"不用密码直接登陆 – ssh密钥登陆\"></a>不用密码直接登陆 – ssh密钥登陆</h2><p>打开你的git-bash，输入<code>ssh-keygen</code> ，然后输入时，三个空回车即可。</p>\n<p>接着执行<code>ssh-copy-id &lt;用户名&gt;@&lt;主机IP&gt;</code></p>\n<p>最后使用ssh尝试连接，哇，一气呵成，直接连上了！</p>\n<blockquote>\n<p>需要远程多台时，<code>ssh-keygen</code>这个命令也只需一次即可，<code>ssh-copy-id &lt;用户名&gt;@&lt;主机IP&gt;</code>这个使用多次即可</p>\n</blockquote>\n"},{"layout":"default","title":"soft","nav_order":12,"description":"软件相关","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# 软件相关\n\n## Sonatype Nexus\n\n- 用于搭建maven私服，以后部署玩玩\n  \n","source":"_posts/docker/doc/soft.md","raw":"---\nlayout: default\ntitle: soft\nnav_order: 12\ndescription: 软件相关\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/soft/\"\ngrand_parent: Docker\n---\n\n# 软件相关\n\n## Sonatype Nexus\n\n- 用于搭建maven私服，以后部署玩玩\n  \n","slug":"docker/doc/soft","published":1,"date":"2025-02-23T07:43:31.449Z","updated":"2025-02-23T07:43:31.449Z","__permalink":"/docker/doc/soft/","comments":1,"photos":[],"_id":"cm7k5rwa40010msws9w8ih0sw","content":"<h1 id=\"软件相关\"><a href=\"#软件相关\" class=\"headerlink\" title=\"软件相关\"></a>软件相关</h1><h2 id=\"Sonatype-Nexus\"><a href=\"#Sonatype-Nexus\" class=\"headerlink\" title=\"Sonatype Nexus\"></a>Sonatype Nexus</h2><ul>\n<li>用于搭建maven私服，以后部署玩玩</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"软件相关\"><a href=\"#软件相关\" class=\"headerlink\" title=\"软件相关\"></a>软件相关</h1><h2 id=\"Sonatype-Nexus\"><a href=\"#Sonatype-Nexus\" class=\"headerlink\" title=\"Sonatype Nexus\"></a>Sonatype Nexus</h2><ul>\n<li>用于搭建maven私服，以后部署玩玩</li>\n</ul>\n"},{"layout":"default","title":"ssl","nav_order":12,"description":"开启ssl","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# 开启ssl\n\n## telnet ip 443 不通的问题\n\n- 大概率是端口没开导致，需要检查下docker-compose文件的端口映射问题\n- 同时可以使用`netstat -npl | grep 443`命令查看端口开通情况\n- 或者使用`telnet ip 443`查看端口开通情况\n","source":"_posts/docker/doc/ssl.md","raw":"---\nlayout: default\ntitle: ssl\nnav_order: 12\ndescription: 开启ssl\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/ssl/\"\ngrand_parent: Docker\n---\n\n# 开启ssl\n\n## telnet ip 443 不通的问题\n\n- 大概率是端口没开导致，需要检查下docker-compose文件的端口映射问题\n- 同时可以使用`netstat -npl | grep 443`命令查看端口开通情况\n- 或者使用`telnet ip 443`查看端口开通情况\n","slug":"docker/doc/ssl","published":1,"date":"2025-02-23T07:43:31.178Z","updated":"2025-02-23T07:43:31.179Z","__permalink":"/docker/doc/ssl/","comments":1,"photos":[],"_id":"cm7k5rwa40011mswsdolkgsn6","content":"<h1 id=\"开启ssl\"><a href=\"#开启ssl\" class=\"headerlink\" title=\"开启ssl\"></a>开启ssl</h1><h2 id=\"telnet-ip-443-不通的问题\"><a href=\"#telnet-ip-443-不通的问题\" class=\"headerlink\" title=\"telnet ip 443 不通的问题\"></a>telnet ip 443 不通的问题</h2><ul>\n<li>大概率是端口没开导致，需要检查下docker-compose文件的端口映射问题</li>\n<li>同时可以使用<code>netstat -npl | grep 443</code>命令查看端口开通情况</li>\n<li>或者使用<code>telnet ip 443</code>查看端口开通情况</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"开启ssl\"><a href=\"#开启ssl\" class=\"headerlink\" title=\"开启ssl\"></a>开启ssl</h1><h2 id=\"telnet-ip-443-不通的问题\"><a href=\"#telnet-ip-443-不通的问题\" class=\"headerlink\" title=\"telnet ip 443 不通的问题\"></a>telnet ip 443 不通的问题</h2><ul>\n<li>大概率是端口没开导致，需要检查下docker-compose文件的端口映射问题</li>\n<li>同时可以使用<code>netstat -npl | grep 443</code>命令查看端口开通情况</li>\n<li>或者使用<code>telnet ip 443</code>查看端口开通情况</li>\n</ul>\n"},{"layout":"default","title":"virtualBox","nav_order":12,"description":"VirtualBox 启动时提示“获取 VirtualBox COM 对象失败”的解决```https://www.cnblogs.com/imzhi/p/solution-to-the-failed-to-get-the-virtualbox-com-object.html``` 安装centos```shell script 网络 启用3网卡（nat,桥接,host-only） 启用2网卡（桥接,host-only）```","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n## VirtualBox 启动时提示“获取 VirtualBox COM 对象失败”的解决\n```\nhttps://www.cnblogs.com/imzhi/p/solution-to-the-failed-to-get-the-virtualbox-com-object.html\n```\n## 安装centos\n```shell script\n# 网络\n# 启用3网卡（nat,桥接,host-only）\n# 启用2网卡（桥接,host-only）\n```\n\n## 固定IP\n```shell script\n# 桥接网络\ncd /etc/sysconfig/network-scripts/\nvi ifcfg-enp0s3 \n\nTYPE=\"Ethernet\"\nPROXY_METHOD=\"none\"\nBROWSER_ONLY=\"no\"\n# BOOTPROTO=\"dhcp\" # 1\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"enp0s3\"\nUUID=\"ba47ac81-365b-42f7-b6a2-11b2865715ec\"\nDEVICE=\"enp0s3\"\nONBOOT=\"yes\"\n\nBOOTPROTO=\"static\" # 2\nIPADDR=\"10.0.0.91\" # 3\n~                                                                                                                                                                                                                                                                    \n# 修改 1、2、3处即可\n\n# 备注\nIPADDR=192.168.1.123  #静态ip,添加前先ping一下该ip,ping不通才能使用,确保唯一  \nNETMASK=255.255.255.0  #子网掩码  \nGATEWAY=192.168.1.1   #网关  \n```\n","source":"_posts/docker/doc/virtualBox.md","raw":"---\nlayout: default\ntitle: virtualBox\nnav_order: 12\ndescription: VirtualBox 启动时提示“获取 VirtualBox COM 对象失败”的解决```https://www.cnblogs.com/imzhi/p/solution-to-the-failed-to-get-the-virtualbox-com-object.html```\n  安装centos```shell script 网络 启用3网卡（nat,桥接,host-only） 启用2网卡（桥接,host-only）```\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/virtualbox/\"\ngrand_parent: Docker\n---\n\n## VirtualBox 启动时提示“获取 VirtualBox COM 对象失败”的解决\n```\nhttps://www.cnblogs.com/imzhi/p/solution-to-the-failed-to-get-the-virtualbox-com-object.html\n```\n## 安装centos\n```shell script\n# 网络\n# 启用3网卡（nat,桥接,host-only）\n# 启用2网卡（桥接,host-only）\n```\n\n## 固定IP\n```shell script\n# 桥接网络\ncd /etc/sysconfig/network-scripts/\nvi ifcfg-enp0s3 \n\nTYPE=\"Ethernet\"\nPROXY_METHOD=\"none\"\nBROWSER_ONLY=\"no\"\n# BOOTPROTO=\"dhcp\" # 1\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"enp0s3\"\nUUID=\"ba47ac81-365b-42f7-b6a2-11b2865715ec\"\nDEVICE=\"enp0s3\"\nONBOOT=\"yes\"\n\nBOOTPROTO=\"static\" # 2\nIPADDR=\"10.0.0.91\" # 3\n~                                                                                                                                                                                                                                                                    \n# 修改 1、2、3处即可\n\n# 备注\nIPADDR=192.168.1.123  #静态ip,添加前先ping一下该ip,ping不通才能使用,确保唯一  \nNETMASK=255.255.255.0  #子网掩码  \nGATEWAY=192.168.1.1   #网关  \n```\n","slug":"docker/doc/virtualBox","published":1,"date":"2025-02-23T07:43:31.177Z","updated":"2025-02-23T07:43:31.177Z","__permalink":"/docker/doc/virtualbox/","comments":1,"photos":[],"_id":"cm7k5rwa40012msws1t3i5tef","content":"<h2 id=\"VirtualBox-启动时提示“获取-VirtualBox-COM-对象失败”的解决\"><a href=\"#VirtualBox-启动时提示“获取-VirtualBox-COM-对象失败”的解决\" class=\"headerlink\" title=\"VirtualBox 启动时提示“获取 VirtualBox COM 对象失败”的解决\"></a>VirtualBox 启动时提示“获取 VirtualBox COM 对象失败”的解决</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/imzhi/p/solution-to-the-failed-to-get-the-virtualbox-com-object.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装centos\"><a href=\"#安装centos\" class=\"headerlink\" title=\"安装centos\"></a>安装centos</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">网络</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启用3网卡（nat,桥接,host-only）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启用2网卡（桥接,host-only）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"固定IP\"><a href=\"#固定IP\" class=\"headerlink\" title=\"固定IP\"></a>固定IP</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">桥接网络</span></span><br><span class=\"line\">cd /etc/sysconfig/network-scripts/</span><br><span class=\"line\">vi ifcfg-enp0s3 </span><br><span class=\"line\"></span><br><span class=\"line\">TYPE=&quot;Ethernet&quot;</span><br><span class=\"line\">PROXY_METHOD=&quot;none&quot;</span><br><span class=\"line\">BROWSER_ONLY=&quot;no&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">BOOTPROTO=<span class=\"string\">&quot;dhcp&quot;</span> <span class=\"comment\"># 1</span></span></span><br><span class=\"line\">DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">IPV6INIT=&quot;yes&quot;</span><br><span class=\"line\">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class=\"line\">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class=\"line\">NAME=&quot;enp0s3&quot;</span><br><span class=\"line\">UUID=&quot;ba47ac81-365b-42f7-b6a2-11b2865715ec&quot;</span><br><span class=\"line\">DEVICE=&quot;enp0s3&quot;</span><br><span class=\"line\">ONBOOT=&quot;yes&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOTPROTO=&quot;static&quot; # 2</span><br><span class=\"line\">IPADDR=&quot;10.0.0.91&quot; # 3</span><br><span class=\"line\">~                                                                                                                                                                                                                                                                    </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 1、2、3处即可</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">备注</span></span><br><span class=\"line\">IPADDR=192.168.1.123  #静态ip,添加前先ping一下该ip,ping不通才能使用,确保唯一  </span><br><span class=\"line\">NETMASK=255.255.255.0  #子网掩码  </span><br><span class=\"line\">GATEWAY=192.168.1.1   #网关  </span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"VirtualBox-启动时提示“获取-VirtualBox-COM-对象失败”的解决\"><a href=\"#VirtualBox-启动时提示“获取-VirtualBox-COM-对象失败”的解决\" class=\"headerlink\" title=\"VirtualBox 启动时提示“获取 VirtualBox COM 对象失败”的解决\"></a>VirtualBox 启动时提示“获取 VirtualBox COM 对象失败”的解决</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/imzhi/p/solution-to-the-failed-to-get-the-virtualbox-com-object.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装centos\"><a href=\"#安装centos\" class=\"headerlink\" title=\"安装centos\"></a>安装centos</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">网络</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启用3网卡（nat,桥接,host-only）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启用2网卡（桥接,host-only）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"固定IP\"><a href=\"#固定IP\" class=\"headerlink\" title=\"固定IP\"></a>固定IP</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">桥接网络</span></span><br><span class=\"line\">cd /etc/sysconfig/network-scripts/</span><br><span class=\"line\">vi ifcfg-enp0s3 </span><br><span class=\"line\"></span><br><span class=\"line\">TYPE=&quot;Ethernet&quot;</span><br><span class=\"line\">PROXY_METHOD=&quot;none&quot;</span><br><span class=\"line\">BROWSER_ONLY=&quot;no&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">BOOTPROTO=<span class=\"string\">&quot;dhcp&quot;</span> <span class=\"comment\"># 1</span></span></span><br><span class=\"line\">DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">IPV6INIT=&quot;yes&quot;</span><br><span class=\"line\">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class=\"line\">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class=\"line\">NAME=&quot;enp0s3&quot;</span><br><span class=\"line\">UUID=&quot;ba47ac81-365b-42f7-b6a2-11b2865715ec&quot;</span><br><span class=\"line\">DEVICE=&quot;enp0s3&quot;</span><br><span class=\"line\">ONBOOT=&quot;yes&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOTPROTO=&quot;static&quot; # 2</span><br><span class=\"line\">IPADDR=&quot;10.0.0.91&quot; # 3</span><br><span class=\"line\">~                                                                                                                                                                                                                                                                    </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 1、2、3处即可</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">备注</span></span><br><span class=\"line\">IPADDR=192.168.1.123  #静态ip,添加前先ping一下该ip,ping不通才能使用,确保唯一  </span><br><span class=\"line\">NETMASK=255.255.255.0  #子网掩码  </span><br><span class=\"line\">GATEWAY=192.168.1.1   #网关  </span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"yum","nav_order":12,"description":"yum相关文档","parent":"Doc","has_children":false,"grand_parent":"Docker","_content":"\n# yum相关文档\n\n## yum源-使用阿里yum源\n\n- [参考阿里开发者社区文章](https://developer.aliyun.com/mirror/centos)\n```shell\n# centos8\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo\nyum clean all && yum makecache\n\n```\n\n## EPEL到底是什么，为何经常要安装epel-release软件包\n- EPEL (Extra Packages for Enterprise Linux)是基于Fedora的一个项目\n- [参考阿里云开发者社区文章](https://developer.aliyun.com/mirror/epel)\n``` shell\nyum -y install epel-release\n \nyum repolist\n```\n```shell\nyum clean all\n \nyum makecache\n```\n## centos7 安装epel-release rpm\n```shell\nDownload the latest epel-release rpm from\nhttp://dl.fedoraproject.org/pub/epel/7/，下载rpm文件\n\nInstall epel-release rpm:\n# rpm -Uvh epel-release*rpm \n```\n## fedora19安装后，需要安装的一些必备的软件包\n``` \n# 安装rpmfusion源\n\n# Fedora 19的源：\nsudo yum localinstall --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-19.noarch.rpm  http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-19.noarch.rpm\n\n# 安装一下有用的一些软件包\n\nsudo yum -y install yum-fastestmirror unrar thunderbird emacs ibus-table \\\nredhat-lsb gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer-ffmpeg \\\ncompat-libstdc++-33 NetworkManager-devel python-gevent tracker-ui-tools qemu \\\nlibpciaccess-devel xorg-x11-util-macros llvm-devel mtdev* mutt msmtp tftp \\\ntftp-server policycoreutils-gui mtd-utils mtd-utils-ubi vim ibus-pinyin \\\ngnome-tweak-tool ckermit stardict stardict-dic-zh_CN stardict-dic-en \\\nibus-table-chinese-wubi-haifeng gnash smplayer vlc samba pidgin pidgin-sipe \\\nmeld expect glibc-static ncurses-static genromfs cmake ccache p7zip nmap \\\ngstreamer1-plugins-bad-freeworld gstreamer1-plugins-ugly gstreamer1-libav\n\n# 升级一下系统：\n\nsudo yum -y update\n\n# 参考文章\nhttps://www.cnblogs.com/lizhi0755/p/3308936.html\n```\n\n## 向fedora添加rpmfusion源\n```\n# 有的rpmfusion地址有版本问题，找到一个比较好用的摘录一下：\n\n\n# 从http://download1.rpmfusion.org/的free和nofree库中fedora目录下载稳定版rpmfusion-free-release-stable.noarch.rpm和rpmfusion-nonfree-release-stable.noarch.rpm， 或者直接在线安装：\nrpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm\nrpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm\n# [stable]为版本号，无法安装的话，改成适合的版本号，例如35\n```\n\n## RPM Fusion\n- 由于版权问题，许多软件在Fedora中是没有的，如果我们想安装，我们需要添加或安装库，RPM Fusion是最好的，有两个RPM Fusion提供：免费和非免费。\n- 我们可以使用下面的命令安装\n```\ndnf install --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-24.noarch.rpm\ndnf install --nogpgcheck http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-24.noarch.rpm\n```\n\n## 安装WINE\n- wine不是一个模拟器，它是一个开放源码软件，它允许使用的用户在非Microsoft Windows中运行微软程序。我们可以通过使用以下命令安装：\n```\ndnf install wine\n```\n","source":"_posts/docker/doc/yum.md","raw":"---\nlayout: default\ntitle: yum\nnav_order: 12\ndescription: yum相关文档\nparent: Doc\nhas_children: false\npermalink: \"/docker/doc/yum/\"\ngrand_parent: Docker\n---\n\n# yum相关文档\n\n## yum源-使用阿里yum源\n\n- [参考阿里开发者社区文章](https://developer.aliyun.com/mirror/centos)\n```shell\n# centos8\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo\nyum clean all && yum makecache\n\n```\n\n## EPEL到底是什么，为何经常要安装epel-release软件包\n- EPEL (Extra Packages for Enterprise Linux)是基于Fedora的一个项目\n- [参考阿里云开发者社区文章](https://developer.aliyun.com/mirror/epel)\n``` shell\nyum -y install epel-release\n \nyum repolist\n```\n```shell\nyum clean all\n \nyum makecache\n```\n## centos7 安装epel-release rpm\n```shell\nDownload the latest epel-release rpm from\nhttp://dl.fedoraproject.org/pub/epel/7/，下载rpm文件\n\nInstall epel-release rpm:\n# rpm -Uvh epel-release*rpm \n```\n## fedora19安装后，需要安装的一些必备的软件包\n``` \n# 安装rpmfusion源\n\n# Fedora 19的源：\nsudo yum localinstall --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-19.noarch.rpm  http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-19.noarch.rpm\n\n# 安装一下有用的一些软件包\n\nsudo yum -y install yum-fastestmirror unrar thunderbird emacs ibus-table \\\nredhat-lsb gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer-ffmpeg \\\ncompat-libstdc++-33 NetworkManager-devel python-gevent tracker-ui-tools qemu \\\nlibpciaccess-devel xorg-x11-util-macros llvm-devel mtdev* mutt msmtp tftp \\\ntftp-server policycoreutils-gui mtd-utils mtd-utils-ubi vim ibus-pinyin \\\ngnome-tweak-tool ckermit stardict stardict-dic-zh_CN stardict-dic-en \\\nibus-table-chinese-wubi-haifeng gnash smplayer vlc samba pidgin pidgin-sipe \\\nmeld expect glibc-static ncurses-static genromfs cmake ccache p7zip nmap \\\ngstreamer1-plugins-bad-freeworld gstreamer1-plugins-ugly gstreamer1-libav\n\n# 升级一下系统：\n\nsudo yum -y update\n\n# 参考文章\nhttps://www.cnblogs.com/lizhi0755/p/3308936.html\n```\n\n## 向fedora添加rpmfusion源\n```\n# 有的rpmfusion地址有版本问题，找到一个比较好用的摘录一下：\n\n\n# 从http://download1.rpmfusion.org/的free和nofree库中fedora目录下载稳定版rpmfusion-free-release-stable.noarch.rpm和rpmfusion-nonfree-release-stable.noarch.rpm， 或者直接在线安装：\nrpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm\nrpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm\n# [stable]为版本号，无法安装的话，改成适合的版本号，例如35\n```\n\n## RPM Fusion\n- 由于版权问题，许多软件在Fedora中是没有的，如果我们想安装，我们需要添加或安装库，RPM Fusion是最好的，有两个RPM Fusion提供：免费和非免费。\n- 我们可以使用下面的命令安装\n```\ndnf install --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-24.noarch.rpm\ndnf install --nogpgcheck http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-24.noarch.rpm\n```\n\n## 安装WINE\n- wine不是一个模拟器，它是一个开放源码软件，它允许使用的用户在非Microsoft Windows中运行微软程序。我们可以通过使用以下命令安装：\n```\ndnf install wine\n```\n","slug":"docker/doc/yum","published":1,"date":"2025-02-23T07:43:31.174Z","updated":"2025-02-23T07:43:31.174Z","__permalink":"/docker/doc/yum/","comments":1,"photos":[],"_id":"cm7k5rwa50013mswsa6i5210n","content":"<h1 id=\"yum相关文档\"><a href=\"#yum相关文档\" class=\"headerlink\" title=\"yum相关文档\"></a>yum相关文档</h1><h2 id=\"yum源-使用阿里yum源\"><a href=\"#yum源-使用阿里yum源\" class=\"headerlink\" title=\"yum源-使用阿里yum源\"></a>yum源-使用阿里yum源</h2><ul>\n<li><a href=\"https://developer.aliyun.com/mirror/centos\">参考阿里开发者社区文章</a><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">centos8</span></span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo</span><br><span class=\"line\">yum clean all &amp;&amp; yum makecache</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"EPEL到底是什么，为何经常要安装epel-release软件包\"><a href=\"#EPEL到底是什么，为何经常要安装epel-release软件包\" class=\"headerlink\" title=\"EPEL到底是什么，为何经常要安装epel-release软件包\"></a>EPEL到底是什么，为何经常要安装epel-release软件包</h2><ul>\n<li>EPEL (Extra Packages for Enterprise Linux)是基于Fedora的一个项目</li>\n<li><a href=\"https://developer.aliyun.com/mirror/epel\">参考阿里云开发者社区文章</a><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\"> </span><br><span class=\"line\">yum repolist</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br><span class=\"line\"> </span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"centos7-安装epel-release-rpm\"><a href=\"#centos7-安装epel-release-rpm\" class=\"headerlink\" title=\"centos7 安装epel-release rpm\"></a>centos7 安装epel-release rpm</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Download the latest epel-release rpm from</span><br><span class=\"line\">http://dl.fedoraproject.org/pub/epel/7/，下载rpm文件</span><br><span class=\"line\"></span><br><span class=\"line\">Install epel-release rpm:</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rpm -Uvh epel-release*rpm</span> </span><br></pre></td></tr></table></figure>\n<h2 id=\"fedora19安装后，需要安装的一些必备的软件包\"><a href=\"#fedora19安装后，需要安装的一些必备的软件包\" class=\"headerlink\" title=\"fedora19安装后，需要安装的一些必备的软件包\"></a>fedora19安装后，需要安装的一些必备的软件包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装rpmfusion源</span><br><span class=\"line\"></span><br><span class=\"line\"># Fedora 19的源：</span><br><span class=\"line\">sudo yum localinstall --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-19.noarch.rpm  http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-19.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装一下有用的一些软件包</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum -y install yum-fastestmirror unrar thunderbird emacs ibus-table \\</span><br><span class=\"line\">redhat-lsb gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer-ffmpeg \\</span><br><span class=\"line\">compat-libstdc++-33 NetworkManager-devel python-gevent tracker-ui-tools qemu \\</span><br><span class=\"line\">libpciaccess-devel xorg-x11-util-macros llvm-devel mtdev* mutt msmtp tftp \\</span><br><span class=\"line\">tftp-server policycoreutils-gui mtd-utils mtd-utils-ubi vim ibus-pinyin \\</span><br><span class=\"line\">gnome-tweak-tool ckermit stardict stardict-dic-zh_CN stardict-dic-en \\</span><br><span class=\"line\">ibus-table-chinese-wubi-haifeng gnash smplayer vlc samba pidgin pidgin-sipe \\</span><br><span class=\"line\">meld expect glibc-static ncurses-static genromfs cmake ccache p7zip nmap \\</span><br><span class=\"line\">gstreamer1-plugins-bad-freeworld gstreamer1-plugins-ugly gstreamer1-libav</span><br><span class=\"line\"></span><br><span class=\"line\"># 升级一下系统：</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum -y update</span><br><span class=\"line\"></span><br><span class=\"line\"># 参考文章</span><br><span class=\"line\">https://www.cnblogs.com/lizhi0755/p/3308936.html</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"向fedora添加rpmfusion源\"><a href=\"#向fedora添加rpmfusion源\" class=\"headerlink\" title=\"向fedora添加rpmfusion源\"></a>向fedora添加rpmfusion源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 有的rpmfusion地址有版本问题，找到一个比较好用的摘录一下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 从http://download1.rpmfusion.org/的free和nofree库中fedora目录下载稳定版rpmfusion-free-release-stable.noarch.rpm和rpmfusion-nonfree-release-stable.noarch.rpm， 或者直接在线安装：</span><br><span class=\"line\">rpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm</span><br><span class=\"line\">rpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm</span><br><span class=\"line\"># [stable]为版本号，无法安装的话，改成适合的版本号，例如35</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RPM-Fusion\"><a href=\"#RPM-Fusion\" class=\"headerlink\" title=\"RPM Fusion\"></a>RPM Fusion</h2><ul>\n<li>由于版权问题，许多软件在Fedora中是没有的，如果我们想安装，我们需要添加或安装库，RPM Fusion是最好的，有两个RPM Fusion提供：免费和非免费。</li>\n<li>我们可以使用下面的命令安装<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-24.noarch.rpm</span><br><span class=\"line\">dnf install --nogpgcheck http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-24.noarch.rpm</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装WINE\"><a href=\"#安装WINE\" class=\"headerlink\" title=\"安装WINE\"></a>安装WINE</h2><ul>\n<li>wine不是一个模拟器，它是一个开放源码软件，它允许使用的用户在非Microsoft Windows中运行微软程序。我们可以通过使用以下命令安装：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install wine</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"yum相关文档\"><a href=\"#yum相关文档\" class=\"headerlink\" title=\"yum相关文档\"></a>yum相关文档</h1><h2 id=\"yum源-使用阿里yum源\"><a href=\"#yum源-使用阿里yum源\" class=\"headerlink\" title=\"yum源-使用阿里yum源\"></a>yum源-使用阿里yum源</h2><ul>\n<li><a href=\"https://developer.aliyun.com/mirror/centos\">参考阿里开发者社区文章</a><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">centos8</span></span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo</span><br><span class=\"line\">yum clean all &amp;&amp; yum makecache</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"EPEL到底是什么，为何经常要安装epel-release软件包\"><a href=\"#EPEL到底是什么，为何经常要安装epel-release软件包\" class=\"headerlink\" title=\"EPEL到底是什么，为何经常要安装epel-release软件包\"></a>EPEL到底是什么，为何经常要安装epel-release软件包</h2><ul>\n<li>EPEL (Extra Packages for Enterprise Linux)是基于Fedora的一个项目</li>\n<li><a href=\"https://developer.aliyun.com/mirror/epel\">参考阿里云开发者社区文章</a><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\"> </span><br><span class=\"line\">yum repolist</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br><span class=\"line\"> </span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"centos7-安装epel-release-rpm\"><a href=\"#centos7-安装epel-release-rpm\" class=\"headerlink\" title=\"centos7 安装epel-release rpm\"></a>centos7 安装epel-release rpm</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Download the latest epel-release rpm from</span><br><span class=\"line\">http://dl.fedoraproject.org/pub/epel/7/，下载rpm文件</span><br><span class=\"line\"></span><br><span class=\"line\">Install epel-release rpm:</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rpm -Uvh epel-release*rpm</span> </span><br></pre></td></tr></table></figure>\n<h2 id=\"fedora19安装后，需要安装的一些必备的软件包\"><a href=\"#fedora19安装后，需要安装的一些必备的软件包\" class=\"headerlink\" title=\"fedora19安装后，需要安装的一些必备的软件包\"></a>fedora19安装后，需要安装的一些必备的软件包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装rpmfusion源</span><br><span class=\"line\"></span><br><span class=\"line\"># Fedora 19的源：</span><br><span class=\"line\">sudo yum localinstall --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-19.noarch.rpm  http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-19.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装一下有用的一些软件包</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum -y install yum-fastestmirror unrar thunderbird emacs ibus-table \\</span><br><span class=\"line\">redhat-lsb gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer-ffmpeg \\</span><br><span class=\"line\">compat-libstdc++-33 NetworkManager-devel python-gevent tracker-ui-tools qemu \\</span><br><span class=\"line\">libpciaccess-devel xorg-x11-util-macros llvm-devel mtdev* mutt msmtp tftp \\</span><br><span class=\"line\">tftp-server policycoreutils-gui mtd-utils mtd-utils-ubi vim ibus-pinyin \\</span><br><span class=\"line\">gnome-tweak-tool ckermit stardict stardict-dic-zh_CN stardict-dic-en \\</span><br><span class=\"line\">ibus-table-chinese-wubi-haifeng gnash smplayer vlc samba pidgin pidgin-sipe \\</span><br><span class=\"line\">meld expect glibc-static ncurses-static genromfs cmake ccache p7zip nmap \\</span><br><span class=\"line\">gstreamer1-plugins-bad-freeworld gstreamer1-plugins-ugly gstreamer1-libav</span><br><span class=\"line\"></span><br><span class=\"line\"># 升级一下系统：</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum -y update</span><br><span class=\"line\"></span><br><span class=\"line\"># 参考文章</span><br><span class=\"line\">https://www.cnblogs.com/lizhi0755/p/3308936.html</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"向fedora添加rpmfusion源\"><a href=\"#向fedora添加rpmfusion源\" class=\"headerlink\" title=\"向fedora添加rpmfusion源\"></a>向fedora添加rpmfusion源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 有的rpmfusion地址有版本问题，找到一个比较好用的摘录一下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 从http://download1.rpmfusion.org/的free和nofree库中fedora目录下载稳定版rpmfusion-free-release-stable.noarch.rpm和rpmfusion-nonfree-release-stable.noarch.rpm， 或者直接在线安装：</span><br><span class=\"line\">rpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm</span><br><span class=\"line\">rpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm</span><br><span class=\"line\"># [stable]为版本号，无法安装的话，改成适合的版本号，例如35</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RPM-Fusion\"><a href=\"#RPM-Fusion\" class=\"headerlink\" title=\"RPM Fusion\"></a>RPM Fusion</h2><ul>\n<li>由于版权问题，许多软件在Fedora中是没有的，如果我们想安装，我们需要添加或安装库，RPM Fusion是最好的，有两个RPM Fusion提供：免费和非免费。</li>\n<li>我们可以使用下面的命令安装<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-24.noarch.rpm</span><br><span class=\"line\">dnf install --nogpgcheck http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-24.noarch.rpm</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装WINE\"><a href=\"#安装WINE\" class=\"headerlink\" title=\"安装WINE\"></a>安装WINE</h2><ul>\n<li>wine不是一个模拟器，它是一个开放源码软件，它允许使用的用户在非Microsoft Windows中运行微软程序。我们可以通过使用以下命令安装：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install wine</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"layout":"default","title":"Docs","nav_order":2,"has_children":true,"parent":"Docs","_content":"\n# Docs\n","source":"_posts/kubernetes/docs/index.md","raw":"---\nlayout: default\ntitle: Docs\nnav_order: 2\nhas_children: true\nparent: Docs\npermalink: \"/kubernetes/docs/\"\n---\n\n# Docs\n","slug":"kubernetes/docs/index","published":1,"date":"2025-02-23T07:43:31.702Z","updated":"2025-02-23T07:43:31.702Z","__permalink":"/kubernetes/docs/","comments":1,"photos":[],"_id":"cm7k5rwa50014msws2wuc0sm3","content":"<h1 id=\"Docs\"><a href=\"#Docs\" class=\"headerlink\" title=\"Docs\"></a>Docs</h1>","excerpt":"","more":"<h1 id=\"Docs\"><a href=\"#Docs\" class=\"headerlink\" title=\"Docs\"></a>Docs</h1>"},{"layout":"default","title":"App","nav_order":2,"has_children":true,"parent":"App","_content":"\n# App\n","source":"_posts/kubernetes/app/index.md","raw":"---\nlayout: default\ntitle: App\nnav_order: 2\nhas_children: true\nparent: App\npermalink: \"/kubernetes/app/\"\n---\n\n# App\n","slug":"kubernetes/app/index","published":1,"date":"2025-02-23T07:43:31.559Z","updated":"2025-02-23T07:43:31.559Z","__permalink":"/kubernetes/app/","comments":1,"photos":[],"_id":"cm7k5rwa50015mswsbznlhydp","content":"<h1 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h1>","excerpt":"","more":"<h1 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h1>"},{"layout":"default","title":"Mid","nav_order":2,"has_children":true,"parent":"Mid","_content":"\n# Mid\n","source":"_posts/kubernetes/mid/index.md","raw":"---\nlayout: default\ntitle: Mid\nnav_order: 2\nhas_children: true\nparent: Mid\npermalink: \"/kubernetes/mid/\"\n---\n\n# Mid\n","slug":"kubernetes/mid/index","published":1,"date":"2025-02-23T07:43:31.695Z","updated":"2025-02-23T07:43:31.695Z","__permalink":"/kubernetes/mid/","comments":1,"photos":[],"_id":"cm7k5rwa50016mswsdgsf4m0b","content":"<h1 id=\"Mid\"><a href=\"#Mid\" class=\"headerlink\" title=\"Mid\"></a>Mid</h1>","excerpt":"","more":"<h1 id=\"Mid\"><a href=\"#Mid\" class=\"headerlink\" title=\"Mid\"></a>Mid</h1>"},{"layout":"default","title":"Python","nav_order":2,"has_children":true,"parent":"Python","_content":"\n# Python\n","source":"_posts/lang/python/index.md","raw":"---\nlayout: default\ntitle: Python\nnav_order: 2\nhas_children: true\nparent: Python\npermalink: \"/lang/python/\"\n---\n\n# Python\n","slug":"lang/python/index","published":1,"date":"2025-02-23T07:43:31.715Z","updated":"2025-02-23T07:43:31.715Z","__permalink":"/lang/python/","comments":1,"photos":[],"_id":"cm7k5rwa50017msws0b79dcxk","content":"<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1>","excerpt":"","more":"<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1>"},{"layout":"default","title":"doc","nav_order":12,"description":"python记录","parent":"Python","has_children":false,"grand_parent":"Lang","_content":"\n# python记录\n\n## ipynb使用\n\n安装模块\n[参考文章](https://blog.csdn.net/weixin_44477448/article/details/128915301)\n\n```shell\nimport sys\n!{sys.executable} -m pip install matplotlib\n\n```\n","source":"_posts/lang/python/python.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 12\ndescription: python记录\nparent: Python\nhas_children: false\npermalink: \"/lang/python/python/\"\ngrand_parent: Lang\n---\n\n# python记录\n\n## ipynb使用\n\n安装模块\n[参考文章](https://blog.csdn.net/weixin_44477448/article/details/128915301)\n\n```shell\nimport sys\n!{sys.executable} -m pip install matplotlib\n\n```\n","slug":"lang/python/python","published":1,"date":"2025-02-23T07:43:31.715Z","updated":"2025-02-23T07:43:31.715Z","__permalink":"/lang/python/python/","comments":1,"photos":[],"_id":"cm7k5rwa50018msws6b14b2w9","content":"<h1 id=\"python记录\"><a href=\"#python记录\" class=\"headerlink\" title=\"python记录\"></a>python记录</h1><h2 id=\"ipynb使用\"><a href=\"#ipynb使用\" class=\"headerlink\" title=\"ipynb使用\"></a>ipynb使用</h2><p>安装模块<br><a href=\"https://blog.csdn.net/weixin_44477448/article/details/128915301\">参考文章</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">!&#123;sys.executable&#125; -m pip install matplotlib</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"python记录\"><a href=\"#python记录\" class=\"headerlink\" title=\"python记录\"></a>python记录</h1><h2 id=\"ipynb使用\"><a href=\"#ipynb使用\" class=\"headerlink\" title=\"ipynb使用\"></a>ipynb使用</h2><p>安装模块<br><a href=\"https://blog.csdn.net/weixin_44477448/article/details/128915301\">参考文章</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">!&#123;sys.executable&#125; -m pip install matplotlib</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"maven如何生成QueryDSL的q版实体类","nav_order":12,"description":"maven如何生成QueryDSL的q版实体类","parent":"Ai","has_children":false,"grand_parent":"Materiel","_content":"\n# maven如何生成QueryDSL的q版实体类\n\n要使用Maven生成QueryDSL的Q类，您可以使用`maven-compiler-plugin`插件。以下是使用该插件生成Q类的步骤：\n\n1. 在您的Maven项目的`pom.xml`文件中，添加以下插件配置：\n\n    ```xml\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>com.querydsl</groupId>\n                            <artifactId>querydsl-apt</artifactId>\n                            <version>5.0.0</version>\n                            <classifier>jpa</classifier>\n                        </path>\n                        <path>\n                            <groupId>javax.persistence</groupId>\n                            <artifactId>javax.persistence-api</artifactId>\n                            <version>2.2</version>\n                        </path>\n                        <!-- 如果您的项目使用了Lombok，请在此处添加Lombok依赖 -->\n                        <!--\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.30</version>\n                        </path>\n                        -->\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n    ```\n\n2. 运行Maven构建命令，例如`mvn clean install`。\n\n3. Maven将使用`querydsl-apt`和`javax.persistence-api`依赖项来生成Q类。生成的Q类将位于`target/generated-sources/java`目录下。\n\n现在，您可以在您的项目中使用生成的Q类来进行QueryDSL查询。\n\n---\nLearn more:\n\n1. [spring - QueryDsl - How to create Q classes with maven? - Stack Overflow](https://stackoverflow.com/questions/24889990/querydsl-how-to-create-q-classes-with-maven)\n2. [3.3. Code generation](http://querydsl.com/static/querydsl/3.2.0/reference/html/ch03s03.html)\n3. [How to configure maven to generate QueryDSL classes when using both my own AspectJ ITDs and Roo?](https://groups.google.com/g/querydsl/c/NEiQzP4m1xA)\n","source":"_posts/materiel/ai/maven如何生成QueryDSL的q版实体类.md","raw":"---\nlayout: default\ntitle: maven如何生成QueryDSL的q版实体类\nnav_order: 12\ndescription: maven如何生成QueryDSL的q版实体类\nparent: Ai\nhas_children: false\npermalink: \"/materiel/ai/maven如何生成querydsl的q版实体类/\"\ngrand_parent: Materiel\n---\n\n# maven如何生成QueryDSL的q版实体类\n\n要使用Maven生成QueryDSL的Q类，您可以使用`maven-compiler-plugin`插件。以下是使用该插件生成Q类的步骤：\n\n1. 在您的Maven项目的`pom.xml`文件中，添加以下插件配置：\n\n    ```xml\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>com.querydsl</groupId>\n                            <artifactId>querydsl-apt</artifactId>\n                            <version>5.0.0</version>\n                            <classifier>jpa</classifier>\n                        </path>\n                        <path>\n                            <groupId>javax.persistence</groupId>\n                            <artifactId>javax.persistence-api</artifactId>\n                            <version>2.2</version>\n                        </path>\n                        <!-- 如果您的项目使用了Lombok，请在此处添加Lombok依赖 -->\n                        <!--\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.30</version>\n                        </path>\n                        -->\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n    ```\n\n2. 运行Maven构建命令，例如`mvn clean install`。\n\n3. Maven将使用`querydsl-apt`和`javax.persistence-api`依赖项来生成Q类。生成的Q类将位于`target/generated-sources/java`目录下。\n\n现在，您可以在您的项目中使用生成的Q类来进行QueryDSL查询。\n\n---\nLearn more:\n\n1. [spring - QueryDsl - How to create Q classes with maven? - Stack Overflow](https://stackoverflow.com/questions/24889990/querydsl-how-to-create-q-classes-with-maven)\n2. [3.3. Code generation](http://querydsl.com/static/querydsl/3.2.0/reference/html/ch03s03.html)\n3. [How to configure maven to generate QueryDSL classes when using both my own AspectJ ITDs and Roo?](https://groups.google.com/g/querydsl/c/NEiQzP4m1xA)\n","slug":"materiel/ai/maven如何生成QueryDSL的q版实体类","published":1,"date":"2025-02-23T07:43:31.727Z","updated":"2025-02-23T07:43:31.727Z","__permalink":"/materiel/ai/maven如何生成querydsl的q版实体类/","comments":1,"photos":[],"_id":"cm7k5rwa50019mswsci5r9k9h","content":"<h1 id=\"maven如何生成QueryDSL的q版实体类\"><a href=\"#maven如何生成QueryDSL的q版实体类\" class=\"headerlink\" title=\"maven如何生成QueryDSL的q版实体类\"></a>maven如何生成QueryDSL的q版实体类</h1><p>要使用Maven生成QueryDSL的Q类，您可以使用<code>maven-compiler-plugin</code>插件。以下是使用该插件生成Q类的步骤：</p>\n<ol>\n<li><p>在您的Maven项目的<code>pom.xml</code>文件中，添加以下插件配置：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.11.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.querydsl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>querydsl-apt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">classifier</span>&gt;</span>jpa<span class=\"tag\">&lt;/<span class=\"name\">classifier</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.persistence<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.persistence-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 如果您的项目使用了Lombok，请在此处添加Lombok依赖 --&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;path&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;version&gt;1.18.30&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;/path&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行Maven构建命令，例如<code>mvn clean install</code>。</p>\n</li>\n<li><p>Maven将使用<code>querydsl-apt</code>和<code>javax.persistence-api</code>依赖项来生成Q类。生成的Q类将位于<code>target/generated-sources/java</code>目录下。</p>\n</li>\n</ol>\n<p>现在，您可以在您的项目中使用生成的Q类来进行QueryDSL查询。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/24889990/querydsl-how-to-create-q-classes-with-maven\">spring - QueryDsl - How to create Q classes with maven? - Stack Overflow</a></li>\n<li><a href=\"http://querydsl.com/static/querydsl/3.2.0/reference/html/ch03s03.html\">3.3. Code generation</a></li>\n<li><a href=\"https://groups.google.com/g/querydsl/c/NEiQzP4m1xA\">How to configure maven to generate QueryDSL classes when using both my own AspectJ ITDs and Roo?</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"maven如何生成QueryDSL的q版实体类\"><a href=\"#maven如何生成QueryDSL的q版实体类\" class=\"headerlink\" title=\"maven如何生成QueryDSL的q版实体类\"></a>maven如何生成QueryDSL的q版实体类</h1><p>要使用Maven生成QueryDSL的Q类，您可以使用<code>maven-compiler-plugin</code>插件。以下是使用该插件生成Q类的步骤：</p>\n<ol>\n<li><p>在您的Maven项目的<code>pom.xml</code>文件中，添加以下插件配置：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.11.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.querydsl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>querydsl-apt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">classifier</span>&gt;</span>jpa<span class=\"tag\">&lt;/<span class=\"name\">classifier</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.persistence<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.persistence-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 如果您的项目使用了Lombok，请在此处添加Lombok依赖 --&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;path&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;version&gt;1.18.30&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;/path&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行Maven构建命令，例如<code>mvn clean install</code>。</p>\n</li>\n<li><p>Maven将使用<code>querydsl-apt</code>和<code>javax.persistence-api</code>依赖项来生成Q类。生成的Q类将位于<code>target/generated-sources/java</code>目录下。</p>\n</li>\n</ol>\n<p>现在，您可以在您的项目中使用生成的Q类来进行QueryDSL查询。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/24889990/querydsl-how-to-create-q-classes-with-maven\">spring - QueryDsl - How to create Q classes with maven? - Stack Overflow</a></li>\n<li><a href=\"http://querydsl.com/static/querydsl/3.2.0/reference/html/ch03s03.html\">3.3. Code generation</a></li>\n<li><a href=\"https://groups.google.com/g/querydsl/c/NEiQzP4m1xA\">How to configure maven to generate QueryDSL classes when using both my own AspectJ ITDs and Roo?</a></li>\n</ol>\n"},{"layout":"default","title":"spring-data-redis中的依赖的jedis添加了optional=true需要开发者主动显式依赖的问题","nav_order":12,"description":"spring-data-redis中的依赖的jedis添加了`<optional>true<optional>`需要开发者主动显式依赖的问题","parent":"Ai","has_children":false,"grand_parent":"Materiel","_content":"\n# spring-data-redis中的依赖的jedis添加了`<optional>true<optional>`需要开发者主动显式依赖的问题\n\n在 Spring Data Redis 中，`jedis` 依赖被标记为 `<optional>true</optional>` 是因为 Spring Data Redis 是一个支持多种 Redis 驱动的伞项目，包括 Jedis 和 Lettuce 等。这意味着，Spring Data Redis 本身并不强制要求项目中必须使用 Jedis，而是让开发者可以根据自己的需求选择使用哪个客户端。因此，`jedis` 依赖被设置为可选的，这样开发者只有在需要使用 Jedis 客户端时才需要显式地引入这个依赖。\n关于 `<optional>true</optional>` 的具体作用，当这个标记为 `true` 时，意味着 Maven 在构建项目时，如果其他依赖已经提供了这个依赖的实现，那么这个依赖不会被添加到 classpath 中。这样做的好处是，它可以减少项目的依赖冲突和体积，尤其是在项目中已经默认使用了另一种 Redis 客户端（如 Lettuce）时。\n在某些情况下，如果你在代码中明确引用了 Jedis 的类或方法，即使标记为可选，Maven 还是会将其作为编译和运行时依赖处理。因此，如果你确实需要在项目中使用 Jedis，那么你就需要显式地引入这个依赖，并将其标记为非可选（即设置 `<optional>false</optional>`），以确保项目在构建和运行时都能正确地使用 Jedis 客户端。\n总的来说，`<optional>true</optional>` 的标记是为了提供灵活性，让开发者可以根据自己的需求和项目配置来决定是否引入 Jedis 依赖。引入 Jedis 依赖的正确方式取决于你是否需要在项目中使用 Jedis 客户端，以及你是否已经选择了其他 Redis 客户端（如 Lettuce）。\n","source":"_posts/materiel/ai/spring-data-redis中的依赖的jedis添加了optional=true需要开发者主动显式依赖的问题.md","raw":"---\nlayout: default\ntitle: spring-data-redis中的依赖的jedis添加了optional=true需要开发者主动显式依赖的问题\nnav_order: 12\ndescription: spring-data-redis中的依赖的jedis添加了`<optional>true<optional>`需要开发者主动显式依赖的问题\nparent: Ai\nhas_children: false\npermalink: \"/materiel/ai/spring-data-redis中的依赖的jedis添加了optional=true需要开发者主动显式依赖的问题/\"\ngrand_parent: Materiel\n---\n\n# spring-data-redis中的依赖的jedis添加了`<optional>true<optional>`需要开发者主动显式依赖的问题\n\n在 Spring Data Redis 中，`jedis` 依赖被标记为 `<optional>true</optional>` 是因为 Spring Data Redis 是一个支持多种 Redis 驱动的伞项目，包括 Jedis 和 Lettuce 等。这意味着，Spring Data Redis 本身并不强制要求项目中必须使用 Jedis，而是让开发者可以根据自己的需求选择使用哪个客户端。因此，`jedis` 依赖被设置为可选的，这样开发者只有在需要使用 Jedis 客户端时才需要显式地引入这个依赖。\n关于 `<optional>true</optional>` 的具体作用，当这个标记为 `true` 时，意味着 Maven 在构建项目时，如果其他依赖已经提供了这个依赖的实现，那么这个依赖不会被添加到 classpath 中。这样做的好处是，它可以减少项目的依赖冲突和体积，尤其是在项目中已经默认使用了另一种 Redis 客户端（如 Lettuce）时。\n在某些情况下，如果你在代码中明确引用了 Jedis 的类或方法，即使标记为可选，Maven 还是会将其作为编译和运行时依赖处理。因此，如果你确实需要在项目中使用 Jedis，那么你就需要显式地引入这个依赖，并将其标记为非可选（即设置 `<optional>false</optional>`），以确保项目在构建和运行时都能正确地使用 Jedis 客户端。\n总的来说，`<optional>true</optional>` 的标记是为了提供灵活性，让开发者可以根据自己的需求和项目配置来决定是否引入 Jedis 依赖。引入 Jedis 依赖的正确方式取决于你是否需要在项目中使用 Jedis 客户端，以及你是否已经选择了其他 Redis 客户端（如 Lettuce）。\n","slug":"materiel/ai/spring-data-redis中的依赖的jedis添加了optional=true需要开发者主动显式依赖的问题","published":1,"date":"2025-02-23T07:43:31.734Z","updated":"2025-02-23T07:43:31.734Z","__permalink":"/materiel/ai/spring-data-redis中的依赖的jedis添加了optional=true需要开发者主动显式依赖的问题/","comments":1,"photos":[],"_id":"cm7k5rwa5001amswsbku87kz4","content":"<h1 id=\"spring-data-redis中的依赖的jedis添加了-lt-optional-gt-true-lt-optional-gt-需要开发者主动显式依赖的问题\"><a href=\"#spring-data-redis中的依赖的jedis添加了-lt-optional-gt-true-lt-optional-gt-需要开发者主动显式依赖的问题\" class=\"headerlink\" title=\"spring-data-redis中的依赖的jedis添加了&lt;optional&gt;true&lt;optional&gt;需要开发者主动显式依赖的问题\"></a>spring-data-redis中的依赖的jedis添加了<code>&lt;optional&gt;true&lt;optional&gt;</code>需要开发者主动显式依赖的问题</h1><p>在 Spring Data Redis 中，<code>jedis</code> 依赖被标记为 <code>&lt;optional&gt;true&lt;/optional&gt;</code> 是因为 Spring Data Redis 是一个支持多种 Redis 驱动的伞项目，包括 Jedis 和 Lettuce 等。这意味着，Spring Data Redis 本身并不强制要求项目中必须使用 Jedis，而是让开发者可以根据自己的需求选择使用哪个客户端。因此，<code>jedis</code> 依赖被设置为可选的，这样开发者只有在需要使用 Jedis 客户端时才需要显式地引入这个依赖。<br>关于 <code>&lt;optional&gt;true&lt;/optional&gt;</code> 的具体作用，当这个标记为 <code>true</code> 时，意味着 Maven 在构建项目时，如果其他依赖已经提供了这个依赖的实现，那么这个依赖不会被添加到 classpath 中。这样做的好处是，它可以减少项目的依赖冲突和体积，尤其是在项目中已经默认使用了另一种 Redis 客户端（如 Lettuce）时。<br>在某些情况下，如果你在代码中明确引用了 Jedis 的类或方法，即使标记为可选，Maven 还是会将其作为编译和运行时依赖处理。因此，如果你确实需要在项目中使用 Jedis，那么你就需要显式地引入这个依赖，并将其标记为非可选（即设置 <code>&lt;optional&gt;false&lt;/optional&gt;</code>），以确保项目在构建和运行时都能正确地使用 Jedis 客户端。<br>总的来说，<code>&lt;optional&gt;true&lt;/optional&gt;</code> 的标记是为了提供灵活性，让开发者可以根据自己的需求和项目配置来决定是否引入 Jedis 依赖。引入 Jedis 依赖的正确方式取决于你是否需要在项目中使用 Jedis 客户端，以及你是否已经选择了其他 Redis 客户端（如 Lettuce）。</p>\n","excerpt":"","more":"<h1 id=\"spring-data-redis中的依赖的jedis添加了-lt-optional-gt-true-lt-optional-gt-需要开发者主动显式依赖的问题\"><a href=\"#spring-data-redis中的依赖的jedis添加了-lt-optional-gt-true-lt-optional-gt-需要开发者主动显式依赖的问题\" class=\"headerlink\" title=\"spring-data-redis中的依赖的jedis添加了&lt;optional&gt;true&lt;optional&gt;需要开发者主动显式依赖的问题\"></a>spring-data-redis中的依赖的jedis添加了<code>&lt;optional&gt;true&lt;optional&gt;</code>需要开发者主动显式依赖的问题</h1><p>在 Spring Data Redis 中，<code>jedis</code> 依赖被标记为 <code>&lt;optional&gt;true&lt;/optional&gt;</code> 是因为 Spring Data Redis 是一个支持多种 Redis 驱动的伞项目，包括 Jedis 和 Lettuce 等。这意味着，Spring Data Redis 本身并不强制要求项目中必须使用 Jedis，而是让开发者可以根据自己的需求选择使用哪个客户端。因此，<code>jedis</code> 依赖被设置为可选的，这样开发者只有在需要使用 Jedis 客户端时才需要显式地引入这个依赖。<br>关于 <code>&lt;optional&gt;true&lt;/optional&gt;</code> 的具体作用，当这个标记为 <code>true</code> 时，意味着 Maven 在构建项目时，如果其他依赖已经提供了这个依赖的实现，那么这个依赖不会被添加到 classpath 中。这样做的好处是，它可以减少项目的依赖冲突和体积，尤其是在项目中已经默认使用了另一种 Redis 客户端（如 Lettuce）时。<br>在某些情况下，如果你在代码中明确引用了 Jedis 的类或方法，即使标记为可选，Maven 还是会将其作为编译和运行时依赖处理。因此，如果你确实需要在项目中使用 Jedis，那么你就需要显式地引入这个依赖，并将其标记为非可选（即设置 <code>&lt;optional&gt;false&lt;/optional&gt;</code>），以确保项目在构建和运行时都能正确地使用 Jedis 客户端。<br>总的来说，<code>&lt;optional&gt;true&lt;/optional&gt;</code> 的标记是为了提供灵活性，让开发者可以根据自己的需求和项目配置来决定是否引入 Jedis 依赖。引入 Jedis 依赖的正确方式取决于你是否需要在项目中使用 Jedis 客户端，以及你是否已经选择了其他 Redis 客户端（如 Lettuce）。</p>\n"},{"layout":"default","title":"Ai","nav_order":2,"has_children":true,"parent":"Ai","_content":"\n# Ai\n","source":"_posts/materiel/ai/index.md","raw":"---\nlayout: default\ntitle: Ai\nnav_order: 2\nhas_children: true\nparent: Ai\npermalink: \"/materiel/ai/\"\n---\n\n# Ai\n","slug":"materiel/ai/index","published":1,"date":"2025-02-23T07:43:31.728Z","updated":"2025-02-23T07:43:31.728Z","__permalink":"/materiel/ai/","comments":1,"photos":[],"_id":"cm7k5rwa6001bmswsc27v571h","content":"<h1 id=\"Ai\"><a href=\"#Ai\" class=\"headerlink\" title=\"Ai\"></a>Ai</h1>","excerpt":"","more":"<h1 id=\"Ai\"><a href=\"#Ai\" class=\"headerlink\" title=\"Ai\"></a>Ai</h1>"},{"layout":"default","title":"OutOfMemoryError : unable to create new native Thread","nav_order":792,"description":"java.lang.OutOfMemoryError : unable to create new native Thread","has_children":false,"parent":"Article","grand_parent":"Materiel","_content":"\n# java.lang.OutOfMemoryError : unable to create new native Thread\n\n```bash\n# 使用此命令查看正在运行的线程数\nps -elfT | wc -l\nps -elfT | grep appName|wc -l \n# 要获取进程正在运行的线程数（可以使用 top 或 ps aux 获取进程 pid）：\nps -p <PROCESS_PID> -lfT | wc -l\n# 查找哪些进程正在创建线程\nps huH\n# 用户可以拥有的线程数量是有限制的。可以通过“最大用户进程数”行进行检查\nulimit -a\n# /proc/sys/kernel/threads-max 文件提供系统范围内的线程数限制。 root 用户可以更改该值\n# 要更改限制（在本例中为 4096 个线程）：\nulimit -u 4096\n# 使用 jps 列出所有 java 进程（只需在 shell 中执行 jps ）并使用每个 Ghost 进程的 kill -9 pid bash 命令分别杀死它们时，它就解决了。\njps\n```\n","source":"_posts/materiel/article/OutOfMemoryError : unable to create new native Thread.md","raw":"---\nlayout: default\ntitle: 'OutOfMemoryError : unable to create new native Thread'\nnav_order: 792\ndescription: 'java.lang.OutOfMemoryError : unable to create new native Thread'\nhas_children: false\npermalink: \"/materiel/article/outofmemoryerror : unable to create new native thread/\"\nparent: Article\ngrand_parent: Materiel\n---\n\n# java.lang.OutOfMemoryError : unable to create new native Thread\n\n```bash\n# 使用此命令查看正在运行的线程数\nps -elfT | wc -l\nps -elfT | grep appName|wc -l \n# 要获取进程正在运行的线程数（可以使用 top 或 ps aux 获取进程 pid）：\nps -p <PROCESS_PID> -lfT | wc -l\n# 查找哪些进程正在创建线程\nps huH\n# 用户可以拥有的线程数量是有限制的。可以通过“最大用户进程数”行进行检查\nulimit -a\n# /proc/sys/kernel/threads-max 文件提供系统范围内的线程数限制。 root 用户可以更改该值\n# 要更改限制（在本例中为 4096 个线程）：\nulimit -u 4096\n# 使用 jps 列出所有 java 进程（只需在 shell 中执行 jps ）并使用每个 Ghost 进程的 kill -9 pid bash 命令分别杀死它们时，它就解决了。\njps\n```\n","slug":"materiel/article/OutOfMemoryError : unable to create new native Thread","published":1,"date":"2025-02-23T07:43:31.737Z","updated":"2025-02-23T07:43:31.737Z","__permalink":"/materiel/article/outofmemoryerror : unable to create new native thread/","comments":1,"photos":[],"_id":"cm7k5rwa6001cmswsckld5w1m","content":"<h1 id=\"java-lang-OutOfMemoryError-unable-to-create-new-native-Thread\"><a href=\"#java-lang-OutOfMemoryError-unable-to-create-new-native-Thread\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError : unable to create new native Thread\"></a>java.lang.OutOfMemoryError : unable to create new native Thread</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用此命令查看正在运行的线程数</span></span><br><span class=\"line\">ps -elfT | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\">ps -elfT | grep appName|<span class=\"built_in\">wc</span> -l </span><br><span class=\"line\"><span class=\"comment\"># 要获取进程正在运行的线程数（可以使用 top 或 ps aux 获取进程 pid）：</span></span><br><span class=\"line\">ps -p &lt;PROCESS_PID&gt; -lfT | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\"><span class=\"comment\"># 查找哪些进程正在创建线程</span></span><br><span class=\"line\">ps huH</span><br><span class=\"line\"><span class=\"comment\"># 用户可以拥有的线程数量是有限制的。可以通过“最大用户进程数”行进行检查</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -a</span><br><span class=\"line\"><span class=\"comment\"># /proc/sys/kernel/threads-max 文件提供系统范围内的线程数限制。 root 用户可以更改该值</span></span><br><span class=\"line\"><span class=\"comment\"># 要更改限制（在本例中为 4096 个线程）：</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -u 4096</span><br><span class=\"line\"><span class=\"comment\"># 使用 jps 列出所有 java 进程（只需在 shell 中执行 jps ）并使用每个 Ghost 进程的 kill -9 pid bash 命令分别杀死它们时，它就解决了。</span></span><br><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"java-lang-OutOfMemoryError-unable-to-create-new-native-Thread\"><a href=\"#java-lang-OutOfMemoryError-unable-to-create-new-native-Thread\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError : unable to create new native Thread\"></a>java.lang.OutOfMemoryError : unable to create new native Thread</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用此命令查看正在运行的线程数</span></span><br><span class=\"line\">ps -elfT | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\">ps -elfT | grep appName|<span class=\"built_in\">wc</span> -l </span><br><span class=\"line\"><span class=\"comment\"># 要获取进程正在运行的线程数（可以使用 top 或 ps aux 获取进程 pid）：</span></span><br><span class=\"line\">ps -p &lt;PROCESS_PID&gt; -lfT | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\"><span class=\"comment\"># 查找哪些进程正在创建线程</span></span><br><span class=\"line\">ps huH</span><br><span class=\"line\"><span class=\"comment\"># 用户可以拥有的线程数量是有限制的。可以通过“最大用户进程数”行进行检查</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -a</span><br><span class=\"line\"><span class=\"comment\"># /proc/sys/kernel/threads-max 文件提供系统范围内的线程数限制。 root 用户可以更改该值</span></span><br><span class=\"line\"><span class=\"comment\"># 要更改限制（在本例中为 4096 个线程）：</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -u 4096</span><br><span class=\"line\"><span class=\"comment\"># 使用 jps 列出所有 java 进程（只需在 shell 中执行 jps ）并使用每个 Ghost 进程的 kill -9 pid bash 命令分别杀死它们时，它就解决了。</span></span><br><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"arthas查看sql","nav_order":12,"description":"arthas查看sql","parent":"Article","has_children":false,"grand_parent":"Materiel","_content":"\n# arthas查看sql\n\n[参考文章](http://codefun007.xyz/a/article_detail/2392.htm)\n\n```bash\n\nwatch java.sql.Connection prepareStatement '{params,throwExp}'    -x 3 \nwatch java.sql.Statement executeQuery '{params,throwExp}'    -x 3 \n\nwatch org.apache.ibatis.mapping.BoundSql getSql '{params,returnObj,throwExp}'    -x 3 \n\n```\n\n- temp\n\n```bash\n\nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -n 5  -x 3 \nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 3 \nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 2\n\n# 看到的是jpa的非本地sql\nwatch javax.persistence.EntityManager createQuery '{params,returnObj,throwExp}'  -n 5  -x 3 \n\n```\n","source":"_posts/materiel/article/arthas查看sql.md","raw":"---\nlayout: default\ntitle: arthas查看sql\nnav_order: 12\ndescription: arthas查看sql\nparent: Article\nhas_children: false\npermalink: \"/materiel/article/arthas查看sql/\"\ngrand_parent: Materiel\n---\n\n# arthas查看sql\n\n[参考文章](http://codefun007.xyz/a/article_detail/2392.htm)\n\n```bash\n\nwatch java.sql.Connection prepareStatement '{params,throwExp}'    -x 3 \nwatch java.sql.Statement executeQuery '{params,throwExp}'    -x 3 \n\nwatch org.apache.ibatis.mapping.BoundSql getSql '{params,returnObj,throwExp}'    -x 3 \n\n```\n\n- temp\n\n```bash\n\nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -n 5  -x 3 \nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 3 \nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 2\n\n# 看到的是jpa的非本地sql\nwatch javax.persistence.EntityManager createQuery '{params,returnObj,throwExp}'  -n 5  -x 3 \n\n```\n","slug":"materiel/article/arthas查看sql","published":1,"date":"2025-02-23T07:43:31.737Z","updated":"2025-02-23T07:43:31.737Z","__permalink":"/materiel/article/arthas查看sql/","comments":1,"photos":[],"_id":"cm7k5rwa6001dmswscvz4d66r","content":"<h1 id=\"arthas查看sql\"><a href=\"#arthas查看sql\" class=\"headerlink\" title=\"arthas查看sql\"></a>arthas查看sql</h1><p><a href=\"http://codefun007.xyz/a/article_detail/2392.htm\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">watch java.sql.Connection prepareStatement <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\"></span><br><span class=\"line\">watch org.apache.ibatis.mapping.BoundSql getSql <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>temp</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 看到的是jpa的非本地sql</span></span><br><span class=\"line\">watch javax.persistence.EntityManager createQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"arthas查看sql\"><a href=\"#arthas查看sql\" class=\"headerlink\" title=\"arthas查看sql\"></a>arthas查看sql</h1><p><a href=\"http://codefun007.xyz/a/article_detail/2392.htm\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">watch java.sql.Connection prepareStatement <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\"></span><br><span class=\"line\">watch org.apache.ibatis.mapping.BoundSql getSql <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>temp</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 看到的是jpa的非本地sql</span></span><br><span class=\"line\">watch javax.persistence.EntityManager createQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"postgresql表死锁问题的排查方式","nav_order":438,"description":"postgresql表死锁问题的排查方式_PostgreSQL_脚本之家","has_children":false,"created":"2024-06-04T11:38:56 (UTC +08:00)","source":"_posts/materiel/article/postgresql表死锁问题的排查方式.md","author":null,"parent":"Article","grand_parent":"Materiel","_content":"\n# postgresql表死锁问题的排查方式_PostgreSQL_脚本之家\n\n> ## Excerpt\n> 这篇文章主要介绍了postgresql表死锁问题的排查方式，具有很好的参考价值，希望对大家有所帮助。一起跟随小编过来看看吧\n\n---\n1.查询激活的执行中的sql,查看有哪些更新update的sql。\n\nselect *\nfrom pg_stat_activity\nwhere state = 'active';\n\n2\\. 查询表中存在的锁\n\nselect a.locktype, a.database, a.pid, a.mode, a.relation, b.relname\nfrom pg_locks a\njoin pg_class b on a.relation = b.oid\nwhere lower(b.relname) = 'h5_game';\n\n3\\. 杀掉死锁进程\n\nselect pg_terminate_backend(pid)\nfrom pg_stat_activity\nwhere state = 'active'\nand pid != pg_backend_pid()\n--and pid = 14172\nand pid in (select a.pid\nfrom pg_locks a\njoin pg_class b on a.relation = b.oid\nwhere lower(b.relname) = 'news_content')\n\n锁模式\n\n/* NoLock is not a lock mode, but a flag value meaning \"don't get a lock\" */\n#define NoLock                 0\n \n#define AccessShareLock         1        /* SELECT */\n#define RowShareLock          2        /* SELECT FOR UPDATE/FOR SHARE */\n#define RowExclusiveLock        3        /* INSERT, UPDATE, DELETE */\n#define ShareUpdateExclusiveLock 4       /* VACUUM (non-FULL),ANALYZE, CREATE\n                                         * INDEX CONCURRENTLY */\n#define ShareLock                5        /* CREATE INDEX (WITHOUT CONCURRENTLY) */\n#define ShareRowExclusiveLock  6        /* like EXCLUSIVE MODE, but allows ROW\n                                         * SHARE */\n#define ExclusiveLock          7        /* blocks ROW SHARE/SELECT...FOR\n                                         * UPDATE */\n#define AccessExclusiveLock       8        /* ALTER TABLE, DROP TABLE, VACUUM\n                                         * FULL, and unqualified LOCK TABLE */\n\n**补充：Postgresql死锁的处理**\n\n背景：\n\n对表进行所有操作都卡住，原因可能是更新表时导致这个表死锁了，开始进行排查\n\n### 解决一：查询pg\\_stat\\_activity有没有记录\n\npg版本10.2\n\nselect pid,query,* from pg_stat_activity where datname='死锁的数据库' and wait_event_type = 'Lock';\nselect pg_cancel_backend('死锁那条数据的pid值');##只能杀死select 语句, 对其他语句不生效\npg_terminate_backend('死锁那条数据的pid值');#select,drop等各种操作\n\n执行后发现select和delete表时正常执行，但truncate和drop表时会一直运行，也不报错。\n\n“drop table” 和 “truncate table” 需要申请排它锁\"ACCESS EXCLUSIVE\"， 执行这个命令卡住时，说明此时这张表上还有操作正在进行，比如查询等，\n\n那么只有等待这个查询操作完成，“drop table” 或\"truncate table\"或者增加字段的SQL才能获取这张表上的 \"ACCESS EXCLUSIVE\"锁，操作才能进行下去。\n\n### 解决二：查询pg\\_locks是否有这个对象的锁\n\nselect oid,relname from pg_class where relname='table name';\nselect locktype,pid,relation,mode,granted,* from pg_locks where relation= '上面查询出来的oid';\nselect pg_terminate_backend('进程ID');\n\n问题解决！！！\n\n坑：一开始不知道pg\\_cancel\\_backend(‘死锁那条数据的pid值');##只能杀死select 语句, 对其他语句不生效，杀了进程查询发现还存在，反复杀反复存在，换了pg\\_terminate\\_backend(‘进程ID')问题就解决了。\n\n以上为个人经验，希望能给大家一个参考，也希望大家多多支持脚本之家。如有错误或未考虑完全的地方，望不吝赐教。\n\n原文链接：https://blog.csdn.net/fsstyle/article/details/87917720\n","raw":"---\nlayout: default\ntitle: postgresql表死锁问题的排查方式\nnav_order: 438\ndescription: postgresql表死锁问题的排查方式_PostgreSQL_脚本之家\nhas_children: false\npermalink: \"/materiel/article/postgresql表死锁问题的排查方式/\"\ncreated: 2024-06-04T11:38:56 (UTC +08:00)\ntags:\n- postgresql\n- 表死锁\n- 排查\nsource: https://www.jb51.net/article/203560.htm\nauthor:\nparent: Article\ngrand_parent: Materiel\n---\n\n# postgresql表死锁问题的排查方式_PostgreSQL_脚本之家\n\n> ## Excerpt\n> 这篇文章主要介绍了postgresql表死锁问题的排查方式，具有很好的参考价值，希望对大家有所帮助。一起跟随小编过来看看吧\n\n---\n1.查询激活的执行中的sql,查看有哪些更新update的sql。\n\nselect *\nfrom pg_stat_activity\nwhere state = 'active';\n\n2\\. 查询表中存在的锁\n\nselect a.locktype, a.database, a.pid, a.mode, a.relation, b.relname\nfrom pg_locks a\njoin pg_class b on a.relation = b.oid\nwhere lower(b.relname) = 'h5_game';\n\n3\\. 杀掉死锁进程\n\nselect pg_terminate_backend(pid)\nfrom pg_stat_activity\nwhere state = 'active'\nand pid != pg_backend_pid()\n--and pid = 14172\nand pid in (select a.pid\nfrom pg_locks a\njoin pg_class b on a.relation = b.oid\nwhere lower(b.relname) = 'news_content')\n\n锁模式\n\n/* NoLock is not a lock mode, but a flag value meaning \"don't get a lock\" */\n#define NoLock                 0\n \n#define AccessShareLock         1        /* SELECT */\n#define RowShareLock          2        /* SELECT FOR UPDATE/FOR SHARE */\n#define RowExclusiveLock        3        /* INSERT, UPDATE, DELETE */\n#define ShareUpdateExclusiveLock 4       /* VACUUM (non-FULL),ANALYZE, CREATE\n                                         * INDEX CONCURRENTLY */\n#define ShareLock                5        /* CREATE INDEX (WITHOUT CONCURRENTLY) */\n#define ShareRowExclusiveLock  6        /* like EXCLUSIVE MODE, but allows ROW\n                                         * SHARE */\n#define ExclusiveLock          7        /* blocks ROW SHARE/SELECT...FOR\n                                         * UPDATE */\n#define AccessExclusiveLock       8        /* ALTER TABLE, DROP TABLE, VACUUM\n                                         * FULL, and unqualified LOCK TABLE */\n\n**补充：Postgresql死锁的处理**\n\n背景：\n\n对表进行所有操作都卡住，原因可能是更新表时导致这个表死锁了，开始进行排查\n\n### 解决一：查询pg\\_stat\\_activity有没有记录\n\npg版本10.2\n\nselect pid,query,* from pg_stat_activity where datname='死锁的数据库' and wait_event_type = 'Lock';\nselect pg_cancel_backend('死锁那条数据的pid值');##只能杀死select 语句, 对其他语句不生效\npg_terminate_backend('死锁那条数据的pid值');#select,drop等各种操作\n\n执行后发现select和delete表时正常执行，但truncate和drop表时会一直运行，也不报错。\n\n“drop table” 和 “truncate table” 需要申请排它锁\"ACCESS EXCLUSIVE\"， 执行这个命令卡住时，说明此时这张表上还有操作正在进行，比如查询等，\n\n那么只有等待这个查询操作完成，“drop table” 或\"truncate table\"或者增加字段的SQL才能获取这张表上的 \"ACCESS EXCLUSIVE\"锁，操作才能进行下去。\n\n### 解决二：查询pg\\_locks是否有这个对象的锁\n\nselect oid,relname from pg_class where relname='table name';\nselect locktype,pid,relation,mode,granted,* from pg_locks where relation= '上面查询出来的oid';\nselect pg_terminate_backend('进程ID');\n\n问题解决！！！\n\n坑：一开始不知道pg\\_cancel\\_backend(‘死锁那条数据的pid值');##只能杀死select 语句, 对其他语句不生效，杀了进程查询发现还存在，反复杀反复存在，换了pg\\_terminate\\_backend(‘进程ID')问题就解决了。\n\n以上为个人经验，希望能给大家一个参考，也希望大家多多支持脚本之家。如有错误或未考虑完全的地方，望不吝赐教。\n\n原文链接：https://blog.csdn.net/fsstyle/article/details/87917720\n","slug":"materiel/article/postgresql表死锁问题的排查方式","published":1,"date":"2025-02-23T07:43:31.736Z","updated":"2025-02-23T07:43:31.736Z","__permalink":"/materiel/article/postgresql表死锁问题的排查方式/","comments":1,"photos":[],"_id":"cm7k5rwa6001emsws7muagexo","content":"<h1 id=\"postgresql表死锁问题的排查方式-PostgreSQL-脚本之家\"><a href=\"#postgresql表死锁问题的排查方式-PostgreSQL-脚本之家\" class=\"headerlink\" title=\"postgresql表死锁问题的排查方式_PostgreSQL_脚本之家\"></a>postgresql表死锁问题的排查方式_PostgreSQL_脚本之家</h1><blockquote>\n<h2 id=\"Excerpt\"><a href=\"#Excerpt\" class=\"headerlink\" title=\"Excerpt\"></a>Excerpt</h2><p>这篇文章主要介绍了postgresql表死锁问题的排查方式，具有很好的参考价值，希望对大家有所帮助。一起跟随小编过来看看吧</p>\n</blockquote>\n<hr>\n<p>1.查询激活的执行中的sql,查看有哪些更新update的sql。</p>\n<p>select *<br>from pg_stat_activity<br>where state &#x3D; ‘active’;</p>\n<p>2. 查询表中存在的锁</p>\n<p>select a.locktype, a.database, a.pid, a.mode, a.relation, b.relname<br>from pg_locks a<br>join pg_class b on a.relation &#x3D; b.oid<br>where lower(b.relname) &#x3D; ‘h5_game’;</p>\n<p>3. 杀掉死锁进程</p>\n<p>select pg_terminate_backend(pid)<br>from pg_stat_activity<br>where state &#x3D; ‘active’<br>and pid !&#x3D; pg_backend_pid()<br>–and pid &#x3D; 14172<br>and pid in (select a.pid<br>from pg_locks a<br>join pg_class b on a.relation &#x3D; b.oid<br>where lower(b.relname) &#x3D; ‘news_content’)</p>\n<p>锁模式</p>\n<p>&#x2F;* NoLock is not a lock mode, but a flag value meaning “don’t get a lock” *&#x2F;<br>#define NoLock                 0</p>\n<p>#define AccessShareLock         1        &#x2F;* SELECT <em>&#x2F;<br>#define RowShareLock          2        &#x2F;</em> SELECT FOR UPDATE&#x2F;FOR SHARE <em>&#x2F;<br>#define RowExclusiveLock        3        &#x2F;</em> INSERT, UPDATE, DELETE <em>&#x2F;<br>#define ShareUpdateExclusiveLock 4       &#x2F;</em> VACUUM (non-FULL),ANALYZE, CREATE<br>                                         * INDEX CONCURRENTLY <em>&#x2F;<br>#define ShareLock                5        &#x2F;</em> CREATE INDEX (WITHOUT CONCURRENTLY) <em>&#x2F;<br>#define ShareRowExclusiveLock  6        &#x2F;</em> like EXCLUSIVE MODE, but allows ROW<br>                                         * SHARE <em>&#x2F;<br>#define ExclusiveLock          7        &#x2F;</em> blocks ROW SHARE&#x2F;SELECT…FOR<br>                                         * UPDATE <em>&#x2F;<br>#define AccessExclusiveLock       8        &#x2F;</em> ALTER TABLE, DROP TABLE, VACUUM<br>                                         * FULL, and unqualified LOCK TABLE *&#x2F;</p>\n<p><strong>补充：Postgresql死锁的处理</strong></p>\n<p>背景：</p>\n<p>对表进行所有操作都卡住，原因可能是更新表时导致这个表死锁了，开始进行排查</p>\n<h3 id=\"解决一：查询pg-stat-activity有没有记录\"><a href=\"#解决一：查询pg-stat-activity有没有记录\" class=\"headerlink\" title=\"解决一：查询pg_stat_activity有没有记录\"></a>解决一：查询pg_stat_activity有没有记录</h3><p>pg版本10.2</p>\n<p>select pid,query,* from pg_stat_activity where datname&#x3D;’死锁的数据库’ and wait_event_type &#x3D; ‘Lock’;<br>select pg_cancel_backend(‘死锁那条数据的pid值’);##只能杀死select 语句, 对其他语句不生效<br>pg_terminate_backend(‘死锁那条数据的pid值’);#select,drop等各种操作</p>\n<p>执行后发现select和delete表时正常执行，但truncate和drop表时会一直运行，也不报错。</p>\n<p>“drop table” 和 “truncate table” 需要申请排它锁”ACCESS EXCLUSIVE”， 执行这个命令卡住时，说明此时这张表上还有操作正在进行，比如查询等，</p>\n<p>那么只有等待这个查询操作完成，“drop table” 或”truncate table”或者增加字段的SQL才能获取这张表上的 “ACCESS EXCLUSIVE”锁，操作才能进行下去。</p>\n<h3 id=\"解决二：查询pg-locks是否有这个对象的锁\"><a href=\"#解决二：查询pg-locks是否有这个对象的锁\" class=\"headerlink\" title=\"解决二：查询pg_locks是否有这个对象的锁\"></a>解决二：查询pg_locks是否有这个对象的锁</h3><p>select oid,relname from pg_class where relname&#x3D;’table name’;<br>select locktype,pid,relation,mode,granted,* from pg_locks where relation&#x3D; ‘上面查询出来的oid’;<br>select pg_terminate_backend(‘进程ID’);</p>\n<p>问题解决！！！</p>\n<p>坑：一开始不知道pg_cancel_backend(‘死锁那条数据的pid值’);##只能杀死select 语句, 对其他语句不生效，杀了进程查询发现还存在，反复杀反复存在，换了pg_terminate_backend(‘进程ID’)问题就解决了。</p>\n<p>以上为个人经验，希望能给大家一个参考，也希望大家多多支持脚本之家。如有错误或未考虑完全的地方，望不吝赐教。</p>\n<p>原文链接：<a href=\"https://blog.csdn.net/fsstyle/article/details/87917720\">https://blog.csdn.net/fsstyle/article/details/87917720</a></p>\n","excerpt":"","more":"<h1 id=\"postgresql表死锁问题的排查方式-PostgreSQL-脚本之家\"><a href=\"#postgresql表死锁问题的排查方式-PostgreSQL-脚本之家\" class=\"headerlink\" title=\"postgresql表死锁问题的排查方式_PostgreSQL_脚本之家\"></a>postgresql表死锁问题的排查方式_PostgreSQL_脚本之家</h1><blockquote>\n<h2 id=\"Excerpt\"><a href=\"#Excerpt\" class=\"headerlink\" title=\"Excerpt\"></a>Excerpt</h2><p>这篇文章主要介绍了postgresql表死锁问题的排查方式，具有很好的参考价值，希望对大家有所帮助。一起跟随小编过来看看吧</p>\n</blockquote>\n<hr>\n<p>1.查询激活的执行中的sql,查看有哪些更新update的sql。</p>\n<p>select *<br>from pg_stat_activity<br>where state &#x3D; ‘active’;</p>\n<p>2. 查询表中存在的锁</p>\n<p>select a.locktype, a.database, a.pid, a.mode, a.relation, b.relname<br>from pg_locks a<br>join pg_class b on a.relation &#x3D; b.oid<br>where lower(b.relname) &#x3D; ‘h5_game’;</p>\n<p>3. 杀掉死锁进程</p>\n<p>select pg_terminate_backend(pid)<br>from pg_stat_activity<br>where state &#x3D; ‘active’<br>and pid !&#x3D; pg_backend_pid()<br>–and pid &#x3D; 14172<br>and pid in (select a.pid<br>from pg_locks a<br>join pg_class b on a.relation &#x3D; b.oid<br>where lower(b.relname) &#x3D; ‘news_content’)</p>\n<p>锁模式</p>\n<p>&#x2F;* NoLock is not a lock mode, but a flag value meaning “don’t get a lock” *&#x2F;<br>#define NoLock                 0</p>\n<p>#define AccessShareLock         1        &#x2F;* SELECT <em>&#x2F;<br>#define RowShareLock          2        &#x2F;</em> SELECT FOR UPDATE&#x2F;FOR SHARE <em>&#x2F;<br>#define RowExclusiveLock        3        &#x2F;</em> INSERT, UPDATE, DELETE <em>&#x2F;<br>#define ShareUpdateExclusiveLock 4       &#x2F;</em> VACUUM (non-FULL),ANALYZE, CREATE<br>                                         * INDEX CONCURRENTLY <em>&#x2F;<br>#define ShareLock                5        &#x2F;</em> CREATE INDEX (WITHOUT CONCURRENTLY) <em>&#x2F;<br>#define ShareRowExclusiveLock  6        &#x2F;</em> like EXCLUSIVE MODE, but allows ROW<br>                                         * SHARE <em>&#x2F;<br>#define ExclusiveLock          7        &#x2F;</em> blocks ROW SHARE&#x2F;SELECT…FOR<br>                                         * UPDATE <em>&#x2F;<br>#define AccessExclusiveLock       8        &#x2F;</em> ALTER TABLE, DROP TABLE, VACUUM<br>                                         * FULL, and unqualified LOCK TABLE *&#x2F;</p>\n<p><strong>补充：Postgresql死锁的处理</strong></p>\n<p>背景：</p>\n<p>对表进行所有操作都卡住，原因可能是更新表时导致这个表死锁了，开始进行排查</p>\n<h3 id=\"解决一：查询pg-stat-activity有没有记录\"><a href=\"#解决一：查询pg-stat-activity有没有记录\" class=\"headerlink\" title=\"解决一：查询pg_stat_activity有没有记录\"></a>解决一：查询pg_stat_activity有没有记录</h3><p>pg版本10.2</p>\n<p>select pid,query,* from pg_stat_activity where datname&#x3D;’死锁的数据库’ and wait_event_type &#x3D; ‘Lock’;<br>select pg_cancel_backend(‘死锁那条数据的pid值’);##只能杀死select 语句, 对其他语句不生效<br>pg_terminate_backend(‘死锁那条数据的pid值’);#select,drop等各种操作</p>\n<p>执行后发现select和delete表时正常执行，但truncate和drop表时会一直运行，也不报错。</p>\n<p>“drop table” 和 “truncate table” 需要申请排它锁”ACCESS EXCLUSIVE”， 执行这个命令卡住时，说明此时这张表上还有操作正在进行，比如查询等，</p>\n<p>那么只有等待这个查询操作完成，“drop table” 或”truncate table”或者增加字段的SQL才能获取这张表上的 “ACCESS EXCLUSIVE”锁，操作才能进行下去。</p>\n<h3 id=\"解决二：查询pg-locks是否有这个对象的锁\"><a href=\"#解决二：查询pg-locks是否有这个对象的锁\" class=\"headerlink\" title=\"解决二：查询pg_locks是否有这个对象的锁\"></a>解决二：查询pg_locks是否有这个对象的锁</h3><p>select oid,relname from pg_class where relname&#x3D;’table name’;<br>select locktype,pid,relation,mode,granted,* from pg_locks where relation&#x3D; ‘上面查询出来的oid’;<br>select pg_terminate_backend(‘进程ID’);</p>\n<p>问题解决！！！</p>\n<p>坑：一开始不知道pg_cancel_backend(‘死锁那条数据的pid值’);##只能杀死select 语句, 对其他语句不生效，杀了进程查询发现还存在，反复杀反复存在，换了pg_terminate_backend(‘进程ID’)问题就解决了。</p>\n<p>以上为个人经验，希望能给大家一个参考，也希望大家多多支持脚本之家。如有错误或未考虑完全的地方，望不吝赐教。</p>\n<p>原文链接：<a href=\"https://blog.csdn.net/fsstyle/article/details/87917720\">https://blog.csdn.net/fsstyle/article/details/87917720</a></p>\n"},{"layout":"default","title":"一键更换Linux优质的软件源和docker源","nav_order":12,"description":"一键更换Linux优质的软件源和docker源","parent":"Article","has_children":false,"grand_parent":"Materiel","_content":"\n# 一键更换Linux优质的软件源和docker源\n\n[参考文章](https://mp.weixin.qq.com/s/XlluE2SDzyNjTjg-_kRdyw)\n\n[镜像地址](https://linuxmirrors.cn/)\n\n```bash\n# 是用root命令执行\n# 软件源一键更换\nbash <(curl -sSL https://linuxmirrors.cn/main.sh)\n# Docker 一键安装\nbash <(curl -sSL https://linuxmirrors.cn/docker.sh)\n```\n","source":"_posts/materiel/article/一键更换Linux优质的软件源和docker源.md","raw":"---\nlayout: default\ntitle: 一键更换Linux优质的软件源和docker源\nnav_order: 12\ndescription: 一键更换Linux优质的软件源和docker源\nparent: Article\nhas_children: false\npermalink: \"/materiel/article/一键更换linux优质的软件源和docker源/\"\ngrand_parent: Materiel\n---\n\n# 一键更换Linux优质的软件源和docker源\n\n[参考文章](https://mp.weixin.qq.com/s/XlluE2SDzyNjTjg-_kRdyw)\n\n[镜像地址](https://linuxmirrors.cn/)\n\n```bash\n# 是用root命令执行\n# 软件源一键更换\nbash <(curl -sSL https://linuxmirrors.cn/main.sh)\n# Docker 一键安装\nbash <(curl -sSL https://linuxmirrors.cn/docker.sh)\n```\n","slug":"materiel/article/一键更换Linux优质的软件源和docker源","published":1,"date":"2025-02-23T07:43:31.736Z","updated":"2025-02-23T07:43:31.736Z","__permalink":"/materiel/article/一键更换linux优质的软件源和docker源/","comments":1,"photos":[],"_id":"cm7k5rwa6001fmsws6pkl8gwu","content":"<h1 id=\"一键更换Linux优质的软件源和docker源\"><a href=\"#一键更换Linux优质的软件源和docker源\" class=\"headerlink\" title=\"一键更换Linux优质的软件源和docker源\"></a>一键更换Linux优质的软件源和docker源</h1><p><a href=\"https://mp.weixin.qq.com/s/XlluE2SDzyNjTjg-_kRdyw\">参考文章</a></p>\n<p><a href=\"https://linuxmirrors.cn/\">镜像地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是用root命令执行</span></span><br><span class=\"line\"><span class=\"comment\"># 软件源一键更换</span></span><br><span class=\"line\">bash &lt;(curl -sSL https://linuxmirrors.cn/main.sh)</span><br><span class=\"line\"><span class=\"comment\"># Docker 一键安装</span></span><br><span class=\"line\">bash &lt;(curl -sSL https://linuxmirrors.cn/docker.sh)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"一键更换Linux优质的软件源和docker源\"><a href=\"#一键更换Linux优质的软件源和docker源\" class=\"headerlink\" title=\"一键更换Linux优质的软件源和docker源\"></a>一键更换Linux优质的软件源和docker源</h1><p><a href=\"https://mp.weixin.qq.com/s/XlluE2SDzyNjTjg-_kRdyw\">参考文章</a></p>\n<p><a href=\"https://linuxmirrors.cn/\">镜像地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是用root命令执行</span></span><br><span class=\"line\"><span class=\"comment\"># 软件源一键更换</span></span><br><span class=\"line\">bash &lt;(curl -sSL https://linuxmirrors.cn/main.sh)</span><br><span class=\"line\"><span class=\"comment\"># Docker 一键安装</span></span><br><span class=\"line\">bash &lt;(curl -sSL https://linuxmirrors.cn/docker.sh)</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"README","nav_order":12,"description":"readme","parent":"Draft","has_children":false,"grand_parent":"Materiel","_content":"\n# readme\n\n这是我的草稿目录\n\n- 用来给写文章做草稿\n","source":"_posts/materiel/draft/README.md","raw":"---\nlayout: default\ntitle: README\nnav_order: 12\ndescription: readme\nparent: Draft\nhas_children: false\npermalink: \"/materiel/draft/readme/\"\ngrand_parent: Materiel\n---\n\n# readme\n\n这是我的草稿目录\n\n- 用来给写文章做草稿\n","slug":"materiel/draft/README","published":1,"date":"2025-02-23T07:43:31.719Z","updated":"2025-02-23T07:43:31.719Z","__permalink":"/materiel/draft/readme/","comments":1,"photos":[],"_id":"cm7k5rwac001hmswsa6s24uw3","content":"<h1 id=\"readme\"><a href=\"#readme\" class=\"headerlink\" title=\"readme\"></a>readme</h1><p>这是我的草稿目录</p>\n<ul>\n<li>用来给写文章做草稿</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"readme\"><a href=\"#readme\" class=\"headerlink\" title=\"readme\"></a>readme</h1><p>这是我的草稿目录</p>\n<ul>\n<li>用来给写文章做草稿</li>\n</ul>\n"},{"layout":"default","title":"arthas查看sql_redis_es","nav_order":12,"description":"arthas查看sql_redis_es拼接好参数的命令","parent":"Draft","has_children":false,"grand_parent":"Materiel","_content":"\n# arthas查看sql_redis_es拼接好参数的命令\n\n[参考文章](http://codefun007.xyz/a/article_detail/2392.htm)\n\n```bash\n\nwatch java.sql.Connection prepareStatement '{params,throwExp}'    -x 3 \nwatch java.sql.Statement executeQuery '{params,throwExp}'    -x 3 \n\nwatch org.apache.ibatis.mapping.BoundSql getSql '{params,returnObj,throwExp}'    -x 3 \n\n```\n\n- temp\n\n```bash\n\nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -n 5  -x 3 \nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 3 \nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 2\n\n# 看到的是jpa的非本地sql\nwatch javax.persistence.EntityManager createQuery '{params,returnObj,throwExp}'  -n 5  -x 3 \n\n# jpa(完整sql)\nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 2\n# mybatis plus (参数和sql分离)\nwatch org.apache.ibatis.mapping.BoundSql <init> '{params,returnObj,throwExp}' -x 2\n\n# es\nwatch org.elasticsearch.client.RestHighLevelClient search '{params,throwExp}' -x 2\n\n# redis\nwatch org.springframework.data.redis.connection.RedisHashCommands hMSet '{params,returnObj,throwExp}'  -n 5  -x 3 \n\n```\n","source":"_posts/materiel/draft/arthas查看sql_redis_es.md","raw":"---\nlayout: default\ntitle: arthas查看sql_redis_es\nnav_order: 12\ndescription: arthas查看sql_redis_es拼接好参数的命令\nparent: Draft\nhas_children: false\npermalink: \"/materiel/draft/arthas查看sql_redis_es/\"\ngrand_parent: Materiel\n---\n\n# arthas查看sql_redis_es拼接好参数的命令\n\n[参考文章](http://codefun007.xyz/a/article_detail/2392.htm)\n\n```bash\n\nwatch java.sql.Connection prepareStatement '{params,throwExp}'    -x 3 \nwatch java.sql.Statement executeQuery '{params,throwExp}'    -x 3 \n\nwatch org.apache.ibatis.mapping.BoundSql getSql '{params,returnObj,throwExp}'    -x 3 \n\n```\n\n- temp\n\n```bash\n\nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -n 5  -x 3 \nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 3 \nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 2\n\n# 看到的是jpa的非本地sql\nwatch javax.persistence.EntityManager createQuery '{params,returnObj,throwExp}'  -n 5  -x 3 \n\n# jpa(完整sql)\nwatch java.sql.Statement executeQuery '{params,returnObj,throwExp}'  -x 2\n# mybatis plus (参数和sql分离)\nwatch org.apache.ibatis.mapping.BoundSql <init> '{params,returnObj,throwExp}' -x 2\n\n# es\nwatch org.elasticsearch.client.RestHighLevelClient search '{params,throwExp}' -x 2\n\n# redis\nwatch org.springframework.data.redis.connection.RedisHashCommands hMSet '{params,returnObj,throwExp}'  -n 5  -x 3 \n\n```\n","slug":"materiel/draft/arthas查看sql_redis_es","published":1,"date":"2025-02-23T07:43:31.719Z","updated":"2025-02-23T07:43:31.719Z","__permalink":"/materiel/draft/arthas查看sql_redis_es/","comments":1,"photos":[],"_id":"cm7k5rwac001imsws562fce2b","content":"<h1 id=\"arthas查看sql-redis-es拼接好参数的命令\"><a href=\"#arthas查看sql-redis-es拼接好参数的命令\" class=\"headerlink\" title=\"arthas查看sql_redis_es拼接好参数的命令\"></a>arthas查看sql_redis_es拼接好参数的命令</h1><p><a href=\"http://codefun007.xyz/a/article_detail/2392.htm\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">watch java.sql.Connection prepareStatement <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\"></span><br><span class=\"line\">watch org.apache.ibatis.mapping.BoundSql getSql <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>temp</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 看到的是jpa的非本地sql</span></span><br><span class=\"line\">watch javax.persistence.EntityManager createQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># jpa(完整sql)</span></span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 2</span><br><span class=\"line\"><span class=\"comment\"># mybatis plus (参数和sql分离)</span></span><br><span class=\"line\">watch org.apache.ibatis.mapping.BoundSql &lt;init&gt; <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span> -x 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># es</span></span><br><span class=\"line\">watch org.elasticsearch.client.RestHighLevelClient search <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span> -x 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis</span></span><br><span class=\"line\">watch org.springframework.data.redis.connection.RedisHashCommands hMSet <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"arthas查看sql-redis-es拼接好参数的命令\"><a href=\"#arthas查看sql-redis-es拼接好参数的命令\" class=\"headerlink\" title=\"arthas查看sql_redis_es拼接好参数的命令\"></a>arthas查看sql_redis_es拼接好参数的命令</h1><p><a href=\"http://codefun007.xyz/a/article_detail/2392.htm\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">watch java.sql.Connection prepareStatement <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\"></span><br><span class=\"line\">watch org.apache.ibatis.mapping.BoundSql getSql <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>    -x 3 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>temp</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 3 </span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 看到的是jpa的非本地sql</span></span><br><span class=\"line\">watch javax.persistence.EntityManager createQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># jpa(完整sql)</span></span><br><span class=\"line\">watch java.sql.Statement executeQuery <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -x 2</span><br><span class=\"line\"><span class=\"comment\"># mybatis plus (参数和sql分离)</span></span><br><span class=\"line\">watch org.apache.ibatis.mapping.BoundSql &lt;init&gt; <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span> -x 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># es</span></span><br><span class=\"line\">watch org.elasticsearch.client.RestHighLevelClient search <span class=\"string\">&#x27;&#123;params,throwExp&#125;&#x27;</span> -x 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis</span></span><br><span class=\"line\">watch org.springframework.data.redis.connection.RedisHashCommands hMSet <span class=\"string\">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span>  -n 5  -x 3 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Article","nav_order":2,"has_children":true,"parent":"Article","_content":"\n# Article\n","source":"_posts/materiel/article/index.md","raw":"---\nlayout: default\ntitle: Article\nnav_order: 2\nhas_children: true\nparent: Article\npermalink: \"/materiel/article/\"\n---\n\n# Article\n","slug":"materiel/article/index","published":1,"date":"2025-02-23T07:43:31.737Z","updated":"2025-02-23T07:43:31.737Z","__permalink":"/materiel/article/","comments":1,"photos":[],"_id":"cm7k5rwac001jmsws2ydweks4","content":"<h1 id=\"Article\"><a href=\"#Article\" class=\"headerlink\" title=\"Article\"></a>Article</h1>","excerpt":"","more":"<h1 id=\"Article\"><a href=\"#Article\" class=\"headerlink\" title=\"Article\"></a>Article</h1>"},{"layout":"default","title":"Draft","nav_order":2,"has_children":true,"parent":"Draft","_content":"\n# Draft\n","source":"_posts/materiel/draft/index.md","raw":"---\nlayout: default\ntitle: Draft\nnav_order: 2\nhas_children: true\nparent: Draft\npermalink: \"/materiel/draft/\"\n---\n\n# Draft\n","slug":"materiel/draft/index","published":1,"date":"2025-02-23T07:43:31.719Z","updated":"2025-02-23T07:43:31.719Z","__permalink":"/materiel/draft/","comments":1,"photos":[],"_id":"cm7k5rwad001lmsws3yk1gkaj","content":"<h1 id=\"Draft\"><a href=\"#Draft\" class=\"headerlink\" title=\"Draft\"></a>Draft</h1>","excerpt":"","more":"<h1 id=\"Draft\"><a href=\"#Draft\" class=\"headerlink\" title=\"Draft\"></a>Draft</h1>"},{"layout":"default","title":"centos7报错记录","nav_order":12,"description":"centos7报错记录","parent":"Draft","has_children":false,"grand_parent":"Materiel","_content":"\n# centos7报错记录\n\n## 解决 docker Failed to get D-Bus connection 报错\n\n[参考文章](https://www.cnblogs.com/as007012/p/10042387.html)\n\nsystemctl start http.service\nFailed to get D-Bus connection: No connection to service manager.\n\n   这个的原因是因为dbus-daemon没能启动。其实systemctl并不是不可以使用。将你的CMD或者entrypoint设置为/usr/sbin/init即可。会自动将dbus等服务启动起来。\n   然后就可以使用systemctl了。命令如下：\n   docker run --privileged  -ti -e \"container=docker\"  -v /sys/fs/cgroup:/sys/fs/cgroup  centos  /usr/sbin/init\n\n## 解决使用SSH登录Linux实例时secure日志显示“failed to create session access denied”\n\n[参考文章](https://help.aliyun.com/zh/ecs/the-secure-log-entry-failed-to-create-session-access-denied-is-displayed-when-you-log-on-to-a-linux-instance-through-ssh)\n\n- 问题描述\n\n```bash\n# 登录docker容器执行命令报能看到以下报错. $ `systemctl status sshd`\n# pam_selinux(sshd:session): Error sending audit message.\n# failed to create session access denied\n\n# 同时在登录界面还能看到提示以下信息。$ `ssh -p 3333 127.0.0.1`\n# root@127.0.0.1's password: \n# Last login: Fri Oct 11 05:50:17 2024 from gateway\n# /bin/bash: Permission denied\n# Connection to 127.0.0.1 closed.\n\n# 问题原因: 由于开启了SELinux，一般情况下开启SELinux会提高系统的安全性，但是会破坏操作系统的文件，从而造成系统异常。\n\n# 解决方法: setenforce 0|1, 0: 设置为permissive, 1: 设置为enforcing\n# 相关命令: getenforce: 获取selinux当前状态, sestatus :查看selinux状态\nsetenforce 0\n```\n","source":"_posts/materiel/draft/centos7报错记录.md","raw":"---\nlayout: default\ntitle: centos7报错记录\nnav_order: 12\ndescription: centos7报错记录\nparent: Draft\nhas_children: false\npermalink: \"/materiel/draft/centos7报错记录/\"\ngrand_parent: Materiel\n---\n\n# centos7报错记录\n\n## 解决 docker Failed to get D-Bus connection 报错\n\n[参考文章](https://www.cnblogs.com/as007012/p/10042387.html)\n\nsystemctl start http.service\nFailed to get D-Bus connection: No connection to service manager.\n\n   这个的原因是因为dbus-daemon没能启动。其实systemctl并不是不可以使用。将你的CMD或者entrypoint设置为/usr/sbin/init即可。会自动将dbus等服务启动起来。\n   然后就可以使用systemctl了。命令如下：\n   docker run --privileged  -ti -e \"container=docker\"  -v /sys/fs/cgroup:/sys/fs/cgroup  centos  /usr/sbin/init\n\n## 解决使用SSH登录Linux实例时secure日志显示“failed to create session access denied”\n\n[参考文章](https://help.aliyun.com/zh/ecs/the-secure-log-entry-failed-to-create-session-access-denied-is-displayed-when-you-log-on-to-a-linux-instance-through-ssh)\n\n- 问题描述\n\n```bash\n# 登录docker容器执行命令报能看到以下报错. $ `systemctl status sshd`\n# pam_selinux(sshd:session): Error sending audit message.\n# failed to create session access denied\n\n# 同时在登录界面还能看到提示以下信息。$ `ssh -p 3333 127.0.0.1`\n# root@127.0.0.1's password: \n# Last login: Fri Oct 11 05:50:17 2024 from gateway\n# /bin/bash: Permission denied\n# Connection to 127.0.0.1 closed.\n\n# 问题原因: 由于开启了SELinux，一般情况下开启SELinux会提高系统的安全性，但是会破坏操作系统的文件，从而造成系统异常。\n\n# 解决方法: setenforce 0|1, 0: 设置为permissive, 1: 设置为enforcing\n# 相关命令: getenforce: 获取selinux当前状态, sestatus :查看selinux状态\nsetenforce 0\n```\n","slug":"materiel/draft/centos7报错记录","published":1,"date":"2025-02-23T07:43:31.720Z","updated":"2025-02-23T07:43:31.720Z","__permalink":"/materiel/draft/centos7报错记录/","comments":1,"photos":[],"_id":"cm7k5rwad001mmswsb7lc6amr","content":"<h1 id=\"centos7报错记录\"><a href=\"#centos7报错记录\" class=\"headerlink\" title=\"centos7报错记录\"></a>centos7报错记录</h1><h2 id=\"解决-docker-Failed-to-get-D-Bus-connection-报错\"><a href=\"#解决-docker-Failed-to-get-D-Bus-connection-报错\" class=\"headerlink\" title=\"解决 docker Failed to get D-Bus connection 报错\"></a>解决 docker Failed to get D-Bus connection 报错</h2><p><a href=\"https://www.cnblogs.com/as007012/p/10042387.html\">参考文章</a></p>\n<p>systemctl start http.service<br>Failed to get D-Bus connection: No connection to service manager.</p>\n<p>   这个的原因是因为dbus-daemon没能启动。其实systemctl并不是不可以使用。将你的CMD或者entrypoint设置为&#x2F;usr&#x2F;sbin&#x2F;init即可。会自动将dbus等服务启动起来。<br>   然后就可以使用systemctl了。命令如下：<br>   docker run –privileged  -ti -e “container&#x3D;docker”  -v &#x2F;sys&#x2F;fs&#x2F;cgroup:&#x2F;sys&#x2F;fs&#x2F;cgroup  centos  &#x2F;usr&#x2F;sbin&#x2F;init</p>\n<h2 id=\"解决使用SSH登录Linux实例时secure日志显示“failed-to-create-session-access-denied”\"><a href=\"#解决使用SSH登录Linux实例时secure日志显示“failed-to-create-session-access-denied”\" class=\"headerlink\" title=\"解决使用SSH登录Linux实例时secure日志显示“failed to create session access denied”\"></a>解决使用SSH登录Linux实例时secure日志显示“failed to create session access denied”</h2><p><a href=\"https://help.aliyun.com/zh/ecs/the-secure-log-entry-failed-to-create-session-access-denied-is-displayed-when-you-log-on-to-a-linux-instance-through-ssh\">参考文章</a></p>\n<ul>\n<li>问题描述</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录docker容器执行命令报能看到以下报错. $ `systemctl status sshd`</span></span><br><span class=\"line\"><span class=\"comment\"># pam_selinux(sshd:session): Error sending audit message.</span></span><br><span class=\"line\"><span class=\"comment\"># failed to create session access denied</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时在登录界面还能看到提示以下信息。$ `ssh -p 3333 127.0.0.1`</span></span><br><span class=\"line\"><span class=\"comment\"># root@127.0.0.1&#x27;s password: </span></span><br><span class=\"line\"><span class=\"comment\"># Last login: Fri Oct 11 05:50:17 2024 from gateway</span></span><br><span class=\"line\"><span class=\"comment\"># /bin/bash: Permission denied</span></span><br><span class=\"line\"><span class=\"comment\"># Connection to 127.0.0.1 closed.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 问题原因: 由于开启了SELinux，一般情况下开启SELinux会提高系统的安全性，但是会破坏操作系统的文件，从而造成系统异常。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决方法: setenforce 0|1, 0: 设置为permissive, 1: 设置为enforcing</span></span><br><span class=\"line\"><span class=\"comment\"># 相关命令: getenforce: 获取selinux当前状态, sestatus :查看selinux状态</span></span><br><span class=\"line\">setenforce 0</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"centos7报错记录\"><a href=\"#centos7报错记录\" class=\"headerlink\" title=\"centos7报错记录\"></a>centos7报错记录</h1><h2 id=\"解决-docker-Failed-to-get-D-Bus-connection-报错\"><a href=\"#解决-docker-Failed-to-get-D-Bus-connection-报错\" class=\"headerlink\" title=\"解决 docker Failed to get D-Bus connection 报错\"></a>解决 docker Failed to get D-Bus connection 报错</h2><p><a href=\"https://www.cnblogs.com/as007012/p/10042387.html\">参考文章</a></p>\n<p>systemctl start http.service<br>Failed to get D-Bus connection: No connection to service manager.</p>\n<p>   这个的原因是因为dbus-daemon没能启动。其实systemctl并不是不可以使用。将你的CMD或者entrypoint设置为&#x2F;usr&#x2F;sbin&#x2F;init即可。会自动将dbus等服务启动起来。<br>   然后就可以使用systemctl了。命令如下：<br>   docker run –privileged  -ti -e “container&#x3D;docker”  -v &#x2F;sys&#x2F;fs&#x2F;cgroup:&#x2F;sys&#x2F;fs&#x2F;cgroup  centos  &#x2F;usr&#x2F;sbin&#x2F;init</p>\n<h2 id=\"解决使用SSH登录Linux实例时secure日志显示“failed-to-create-session-access-denied”\"><a href=\"#解决使用SSH登录Linux实例时secure日志显示“failed-to-create-session-access-denied”\" class=\"headerlink\" title=\"解决使用SSH登录Linux实例时secure日志显示“failed to create session access denied”\"></a>解决使用SSH登录Linux实例时secure日志显示“failed to create session access denied”</h2><p><a href=\"https://help.aliyun.com/zh/ecs/the-secure-log-entry-failed-to-create-session-access-denied-is-displayed-when-you-log-on-to-a-linux-instance-through-ssh\">参考文章</a></p>\n<ul>\n<li>问题描述</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录docker容器执行命令报能看到以下报错. $ `systemctl status sshd`</span></span><br><span class=\"line\"><span class=\"comment\"># pam_selinux(sshd:session): Error sending audit message.</span></span><br><span class=\"line\"><span class=\"comment\"># failed to create session access denied</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时在登录界面还能看到提示以下信息。$ `ssh -p 3333 127.0.0.1`</span></span><br><span class=\"line\"><span class=\"comment\"># root@127.0.0.1&#x27;s password: </span></span><br><span class=\"line\"><span class=\"comment\"># Last login: Fri Oct 11 05:50:17 2024 from gateway</span></span><br><span class=\"line\"><span class=\"comment\"># /bin/bash: Permission denied</span></span><br><span class=\"line\"><span class=\"comment\"># Connection to 127.0.0.1 closed.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 问题原因: 由于开启了SELinux，一般情况下开启SELinux会提高系统的安全性，但是会破坏操作系统的文件，从而造成系统异常。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决方法: setenforce 0|1, 0: 设置为permissive, 1: 设置为enforcing</span></span><br><span class=\"line\"><span class=\"comment\"># 相关命令: getenforce: 获取selinux当前状态, sestatus :查看selinux状态</span></span><br><span class=\"line\">setenforce 0</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"proxyman和arthas结合监听java进程网络(包括feign调用等)","nav_order":12,"description":"使用arthas和proxyman监听java进程网络(包括feign调用等)","parent":"Draft","has_children":false,"grand_parent":"Materiel","_content":"\n# 使用arthas和proxyman监听java进程网络(包括feign调用等)\n\n## 相关命令\n\n```bash\n# proxyman代理环境变量\nexport https_proxy=http://10.0.4.190:9091 http_proxy=http://10.0.4.190:9091\n\n# 设置 HTTP/HTTPS 代理\nsysprop https.proxyHost 10.0.4.190\nsysprop https.proxyPort 9091\nsysprop http.proxyHost 10.0.4.190\nsysprop http.proxyPort 9091\n\n# 移除 HTTP/HTTPS 代理(使用System.clearProperty方式移除)\nognl '@java.lang.System@clearProperty(\"https.proxyHost\")'\nognl '@java.lang.System@clearProperty(\"https.proxyPort\")'\nognl '@java.lang.System@clearProperty(\"http.proxyHost\")'\nognl '@java.lang.System@clearProperty(\"http.proxyPort\")'\n\n# 验证\nsysprop | grep proxy\n\n# 因为feign调用用的是服务名, 没有IP和port, 所有现在考虑将本地流量代理到指定服务器中去(不行, 没搞成)\n# 改成用proxyman代理到指定服务器中去(用的远程映射功能, 例如 gateway-service -> feign.microservice.debug:8100)(然后结合SwitchHosts工具, 将feign.microservice.debug映射到10.0.1.94 IP上, 这样子, 之后只需要改SwitchHosts中的IP就能实现访问到不同的服务器上去了(当然, 直接切换开关的方式也行))\n    * PS: 不用这么麻烦, 上面是因为DNS劫持导致域名没有找到IP才需要做的操作, 域名之所以被劫持还是因为开了clash代理(默认劫持了DNS)\n\n```\n","source":"_posts/materiel/draft/proxyman和arthas结合监听java进程网络(包括feign调用等).md","raw":"---\nlayout: default\ntitle: proxyman和arthas结合监听java进程网络(包括feign调用等)\nnav_order: 12\ndescription: 使用arthas和proxyman监听java进程网络(包括feign调用等)\nparent: Draft\nhas_children: false\npermalink: \"/materiel/draft/proxyman和arthas结合监听java进程网络(包括feign调用等)/\"\ngrand_parent: Materiel\n---\n\n# 使用arthas和proxyman监听java进程网络(包括feign调用等)\n\n## 相关命令\n\n```bash\n# proxyman代理环境变量\nexport https_proxy=http://10.0.4.190:9091 http_proxy=http://10.0.4.190:9091\n\n# 设置 HTTP/HTTPS 代理\nsysprop https.proxyHost 10.0.4.190\nsysprop https.proxyPort 9091\nsysprop http.proxyHost 10.0.4.190\nsysprop http.proxyPort 9091\n\n# 移除 HTTP/HTTPS 代理(使用System.clearProperty方式移除)\nognl '@java.lang.System@clearProperty(\"https.proxyHost\")'\nognl '@java.lang.System@clearProperty(\"https.proxyPort\")'\nognl '@java.lang.System@clearProperty(\"http.proxyHost\")'\nognl '@java.lang.System@clearProperty(\"http.proxyPort\")'\n\n# 验证\nsysprop | grep proxy\n\n# 因为feign调用用的是服务名, 没有IP和port, 所有现在考虑将本地流量代理到指定服务器中去(不行, 没搞成)\n# 改成用proxyman代理到指定服务器中去(用的远程映射功能, 例如 gateway-service -> feign.microservice.debug:8100)(然后结合SwitchHosts工具, 将feign.microservice.debug映射到10.0.1.94 IP上, 这样子, 之后只需要改SwitchHosts中的IP就能实现访问到不同的服务器上去了(当然, 直接切换开关的方式也行))\n    * PS: 不用这么麻烦, 上面是因为DNS劫持导致域名没有找到IP才需要做的操作, 域名之所以被劫持还是因为开了clash代理(默认劫持了DNS)\n\n```\n","slug":"materiel/draft/proxyman和arthas结合监听java进程网络(包括feign调用等)","published":1,"date":"2025-02-23T07:43:31.720Z","updated":"2025-02-23T07:43:31.720Z","__permalink":"/materiel/draft/proxyman和arthas结合监听java进程网络(包括feign调用等)/","comments":1,"photos":[],"_id":"cm7k5rwad001omsws0koj8l51","content":"<h1 id=\"使用arthas和proxyman监听java进程网络-包括feign调用等\"><a href=\"#使用arthas和proxyman监听java进程网络-包括feign调用等\" class=\"headerlink\" title=\"使用arthas和proxyman监听java进程网络(包括feign调用等)\"></a>使用arthas和proxyman监听java进程网络(包括feign调用等)</h1><h2 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># proxyman代理环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://10.0.4.190:9091 http_proxy=http://10.0.4.190:9091</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 HTTP/HTTPS 代理</span></span><br><span class=\"line\">sysprop https.proxyHost 10.0.4.190</span><br><span class=\"line\">sysprop https.proxyPort 9091</span><br><span class=\"line\">sysprop http.proxyHost 10.0.4.190</span><br><span class=\"line\">sysprop http.proxyPort 9091</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除 HTTP/HTTPS 代理(使用System.clearProperty方式移除)</span></span><br><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@clearProperty(&quot;https.proxyHost&quot;)&#x27;</span></span><br><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@clearProperty(&quot;https.proxyPort&quot;)&#x27;</span></span><br><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@clearProperty(&quot;http.proxyHost&quot;)&#x27;</span></span><br><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@clearProperty(&quot;http.proxyPort&quot;)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">sysprop | grep proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为feign调用用的是服务名, 没有IP和port, 所有现在考虑将本地流量代理到指定服务器中去(不行, 没搞成)</span></span><br><span class=\"line\"><span class=\"comment\"># 改成用proxyman代理到指定服务器中去(用的远程映射功能, 例如 gateway-service -&gt; feign.microservice.debug:8100)(然后结合SwitchHosts工具, 将feign.microservice.debug映射到10.0.1.94 IP上, 这样子, 之后只需要改SwitchHosts中的IP就能实现访问到不同的服务器上去了(当然, 直接切换开关的方式也行))</span></span><br><span class=\"line\">    * PS: 不用这么麻烦, 上面是因为DNS劫持导致域名没有找到IP才需要做的操作, 域名之所以被劫持还是因为开了clash代理(默认劫持了DNS)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"使用arthas和proxyman监听java进程网络-包括feign调用等\"><a href=\"#使用arthas和proxyman监听java进程网络-包括feign调用等\" class=\"headerlink\" title=\"使用arthas和proxyman监听java进程网络(包括feign调用等)\"></a>使用arthas和proxyman监听java进程网络(包括feign调用等)</h1><h2 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># proxyman代理环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://10.0.4.190:9091 http_proxy=http://10.0.4.190:9091</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 HTTP/HTTPS 代理</span></span><br><span class=\"line\">sysprop https.proxyHost 10.0.4.190</span><br><span class=\"line\">sysprop https.proxyPort 9091</span><br><span class=\"line\">sysprop http.proxyHost 10.0.4.190</span><br><span class=\"line\">sysprop http.proxyPort 9091</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除 HTTP/HTTPS 代理(使用System.clearProperty方式移除)</span></span><br><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@clearProperty(&quot;https.proxyHost&quot;)&#x27;</span></span><br><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@clearProperty(&quot;https.proxyPort&quot;)&#x27;</span></span><br><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@clearProperty(&quot;http.proxyHost&quot;)&#x27;</span></span><br><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@clearProperty(&quot;http.proxyPort&quot;)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">sysprop | grep proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为feign调用用的是服务名, 没有IP和port, 所有现在考虑将本地流量代理到指定服务器中去(不行, 没搞成)</span></span><br><span class=\"line\"><span class=\"comment\"># 改成用proxyman代理到指定服务器中去(用的远程映射功能, 例如 gateway-service -&gt; feign.microservice.debug:8100)(然后结合SwitchHosts工具, 将feign.microservice.debug映射到10.0.1.94 IP上, 这样子, 之后只需要改SwitchHosts中的IP就能实现访问到不同的服务器上去了(当然, 直接切换开关的方式也行))</span></span><br><span class=\"line\">    * PS: 不用这么麻烦, 上面是因为DNS劫持导致域名没有找到IP才需要做的操作, 域名之所以被劫持还是因为开了clash代理(默认劫持了DNS)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网","nav_order":12,"description":"ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网","parent":"Draft","has_children":false,"grand_parent":"Materiel","_content":"\n# ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\n\n问题: 要是有多个项目需要访问不同的vpn, 那么此时你想的是怎么做呢? 最简单的方法就是只能频繁的在各个vpn软件中切来切去\n\n> 最近因为经手的项目越来越多, 多个项目都需要走对应vpn软件才能访问对应项目的系统\n> 所以也就萌生了想在本机啥vpn都不装的情况下, 如何通过将流量代理到其他安装了对应vpn软件的电脑上去实现本机不装vpn也能访问对应项目系统的目的\n\n## 实现多种流量的代理需求\n\n### 第一种: 只通过ssh tunnel代理流量\n\n例如: 数据库连接\n\n\n### 第二种: 只通过浏览器代理流量\n\n例如: 项目系统页面\n\n\n### 第三种: 代理本机全局流量\n\n缺点很明显, 啥流量都走同一个代理去了\n\n### 第四种: 通过自定义规则自动代理本机流量走指定vpn\n\n例如: 多个项目的系统页面\n","source":"_posts/materiel/draft/ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网.md","raw":"---\nlayout: default\ntitle: ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\nnav_order: 12\ndescription: ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\nparent: Draft\nhas_children: false\npermalink: \"/materiel/draft/ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网/\"\ngrand_parent: Materiel\n---\n\n# ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\n\n问题: 要是有多个项目需要访问不同的vpn, 那么此时你想的是怎么做呢? 最简单的方法就是只能频繁的在各个vpn软件中切来切去\n\n> 最近因为经手的项目越来越多, 多个项目都需要走对应vpn软件才能访问对应项目的系统\n> 所以也就萌生了想在本机啥vpn都不装的情况下, 如何通过将流量代理到其他安装了对应vpn软件的电脑上去实现本机不装vpn也能访问对应项目系统的目的\n\n## 实现多种流量的代理需求\n\n### 第一种: 只通过ssh tunnel代理流量\n\n例如: 数据库连接\n\n\n### 第二种: 只通过浏览器代理流量\n\n例如: 项目系统页面\n\n\n### 第三种: 代理本机全局流量\n\n缺点很明显, 啥流量都走同一个代理去了\n\n### 第四种: 通过自定义规则自动代理本机流量走指定vpn\n\n例如: 多个项目的系统页面\n","slug":"materiel/draft/ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网","published":1,"date":"2025-02-23T07:43:31.718Z","updated":"2025-02-23T07:43:31.718Z","__permalink":"/materiel/draft/ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网/","comments":1,"photos":[],"_id":"cm7k5rwad001pmsws7hs2emhq","content":"<h1 id=\"ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\"><a href=\"#ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\" class=\"headerlink\" title=\"ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\"></a>ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网</h1><p>问题: 要是有多个项目需要访问不同的vpn, 那么此时你想的是怎么做呢? 最简单的方法就是只能频繁的在各个vpn软件中切来切去</p>\n<blockquote>\n<p>最近因为经手的项目越来越多, 多个项目都需要走对应vpn软件才能访问对应项目的系统<br>所以也就萌生了想在本机啥vpn都不装的情况下, 如何通过将流量代理到其他安装了对应vpn软件的电脑上去实现本机不装vpn也能访问对应项目系统的目的</p>\n</blockquote>\n<h2 id=\"实现多种流量的代理需求\"><a href=\"#实现多种流量的代理需求\" class=\"headerlink\" title=\"实现多种流量的代理需求\"></a>实现多种流量的代理需求</h2><h3 id=\"第一种-只通过ssh-tunnel代理流量\"><a href=\"#第一种-只通过ssh-tunnel代理流量\" class=\"headerlink\" title=\"第一种: 只通过ssh tunnel代理流量\"></a>第一种: 只通过ssh tunnel代理流量</h3><p>例如: 数据库连接</p>\n<h3 id=\"第二种-只通过浏览器代理流量\"><a href=\"#第二种-只通过浏览器代理流量\" class=\"headerlink\" title=\"第二种: 只通过浏览器代理流量\"></a>第二种: 只通过浏览器代理流量</h3><p>例如: 项目系统页面</p>\n<h3 id=\"第三种-代理本机全局流量\"><a href=\"#第三种-代理本机全局流量\" class=\"headerlink\" title=\"第三种: 代理本机全局流量\"></a>第三种: 代理本机全局流量</h3><p>缺点很明显, 啥流量都走同一个代理去了</p>\n<h3 id=\"第四种-通过自定义规则自动代理本机流量走指定vpn\"><a href=\"#第四种-通过自定义规则自动代理本机流量走指定vpn\" class=\"headerlink\" title=\"第四种: 通过自定义规则自动代理本机流量走指定vpn\"></a>第四种: 通过自定义规则自动代理本机流量走指定vpn</h3><p>例如: 多个项目的系统页面</p>\n","excerpt":"","more":"<h1 id=\"ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\"><a href=\"#ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\" class=\"headerlink\" title=\"ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网\"></a>ssh动态代理妙用-将流量代理到其他电脑实现本机不装vpn也能访问公司内网</h1><p>问题: 要是有多个项目需要访问不同的vpn, 那么此时你想的是怎么做呢? 最简单的方法就是只能频繁的在各个vpn软件中切来切去</p>\n<blockquote>\n<p>最近因为经手的项目越来越多, 多个项目都需要走对应vpn软件才能访问对应项目的系统<br>所以也就萌生了想在本机啥vpn都不装的情况下, 如何通过将流量代理到其他安装了对应vpn软件的电脑上去实现本机不装vpn也能访问对应项目系统的目的</p>\n</blockquote>\n<h2 id=\"实现多种流量的代理需求\"><a href=\"#实现多种流量的代理需求\" class=\"headerlink\" title=\"实现多种流量的代理需求\"></a>实现多种流量的代理需求</h2><h3 id=\"第一种-只通过ssh-tunnel代理流量\"><a href=\"#第一种-只通过ssh-tunnel代理流量\" class=\"headerlink\" title=\"第一种: 只通过ssh tunnel代理流量\"></a>第一种: 只通过ssh tunnel代理流量</h3><p>例如: 数据库连接</p>\n<h3 id=\"第二种-只通过浏览器代理流量\"><a href=\"#第二种-只通过浏览器代理流量\" class=\"headerlink\" title=\"第二种: 只通过浏览器代理流量\"></a>第二种: 只通过浏览器代理流量</h3><p>例如: 项目系统页面</p>\n<h3 id=\"第三种-代理本机全局流量\"><a href=\"#第三种-代理本机全局流量\" class=\"headerlink\" title=\"第三种: 代理本机全局流量\"></a>第三种: 代理本机全局流量</h3><p>缺点很明显, 啥流量都走同一个代理去了</p>\n<h3 id=\"第四种-通过自定义规则自动代理本机流量走指定vpn\"><a href=\"#第四种-通过自定义规则自动代理本机流量走指定vpn\" class=\"headerlink\" title=\"第四种: 通过自定义规则自动代理本机流量走指定vpn\"></a>第四种: 通过自定义规则自动代理本机流量走指定vpn</h3><p>例如: 多个项目的系统页面</p>\n"},{"layout":"default","title":"内网穿透工具","nav_order":12,"description":"内网穿透工具","parent":"Draft","has_children":false,"grand_parent":"Materiel","_content":"\n# 内网穿透工具\n\nlocaltunnel, Staqlab tunnel, serveo\n\n1. [ngrok](https://ngrok.com/)\n2. [localtunnel](https://localtunnel.me/)\n","source":"_posts/materiel/draft/内网穿透工具.md","raw":"---\nlayout: default\ntitle: 内网穿透工具\nnav_order: 12\ndescription: 内网穿透工具\nparent: Draft\nhas_children: false\npermalink: \"/materiel/draft/内网穿透工具/\"\ngrand_parent: Materiel\n---\n\n# 内网穿透工具\n\nlocaltunnel, Staqlab tunnel, serveo\n\n1. [ngrok](https://ngrok.com/)\n2. [localtunnel](https://localtunnel.me/)\n","slug":"materiel/draft/内网穿透工具","published":1,"date":"2025-02-23T07:43:31.718Z","updated":"2025-02-23T07:43:31.718Z","__permalink":"/materiel/draft/内网穿透工具/","comments":1,"photos":[],"_id":"cm7k5rwad001qmsws4qnq2418","content":"<h1 id=\"内网穿透工具\"><a href=\"#内网穿透工具\" class=\"headerlink\" title=\"内网穿透工具\"></a>内网穿透工具</h1><p>localtunnel, Staqlab tunnel, serveo</p>\n<ol>\n<li><a href=\"https://ngrok.com/\">ngrok</a></li>\n<li><a href=\"https://localtunnel.me/\">localtunnel</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"内网穿透工具\"><a href=\"#内网穿透工具\" class=\"headerlink\" title=\"内网穿透工具\"></a>内网穿透工具</h1><p>localtunnel, Staqlab tunnel, serveo</p>\n<ol>\n<li><a href=\"https://ngrok.com/\">ngrok</a></li>\n<li><a href=\"https://localtunnel.me/\">localtunnel</a></li>\n</ol>\n"},{"layout":"default","title":"科学上网与VPN办公的完美结合","nav_order":12,"description":"科学上网与VPN办公的完美结合","parent":"Draft","has_children":false,"grand_parent":"Materiel","_content":"\n# 科学上网与VPN办公的完美结合\n\n[参考文章](https://blog.long2ice.io/2023/03/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B8%8Evpn%E5%8A%9E%E5%85%AC%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/)\n","source":"_posts/materiel/draft/科学上网与VPN办公的完美结合.md","raw":"---\nlayout: default\ntitle: 科学上网与VPN办公的完美结合\nnav_order: 12\ndescription: 科学上网与VPN办公的完美结合\nparent: Draft\nhas_children: false\npermalink: \"/materiel/draft/科学上网与vpn办公的完美结合/\"\ngrand_parent: Materiel\n---\n\n# 科学上网与VPN办公的完美结合\n\n[参考文章](https://blog.long2ice.io/2023/03/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B8%8Evpn%E5%8A%9E%E5%85%AC%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/)\n","slug":"materiel/draft/科学上网与VPN办公的完美结合","published":1,"date":"2025-02-23T07:43:31.718Z","updated":"2025-02-23T07:43:31.718Z","__permalink":"/materiel/draft/科学上网与vpn办公的完美结合/","comments":1,"photos":[],"_id":"cm7k5rwad001smswsbpf71d9b","content":"<h1 id=\"科学上网与VPN办公的完美结合\"><a href=\"#科学上网与VPN办公的完美结合\" class=\"headerlink\" title=\"科学上网与VPN办公的完美结合\"></a>科学上网与VPN办公的完美结合</h1><p><a href=\"https://blog.long2ice.io/2023/03/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B8%8Evpn%E5%8A%9E%E5%85%AC%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/\">参考文章</a></p>\n","excerpt":"","more":"<h1 id=\"科学上网与VPN办公的完美结合\"><a href=\"#科学上网与VPN办公的完美结合\" class=\"headerlink\" title=\"科学上网与VPN办公的完美结合\"></a>科学上网与VPN办公的完美结合</h1><p><a href=\"https://blog.long2ice.io/2023/03/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B8%8Evpn%E5%8A%9E%E5%85%AC%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/\">参考文章</a></p>\n"},{"layout":"default","title":"如何让docker走代理","nav_order":12,"description":"如何让docker走代理","parent":"Draft","has_children":false,"grand_parent":"Materiel","_content":"\n# 如何让docker走代理\n\n[参考本地文章](https://github.com/183461750/doc-record/blob/84e35bffe7f0f1fa2a6cf2dbe65cc0292a8c4540/materiel/ai/docker/%E5%A6%82%E4%BD%95%E8%AE%A9docker%E8%B5%B0%E4%BB%A3%E7%90%86.md)\n[参考文章](https://neucrack.com/p/286)\n\n```bash\n# sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8123\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8123\"\n```\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n```\n","source":"_posts/materiel/draft/如何让docker走代理.md","raw":"---\nlayout: default\ntitle: 如何让docker走代理\nnav_order: 12\ndescription: 如何让docker走代理\nparent: Draft\nhas_children: false\npermalink: \"/materiel/draft/如何让docker走代理/\"\ngrand_parent: Materiel\n---\n\n# 如何让docker走代理\n\n[参考本地文章](https://github.com/183461750/doc-record/blob/84e35bffe7f0f1fa2a6cf2dbe65cc0292a8c4540/materiel/ai/docker/%E5%A6%82%E4%BD%95%E8%AE%A9docker%E8%B5%B0%E4%BB%A3%E7%90%86.md)\n[参考文章](https://neucrack.com/p/286)\n\n```bash\n# sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8123\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8123\"\n```\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n```\n","slug":"materiel/draft/如何让docker走代理","published":1,"date":"2025-02-23T07:43:31.720Z","updated":"2025-02-23T07:43:31.720Z","__permalink":"/materiel/draft/如何让docker走代理/","comments":1,"photos":[],"_id":"cm7k5rwad001umswsbqw0h8m1","content":"<h1 id=\"如何让docker走代理\"><a href=\"#如何让docker走代理\" class=\"headerlink\" title=\"如何让docker走代理\"></a>如何让docker走代理</h1><p><a href=\"https://github.com/183461750/doc-record/blob/84e35bffe7f0f1fa2a6cf2dbe65cc0292a8c4540/materiel/ai/docker/%E5%A6%82%E4%BD%95%E8%AE%A9docker%E8%B5%B0%E4%BB%A3%E7%90%86.md\">参考本地文章</a><br><a href=\"https://neucrack.com/p/286\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=<span class=\"string\">&quot;HTTP_PROXY=http://127.0.0.1:8123&quot;</span></span><br><span class=\"line\">Environment=<span class=\"string\">&quot;HTTPS_PROXY=http://127.0.0.1:8123&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl daemon-reload</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart docker</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"如何让docker走代理\"><a href=\"#如何让docker走代理\" class=\"headerlink\" title=\"如何让docker走代理\"></a>如何让docker走代理</h1><p><a href=\"https://github.com/183461750/doc-record/blob/84e35bffe7f0f1fa2a6cf2dbe65cc0292a8c4540/materiel/ai/docker/%E5%A6%82%E4%BD%95%E8%AE%A9docker%E8%B5%B0%E4%BB%A3%E7%90%86.md\">参考本地文章</a><br><a href=\"https://neucrack.com/p/286\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=<span class=\"string\">&quot;HTTP_PROXY=http://127.0.0.1:8123&quot;</span></span><br><span class=\"line\">Environment=<span class=\"string\">&quot;HTTPS_PROXY=http://127.0.0.1:8123&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl daemon-reload</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart docker</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Monitoring","nav_order":2,"has_children":true,"parent":"Monitoring","_content":"\n# Monitoring\n","source":"_posts/middleware/monitoring/index.md","raw":"---\nlayout: default\ntitle: Monitoring\nnav_order: 2\nhas_children: true\nparent: Monitoring\npermalink: \"/middleware/monitoring/\"\n---\n\n# Monitoring\n","slug":"middleware/monitoring/index","published":1,"date":"2025-02-23T07:43:31.738Z","updated":"2025-02-23T07:43:31.739Z","__permalink":"/middleware/monitoring/","comments":1,"photos":[],"_id":"cm7k5rwad001wmsws7iuba846","content":"<h1 id=\"Monitoring\"><a href=\"#Monitoring\" class=\"headerlink\" title=\"Monitoring\"></a>Monitoring</h1>","excerpt":"","more":"<h1 id=\"Monitoring\"><a href=\"#Monitoring\" class=\"headerlink\" title=\"Monitoring\"></a>Monitoring</h1>"},{"layout":"default","title":"模拟死锁并解决死锁","nav_order":12,"description":"模拟并解决死锁","parent":"Draft","has_children":false,"grand_parent":"Materiel","_content":"\n# 模拟并解决死锁\n\n[参考AI资料](https://www.doubao.com/thread/w216e8cc04bfc4994)\n\n使用idea连接数据库 并使用手动提交事务的方式去模拟\n当然 也可以直接使用sql命令的方式实现手动提交事务\n\n## 模拟死锁\n\n```sql\n-- 事务一\n\nBEGIN;\n-- 执行一些操作，例如更新表中的一行数据\nUPDATE table_name SET column_name = 'test' WHERE column_name = 'test';\n-- 尝试获取对表 1 中某行数据的排他锁\nSELECT * FROM table_name_2 WHERE column_name = 1 FOR UPDATE;\nCOMMIT;\n```\n\n```sql\n-- 事务二\n\nBEGIN;\n-- 执行一些操作，例如更新表中的一行数据\nUPDATE table_name_2 SET column_name = 1 WHERE column_name = 1;\n-- 尝试获取对表 2 中某行数据的排他锁\nSELECT * FROM table_name WHERE column_name = 'test' FOR UPDATE;\nCOMMIT;\n```\n\n## 解决死锁\n\n```sql\n-- 方式一\n\n-- 查看死锁的sql以及进程Id\nselect pid,query,* from pg_stat_activity where datname='iuin' and wait_event_type = 'Lock';\n\n-- 只能杀死select 语句, 对其他语句不生效\nselect pg_cancel_backend('28736');\n-- select,drop等各种操作\nselect pg_terminate_backend('25605');\n\n-- 方式二\n\n-- 查看对应表都有哪些锁\nselect locktype,pid,relation,mode,granted,* from pg_locks where relation in (select oid from pg_class where relname='table_name');\nselect pg_terminate_backend('进程ID');\n\n-- 测试\n\n-- 终止所有被激活的锁\nselect pg_terminate_backend(pid)\nfrom pg_stat_activity\nwhere state = 'active'\n  and pid != pg_backend_pid()\n  and pid in (select a.pid from pg_locks a join pg_class b on a.relation = b.oid where lower(b.relname) = 'news_content');\n\n```\n\n## 查看同一事物中都执行了哪些sql\n\n[参考AI回答](https://www.doubao.com/thread/w47b5fa72219f3bf5)\n\n- 一些第三方的扩展工具，如 pg_stat_monitor ，可以提供更详细和有针对性的事务执行信息。\n\n## pgsql当前线程数与最大线程数\n\nPostgreSQL 最大连接数：通过 postgresql.conf 文件或 SQL 查询 `SHOW max_connections;` 获取。\n当前连接数：通过 SQL 查询 `SELECT count(*), sum(case when state = 'active' then 1 else 0 end) FROM pg_stat_activity;` 获取。\n","source":"_posts/materiel/draft/模拟死锁并解决死锁.md","raw":"---\nlayout: default\ntitle: 模拟死锁并解决死锁\nnav_order: 12\ndescription: 模拟并解决死锁\nparent: Draft\nhas_children: false\npermalink: \"/materiel/draft/模拟死锁并解决死锁/\"\ngrand_parent: Materiel\n---\n\n# 模拟并解决死锁\n\n[参考AI资料](https://www.doubao.com/thread/w216e8cc04bfc4994)\n\n使用idea连接数据库 并使用手动提交事务的方式去模拟\n当然 也可以直接使用sql命令的方式实现手动提交事务\n\n## 模拟死锁\n\n```sql\n-- 事务一\n\nBEGIN;\n-- 执行一些操作，例如更新表中的一行数据\nUPDATE table_name SET column_name = 'test' WHERE column_name = 'test';\n-- 尝试获取对表 1 中某行数据的排他锁\nSELECT * FROM table_name_2 WHERE column_name = 1 FOR UPDATE;\nCOMMIT;\n```\n\n```sql\n-- 事务二\n\nBEGIN;\n-- 执行一些操作，例如更新表中的一行数据\nUPDATE table_name_2 SET column_name = 1 WHERE column_name = 1;\n-- 尝试获取对表 2 中某行数据的排他锁\nSELECT * FROM table_name WHERE column_name = 'test' FOR UPDATE;\nCOMMIT;\n```\n\n## 解决死锁\n\n```sql\n-- 方式一\n\n-- 查看死锁的sql以及进程Id\nselect pid,query,* from pg_stat_activity where datname='iuin' and wait_event_type = 'Lock';\n\n-- 只能杀死select 语句, 对其他语句不生效\nselect pg_cancel_backend('28736');\n-- select,drop等各种操作\nselect pg_terminate_backend('25605');\n\n-- 方式二\n\n-- 查看对应表都有哪些锁\nselect locktype,pid,relation,mode,granted,* from pg_locks where relation in (select oid from pg_class where relname='table_name');\nselect pg_terminate_backend('进程ID');\n\n-- 测试\n\n-- 终止所有被激活的锁\nselect pg_terminate_backend(pid)\nfrom pg_stat_activity\nwhere state = 'active'\n  and pid != pg_backend_pid()\n  and pid in (select a.pid from pg_locks a join pg_class b on a.relation = b.oid where lower(b.relname) = 'news_content');\n\n```\n\n## 查看同一事物中都执行了哪些sql\n\n[参考AI回答](https://www.doubao.com/thread/w47b5fa72219f3bf5)\n\n- 一些第三方的扩展工具，如 pg_stat_monitor ，可以提供更详细和有针对性的事务执行信息。\n\n## pgsql当前线程数与最大线程数\n\nPostgreSQL 最大连接数：通过 postgresql.conf 文件或 SQL 查询 `SHOW max_connections;` 获取。\n当前连接数：通过 SQL 查询 `SELECT count(*), sum(case when state = 'active' then 1 else 0 end) FROM pg_stat_activity;` 获取。\n","slug":"materiel/draft/模拟死锁并解决死锁","published":1,"date":"2025-02-23T07:43:31.717Z","updated":"2025-02-23T07:43:31.717Z","__permalink":"/materiel/draft/模拟死锁并解决死锁/","comments":1,"photos":[],"_id":"cm7k5rwae001xmsws3tcf6lo1","content":"<h1 id=\"模拟并解决死锁\"><a href=\"#模拟并解决死锁\" class=\"headerlink\" title=\"模拟并解决死锁\"></a>模拟并解决死锁</h1><p><a href=\"https://www.doubao.com/thread/w216e8cc04bfc4994\">参考AI资料</a></p>\n<p>使用idea连接数据库 并使用手动提交事务的方式去模拟<br>当然 也可以直接使用sql命令的方式实现手动提交事务</p>\n<h2 id=\"模拟死锁\"><a href=\"#模拟死锁\" class=\"headerlink\" title=\"模拟死锁\"></a>模拟死锁</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 事务一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 执行一些操作，例如更新表中的一行数据</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name <span class=\"keyword\">SET</span> column_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;test&#x27;</span> <span class=\"keyword\">WHERE</span> column_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;test&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 尝试获取对表 1 中某行数据的排他锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> table_name_2 <span class=\"keyword\">WHERE</span> column_name <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 事务二</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 执行一些操作，例如更新表中的一行数据</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name_2 <span class=\"keyword\">SET</span> column_name <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">WHERE</span> column_name <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 尝试获取对表 2 中某行数据的排他锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> column_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;test&#x27;</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决死锁\"><a href=\"#解决死锁\" class=\"headerlink\" title=\"解决死锁\"></a>解决死锁</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 方式一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看死锁的sql以及进程Id</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> pid,query,<span class=\"operator\">*</span> <span class=\"keyword\">from</span> pg_stat_activity <span class=\"keyword\">where</span> datname<span class=\"operator\">=</span><span class=\"string\">&#x27;iuin&#x27;</span> <span class=\"keyword\">and</span> wait_event_type <span class=\"operator\">=</span> <span class=\"string\">&#x27;Lock&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 只能杀死select 语句, 对其他语句不生效</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> pg_cancel_backend(<span class=\"string\">&#x27;28736&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">-- select,drop等各种操作</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> pg_terminate_backend(<span class=\"string\">&#x27;25605&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 方式二</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看对应表都有哪些锁</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> locktype,pid,relation,mode,granted,<span class=\"operator\">*</span> <span class=\"keyword\">from</span> pg_locks <span class=\"keyword\">where</span> relation <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> oid <span class=\"keyword\">from</span> pg_class <span class=\"keyword\">where</span> relname<span class=\"operator\">=</span><span class=\"string\">&#x27;table_name&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> pg_terminate_backend(<span class=\"string\">&#x27;进程ID&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 测试</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 终止所有被激活的锁</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> pg_terminate_backend(pid)</span><br><span class=\"line\"><span class=\"keyword\">from</span> pg_stat_activity</span><br><span class=\"line\"><span class=\"keyword\">where</span> state <span class=\"operator\">=</span> <span class=\"string\">&#x27;active&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">and</span> pid <span class=\"operator\">!=</span> pg_backend_pid()</span><br><span class=\"line\">  <span class=\"keyword\">and</span> pid <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> a.pid <span class=\"keyword\">from</span> pg_locks a <span class=\"keyword\">join</span> pg_class b <span class=\"keyword\">on</span> a.relation <span class=\"operator\">=</span> b.oid <span class=\"keyword\">where</span> <span class=\"built_in\">lower</span>(b.relname) <span class=\"operator\">=</span> <span class=\"string\">&#x27;news_content&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看同一事物中都执行了哪些sql\"><a href=\"#查看同一事物中都执行了哪些sql\" class=\"headerlink\" title=\"查看同一事物中都执行了哪些sql\"></a>查看同一事物中都执行了哪些sql</h2><p><a href=\"https://www.doubao.com/thread/w47b5fa72219f3bf5\">参考AI回答</a></p>\n<ul>\n<li>一些第三方的扩展工具，如 pg_stat_monitor ，可以提供更详细和有针对性的事务执行信息。</li>\n</ul>\n<h2 id=\"pgsql当前线程数与最大线程数\"><a href=\"#pgsql当前线程数与最大线程数\" class=\"headerlink\" title=\"pgsql当前线程数与最大线程数\"></a>pgsql当前线程数与最大线程数</h2><p>PostgreSQL 最大连接数：通过 postgresql.conf 文件或 SQL 查询 <code>SHOW max_connections;</code> 获取。<br>当前连接数：通过 SQL 查询 <code>SELECT count(*), sum(case when state = &#39;active&#39; then 1 else 0 end) FROM pg_stat_activity;</code> 获取。</p>\n","excerpt":"","more":"<h1 id=\"模拟并解决死锁\"><a href=\"#模拟并解决死锁\" class=\"headerlink\" title=\"模拟并解决死锁\"></a>模拟并解决死锁</h1><p><a href=\"https://www.doubao.com/thread/w216e8cc04bfc4994\">参考AI资料</a></p>\n<p>使用idea连接数据库 并使用手动提交事务的方式去模拟<br>当然 也可以直接使用sql命令的方式实现手动提交事务</p>\n<h2 id=\"模拟死锁\"><a href=\"#模拟死锁\" class=\"headerlink\" title=\"模拟死锁\"></a>模拟死锁</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 事务一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 执行一些操作，例如更新表中的一行数据</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name <span class=\"keyword\">SET</span> column_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;test&#x27;</span> <span class=\"keyword\">WHERE</span> column_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;test&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 尝试获取对表 1 中某行数据的排他锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> table_name_2 <span class=\"keyword\">WHERE</span> column_name <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 事务二</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 执行一些操作，例如更新表中的一行数据</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name_2 <span class=\"keyword\">SET</span> column_name <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">WHERE</span> column_name <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 尝试获取对表 2 中某行数据的排他锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> column_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;test&#x27;</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决死锁\"><a href=\"#解决死锁\" class=\"headerlink\" title=\"解决死锁\"></a>解决死锁</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 方式一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看死锁的sql以及进程Id</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> pid,query,<span class=\"operator\">*</span> <span class=\"keyword\">from</span> pg_stat_activity <span class=\"keyword\">where</span> datname<span class=\"operator\">=</span><span class=\"string\">&#x27;iuin&#x27;</span> <span class=\"keyword\">and</span> wait_event_type <span class=\"operator\">=</span> <span class=\"string\">&#x27;Lock&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 只能杀死select 语句, 对其他语句不生效</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> pg_cancel_backend(<span class=\"string\">&#x27;28736&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">-- select,drop等各种操作</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> pg_terminate_backend(<span class=\"string\">&#x27;25605&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 方式二</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看对应表都有哪些锁</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> locktype,pid,relation,mode,granted,<span class=\"operator\">*</span> <span class=\"keyword\">from</span> pg_locks <span class=\"keyword\">where</span> relation <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> oid <span class=\"keyword\">from</span> pg_class <span class=\"keyword\">where</span> relname<span class=\"operator\">=</span><span class=\"string\">&#x27;table_name&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> pg_terminate_backend(<span class=\"string\">&#x27;进程ID&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 测试</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 终止所有被激活的锁</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> pg_terminate_backend(pid)</span><br><span class=\"line\"><span class=\"keyword\">from</span> pg_stat_activity</span><br><span class=\"line\"><span class=\"keyword\">where</span> state <span class=\"operator\">=</span> <span class=\"string\">&#x27;active&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">and</span> pid <span class=\"operator\">!=</span> pg_backend_pid()</span><br><span class=\"line\">  <span class=\"keyword\">and</span> pid <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> a.pid <span class=\"keyword\">from</span> pg_locks a <span class=\"keyword\">join</span> pg_class b <span class=\"keyword\">on</span> a.relation <span class=\"operator\">=</span> b.oid <span class=\"keyword\">where</span> <span class=\"built_in\">lower</span>(b.relname) <span class=\"operator\">=</span> <span class=\"string\">&#x27;news_content&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看同一事物中都执行了哪些sql\"><a href=\"#查看同一事物中都执行了哪些sql\" class=\"headerlink\" title=\"查看同一事物中都执行了哪些sql\"></a>查看同一事物中都执行了哪些sql</h2><p><a href=\"https://www.doubao.com/thread/w47b5fa72219f3bf5\">参考AI回答</a></p>\n<ul>\n<li>一些第三方的扩展工具，如 pg_stat_monitor ，可以提供更详细和有针对性的事务执行信息。</li>\n</ul>\n<h2 id=\"pgsql当前线程数与最大线程数\"><a href=\"#pgsql当前线程数与最大线程数\" class=\"headerlink\" title=\"pgsql当前线程数与最大线程数\"></a>pgsql当前线程数与最大线程数</h2><p>PostgreSQL 最大连接数：通过 postgresql.conf 文件或 SQL 查询 <code>SHOW max_connections;</code> 获取。<br>当前连接数：通过 SQL 查询 <code>SELECT count(*), sum(case when state = &#39;active&#39; then 1 else 0 end) FROM pg_stat_activity;</code> 获取。</p>\n"},{"_content":"# MiniUPnP工具使用记录\n\n[github地址](https://github.com/miniupnp/miniupnp)\n\n```bash\n# 安装\nbrew install miniupnpc\n# 验证\nupnpc --version\n```\n\n```bash\n# 基础使用示例\n\n# 查看当前NAT类型：\nupnpc -s\n# - 输出中若显示`PortMappingEnabled: 1`表示UPnP已启用。  \n\n# 添加端口映射（如将内网5000端口映射到公网6000）：\nupnpc -a 192.168.1.100 5000 6000 TCP \n# - `192.168.1.100`为本地设备IP，`TCP`可替换为`UDP`。  \n\n# 删除映射规则：\nupnpc -d 6000 TCP \n\n# 常见问题与解决\n# 路由器兼容性：部分路由器需手动开启UPnP功能（如OpenWrt需安装miniupnpd软件包）5。\n# 端口冲突：映射前通过upnpc -l检查端口占用情况。\n\n# 扩展应用场景\n# BitTorrent优化：结合qBittorrent等客户端，提升下载速度。\n# 远程开发调试：映射SSH或Web服务端口至公网，实现远程访问。\n# 游戏联机支持：解决NAT类型限制，改善联机体验（如Minecraft服务器搭建）。\n# 若需高级功能（如持久化配置），可参考 [官方文档](https://github.com/miniupnp/miniupnp) 进一步配置。\n```\n","source":"_posts/network/MiniUPnP/doc.md","raw":"# MiniUPnP工具使用记录\n\n[github地址](https://github.com/miniupnp/miniupnp)\n\n```bash\n# 安装\nbrew install miniupnpc\n# 验证\nupnpc --version\n```\n\n```bash\n# 基础使用示例\n\n# 查看当前NAT类型：\nupnpc -s\n# - 输出中若显示`PortMappingEnabled: 1`表示UPnP已启用。  \n\n# 添加端口映射（如将内网5000端口映射到公网6000）：\nupnpc -a 192.168.1.100 5000 6000 TCP \n# - `192.168.1.100`为本地设备IP，`TCP`可替换为`UDP`。  \n\n# 删除映射规则：\nupnpc -d 6000 TCP \n\n# 常见问题与解决\n# 路由器兼容性：部分路由器需手动开启UPnP功能（如OpenWrt需安装miniupnpd软件包）5。\n# 端口冲突：映射前通过upnpc -l检查端口占用情况。\n\n# 扩展应用场景\n# BitTorrent优化：结合qBittorrent等客户端，提升下载速度。\n# 远程开发调试：映射SSH或Web服务端口至公网，实现远程访问。\n# 游戏联机支持：解决NAT类型限制，改善联机体验（如Minecraft服务器搭建）。\n# 若需高级功能（如持久化配置），可参考 [官方文档](https://github.com/miniupnp/miniupnp) 进一步配置。\n```\n","slug":"network/MiniUPnP/doc","published":1,"date":"2025-02-23T07:43:31.752Z","updated":"2025-02-23T07:43:31.752Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwae001ymswsgwas816w","content":"<h1 id=\"MiniUPnP工具使用记录\"><a href=\"#MiniUPnP工具使用记录\" class=\"headerlink\" title=\"MiniUPnP工具使用记录\"></a>MiniUPnP工具使用记录</h1><p><a href=\"https://github.com/miniupnp/miniupnp\">github地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">brew install miniupnpc</span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">upnpc --version</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础使用示例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前NAT类型：</span></span><br><span class=\"line\">upnpc -s</span><br><span class=\"line\"><span class=\"comment\"># - 输出中若显示`PortMappingEnabled: 1`表示UPnP已启用。  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加端口映射（如将内网5000端口映射到公网6000）：</span></span><br><span class=\"line\">upnpc -a 192.168.1.100 5000 6000 TCP </span><br><span class=\"line\"><span class=\"comment\"># - `192.168.1.100`为本地设备IP，`TCP`可替换为`UDP`。  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除映射规则：</span></span><br><span class=\"line\">upnpc -d 6000 TCP </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常见问题与解决</span></span><br><span class=\"line\"><span class=\"comment\"># 路由器兼容性：部分路由器需手动开启UPnP功能（如OpenWrt需安装miniupnpd软件包）5。</span></span><br><span class=\"line\"><span class=\"comment\"># 端口冲突：映射前通过upnpc -l检查端口占用情况。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 扩展应用场景</span></span><br><span class=\"line\"><span class=\"comment\"># BitTorrent优化：结合qBittorrent等客户端，提升下载速度。</span></span><br><span class=\"line\"><span class=\"comment\"># 远程开发调试：映射SSH或Web服务端口至公网，实现远程访问。</span></span><br><span class=\"line\"><span class=\"comment\"># 游戏联机支持：解决NAT类型限制，改善联机体验（如Minecraft服务器搭建）。</span></span><br><span class=\"line\"><span class=\"comment\"># 若需高级功能（如持久化配置），可参考 [官方文档](https://github.com/miniupnp/miniupnp) 进一步配置。</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"MiniUPnP工具使用记录\"><a href=\"#MiniUPnP工具使用记录\" class=\"headerlink\" title=\"MiniUPnP工具使用记录\"></a>MiniUPnP工具使用记录</h1><p><a href=\"https://github.com/miniupnp/miniupnp\">github地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">brew install miniupnpc</span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">upnpc --version</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础使用示例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前NAT类型：</span></span><br><span class=\"line\">upnpc -s</span><br><span class=\"line\"><span class=\"comment\"># - 输出中若显示`PortMappingEnabled: 1`表示UPnP已启用。  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加端口映射（如将内网5000端口映射到公网6000）：</span></span><br><span class=\"line\">upnpc -a 192.168.1.100 5000 6000 TCP </span><br><span class=\"line\"><span class=\"comment\"># - `192.168.1.100`为本地设备IP，`TCP`可替换为`UDP`。  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除映射规则：</span></span><br><span class=\"line\">upnpc -d 6000 TCP </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常见问题与解决</span></span><br><span class=\"line\"><span class=\"comment\"># 路由器兼容性：部分路由器需手动开启UPnP功能（如OpenWrt需安装miniupnpd软件包）5。</span></span><br><span class=\"line\"><span class=\"comment\"># 端口冲突：映射前通过upnpc -l检查端口占用情况。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 扩展应用场景</span></span><br><span class=\"line\"><span class=\"comment\"># BitTorrent优化：结合qBittorrent等客户端，提升下载速度。</span></span><br><span class=\"line\"><span class=\"comment\"># 远程开发调试：映射SSH或Web服务端口至公网，实现远程访问。</span></span><br><span class=\"line\"><span class=\"comment\"># 游戏联机支持：解决NAT类型限制，改善联机体验（如Minecraft服务器搭建）。</span></span><br><span class=\"line\"><span class=\"comment\"># 若需高级功能（如持久化配置），可参考 [官方文档](https://github.com/miniupnp/miniupnp) 进一步配置。</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Data","nav_order":2,"has_children":true,"parent":"Data","_content":"\n# Data\n","source":"_posts/middleware/data/index.md","raw":"---\nlayout: default\ntitle: Data\nnav_order: 2\nhas_children: true\nparent: Data\npermalink: \"/middleware/data/\"\n---\n\n# Data\n","slug":"middleware/data/index","published":1,"date":"2025-02-23T07:43:31.742Z","updated":"2025-02-23T07:43:31.743Z","__permalink":"/middleware/data/","comments":1,"photos":[],"_id":"cm7k5rwae001zmsws118tchvg","content":"<h1 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"Data\"></a>Data</h1>","excerpt":"","more":"<h1 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"Data\"></a>Data</h1>"},{"_content":"# cpolar使用记录\n\n[官网](https://www.cpolar.com)\n\n[安装文档](https://www.cpolar.com/docs)\n\n```bash\n# 安装\n# mac\nbrew tap probezy/core && brew install cpolar\n\n# linux\ncurl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash\n\n# Windows\n# 在官网下载下载适用于Windows平台的zip压缩包，解压后得到cpolar安装包，然后双击安装包一路默认安装即可。https://www.cpolar.com/download\n\n# 验证\ncpolar version\n\n# 认证\ncpolar authtoken xxxxxxx\n# 简单穿透测试\ncpolar http 8080\n# 向系统添加服务\nsudo systemctl enable cpolar\n# 启动cpolar服务\nsudo systemctl start cpolar\n# 查看服务状态\nsudo systemctl status cpolar\n# 登录后台，查看隧道在线状态\n# https://dashboard.cpolar.com/status\n\n# 注: cpolar 卸载方法\ncurl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash -s -- --remove\n# 如果第一次安装，会默认配置一个简单的样例配置文件，创建了两个样例隧道，一个web，一个ssh\n# cpolar配置文件路径(linux): /usr/local/etc/cpolar/cpolar.yml\n# cpolar配置文件路径(mac): /Users/fa/.cpolar/cpolar.yml\n\n# 安装服务\nsudo cpolar service install\n# 启动服务\nsudo cpolar service start\n# cpolar service <xxx>:Valid actions: [\"start\" \"stop\" \"restart\" \"install\" \"uninstall\"]\n# 安装完成\n# 在浏览器上访问本地9200端口【 http://127.0.0.1:9200 】，使用cpolar邮箱账号登录cpolar web UI管理界面，即可开始使用cpolar。\n```\n\n## 将管理后台的端口映射到公网\n\n```bash\n# 修改配置(将website的端口由8080改为9200)\n/usr/local/etc/cpolar/cpolar.yml\n# 修改后重启服务\nsudo cpolar service restart\n# 登录后台，查看隧道地址\n# https://dashboard.cpolar.com/status\n\n# 这样就能远程管理隧道了\n```\n","source":"_posts/network/cpolar/doc.md","raw":"# cpolar使用记录\n\n[官网](https://www.cpolar.com)\n\n[安装文档](https://www.cpolar.com/docs)\n\n```bash\n# 安装\n# mac\nbrew tap probezy/core && brew install cpolar\n\n# linux\ncurl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash\n\n# Windows\n# 在官网下载下载适用于Windows平台的zip压缩包，解压后得到cpolar安装包，然后双击安装包一路默认安装即可。https://www.cpolar.com/download\n\n# 验证\ncpolar version\n\n# 认证\ncpolar authtoken xxxxxxx\n# 简单穿透测试\ncpolar http 8080\n# 向系统添加服务\nsudo systemctl enable cpolar\n# 启动cpolar服务\nsudo systemctl start cpolar\n# 查看服务状态\nsudo systemctl status cpolar\n# 登录后台，查看隧道在线状态\n# https://dashboard.cpolar.com/status\n\n# 注: cpolar 卸载方法\ncurl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash -s -- --remove\n# 如果第一次安装，会默认配置一个简单的样例配置文件，创建了两个样例隧道，一个web，一个ssh\n# cpolar配置文件路径(linux): /usr/local/etc/cpolar/cpolar.yml\n# cpolar配置文件路径(mac): /Users/fa/.cpolar/cpolar.yml\n\n# 安装服务\nsudo cpolar service install\n# 启动服务\nsudo cpolar service start\n# cpolar service <xxx>:Valid actions: [\"start\" \"stop\" \"restart\" \"install\" \"uninstall\"]\n# 安装完成\n# 在浏览器上访问本地9200端口【 http://127.0.0.1:9200 】，使用cpolar邮箱账号登录cpolar web UI管理界面，即可开始使用cpolar。\n```\n\n## 将管理后台的端口映射到公网\n\n```bash\n# 修改配置(将website的端口由8080改为9200)\n/usr/local/etc/cpolar/cpolar.yml\n# 修改后重启服务\nsudo cpolar service restart\n# 登录后台，查看隧道地址\n# https://dashboard.cpolar.com/status\n\n# 这样就能远程管理隧道了\n```\n","slug":"network/cpolar/doc","published":1,"date":"2025-02-23T07:43:31.743Z","updated":"2025-02-23T07:43:31.743Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwaf0020msws8q7u09jo","content":"<h1 id=\"cpolar使用记录\"><a href=\"#cpolar使用记录\" class=\"headerlink\" title=\"cpolar使用记录\"></a>cpolar使用记录</h1><p><a href=\"https://www.cpolar.com/\">官网</a></p>\n<p><a href=\"https://www.cpolar.com/docs\">安装文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\"><span class=\"comment\"># mac</span></span><br><span class=\"line\">brew tap probezy/core &amp;&amp; brew install cpolar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># linux</span></span><br><span class=\"line\">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | <span class=\"built_in\">sudo</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows</span></span><br><span class=\"line\"><span class=\"comment\"># 在官网下载下载适用于Windows平台的zip压缩包，解压后得到cpolar安装包，然后双击安装包一路默认安装即可。https://www.cpolar.com/download</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">cpolar version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 认证</span></span><br><span class=\"line\">cpolar authtoken xxxxxxx</span><br><span class=\"line\"><span class=\"comment\"># 简单穿透测试</span></span><br><span class=\"line\">cpolar http 8080</span><br><span class=\"line\"><span class=\"comment\"># 向系统添加服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> cpolar</span><br><span class=\"line\"><span class=\"comment\"># 启动cpolar服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start cpolar</span><br><span class=\"line\"><span class=\"comment\"># 查看服务状态</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status cpolar</span><br><span class=\"line\"><span class=\"comment\"># 登录后台，查看隧道在线状态</span></span><br><span class=\"line\"><span class=\"comment\"># https://dashboard.cpolar.com/status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注: cpolar 卸载方法</span></span><br><span class=\"line\">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | <span class=\"built_in\">sudo</span> bash -s -- --remove</span><br><span class=\"line\"><span class=\"comment\"># 如果第一次安装，会默认配置一个简单的样例配置文件，创建了两个样例隧道，一个web，一个ssh</span></span><br><span class=\"line\"><span class=\"comment\"># cpolar配置文件路径(linux): /usr/local/etc/cpolar/cpolar.yml</span></span><br><span class=\"line\"><span class=\"comment\"># cpolar配置文件路径(mac): /Users/fa/.cpolar/cpolar.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> cpolar service install</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> cpolar service start</span><br><span class=\"line\"><span class=\"comment\"># cpolar service &lt;xxx&gt;:Valid actions: [&quot;start&quot; &quot;stop&quot; &quot;restart&quot; &quot;install&quot; &quot;uninstall&quot;]</span></span><br><span class=\"line\"><span class=\"comment\"># 安装完成</span></span><br><span class=\"line\"><span class=\"comment\"># 在浏览器上访问本地9200端口【 http://127.0.0.1:9200 】，使用cpolar邮箱账号登录cpolar web UI管理界面，即可开始使用cpolar。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将管理后台的端口映射到公网\"><a href=\"#将管理后台的端口映射到公网\" class=\"headerlink\" title=\"将管理后台的端口映射到公网\"></a>将管理后台的端口映射到公网</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改配置(将website的端口由8080改为9200)</span></span><br><span class=\"line\">/usr/local/etc/cpolar/cpolar.yml</span><br><span class=\"line\"><span class=\"comment\"># 修改后重启服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> cpolar service restart</span><br><span class=\"line\"><span class=\"comment\"># 登录后台，查看隧道地址</span></span><br><span class=\"line\"><span class=\"comment\"># https://dashboard.cpolar.com/status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这样就能远程管理隧道了</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"cpolar使用记录\"><a href=\"#cpolar使用记录\" class=\"headerlink\" title=\"cpolar使用记录\"></a>cpolar使用记录</h1><p><a href=\"https://www.cpolar.com/\">官网</a></p>\n<p><a href=\"https://www.cpolar.com/docs\">安装文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\"><span class=\"comment\"># mac</span></span><br><span class=\"line\">brew tap probezy/core &amp;&amp; brew install cpolar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># linux</span></span><br><span class=\"line\">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | <span class=\"built_in\">sudo</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows</span></span><br><span class=\"line\"><span class=\"comment\"># 在官网下载下载适用于Windows平台的zip压缩包，解压后得到cpolar安装包，然后双击安装包一路默认安装即可。https://www.cpolar.com/download</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">cpolar version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 认证</span></span><br><span class=\"line\">cpolar authtoken xxxxxxx</span><br><span class=\"line\"><span class=\"comment\"># 简单穿透测试</span></span><br><span class=\"line\">cpolar http 8080</span><br><span class=\"line\"><span class=\"comment\"># 向系统添加服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> cpolar</span><br><span class=\"line\"><span class=\"comment\"># 启动cpolar服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start cpolar</span><br><span class=\"line\"><span class=\"comment\"># 查看服务状态</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status cpolar</span><br><span class=\"line\"><span class=\"comment\"># 登录后台，查看隧道在线状态</span></span><br><span class=\"line\"><span class=\"comment\"># https://dashboard.cpolar.com/status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注: cpolar 卸载方法</span></span><br><span class=\"line\">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | <span class=\"built_in\">sudo</span> bash -s -- --remove</span><br><span class=\"line\"><span class=\"comment\"># 如果第一次安装，会默认配置一个简单的样例配置文件，创建了两个样例隧道，一个web，一个ssh</span></span><br><span class=\"line\"><span class=\"comment\"># cpolar配置文件路径(linux): /usr/local/etc/cpolar/cpolar.yml</span></span><br><span class=\"line\"><span class=\"comment\"># cpolar配置文件路径(mac): /Users/fa/.cpolar/cpolar.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> cpolar service install</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> cpolar service start</span><br><span class=\"line\"><span class=\"comment\"># cpolar service &lt;xxx&gt;:Valid actions: [&quot;start&quot; &quot;stop&quot; &quot;restart&quot; &quot;install&quot; &quot;uninstall&quot;]</span></span><br><span class=\"line\"><span class=\"comment\"># 安装完成</span></span><br><span class=\"line\"><span class=\"comment\"># 在浏览器上访问本地9200端口【 http://127.0.0.1:9200 】，使用cpolar邮箱账号登录cpolar web UI管理界面，即可开始使用cpolar。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将管理后台的端口映射到公网\"><a href=\"#将管理后台的端口映射到公网\" class=\"headerlink\" title=\"将管理后台的端口映射到公网\"></a>将管理后台的端口映射到公网</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改配置(将website的端口由8080改为9200)</span></span><br><span class=\"line\">/usr/local/etc/cpolar/cpolar.yml</span><br><span class=\"line\"><span class=\"comment\"># 修改后重启服务</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> cpolar service restart</span><br><span class=\"line\"><span class=\"comment\"># 登录后台，查看隧道地址</span></span><br><span class=\"line\"><span class=\"comment\"># https://dashboard.cpolar.com/status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这样就能远程管理隧道了</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":13,"description":"监控","parent":"Monitoring","has_children":false,"grand_parent":"Middleware","_content":"\n# 监控\n\n## alarm-settings.yml\n\n```yml\n\nhooks:\n  dingtalk:\n    default:\n      is-default: true\n      text-template: |-\n        {\n          \"msgtype\": \"text\",\n          \"text\": {\n            \"content\": \"Apache SkyWalking Alarm: \\n %s.\"\n          }\n        }      \n      webhooks:\n      - url: https://oapi.dingtalk.com/robot/send?access_token=38c949c7aeff071e2065e81e58a82cdaf54290eae442cd11468b82fd6633fc8d\n\n\n```\n","source":"_posts/middleware/monitoring/monitoring.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: 监控\nparent: Monitoring\nhas_children: false\npermalink: \"/middleware/monitoring/monitoring/\"\ngrand_parent: Middleware\n---\n\n# 监控\n\n## alarm-settings.yml\n\n```yml\n\nhooks:\n  dingtalk:\n    default:\n      is-default: true\n      text-template: |-\n        {\n          \"msgtype\": \"text\",\n          \"text\": {\n            \"content\": \"Apache SkyWalking Alarm: \\n %s.\"\n          }\n        }      \n      webhooks:\n      - url: https://oapi.dingtalk.com/robot/send?access_token=38c949c7aeff071e2065e81e58a82cdaf54290eae442cd11468b82fd6633fc8d\n\n\n```\n","slug":"middleware/monitoring/monitoring","published":1,"date":"2025-02-23T07:43:31.739Z","updated":"2025-02-23T07:43:31.739Z","__permalink":"/middleware/monitoring/monitoring/","comments":1,"photos":[],"_id":"cm7k5rwaf0021msws2q1rghc8","content":"<h1 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h1><h2 id=\"alarm-settings-yml\"><a href=\"#alarm-settings-yml\" class=\"headerlink\" title=\"alarm-settings.yml\"></a>alarm-settings.yml</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">hooks:</span></span><br><span class=\"line\">  <span class=\"attr\">dingtalk:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">      <span class=\"attr\">is-default:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">text-template:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;msgtype&quot;: &quot;text&quot;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;text&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;content&quot;: &quot;Apache SkyWalking Alarm: \\n %s.&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;      </span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"attr\">webhooks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://oapi.dingtalk.com/robot/send?access_token=38c949c7aeff071e2065e81e58a82cdaf54290eae442cd11468b82fd6633fc8d</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h1><h2 id=\"alarm-settings-yml\"><a href=\"#alarm-settings-yml\" class=\"headerlink\" title=\"alarm-settings.yml\"></a>alarm-settings.yml</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">hooks:</span></span><br><span class=\"line\">  <span class=\"attr\">dingtalk:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">      <span class=\"attr\">is-default:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">text-template:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;msgtype&quot;: &quot;text&quot;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;text&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;content&quot;: &quot;Apache SkyWalking Alarm: \\n %s.&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;      </span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"attr\">webhooks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://oapi.dingtalk.com/robot/send?access_token=38c949c7aeff071e2065e81e58a82cdaf54290eae442cd11468b82fd6633fc8d</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"_content":"# headscale使用记录\n\n[GitHub地址](https://github.com/juanfont/headscale)\n[参考文章](https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#headscale-%E6%98%AF%E4%BB%80%E4%B9%88)\n\n## 安装\n\n[sealos一键部署](https://bja.sealos.run/?openapp=system-template%3FtemplateName%3Dheadscale)\n\n```bash\n# 创建默认用户\nheadscale user create default\n# 查看用户列表\nheadscale user list\n\n# 创建 API Key：\nheadscale apikey create\n# 将 Headscale 公网域名和 API Key 填入 Headscale-Admin 的设置页面(https://headscale-xxx.sealosbja.site/admin/)，同时取消勾选 Legacy API，然后点击「Save」：\n# 接入成功后，点击左边侧栏的「Users」，然后点击「Create」开始创建用户：\n\n# 安装客户端\n## Linux\ncurl -fsSL https://tailscale.com/install.sh | sh\n\n# Tailscale 接入 Headscale：\n# 将 <HEADSCALE_PUB_ENDPOINT> 换成上文提到的 Sealos 中的 Headscale 公网域名\ntailscale up --login-server=https://<HEADSCALE_PUB_ENDPOINT> --accept-routes=true --accept-dns=false\n# 会打印出注册key(mkey:xxx), 需要到Headscale-Admin的[Machines]页面[Add Device][Register Machine Key]，选择上面创建的用户并将注册key填入, 点击[Register]后, 客户端控制台会打印Success.\n\n# 回到 Tailscale 客户端所在的 Linux 主机，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则。路由表可通过以下命令查看：\nip route show table 52\n# 查看 iptables 规则：\niptables -S\niptables -S -t nat\n\n## macOS\n# 安装完 GUI 版应用后还需要做一些骚操作，才能让 Tailscale 使用 Headscale 作为控制服务器。当然，Headscale 已经给我们提供了详细的操作步骤，你只需要在浏览器中打开 URL：https://<HEADSCALE_PUB_ENDPOINT>/apple，便会出现如下的界面：\n\n# 长按「option」键，然后点击顶部菜单栏的 Tailscale 图标，然后将鼠标指针悬停在「Debug」菜单上。\n# 在「Custom Login Server」下方选择「Add Account…」。\n# 在打开的弹窗中填入 Headscale 的公网域名，然后点击「Add Account」。\n# 然后立马就会跳转到浏览器并打开一个页面\n# 接下来与之前 Linux 客户端相同，回到 Headscale 所在的机器执行浏览器中的命令即可，注册成功：\n\n# 回到 Headscale 所在主机，查看注册的节点：\nheadscale nodes list\n\n# 回到 macOS，测试是否能 ping 通对端节点：\nping -c 2 100.64.0.1\n# 在[sitting]中安装[CLl integration]后, 也可以使用 Tailscale CLI 来测试：\ntailscale ping 100.64.0.1\n\n```\n\n### 通过 Pre-Authkeys 接入\n\n```bash\n\n# 前面的接入方法都需要服务端同意，步骤比较烦琐，其实还有更简单的方法，可以直接接入，不需要服务端同意。\n# 首先在服务端生成 pre-authkey 的 token，有效期可以设置为 24 小时：\nheadscale preauthkeys create -e 24h --user default\n# 查看已经生成的 key：\nheadscale --user default preauthkeys list\n# 当然你也可以在 Headscale-Admin 中生成。点击客户端想加入的 User：\n# 在弹出的界面中点击「PreAuth Keys」右侧的 Create，设置一个过期时间（比如 100 年~），如果想重复利用这个 Key，可以勾选 Reusable，最后点击 ✅：\n# 创建成功后，点击红框区域便可复制该 PreAuth Key：\n# 现在新节点就可以无需服务端同意直接接入了：\ntailscale up --login-server=http://<HEADSCALE_PUB_ENDPOINT>:8080 --accept-routes=true --accept-dns=false --authkey $KEY\n\n```\n\n## 打通局域网\n\n[参考文档](https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#%E6%89%93%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91)\n\n```bash\n# 配置方法很简单，首先需要设置 IPv4 与 IPv6 路由转发：\necho 'net.ipv4.ip_forward = 1' | tee /etc/sysctl.d/ipforwarding.conf\necho 'net.ipv6.conf.all.forwarding = 1' | tee -a /etc/sysctl.d/ipforwarding.conf\nsysctl -p /etc/sysctl.d/ipforwarding.conf\n\n# 客户端修改注册节点的命令，在原来命令的基础上加上参数 --advertise-routes=192.168.100.0/24，告诉 Headscale 服务器“我这个节点可以转发这些地址的路由”。\ntailscale up --login-server=http://<HEADSCALE_PUB_ENDPOINT>:8080 --accept-routes=true --accept-dns=false --advertise-routes=192.168.100.0/24 --reset\n\n# 在 Headscale 端查看路由，可以看到相关路由是关闭的。\nheadscale nodes list|grep openwrt\nheadscale routes list -i 6\n# 开启路由：\nheadscale routes enable -i 6 -r \"192.168.100.0/24\"\n# 如果有多条路由需要用 , 隔开：\nheadscale routes enable -i 6 -r \"192.168.100.0/24,xxxx\"\n# 也可以通过参数 -a 开启所有路由：\nheadscale routes enable -i 6 -a\n# 其他节点查看路由结果：\nip route show table 52|grep \"192.168.100.0/24\"\n# 其他节点启动时需要增加 --accept-routes=true 选项来声明 “我接受外部其他节点发布的路由”。\n\n# 现在你在任何一个 Tailscale 客户端所在的节点都可以 ping 通家庭内网的机器了，你在公司或者星巴克也可以像在家里一样用同样的 IP 随意访问家中的任何一个设备，就问你香不香？\n```\n","source":"_posts/network/headscale/doc.md","raw":"# headscale使用记录\n\n[GitHub地址](https://github.com/juanfont/headscale)\n[参考文章](https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#headscale-%E6%98%AF%E4%BB%80%E4%B9%88)\n\n## 安装\n\n[sealos一键部署](https://bja.sealos.run/?openapp=system-template%3FtemplateName%3Dheadscale)\n\n```bash\n# 创建默认用户\nheadscale user create default\n# 查看用户列表\nheadscale user list\n\n# 创建 API Key：\nheadscale apikey create\n# 将 Headscale 公网域名和 API Key 填入 Headscale-Admin 的设置页面(https://headscale-xxx.sealosbja.site/admin/)，同时取消勾选 Legacy API，然后点击「Save」：\n# 接入成功后，点击左边侧栏的「Users」，然后点击「Create」开始创建用户：\n\n# 安装客户端\n## Linux\ncurl -fsSL https://tailscale.com/install.sh | sh\n\n# Tailscale 接入 Headscale：\n# 将 <HEADSCALE_PUB_ENDPOINT> 换成上文提到的 Sealos 中的 Headscale 公网域名\ntailscale up --login-server=https://<HEADSCALE_PUB_ENDPOINT> --accept-routes=true --accept-dns=false\n# 会打印出注册key(mkey:xxx), 需要到Headscale-Admin的[Machines]页面[Add Device][Register Machine Key]，选择上面创建的用户并将注册key填入, 点击[Register]后, 客户端控制台会打印Success.\n\n# 回到 Tailscale 客户端所在的 Linux 主机，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则。路由表可通过以下命令查看：\nip route show table 52\n# 查看 iptables 规则：\niptables -S\niptables -S -t nat\n\n## macOS\n# 安装完 GUI 版应用后还需要做一些骚操作，才能让 Tailscale 使用 Headscale 作为控制服务器。当然，Headscale 已经给我们提供了详细的操作步骤，你只需要在浏览器中打开 URL：https://<HEADSCALE_PUB_ENDPOINT>/apple，便会出现如下的界面：\n\n# 长按「option」键，然后点击顶部菜单栏的 Tailscale 图标，然后将鼠标指针悬停在「Debug」菜单上。\n# 在「Custom Login Server」下方选择「Add Account…」。\n# 在打开的弹窗中填入 Headscale 的公网域名，然后点击「Add Account」。\n# 然后立马就会跳转到浏览器并打开一个页面\n# 接下来与之前 Linux 客户端相同，回到 Headscale 所在的机器执行浏览器中的命令即可，注册成功：\n\n# 回到 Headscale 所在主机，查看注册的节点：\nheadscale nodes list\n\n# 回到 macOS，测试是否能 ping 通对端节点：\nping -c 2 100.64.0.1\n# 在[sitting]中安装[CLl integration]后, 也可以使用 Tailscale CLI 来测试：\ntailscale ping 100.64.0.1\n\n```\n\n### 通过 Pre-Authkeys 接入\n\n```bash\n\n# 前面的接入方法都需要服务端同意，步骤比较烦琐，其实还有更简单的方法，可以直接接入，不需要服务端同意。\n# 首先在服务端生成 pre-authkey 的 token，有效期可以设置为 24 小时：\nheadscale preauthkeys create -e 24h --user default\n# 查看已经生成的 key：\nheadscale --user default preauthkeys list\n# 当然你也可以在 Headscale-Admin 中生成。点击客户端想加入的 User：\n# 在弹出的界面中点击「PreAuth Keys」右侧的 Create，设置一个过期时间（比如 100 年~），如果想重复利用这个 Key，可以勾选 Reusable，最后点击 ✅：\n# 创建成功后，点击红框区域便可复制该 PreAuth Key：\n# 现在新节点就可以无需服务端同意直接接入了：\ntailscale up --login-server=http://<HEADSCALE_PUB_ENDPOINT>:8080 --accept-routes=true --accept-dns=false --authkey $KEY\n\n```\n\n## 打通局域网\n\n[参考文档](https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#%E6%89%93%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91)\n\n```bash\n# 配置方法很简单，首先需要设置 IPv4 与 IPv6 路由转发：\necho 'net.ipv4.ip_forward = 1' | tee /etc/sysctl.d/ipforwarding.conf\necho 'net.ipv6.conf.all.forwarding = 1' | tee -a /etc/sysctl.d/ipforwarding.conf\nsysctl -p /etc/sysctl.d/ipforwarding.conf\n\n# 客户端修改注册节点的命令，在原来命令的基础上加上参数 --advertise-routes=192.168.100.0/24，告诉 Headscale 服务器“我这个节点可以转发这些地址的路由”。\ntailscale up --login-server=http://<HEADSCALE_PUB_ENDPOINT>:8080 --accept-routes=true --accept-dns=false --advertise-routes=192.168.100.0/24 --reset\n\n# 在 Headscale 端查看路由，可以看到相关路由是关闭的。\nheadscale nodes list|grep openwrt\nheadscale routes list -i 6\n# 开启路由：\nheadscale routes enable -i 6 -r \"192.168.100.0/24\"\n# 如果有多条路由需要用 , 隔开：\nheadscale routes enable -i 6 -r \"192.168.100.0/24,xxxx\"\n# 也可以通过参数 -a 开启所有路由：\nheadscale routes enable -i 6 -a\n# 其他节点查看路由结果：\nip route show table 52|grep \"192.168.100.0/24\"\n# 其他节点启动时需要增加 --accept-routes=true 选项来声明 “我接受外部其他节点发布的路由”。\n\n# 现在你在任何一个 Tailscale 客户端所在的节点都可以 ping 通家庭内网的机器了，你在公司或者星巴克也可以像在家里一样用同样的 IP 随意访问家中的任何一个设备，就问你香不香？\n```\n","slug":"network/headscale/doc","published":1,"date":"2025-02-23T07:43:31.746Z","updated":"2025-02-23T07:43:31.747Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwaf0022msws9anehzxv","content":"<h1 id=\"headscale使用记录\"><a href=\"#headscale使用记录\" class=\"headerlink\" title=\"headscale使用记录\"></a>headscale使用记录</h1><p><a href=\"https://github.com/juanfont/headscale\">GitHub地址</a><br><a href=\"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#headscale-%E6%98%AF%E4%BB%80%E4%B9%88\">参考文章</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://bja.sealos.run/?openapp=system-template?templateName=headscale\">sealos一键部署</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建默认用户</span></span><br><span class=\"line\">headscale user create default</span><br><span class=\"line\"><span class=\"comment\"># 查看用户列表</span></span><br><span class=\"line\">headscale user list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 API Key：</span></span><br><span class=\"line\">headscale apikey create</span><br><span class=\"line\"><span class=\"comment\"># 将 Headscale 公网域名和 API Key 填入 Headscale-Admin 的设置页面(https://headscale-xxx.sealosbja.site/admin/)，同时取消勾选 Legacy API，然后点击「Save」：</span></span><br><span class=\"line\"><span class=\"comment\"># 接入成功后，点击左边侧栏的「Users」，然后点击「Create」开始创建用户：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装客户端</span></span><br><span class=\"line\"><span class=\"comment\">## Linux</span></span><br><span class=\"line\">curl -fsSL https://tailscale.com/install.sh | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tailscale 接入 Headscale：</span></span><br><span class=\"line\"><span class=\"comment\"># 将 &lt;HEADSCALE_PUB_ENDPOINT&gt; 换成上文提到的 Sealos 中的 Headscale 公网域名</span></span><br><span class=\"line\">tailscale up --login-server=https://&lt;HEADSCALE_PUB_ENDPOINT&gt; --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 会打印出注册key(mkey:xxx), 需要到Headscale-Admin的[Machines]页面[Add Device][Register Machine Key]，选择上面创建的用户并将注册key填入, 点击[Register]后, 客户端控制台会打印Success.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 Tailscale 客户端所在的 Linux 主机，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则。路由表可通过以下命令查看：</span></span><br><span class=\"line\">ip route show table 52</span><br><span class=\"line\"><span class=\"comment\"># 查看 iptables 规则：</span></span><br><span class=\"line\">iptables -S</span><br><span class=\"line\">iptables -S -t nat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## macOS</span></span><br><span class=\"line\"><span class=\"comment\"># 安装完 GUI 版应用后还需要做一些骚操作，才能让 Tailscale 使用 Headscale 作为控制服务器。当然，Headscale 已经给我们提供了详细的操作步骤，你只需要在浏览器中打开 URL：https://&lt;HEADSCALE_PUB_ENDPOINT&gt;/apple，便会出现如下的界面：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 长按「option」键，然后点击顶部菜单栏的 Tailscale 图标，然后将鼠标指针悬停在「Debug」菜单上。</span></span><br><span class=\"line\"><span class=\"comment\"># 在「Custom Login Server」下方选择「Add Account…」。</span></span><br><span class=\"line\"><span class=\"comment\"># 在打开的弹窗中填入 Headscale 的公网域名，然后点击「Add Account」。</span></span><br><span class=\"line\"><span class=\"comment\"># 然后立马就会跳转到浏览器并打开一个页面</span></span><br><span class=\"line\"><span class=\"comment\"># 接下来与之前 Linux 客户端相同，回到 Headscale 所在的机器执行浏览器中的命令即可，注册成功：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 Headscale 所在主机，查看注册的节点：</span></span><br><span class=\"line\">headscale nodes list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 macOS，测试是否能 ping 通对端节点：</span></span><br><span class=\"line\">ping -c 2 100.64.0.1</span><br><span class=\"line\"><span class=\"comment\"># 在[sitting]中安装[CLl integration]后, 也可以使用 Tailscale CLI 来测试：</span></span><br><span class=\"line\">tailscale ping 100.64.0.1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-Pre-Authkeys-接入\"><a href=\"#通过-Pre-Authkeys-接入\" class=\"headerlink\" title=\"通过 Pre-Authkeys 接入\"></a>通过 Pre-Authkeys 接入</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前面的接入方法都需要服务端同意，步骤比较烦琐，其实还有更简单的方法，可以直接接入，不需要服务端同意。</span></span><br><span class=\"line\"><span class=\"comment\"># 首先在服务端生成 pre-authkey 的 token，有效期可以设置为 24 小时：</span></span><br><span class=\"line\">headscale preauthkeys create -e 24h --user default</span><br><span class=\"line\"><span class=\"comment\"># 查看已经生成的 key：</span></span><br><span class=\"line\">headscale --user default preauthkeys list</span><br><span class=\"line\"><span class=\"comment\"># 当然你也可以在 Headscale-Admin 中生成。点击客户端想加入的 User：</span></span><br><span class=\"line\"><span class=\"comment\"># 在弹出的界面中点击「PreAuth Keys」右侧的 Create，设置一个过期时间（比如 100 年~），如果想重复利用这个 Key，可以勾选 Reusable，最后点击 ✅：</span></span><br><span class=\"line\"><span class=\"comment\"># 创建成功后，点击红框区域便可复制该 PreAuth Key：</span></span><br><span class=\"line\"><span class=\"comment\"># 现在新节点就可以无需服务端同意直接接入了：</span></span><br><span class=\"line\">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8080 --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span> --authkey <span class=\"variable\">$KEY</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打通局域网\"><a href=\"#打通局域网\" class=\"headerlink\" title=\"打通局域网\"></a>打通局域网</h2><p><a href=\"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#%E6%89%93%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91\">参考文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置方法很简单，首先需要设置 IPv4 与 IPv6 路由转发：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;net.ipv4.ip_forward = 1&#x27;</span> | <span class=\"built_in\">tee</span> /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;net.ipv6.conf.all.forwarding = 1&#x27;</span> | <span class=\"built_in\">tee</span> -a /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\">sysctl -p /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端修改注册节点的命令，在原来命令的基础上加上参数 --advertise-routes=192.168.100.0/24，告诉 Headscale 服务器“我这个节点可以转发这些地址的路由”。</span></span><br><span class=\"line\">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8080 --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span> --advertise-routes=192.168.100.0/24 --reset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Headscale 端查看路由，可以看到相关路由是关闭的。</span></span><br><span class=\"line\">headscale nodes list|grep openwrt</span><br><span class=\"line\">headscale routes list -i 6</span><br><span class=\"line\"><span class=\"comment\"># 开启路由：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -r <span class=\"string\">&quot;192.168.100.0/24&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果有多条路由需要用 , 隔开：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -r <span class=\"string\">&quot;192.168.100.0/24,xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过参数 -a 开启所有路由：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -a</span><br><span class=\"line\"><span class=\"comment\"># 其他节点查看路由结果：</span></span><br><span class=\"line\">ip route show table 52|grep <span class=\"string\">&quot;192.168.100.0/24&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 其他节点启动时需要增加 --accept-routes=true 选项来声明 “我接受外部其他节点发布的路由”。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 现在你在任何一个 Tailscale 客户端所在的节点都可以 ping 通家庭内网的机器了，你在公司或者星巴克也可以像在家里一样用同样的 IP 随意访问家中的任何一个设备，就问你香不香？</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"headscale使用记录\"><a href=\"#headscale使用记录\" class=\"headerlink\" title=\"headscale使用记录\"></a>headscale使用记录</h1><p><a href=\"https://github.com/juanfont/headscale\">GitHub地址</a><br><a href=\"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#headscale-%E6%98%AF%E4%BB%80%E4%B9%88\">参考文章</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://bja.sealos.run/?openapp=system-template?templateName=headscale\">sealos一键部署</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建默认用户</span></span><br><span class=\"line\">headscale user create default</span><br><span class=\"line\"><span class=\"comment\"># 查看用户列表</span></span><br><span class=\"line\">headscale user list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 API Key：</span></span><br><span class=\"line\">headscale apikey create</span><br><span class=\"line\"><span class=\"comment\"># 将 Headscale 公网域名和 API Key 填入 Headscale-Admin 的设置页面(https://headscale-xxx.sealosbja.site/admin/)，同时取消勾选 Legacy API，然后点击「Save」：</span></span><br><span class=\"line\"><span class=\"comment\"># 接入成功后，点击左边侧栏的「Users」，然后点击「Create」开始创建用户：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装客户端</span></span><br><span class=\"line\"><span class=\"comment\">## Linux</span></span><br><span class=\"line\">curl -fsSL https://tailscale.com/install.sh | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tailscale 接入 Headscale：</span></span><br><span class=\"line\"><span class=\"comment\"># 将 &lt;HEADSCALE_PUB_ENDPOINT&gt; 换成上文提到的 Sealos 中的 Headscale 公网域名</span></span><br><span class=\"line\">tailscale up --login-server=https://&lt;HEADSCALE_PUB_ENDPOINT&gt; --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 会打印出注册key(mkey:xxx), 需要到Headscale-Admin的[Machines]页面[Add Device][Register Machine Key]，选择上面创建的用户并将注册key填入, 点击[Register]后, 客户端控制台会打印Success.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 Tailscale 客户端所在的 Linux 主机，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则。路由表可通过以下命令查看：</span></span><br><span class=\"line\">ip route show table 52</span><br><span class=\"line\"><span class=\"comment\"># 查看 iptables 规则：</span></span><br><span class=\"line\">iptables -S</span><br><span class=\"line\">iptables -S -t nat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## macOS</span></span><br><span class=\"line\"><span class=\"comment\"># 安装完 GUI 版应用后还需要做一些骚操作，才能让 Tailscale 使用 Headscale 作为控制服务器。当然，Headscale 已经给我们提供了详细的操作步骤，你只需要在浏览器中打开 URL：https://&lt;HEADSCALE_PUB_ENDPOINT&gt;/apple，便会出现如下的界面：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 长按「option」键，然后点击顶部菜单栏的 Tailscale 图标，然后将鼠标指针悬停在「Debug」菜单上。</span></span><br><span class=\"line\"><span class=\"comment\"># 在「Custom Login Server」下方选择「Add Account…」。</span></span><br><span class=\"line\"><span class=\"comment\"># 在打开的弹窗中填入 Headscale 的公网域名，然后点击「Add Account」。</span></span><br><span class=\"line\"><span class=\"comment\"># 然后立马就会跳转到浏览器并打开一个页面</span></span><br><span class=\"line\"><span class=\"comment\"># 接下来与之前 Linux 客户端相同，回到 Headscale 所在的机器执行浏览器中的命令即可，注册成功：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 Headscale 所在主机，查看注册的节点：</span></span><br><span class=\"line\">headscale nodes list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 macOS，测试是否能 ping 通对端节点：</span></span><br><span class=\"line\">ping -c 2 100.64.0.1</span><br><span class=\"line\"><span class=\"comment\"># 在[sitting]中安装[CLl integration]后, 也可以使用 Tailscale CLI 来测试：</span></span><br><span class=\"line\">tailscale ping 100.64.0.1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-Pre-Authkeys-接入\"><a href=\"#通过-Pre-Authkeys-接入\" class=\"headerlink\" title=\"通过 Pre-Authkeys 接入\"></a>通过 Pre-Authkeys 接入</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前面的接入方法都需要服务端同意，步骤比较烦琐，其实还有更简单的方法，可以直接接入，不需要服务端同意。</span></span><br><span class=\"line\"><span class=\"comment\"># 首先在服务端生成 pre-authkey 的 token，有效期可以设置为 24 小时：</span></span><br><span class=\"line\">headscale preauthkeys create -e 24h --user default</span><br><span class=\"line\"><span class=\"comment\"># 查看已经生成的 key：</span></span><br><span class=\"line\">headscale --user default preauthkeys list</span><br><span class=\"line\"><span class=\"comment\"># 当然你也可以在 Headscale-Admin 中生成。点击客户端想加入的 User：</span></span><br><span class=\"line\"><span class=\"comment\"># 在弹出的界面中点击「PreAuth Keys」右侧的 Create，设置一个过期时间（比如 100 年~），如果想重复利用这个 Key，可以勾选 Reusable，最后点击 ✅：</span></span><br><span class=\"line\"><span class=\"comment\"># 创建成功后，点击红框区域便可复制该 PreAuth Key：</span></span><br><span class=\"line\"><span class=\"comment\"># 现在新节点就可以无需服务端同意直接接入了：</span></span><br><span class=\"line\">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8080 --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span> --authkey <span class=\"variable\">$KEY</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打通局域网\"><a href=\"#打通局域网\" class=\"headerlink\" title=\"打通局域网\"></a>打通局域网</h2><p><a href=\"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#%E6%89%93%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91\">参考文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置方法很简单，首先需要设置 IPv4 与 IPv6 路由转发：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;net.ipv4.ip_forward = 1&#x27;</span> | <span class=\"built_in\">tee</span> /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;net.ipv6.conf.all.forwarding = 1&#x27;</span> | <span class=\"built_in\">tee</span> -a /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\">sysctl -p /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端修改注册节点的命令，在原来命令的基础上加上参数 --advertise-routes=192.168.100.0/24，告诉 Headscale 服务器“我这个节点可以转发这些地址的路由”。</span></span><br><span class=\"line\">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8080 --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span> --advertise-routes=192.168.100.0/24 --reset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Headscale 端查看路由，可以看到相关路由是关闭的。</span></span><br><span class=\"line\">headscale nodes list|grep openwrt</span><br><span class=\"line\">headscale routes list -i 6</span><br><span class=\"line\"><span class=\"comment\"># 开启路由：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -r <span class=\"string\">&quot;192.168.100.0/24&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果有多条路由需要用 , 隔开：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -r <span class=\"string\">&quot;192.168.100.0/24,xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过参数 -a 开启所有路由：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -a</span><br><span class=\"line\"><span class=\"comment\"># 其他节点查看路由结果：</span></span><br><span class=\"line\">ip route show table 52|grep <span class=\"string\">&quot;192.168.100.0/24&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 其他节点启动时需要增加 --accept-routes=true 选项来声明 “我接受外部其他节点发布的路由”。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 现在你在任何一个 Tailscale 客户端所在的节点都可以 ping 通家庭内网的机器了，你在公司或者星巴克也可以像在家里一样用同样的 IP 随意访问家中的任何一个设备，就问你香不香？</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"# 本地https使用记录\n\n```bash\n# 生成证书\nmkcert -install\nmkcert xxx-9090.asse.devtunnels.ms\n\n```\n","source":"_posts/network/mkcert_freemyip_nginx/doc.md","raw":"# 本地https使用记录\n\n```bash\n# 生成证书\nmkcert -install\nmkcert xxx-9090.asse.devtunnels.ms\n\n```\n","slug":"network/mkcert_freemyip_nginx/doc","published":1,"date":"2025-02-23T07:43:31.744Z","updated":"2025-02-23T07:43:31.744Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwaf0023msws6mxq16oj","content":"<h1 id=\"本地https使用记录\"><a href=\"#本地https使用记录\" class=\"headerlink\" title=\"本地https使用记录\"></a>本地https使用记录</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">mkcert -install</span><br><span class=\"line\">mkcert xxx-9090.asse.devtunnels.ms</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"本地https使用记录\"><a href=\"#本地https使用记录\" class=\"headerlink\" title=\"本地https使用记录\"></a>本地https使用记录</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">mkcert -install</span><br><span class=\"line\">mkcert xxx-9090.asse.devtunnels.ms</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"_content":"# 节点小宝使用记录\n\n[官网](https://www.iepose.com/)\n\n```bash\n# 安装\n\n## docker\n# x86_64\ndocker run -d --net host --name owjdxb -v \"$(pwd)/store:/data/store\" --restart always ionewu/owjdxb\n# arm_64\n# docker run -d --net host --name owjdxb -v \"$(pwd)/store:/data/store\" --restart always ionewu/owjdxb_a64\ndocker run -d --net host --name owjdxb -v \"./temp/store:/data/store\" --restart always ionewu/owjdxb_a64\n\n```\n\n```bash\n# 设备码绑定\n# 启动容器后可在日志中查看6位设备码\n# docker logs ionewu/owjdxb\ndocker logs owjdxb\n\n```\n","source":"_posts/network/iepose/doc.md","raw":"# 节点小宝使用记录\n\n[官网](https://www.iepose.com/)\n\n```bash\n# 安装\n\n## docker\n# x86_64\ndocker run -d --net host --name owjdxb -v \"$(pwd)/store:/data/store\" --restart always ionewu/owjdxb\n# arm_64\n# docker run -d --net host --name owjdxb -v \"$(pwd)/store:/data/store\" --restart always ionewu/owjdxb_a64\ndocker run -d --net host --name owjdxb -v \"./temp/store:/data/store\" --restart always ionewu/owjdxb_a64\n\n```\n\n```bash\n# 设备码绑定\n# 启动容器后可在日志中查看6位设备码\n# docker logs ionewu/owjdxb\ndocker logs owjdxb\n\n```\n","slug":"network/iepose/doc","published":1,"date":"2025-02-23T07:43:31.745Z","updated":"2025-02-23T07:43:31.745Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwaf0024mswshoove4p1","content":"<h1 id=\"节点小宝使用记录\"><a href=\"#节点小宝使用记录\" class=\"headerlink\" title=\"节点小宝使用记录\"></a>节点小宝使用记录</h1><p><a href=\"https://www.iepose.com/\">官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## docker</span></span><br><span class=\"line\"><span class=\"comment\"># x86_64</span></span><br><span class=\"line\">docker run -d --net host --name owjdxb -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/store:/data/store&quot;</span> --restart always ionewu/owjdxb</span><br><span class=\"line\"><span class=\"comment\"># arm_64</span></span><br><span class=\"line\"><span class=\"comment\"># docker run -d --net host --name owjdxb -v &quot;$(pwd)/store:/data/store&quot; --restart always ionewu/owjdxb_a64</span></span><br><span class=\"line\">docker run -d --net host --name owjdxb -v <span class=\"string\">&quot;./temp/store:/data/store&quot;</span> --restart always ionewu/owjdxb_a64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设备码绑定</span></span><br><span class=\"line\"><span class=\"comment\"># 启动容器后可在日志中查看6位设备码</span></span><br><span class=\"line\"><span class=\"comment\"># docker logs ionewu/owjdxb</span></span><br><span class=\"line\">docker logs owjdxb</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"节点小宝使用记录\"><a href=\"#节点小宝使用记录\" class=\"headerlink\" title=\"节点小宝使用记录\"></a>节点小宝使用记录</h1><p><a href=\"https://www.iepose.com/\">官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## docker</span></span><br><span class=\"line\"><span class=\"comment\"># x86_64</span></span><br><span class=\"line\">docker run -d --net host --name owjdxb -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/store:/data/store&quot;</span> --restart always ionewu/owjdxb</span><br><span class=\"line\"><span class=\"comment\"># arm_64</span></span><br><span class=\"line\"><span class=\"comment\"># docker run -d --net host --name owjdxb -v &quot;$(pwd)/store:/data/store&quot; --restart always ionewu/owjdxb_a64</span></span><br><span class=\"line\">docker run -d --net host --name owjdxb -v <span class=\"string\">&quot;./temp/store:/data/store&quot;</span> --restart always ionewu/owjdxb_a64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设备码绑定</span></span><br><span class=\"line\"><span class=\"comment\"># 启动容器后可在日志中查看6位设备码</span></span><br><span class=\"line\"><span class=\"comment\"># docker logs ionewu/owjdxb</span></span><br><span class=\"line\">docker logs owjdxb</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"_content":"# 蒲公英vpn\n\n[官网](https://pgy.oray.com)\n\n```bash\n# 镜像拉取\ndocker pull crpi-orhk6a4lutw1gb13.cn-hangzhou.personal.cr.aliyuncs.com/bestoray/pgyvpn\n# 启动容器\ndocker run -d --device=/dev/net/tun --net=host --cap-add=NET_ADMIN --env PGY_USERNAME=\"xxx\" --env PGY_PASSWORD=\"xxx\" crpi-orhk6a4lutw1gb13.cn-hangzhou.personal.cr.aliyuncs.com/bestoray/pgyvpn\n\n#二、使用说明\n# 1、启动容器必须加字段 “--cap-add=NET_ADMIN” ，否则会导致虚拟网卡创建失败，从而导致组网无法正常通信\n# 2、USERNAME 选项支持输入“贝锐账号 ”或”UID“\n# 3、支持配合docker的-v参数使用容器卷功能\n# 4、镜像中已默认安装ping、ifconfig等网络调试工具，方便用户使用\n# 5、日志路径：/var/log/oray\n# 6、配置路径：/etc/oray/pgyvpn\n```\n","source":"_posts/network/pgyvpn/doc.md","raw":"# 蒲公英vpn\n\n[官网](https://pgy.oray.com)\n\n```bash\n# 镜像拉取\ndocker pull crpi-orhk6a4lutw1gb13.cn-hangzhou.personal.cr.aliyuncs.com/bestoray/pgyvpn\n# 启动容器\ndocker run -d --device=/dev/net/tun --net=host --cap-add=NET_ADMIN --env PGY_USERNAME=\"xxx\" --env PGY_PASSWORD=\"xxx\" crpi-orhk6a4lutw1gb13.cn-hangzhou.personal.cr.aliyuncs.com/bestoray/pgyvpn\n\n#二、使用说明\n# 1、启动容器必须加字段 “--cap-add=NET_ADMIN” ，否则会导致虚拟网卡创建失败，从而导致组网无法正常通信\n# 2、USERNAME 选项支持输入“贝锐账号 ”或”UID“\n# 3、支持配合docker的-v参数使用容器卷功能\n# 4、镜像中已默认安装ping、ifconfig等网络调试工具，方便用户使用\n# 5、日志路径：/var/log/oray\n# 6、配置路径：/etc/oray/pgyvpn\n```\n","slug":"network/pgyvpn/doc","published":1,"date":"2025-02-23T07:43:31.752Z","updated":"2025-02-23T07:43:31.752Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwaf0025msws2w366a7d","content":"<h1 id=\"蒲公英vpn\"><a href=\"#蒲公英vpn\" class=\"headerlink\" title=\"蒲公英vpn\"></a>蒲公英vpn</h1><p><a href=\"https://pgy.oray.com/\">官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 镜像拉取</span></span><br><span class=\"line\">docker pull crpi-orhk6a4lutw1gb13.cn-hangzhou.personal.cr.aliyuncs.com/bestoray/pgyvpn</span><br><span class=\"line\"><span class=\"comment\"># 启动容器</span></span><br><span class=\"line\">docker run -d --device=/dev/net/tun --net=host --cap-add=NET_ADMIN --<span class=\"built_in\">env</span> PGY_USERNAME=<span class=\"string\">&quot;xxx&quot;</span> --<span class=\"built_in\">env</span> PGY_PASSWORD=<span class=\"string\">&quot;xxx&quot;</span> crpi-orhk6a4lutw1gb13.cn-hangzhou.personal.cr.aliyuncs.com/bestoray/pgyvpn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#二、使用说明</span></span><br><span class=\"line\"><span class=\"comment\"># 1、启动容器必须加字段 “--cap-add=NET_ADMIN” ，否则会导致虚拟网卡创建失败，从而导致组网无法正常通信</span></span><br><span class=\"line\"><span class=\"comment\"># 2、USERNAME 选项支持输入“贝锐账号 ”或”UID“</span></span><br><span class=\"line\"><span class=\"comment\"># 3、支持配合docker的-v参数使用容器卷功能</span></span><br><span class=\"line\"><span class=\"comment\"># 4、镜像中已默认安装ping、ifconfig等网络调试工具，方便用户使用</span></span><br><span class=\"line\"><span class=\"comment\"># 5、日志路径：/var/log/oray</span></span><br><span class=\"line\"><span class=\"comment\"># 6、配置路径：/etc/oray/pgyvpn</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"蒲公英vpn\"><a href=\"#蒲公英vpn\" class=\"headerlink\" title=\"蒲公英vpn\"></a>蒲公英vpn</h1><p><a href=\"https://pgy.oray.com/\">官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 镜像拉取</span></span><br><span class=\"line\">docker pull crpi-orhk6a4lutw1gb13.cn-hangzhou.personal.cr.aliyuncs.com/bestoray/pgyvpn</span><br><span class=\"line\"><span class=\"comment\"># 启动容器</span></span><br><span class=\"line\">docker run -d --device=/dev/net/tun --net=host --cap-add=NET_ADMIN --<span class=\"built_in\">env</span> PGY_USERNAME=<span class=\"string\">&quot;xxx&quot;</span> --<span class=\"built_in\">env</span> PGY_PASSWORD=<span class=\"string\">&quot;xxx&quot;</span> crpi-orhk6a4lutw1gb13.cn-hangzhou.personal.cr.aliyuncs.com/bestoray/pgyvpn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#二、使用说明</span></span><br><span class=\"line\"><span class=\"comment\"># 1、启动容器必须加字段 “--cap-add=NET_ADMIN” ，否则会导致虚拟网卡创建失败，从而导致组网无法正常通信</span></span><br><span class=\"line\"><span class=\"comment\"># 2、USERNAME 选项支持输入“贝锐账号 ”或”UID“</span></span><br><span class=\"line\"><span class=\"comment\"># 3、支持配合docker的-v参数使用容器卷功能</span></span><br><span class=\"line\"><span class=\"comment\"># 4、镜像中已默认安装ping、ifconfig等网络调试工具，方便用户使用</span></span><br><span class=\"line\"><span class=\"comment\"># 5、日志路径：/var/log/oray</span></span><br><span class=\"line\"><span class=\"comment\"># 6、配置路径：/etc/oray/pgyvpn</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Linux","nav_order":2,"has_children":true,"parent":"Linux","_content":"\n# Linux\n","source":"_posts/os/linux/index.md","raw":"---\nlayout: default\ntitle: Linux\nnav_order: 2\nhas_children: true\nparent: Linux\npermalink: \"/os/linux/\"\n---\n\n# Linux\n","slug":"os/linux/index","published":1,"date":"2025-02-23T07:43:31.754Z","updated":"2025-02-23T07:43:31.754Z","__permalink":"/os/linux/","comments":1,"photos":[],"_id":"cm7k5rwaf0026mswsaw8l94bl","content":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1>","excerpt":"","more":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1>"},{"_content":"# nip.io使用记录\n\n动态DNS神器nip.io使用指南：快速实现域名与IP的动态映射\n\n> 本文基于开源项目 v1.2.1版本撰写，适用于开发测试、CI/CD等场景\n\n---\n\n一、项目简介\nnip.io 是由Exentrique Solutions开发的开源动态DNS服务，通过智能解析机制实现任意IP地址与域名的动态映射。该服务无需注册或配置DNS记录，支持以下核心功能：\n\n- 🌐 动态域名解析：将`<任意IP>.nip.io`自动解析对应IP\n- 🚀 零配置使用：无需安装客户端或配置DNS服务器\n- 🔧 通配符支持：支持多级子域名动态解析（如`app.10.0.0.1.nip.io`）\n- 🐳 容器化部署：提供Docker镜像快速搭建私有服务\n\n---\n\n二、快速入门\n\n场景1：使用公共DNS服务\n直接在浏览器或应用中访问以下格式域名：\n\n```bash\nIPv4格式\nhttp://your-app.192-168-1-100.nip.io  ➔ 解析到192.168.1.100\nhttp://test.192.168.1.100.nip.io      ➔ 解析到192.168.1.100\n\nIPv6格式（需使用破折号）\nhttp://your-app.2001-0db8-85a3-0000-0000-8a2e-0370-7334.nip.io\n\n```\n\n场景2：自建私有服务\n\n```bash\n克隆项目\ngit clone https://github.com/exentriquesolutions/nip.io.git\n\n使用Docker部署\nbash build_and_run_docker.sh\n\n```\n\n---\n\n三、进阶配置\n\n1. 环境变量配置\n通过环境变量覆盖默认配置：\n\n[environment-variables-configuration-overrides](https://github.com/exentriquesolutions/nip.io/tree/master?tab=readme-ov-file#environment-variables-configuration-overrides)\n\n---\n\n四、典型应用场景\n\n1. 本地开发调试\n\n```bash\n# 运行本地服务\npython -m http.server 8080\n\n# 通过域名访问\nhttp://dev.127-0-0-1.nip.io:8080\n\n```\n\n1. Kubernetes服务暴露\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: demo-service\nspec:\n  type: ClusterIP\n  externalIPs:\n    - 192.168.1.100\n  ports:\n    - port: 80\n---\n\n# 通过域名访问\nhttp://k8s.192.168.1.100.nip.io\n\n```\n\n---\n\n> 项目地址：[GitHub - exentriquesolutions/nip.io](https://github.com/exentriquesolutions/nip.io)\n> 更多技术细节可查阅项目Wiki文档\n","source":"_posts/network/dns/nip.io.md","raw":"# nip.io使用记录\n\n动态DNS神器nip.io使用指南：快速实现域名与IP的动态映射\n\n> 本文基于开源项目 v1.2.1版本撰写，适用于开发测试、CI/CD等场景\n\n---\n\n一、项目简介\nnip.io 是由Exentrique Solutions开发的开源动态DNS服务，通过智能解析机制实现任意IP地址与域名的动态映射。该服务无需注册或配置DNS记录，支持以下核心功能：\n\n- 🌐 动态域名解析：将`<任意IP>.nip.io`自动解析对应IP\n- 🚀 零配置使用：无需安装客户端或配置DNS服务器\n- 🔧 通配符支持：支持多级子域名动态解析（如`app.10.0.0.1.nip.io`）\n- 🐳 容器化部署：提供Docker镜像快速搭建私有服务\n\n---\n\n二、快速入门\n\n场景1：使用公共DNS服务\n直接在浏览器或应用中访问以下格式域名：\n\n```bash\nIPv4格式\nhttp://your-app.192-168-1-100.nip.io  ➔ 解析到192.168.1.100\nhttp://test.192.168.1.100.nip.io      ➔ 解析到192.168.1.100\n\nIPv6格式（需使用破折号）\nhttp://your-app.2001-0db8-85a3-0000-0000-8a2e-0370-7334.nip.io\n\n```\n\n场景2：自建私有服务\n\n```bash\n克隆项目\ngit clone https://github.com/exentriquesolutions/nip.io.git\n\n使用Docker部署\nbash build_and_run_docker.sh\n\n```\n\n---\n\n三、进阶配置\n\n1. 环境变量配置\n通过环境变量覆盖默认配置：\n\n[environment-variables-configuration-overrides](https://github.com/exentriquesolutions/nip.io/tree/master?tab=readme-ov-file#environment-variables-configuration-overrides)\n\n---\n\n四、典型应用场景\n\n1. 本地开发调试\n\n```bash\n# 运行本地服务\npython -m http.server 8080\n\n# 通过域名访问\nhttp://dev.127-0-0-1.nip.io:8080\n\n```\n\n1. Kubernetes服务暴露\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: demo-service\nspec:\n  type: ClusterIP\n  externalIPs:\n    - 192.168.1.100\n  ports:\n    - port: 80\n---\n\n# 通过域名访问\nhttp://k8s.192.168.1.100.nip.io\n\n```\n\n---\n\n> 项目地址：[GitHub - exentriquesolutions/nip.io](https://github.com/exentriquesolutions/nip.io)\n> 更多技术细节可查阅项目Wiki文档\n","slug":"network/dns/nip.io","published":1,"date":"2025-02-23T07:43:31.753Z","updated":"2025-02-23T07:43:31.753Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwag0027mswsa8a2ch2k","content":"<h1 id=\"nip-io使用记录\"><a href=\"#nip-io使用记录\" class=\"headerlink\" title=\"nip.io使用记录\"></a>nip.io使用记录</h1><p>动态DNS神器nip.io使用指南：快速实现域名与IP的动态映射</p>\n<blockquote>\n<p>本文基于开源项目 v1.2.1版本撰写，适用于开发测试、CI&#x2F;CD等场景</p>\n</blockquote>\n<hr>\n<p>一、项目简介<br>nip.io 是由Exentrique Solutions开发的开源动态DNS服务，通过智能解析机制实现任意IP地址与域名的动态映射。该服务无需注册或配置DNS记录，支持以下核心功能：</p>\n<ul>\n<li>🌐 动态域名解析：将<code>&lt;任意IP&gt;.nip.io</code>自动解析对应IP</li>\n<li>🚀 零配置使用：无需安装客户端或配置DNS服务器</li>\n<li>🔧 通配符支持：支持多级子域名动态解析（如<code>app.10.0.0.1.nip.io</code>）</li>\n<li>🐳 容器化部署：提供Docker镜像快速搭建私有服务</li>\n</ul>\n<hr>\n<p>二、快速入门</p>\n<p>场景1：使用公共DNS服务<br>直接在浏览器或应用中访问以下格式域名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPv4格式</span><br><span class=\"line\">http://your-app.192-168-1-100.nip.io  ➔ 解析到192.168.1.100</span><br><span class=\"line\">http://test.192.168.1.100.nip.io      ➔ 解析到192.168.1.100</span><br><span class=\"line\"></span><br><span class=\"line\">IPv6格式（需使用破折号）</span><br><span class=\"line\">http://your-app.2001-0db8-85a3-0000-0000-8a2e-0370-7334.nip.io</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>场景2：自建私有服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">克隆项目</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/exentriquesolutions/nip.io.git</span><br><span class=\"line\"></span><br><span class=\"line\">使用Docker部署</span><br><span class=\"line\">bash build_and_run_docker.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>三、进阶配置</p>\n<ol>\n<li>环境变量配置<br>通过环境变量覆盖默认配置：</li>\n</ol>\n<p><a href=\"https://github.com/exentriquesolutions/nip.io/tree/master?tab=readme-ov-file#environment-variables-configuration-overrides\">environment-variables-configuration-overrides</a></p>\n<hr>\n<p>四、典型应用场景</p>\n<ol>\n<li>本地开发调试</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行本地服务</span></span><br><span class=\"line\">python -m http.server 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过域名访问</span></span><br><span class=\"line\">http://dev.127-0-0-1.nip.io:8080</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Kubernetes服务暴露</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">demo-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">externalIPs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"comment\"># 通过域名访问</span></span><br><span class=\"line\"><span class=\"string\">http://k8s.192.168.1.100.nip.io</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>项目地址：<a href=\"https://github.com/exentriquesolutions/nip.io\">GitHub - exentriquesolutions&#x2F;nip.io</a><br>更多技术细节可查阅项目Wiki文档</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"nip-io使用记录\"><a href=\"#nip-io使用记录\" class=\"headerlink\" title=\"nip.io使用记录\"></a>nip.io使用记录</h1><p>动态DNS神器nip.io使用指南：快速实现域名与IP的动态映射</p>\n<blockquote>\n<p>本文基于开源项目 v1.2.1版本撰写，适用于开发测试、CI&#x2F;CD等场景</p>\n</blockquote>\n<hr>\n<p>一、项目简介<br>nip.io 是由Exentrique Solutions开发的开源动态DNS服务，通过智能解析机制实现任意IP地址与域名的动态映射。该服务无需注册或配置DNS记录，支持以下核心功能：</p>\n<ul>\n<li>🌐 动态域名解析：将<code>&lt;任意IP&gt;.nip.io</code>自动解析对应IP</li>\n<li>🚀 零配置使用：无需安装客户端或配置DNS服务器</li>\n<li>🔧 通配符支持：支持多级子域名动态解析（如<code>app.10.0.0.1.nip.io</code>）</li>\n<li>🐳 容器化部署：提供Docker镜像快速搭建私有服务</li>\n</ul>\n<hr>\n<p>二、快速入门</p>\n<p>场景1：使用公共DNS服务<br>直接在浏览器或应用中访问以下格式域名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPv4格式</span><br><span class=\"line\">http://your-app.192-168-1-100.nip.io  ➔ 解析到192.168.1.100</span><br><span class=\"line\">http://test.192.168.1.100.nip.io      ➔ 解析到192.168.1.100</span><br><span class=\"line\"></span><br><span class=\"line\">IPv6格式（需使用破折号）</span><br><span class=\"line\">http://your-app.2001-0db8-85a3-0000-0000-8a2e-0370-7334.nip.io</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>场景2：自建私有服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">克隆项目</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/exentriquesolutions/nip.io.git</span><br><span class=\"line\"></span><br><span class=\"line\">使用Docker部署</span><br><span class=\"line\">bash build_and_run_docker.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>三、进阶配置</p>\n<ol>\n<li>环境变量配置<br>通过环境变量覆盖默认配置：</li>\n</ol>\n<p><a href=\"https://github.com/exentriquesolutions/nip.io/tree/master?tab=readme-ov-file#environment-variables-configuration-overrides\">environment-variables-configuration-overrides</a></p>\n<hr>\n<p>四、典型应用场景</p>\n<ol>\n<li>本地开发调试</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行本地服务</span></span><br><span class=\"line\">python -m http.server 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过域名访问</span></span><br><span class=\"line\">http://dev.127-0-0-1.nip.io:8080</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Kubernetes服务暴露</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">demo-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">externalIPs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"comment\"># 通过域名访问</span></span><br><span class=\"line\"><span class=\"string\">http://k8s.192.168.1.100.nip.io</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>项目地址：<a href=\"https://github.com/exentriquesolutions/nip.io\">GitHub - exentriquesolutions&#x2F;nip.io</a><br>更多技术细节可查阅项目Wiki文档</p>\n</blockquote>\n"},{"layout":"default","title":"Linux系统","nav_order":12,"description":"linux系统文档","parent":"Linux","has_children":false,"grand_parent":"Os","_content":"\n# Linux系统文档\n\n```bash\n# 获取系统IP\nhostname -I | cut -f1 -d' '\n# 关机\n# sshpass -p root ssh -o \"StrictHostKeyChecking=no\" root@$(hostname -I | cut -f1 -d' ') \"sudo poweroff\"\nsshpass -p root ssh -o StrictHostKeyChecking=no root@10.0.16.16 sudo poweroff\n```\n\n## yum命令\n\n- 切换yum源\n\n[参考](https://developer.aliyun.com/article/675241)\n\n```bash\n# 备份旧源\nmv CentOS-Base.repo CentOS-Base.repo.v2.bak\n# 添加新源(阿里镜像源)\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n```\n","source":"_posts/os/linux/linux.md","raw":"---\nlayout: default\ntitle: Linux系统\nnav_order: 12\ndescription: linux系统文档\nparent: Linux\nhas_children: false\npermalink: \"/os/linux/linux/\"\ngrand_parent: Os\n---\n\n# Linux系统文档\n\n```bash\n# 获取系统IP\nhostname -I | cut -f1 -d' '\n# 关机\n# sshpass -p root ssh -o \"StrictHostKeyChecking=no\" root@$(hostname -I | cut -f1 -d' ') \"sudo poweroff\"\nsshpass -p root ssh -o StrictHostKeyChecking=no root@10.0.16.16 sudo poweroff\n```\n\n## yum命令\n\n- 切换yum源\n\n[参考](https://developer.aliyun.com/article/675241)\n\n```bash\n# 备份旧源\nmv CentOS-Base.repo CentOS-Base.repo.v2.bak\n# 添加新源(阿里镜像源)\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n```\n","slug":"os/linux/linux","published":1,"date":"2025-02-23T07:43:31.754Z","updated":"2025-02-23T07:43:31.754Z","__permalink":"/os/linux/linux/","comments":1,"photos":[],"_id":"cm7k5rwag0028msws35vhgz3f","content":"<h1 id=\"Linux系统文档\"><a href=\"#Linux系统文档\" class=\"headerlink\" title=\"Linux系统文档\"></a>Linux系统文档</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取系统IP</span></span><br><span class=\"line\">hostname -I | <span class=\"built_in\">cut</span> -f1 -d<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 关机</span></span><br><span class=\"line\"><span class=\"comment\"># sshpass -p root ssh -o &quot;StrictHostKeyChecking=no&quot; root@$(hostname -I | cut -f1 -d&#x27; &#x27;) &quot;sudo poweroff&quot;</span></span><br><span class=\"line\">sshpass -p root ssh -o StrictHostKeyChecking=no root@10.0.16.16 <span class=\"built_in\">sudo</span> poweroff</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yum命令\"><a href=\"#yum命令\" class=\"headerlink\" title=\"yum命令\"></a>yum命令</h2><ul>\n<li>切换yum源</li>\n</ul>\n<p><a href=\"https://developer.aliyun.com/article/675241\">参考</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份旧源</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> CentOS-Base.repo CentOS-Base.repo.v2.bak</span><br><span class=\"line\"><span class=\"comment\"># 添加新源(阿里镜像源)</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Linux系统文档\"><a href=\"#Linux系统文档\" class=\"headerlink\" title=\"Linux系统文档\"></a>Linux系统文档</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取系统IP</span></span><br><span class=\"line\">hostname -I | <span class=\"built_in\">cut</span> -f1 -d<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 关机</span></span><br><span class=\"line\"><span class=\"comment\"># sshpass -p root ssh -o &quot;StrictHostKeyChecking=no&quot; root@$(hostname -I | cut -f1 -d&#x27; &#x27;) &quot;sudo poweroff&quot;</span></span><br><span class=\"line\">sshpass -p root ssh -o StrictHostKeyChecking=no root@10.0.16.16 <span class=\"built_in\">sudo</span> poweroff</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yum命令\"><a href=\"#yum命令\" class=\"headerlink\" title=\"yum命令\"></a>yum命令</h2><ul>\n<li>切换yum源</li>\n</ul>\n<p><a href=\"https://developer.aliyun.com/article/675241\">参考</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份旧源</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> CentOS-Base.repo CentOS-Base.repo.v2.bak</span><br><span class=\"line\"><span class=\"comment\"># 添加新源(阿里镜像源)</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"编程语言","nav_order":1,"description":"编程语言相关记录","parent":"Code Lang","has_children":false,"grand_parent":"Tools","_content":"\n# 编程语言相关记录\n\n## Python\n\n```bash\n# 安装pip\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nsudo python get-pip.py\n# 查看版本\npip --version\n\n```\n","source":"_posts/tools/code_lang/code_lang.md","raw":"---\nlayout: default\ntitle: 编程语言\nnav_order: 1\ndescription: 编程语言相关记录\nparent: Code Lang\nhas_children: false\npermalink: \"/tools/code_lang/code_lang/\"\ngrand_parent: Tools\n---\n\n# 编程语言相关记录\n\n## Python\n\n```bash\n# 安装pip\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nsudo python get-pip.py\n# 查看版本\npip --version\n\n```\n","slug":"tools/code_lang/code_lang","published":1,"date":"2025-02-23T07:43:31.764Z","updated":"2025-02-23T07:43:31.765Z","__permalink":"/tools/code_lang/code_lang/","comments":1,"photos":[],"_id":"cm7k5rwag0029msws35ne5vb6","content":"<h1 id=\"编程语言相关记录\"><a href=\"#编程语言相关记录\" class=\"headerlink\" title=\"编程语言相关记录\"></a>编程语言相关记录</h1><h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装pip</span></span><br><span class=\"line\">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> python get-pip.py</span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">pip --version</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"编程语言相关记录\"><a href=\"#编程语言相关记录\" class=\"headerlink\" title=\"编程语言相关记录\"></a>编程语言相关记录</h1><h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装pip</span></span><br><span class=\"line\">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> python get-pip.py</span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">pip --version</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Code Lang","nav_order":2,"has_children":true,"parent":"Code Lang","_content":"\n# Code Lang\n","source":"_posts/tools/code_lang/index.md","raw":"---\nlayout: default\ntitle: Code Lang\nnav_order: 2\nhas_children: true\nparent: Code Lang\npermalink: \"/tools/code_lang/\"\n---\n\n# Code Lang\n","slug":"tools/code_lang/index","published":1,"date":"2025-02-23T07:43:31.765Z","updated":"2025-02-23T07:43:31.765Z","__permalink":"/tools/code_lang/","comments":1,"photos":[],"_id":"cm7k5rwag002amsws5elk7fw3","content":"<h1 id=\"Code-Lang\"><a href=\"#Code-Lang\" class=\"headerlink\" title=\"Code Lang\"></a>Code Lang</h1>","excerpt":"","more":"<h1 id=\"Code-Lang\"><a href=\"#Code-Lang\" class=\"headerlink\" title=\"Code Lang\"></a>Code Lang</h1>"},{"layout":"default","title":"Softs","nav_order":2,"has_children":true,"parent":"Softs","_content":"\n# Softs\n","source":"_posts/tools/softs/index.md","raw":"---\nlayout: default\ntitle: Softs\nnav_order: 2\nhas_children: true\nparent: Softs\npermalink: \"/tools/softs/\"\n---\n\n# Softs\n","slug":"tools/softs/index","published":1,"date":"2025-02-23T07:43:31.760Z","updated":"2025-02-23T07:43:31.760Z","__permalink":"/tools/softs/","comments":1,"photos":[],"_id":"cm7k5rwag002bmsws4lqd1s8s","content":"<h1 id=\"Softs\"><a href=\"#Softs\" class=\"headerlink\" title=\"Softs\"></a>Softs</h1>","excerpt":"","more":"<h1 id=\"Softs\"><a href=\"#Softs\" class=\"headerlink\" title=\"Softs\"></a>Softs</h1>"},{"layout":"default","title":"软件工具","nav_order":2,"description":"软件工具","parent":"Softs","has_children":false,"grand_parent":"Tools","_content":"\n# 软件工具\n\n常用软件工具的使用指南和配置说明。\n\n## 工具列表\n\n1. ComfyUI - AI 图像生成工具\n2. Clash - 网络代理工具\n3. Cursor - AI 辅助编程工具\n4. IDEA - Java IDE\n5. Windsurf - AI 编程助手\n","source":"_posts/tools/softs/softs.md","raw":"---\nlayout: default\ntitle: 软件工具\nnav_order: 2\ndescription: 软件工具\nparent: Softs\nhas_children: false\npermalink: \"/tools/softs/softs/\"\ngrand_parent: Tools\n---\n\n# 软件工具\n\n常用软件工具的使用指南和配置说明。\n\n## 工具列表\n\n1. ComfyUI - AI 图像生成工具\n2. Clash - 网络代理工具\n3. Cursor - AI 辅助编程工具\n4. IDEA - Java IDE\n5. Windsurf - AI 编程助手\n","slug":"tools/softs/softs","published":1,"date":"2025-02-23T07:43:31.759Z","updated":"2025-02-23T07:43:31.759Z","__permalink":"/tools/softs/softs/","comments":1,"photos":[],"_id":"cm7k5rwag002cmswsbph9hb2i","content":"<h1 id=\"软件工具\"><a href=\"#软件工具\" class=\"headerlink\" title=\"软件工具\"></a>软件工具</h1><p>常用软件工具的使用指南和配置说明。</p>\n<h2 id=\"工具列表\"><a href=\"#工具列表\" class=\"headerlink\" title=\"工具列表\"></a>工具列表</h2><ol>\n<li>ComfyUI - AI 图像生成工具</li>\n<li>Clash - 网络代理工具</li>\n<li>Cursor - AI 辅助编程工具</li>\n<li>IDEA - Java IDE</li>\n<li>Windsurf - AI 编程助手</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"软件工具\"><a href=\"#软件工具\" class=\"headerlink\" title=\"软件工具\"></a>软件工具</h1><p>常用软件工具的使用指南和配置说明。</p>\n<h2 id=\"工具列表\"><a href=\"#工具列表\" class=\"headerlink\" title=\"工具列表\"></a>工具列表</h2><ol>\n<li>ComfyUI - AI 图像生成工具</li>\n<li>Clash - 网络代理工具</li>\n<li>Cursor - AI 辅助编程工具</li>\n<li>IDEA - Java IDE</li>\n<li>Windsurf - AI 编程助手</li>\n</ol>\n"},{"layout":"default","title":"Terminal","nav_order":2,"has_children":true,"parent":"Terminal","_content":"\n# Terminal\n","source":"_posts/tools/terminal/index.md","raw":"---\nlayout: default\ntitle: Terminal\nnav_order: 2\nhas_children: true\nparent: Terminal\npermalink: \"/tools/terminal/\"\n---\n\n# Terminal\n","slug":"tools/terminal/index","published":1,"date":"2025-02-23T07:43:31.770Z","updated":"2025-02-23T07:43:31.770Z","__permalink":"/tools/terminal/","comments":1,"photos":[],"_id":"cm7k5rwag002dmsws9uph6r0w","content":"<h1 id=\"Terminal\"><a href=\"#Terminal\" class=\"headerlink\" title=\"Terminal\"></a>Terminal</h1>","excerpt":"","more":"<h1 id=\"Terminal\"><a href=\"#Terminal\" class=\"headerlink\" title=\"Terminal\"></a>Terminal</h1>"},{"layout":"default","title":"Terminal","nav_order":12,"description":"命令行使用记录文档","parent":"Terminal","has_children":false,"grand_parent":"Tools","_content":"\n# 命令行使用记录文档\n\n## asdf工具(The Multiple Runtime Version Manager多运行时版本管理器)\n\nasdf 确保团队使用完全相同版本的工具，通过插件系统支持许多工具，并且作为包含在 Shell 配置中的单个 Shell 脚本的简单性和熟悉性。\nasdf 不打算成为系统包管理器。它是一个工具版本管理器。仅仅因为您可以为任何工具创建插件并使用 asdf 管理其版本，并不意味着这是该特定工具的最佳行动方案。\n\n[官网地址](https://asdf-vm.com/)\n\n```bash\n# 安装\ngit clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0\n# 配置环境变量\ncode ~/.zshrc\n. \"$HOME/.asdf/asdf.sh\"\n. \"$HOME/.asdf/completions/asdf.bash\"\n# 查询插件\nasdf plugin list all | grep python\n# 安装插件\nasdf plugin add python https://github.com/danhper/asdf-python.git\n# 安装python\nasdf install python latest\n# 设置版本\nasdf global python latest\n```\n\n## Nix工具\n\nNix，纯粹的函数式包管理器\n\nNix 是一个强大的包管理器，适用于 Linux 和其他 Unix 系统，它使包管理可靠且可重现。\n[官网地址](https://nixos.org/nix/)\n","source":"_posts/tools/terminal/terminal.md","raw":"---\nlayout: default\ntitle: Terminal\nnav_order: 12\ndescription: 命令行使用记录文档\nparent: Terminal\nhas_children: false\npermalink: \"/tools/terminal/terminal/\"\ngrand_parent: Tools\n---\n\n# 命令行使用记录文档\n\n## asdf工具(The Multiple Runtime Version Manager多运行时版本管理器)\n\nasdf 确保团队使用完全相同版本的工具，通过插件系统支持许多工具，并且作为包含在 Shell 配置中的单个 Shell 脚本的简单性和熟悉性。\nasdf 不打算成为系统包管理器。它是一个工具版本管理器。仅仅因为您可以为任何工具创建插件并使用 asdf 管理其版本，并不意味着这是该特定工具的最佳行动方案。\n\n[官网地址](https://asdf-vm.com/)\n\n```bash\n# 安装\ngit clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0\n# 配置环境变量\ncode ~/.zshrc\n. \"$HOME/.asdf/asdf.sh\"\n. \"$HOME/.asdf/completions/asdf.bash\"\n# 查询插件\nasdf plugin list all | grep python\n# 安装插件\nasdf plugin add python https://github.com/danhper/asdf-python.git\n# 安装python\nasdf install python latest\n# 设置版本\nasdf global python latest\n```\n\n## Nix工具\n\nNix，纯粹的函数式包管理器\n\nNix 是一个强大的包管理器，适用于 Linux 和其他 Unix 系统，它使包管理可靠且可重现。\n[官网地址](https://nixos.org/nix/)\n","slug":"tools/terminal/terminal","published":1,"date":"2025-02-23T07:43:31.770Z","updated":"2025-02-23T07:43:31.770Z","__permalink":"/tools/terminal/terminal/","comments":1,"photos":[],"_id":"cm7k5rwag002emswsgb9cahkm","content":"<h1 id=\"命令行使用记录文档\"><a href=\"#命令行使用记录文档\" class=\"headerlink\" title=\"命令行使用记录文档\"></a>命令行使用记录文档</h1><h2 id=\"asdf工具-The-Multiple-Runtime-Version-Manager多运行时版本管理器\"><a href=\"#asdf工具-The-Multiple-Runtime-Version-Manager多运行时版本管理器\" class=\"headerlink\" title=\"asdf工具(The Multiple Runtime Version Manager多运行时版本管理器)\"></a>asdf工具(The Multiple Runtime Version Manager多运行时版本管理器)</h2><p>asdf 确保团队使用完全相同版本的工具，通过插件系统支持许多工具，并且作为包含在 Shell 配置中的单个 Shell 脚本的简单性和熟悉性。<br>asdf 不打算成为系统包管理器。它是一个工具版本管理器。仅仅因为您可以为任何工具创建插件并使用 asdf 管理其版本，并不意味着这是该特定工具的最佳行动方案。</p>\n<p><a href=\"https://asdf-vm.com/\">官网地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0</span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量</span></span><br><span class=\"line\">code ~/.zshrc</span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/.asdf/asdf.sh&quot;</span></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/.asdf/completions/asdf.bash&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查询插件</span></span><br><span class=\"line\">asdf plugin list all | grep python</span><br><span class=\"line\"><span class=\"comment\"># 安装插件</span></span><br><span class=\"line\">asdf plugin add python https://github.com/danhper/asdf-python.git</span><br><span class=\"line\"><span class=\"comment\"># 安装python</span></span><br><span class=\"line\">asdf install python latest</span><br><span class=\"line\"><span class=\"comment\"># 设置版本</span></span><br><span class=\"line\">asdf global python latest</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nix工具\"><a href=\"#Nix工具\" class=\"headerlink\" title=\"Nix工具\"></a>Nix工具</h2><p>Nix，纯粹的函数式包管理器</p>\n<p>Nix 是一个强大的包管理器，适用于 Linux 和其他 Unix 系统，它使包管理可靠且可重现。<br><a href=\"https://nixos.org/nix/\">官网地址</a></p>\n","excerpt":"","more":"<h1 id=\"命令行使用记录文档\"><a href=\"#命令行使用记录文档\" class=\"headerlink\" title=\"命令行使用记录文档\"></a>命令行使用记录文档</h1><h2 id=\"asdf工具-The-Multiple-Runtime-Version-Manager多运行时版本管理器\"><a href=\"#asdf工具-The-Multiple-Runtime-Version-Manager多运行时版本管理器\" class=\"headerlink\" title=\"asdf工具(The Multiple Runtime Version Manager多运行时版本管理器)\"></a>asdf工具(The Multiple Runtime Version Manager多运行时版本管理器)</h2><p>asdf 确保团队使用完全相同版本的工具，通过插件系统支持许多工具，并且作为包含在 Shell 配置中的单个 Shell 脚本的简单性和熟悉性。<br>asdf 不打算成为系统包管理器。它是一个工具版本管理器。仅仅因为您可以为任何工具创建插件并使用 asdf 管理其版本，并不意味着这是该特定工具的最佳行动方案。</p>\n<p><a href=\"https://asdf-vm.com/\">官网地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0</span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量</span></span><br><span class=\"line\">code ~/.zshrc</span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/.asdf/asdf.sh&quot;</span></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/.asdf/completions/asdf.bash&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查询插件</span></span><br><span class=\"line\">asdf plugin list all | grep python</span><br><span class=\"line\"><span class=\"comment\"># 安装插件</span></span><br><span class=\"line\">asdf plugin add python https://github.com/danhper/asdf-python.git</span><br><span class=\"line\"><span class=\"comment\"># 安装python</span></span><br><span class=\"line\">asdf install python latest</span><br><span class=\"line\"><span class=\"comment\"># 设置版本</span></span><br><span class=\"line\">asdf global python latest</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nix工具\"><a href=\"#Nix工具\" class=\"headerlink\" title=\"Nix工具\"></a>Nix工具</h2><p>Nix，纯粹的函数式包管理器</p>\n<p>Nix 是一个强大的包管理器，适用于 Linux 和其他 Unix 系统，它使包管理可靠且可重现。<br><a href=\"https://nixos.org/nix/\">官网地址</a></p>\n"},{"layout":"default","title":"Devs","nav_order":3,"has_children":true,"parent":"Devs","_content":"\n# Devs\n","source":"_posts/docker/app/devs/index.md","raw":"---\nlayout: default\ntitle: Devs\nnav_order: 3\nhas_children: true\nparent: Devs\npermalink: \"/docker/app/devs/\"\n---\n\n# Devs\n","slug":"docker/app/devs/index","published":1,"date":"2025-02-23T07:43:30.572Z","updated":"2025-02-23T07:43:30.572Z","__permalink":"/docker/app/devs/","comments":1,"photos":[],"_id":"cm7k5rwag002fmsws3ycs17x7","content":"<h1 id=\"Devs\"><a href=\"#Devs\" class=\"headerlink\" title=\"Devs\"></a>Devs</h1>","excerpt":"","more":"<h1 id=\"Devs\"><a href=\"#Devs\" class=\"headerlink\" title=\"Devs\"></a>Devs</h1>"},{"layout":"default","title":"Firefox","nav_order":3,"has_children":true,"parent":"Firefox","_content":"\n# Firefox\n","source":"_posts/docker/app/firefox/index.md","raw":"---\nlayout: default\ntitle: Firefox\nnav_order: 3\nhas_children: true\nparent: Firefox\npermalink: \"/docker/app/firefox/\"\n---\n\n# Firefox\n","slug":"docker/app/firefox/index","published":1,"date":"2025-02-23T07:43:30.339Z","updated":"2025-02-23T07:43:30.340Z","__permalink":"/docker/app/firefox/","comments":1,"photos":[],"_id":"cm7k5rwag002gmsws0m5nhf9w","content":"<h1 id=\"Firefox\"><a href=\"#Firefox\" class=\"headerlink\" title=\"Firefox\"></a>Firefox</h1>","excerpt":"","more":"<h1 id=\"Firefox\"><a href=\"#Firefox\" class=\"headerlink\" title=\"Firefox\"></a>Firefox</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"firefox浏览器相关说明","parent":"Firefox","has_children":false,"grand_parent":"App","_content":"\n# firefox浏览器相关说明\n\n## 1. 安装\n\n```shell\n####### kasmweb版(推荐)\n# The container is now accessible via a browser : https://IP_OF_SERVER:6901\n# User : kasm_user\n# Password: password\ndocker run --rm -it --shm-size=512m -p 6901:6901 -e VNC_PW=password kasmweb/firefox:1.14.0\n```\n\n- mac系统的docker可用的容器镜像\n\n[仓库地址](https://github.com/jlesage/docker-firefox)\n\n```bash\n# 简单命令\ndocker run -d --name=firefox -p 5800:5800 -e LANG=zh_CN.UTF-8 -e ENABLE_CJK_FONT=1 jlesage/firefox\n\n# VNC版\ndocker run -d --name firefox -e TZ=Asia/Hong_Kong -e LANG=zh_CN.UTF-8 -e KEEP_APP_RUNNING=1 -e ENABLE_CJK_FONT=1  -e VNC_PASSWORD=admin  -p 5800:5800 -p 5900:5900 -v /data/firefox/config:/config:rw --shm-size 2g jlesage/firefox\n\n```\n\n## 相关文章\n\n- [Docker自建浏览器：让你《随时-随地》访问你内网的光猫路由Nas等Web设备](https://mp.weixin.qq.com/s/8jzfNUlqhnnjjrkbbh0o-Q)\n","source":"_posts/docker/app/firefox/firefox.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: firefox浏览器相关说明\nparent: Firefox\nhas_children: false\npermalink: \"/docker/app/firefox/firefox/\"\ngrand_parent: App\n---\n\n# firefox浏览器相关说明\n\n## 1. 安装\n\n```shell\n####### kasmweb版(推荐)\n# The container is now accessible via a browser : https://IP_OF_SERVER:6901\n# User : kasm_user\n# Password: password\ndocker run --rm -it --shm-size=512m -p 6901:6901 -e VNC_PW=password kasmweb/firefox:1.14.0\n```\n\n- mac系统的docker可用的容器镜像\n\n[仓库地址](https://github.com/jlesage/docker-firefox)\n\n```bash\n# 简单命令\ndocker run -d --name=firefox -p 5800:5800 -e LANG=zh_CN.UTF-8 -e ENABLE_CJK_FONT=1 jlesage/firefox\n\n# VNC版\ndocker run -d --name firefox -e TZ=Asia/Hong_Kong -e LANG=zh_CN.UTF-8 -e KEEP_APP_RUNNING=1 -e ENABLE_CJK_FONT=1  -e VNC_PASSWORD=admin  -p 5800:5800 -p 5900:5900 -v /data/firefox/config:/config:rw --shm-size 2g jlesage/firefox\n\n```\n\n## 相关文章\n\n- [Docker自建浏览器：让你《随时-随地》访问你内网的光猫路由Nas等Web设备](https://mp.weixin.qq.com/s/8jzfNUlqhnnjjrkbbh0o-Q)\n","slug":"docker/app/firefox/firefox","published":1,"date":"2025-02-23T07:43:30.339Z","updated":"2025-02-23T07:43:30.339Z","__permalink":"/docker/app/firefox/firefox/","comments":1,"photos":[],"_id":"cm7k5rwah002hmswsctn7bkxi","content":"<h1 id=\"firefox浏览器相关说明\"><a href=\"#firefox浏览器相关说明\" class=\"headerlink\" title=\"firefox浏览器相关说明\"></a>firefox浏览器相关说明</h1><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">###### kasmweb版(推荐)</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">The container is now accessible via a browser : https://IP_OF_SERVER:6901</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">User : kasm_user</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Password: password</span></span><br><span class=\"line\">docker run --rm -it --shm-size=512m -p 6901:6901 -e VNC_PW=password kasmweb/firefox:1.14.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mac系统的docker可用的容器镜像</li>\n</ul>\n<p><a href=\"https://github.com/jlesage/docker-firefox\">仓库地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单命令</span></span><br><span class=\"line\">docker run -d --name=firefox -p 5800:5800 -e LANG=zh_CN.UTF-8 -e ENABLE_CJK_FONT=1 jlesage/firefox</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VNC版</span></span><br><span class=\"line\">docker run -d --name firefox -e TZ=Asia/Hong_Kong -e LANG=zh_CN.UTF-8 -e KEEP_APP_RUNNING=1 -e ENABLE_CJK_FONT=1  -e VNC_PASSWORD=admin  -p 5800:5800 -p 5900:5900 -v /data/firefox/config:/config:rw --shm-size 2g jlesage/firefox</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/8jzfNUlqhnnjjrkbbh0o-Q\">Docker自建浏览器：让你《随时-随地》访问你内网的光猫路由Nas等Web设备</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"firefox浏览器相关说明\"><a href=\"#firefox浏览器相关说明\" class=\"headerlink\" title=\"firefox浏览器相关说明\"></a>firefox浏览器相关说明</h1><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">###### kasmweb版(推荐)</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">The container is now accessible via a browser : https://IP_OF_SERVER:6901</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">User : kasm_user</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Password: password</span></span><br><span class=\"line\">docker run --rm -it --shm-size=512m -p 6901:6901 -e VNC_PW=password kasmweb/firefox:1.14.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mac系统的docker可用的容器镜像</li>\n</ul>\n<p><a href=\"https://github.com/jlesage/docker-firefox\">仓库地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单命令</span></span><br><span class=\"line\">docker run -d --name=firefox -p 5800:5800 -e LANG=zh_CN.UTF-8 -e ENABLE_CJK_FONT=1 jlesage/firefox</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VNC版</span></span><br><span class=\"line\">docker run -d --name firefox -e TZ=Asia/Hong_Kong -e LANG=zh_CN.UTF-8 -e KEEP_APP_RUNNING=1 -e ENABLE_CJK_FONT=1  -e VNC_PASSWORD=admin  -p 5800:5800 -p 5900:5900 -v /data/firefox/config:/config:rw --shm-size 2g jlesage/firefox</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/8jzfNUlqhnnjjrkbbh0o-Q\">Docker自建浏览器：让你《随时-随地》访问你内网的光猫路由Nas等Web设备</a></li>\n</ul>\n"},{"layout":"default","title":"Neko","nav_order":3,"has_children":true,"parent":"Neko","_content":"\n# Neko\n","source":"_posts/docker/app/neko/index.md","raw":"---\nlayout: default\ntitle: Neko\nnav_order: 3\nhas_children: true\nparent: Neko\npermalink: \"/docker/app/neko/\"\n---\n\n# Neko\n","slug":"docker/app/neko/index","published":1,"date":"2025-02-23T07:43:31.079Z","updated":"2025-02-23T07:43:31.079Z","__permalink":"/docker/app/neko/","comments":1,"photos":[],"_id":"cm7k5rwah002imswsf5wk8cgv","content":"<h1 id=\"Neko\"><a href=\"#Neko\" class=\"headerlink\" title=\"Neko\"></a>Neko</h1>","excerpt":"","more":"<h1 id=\"Neko\"><a href=\"#Neko\" class=\"headerlink\" title=\"Neko\"></a>Neko</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"neko","parent":"Neko","has_children":false,"grand_parent":"App","_content":"\n# neko\n\n[仓库地址](https://github.com/m1k1o/neko.git)\n","source":"_posts/docker/app/neko/neko.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: neko\nparent: Neko\nhas_children: false\npermalink: \"/docker/app/neko/neko/\"\ngrand_parent: App\n---\n\n# neko\n\n[仓库地址](https://github.com/m1k1o/neko.git)\n","slug":"docker/app/neko/neko","published":1,"date":"2025-02-23T07:43:31.079Z","updated":"2025-02-23T07:43:31.079Z","__permalink":"/docker/app/neko/neko/","comments":1,"photos":[],"_id":"cm7k5rwah002jmsws1aomamog","content":"<h1 id=\"neko\"><a href=\"#neko\" class=\"headerlink\" title=\"neko\"></a>neko</h1><p><a href=\"https://github.com/m1k1o/neko.git\">仓库地址</a></p>\n","excerpt":"","more":"<h1 id=\"neko\"><a href=\"#neko\" class=\"headerlink\" title=\"neko\"></a>neko</h1><p><a href=\"https://github.com/m1k1o/neko.git\">仓库地址</a></p>\n"},{"layout":"default","title":"Networks","nav_order":3,"has_children":true,"parent":"Networks","_content":"\n# Networks\n","source":"_posts/docker/app/networks/index.md","raw":"---\nlayout: default\ntitle: Networks\nnav_order: 3\nhas_children: true\nparent: Networks\npermalink: \"/docker/app/networks/\"\n---\n\n# Networks\n","slug":"docker/app/networks/index","published":1,"date":"2025-02-23T07:43:31.076Z","updated":"2025-02-23T07:43:31.076Z","__permalink":"/docker/app/networks/","comments":1,"photos":[],"_id":"cm7k5rwah002kmsws9ex7gzyg","content":"<h1 id=\"Networks\"><a href=\"#Networks\" class=\"headerlink\" title=\"Networks\"></a>Networks</h1>","excerpt":"","more":"<h1 id=\"Networks\"><a href=\"#Networks\" class=\"headerlink\" title=\"Networks\"></a>Networks</h1>"},{"layout":"default","title":"Os","nav_order":3,"has_children":true,"parent":"Os","_content":"\n# Os\n","source":"_posts/docker/app/os/index.md","raw":"---\nlayout: default\ntitle: Os\nnav_order: 3\nhas_children: true\nparent: Os\npermalink: \"/docker/app/os/\"\n---\n\n# Os\n","slug":"docker/app/os/index","published":1,"date":"2025-02-23T07:43:31.078Z","updated":"2025-02-23T07:43:31.078Z","__permalink":"/docker/app/os/","comments":1,"photos":[],"_id":"cm7k5rwah002lmsws53zcbvo1","content":"<h1 id=\"Os\"><a href=\"#Os\" class=\"headerlink\" title=\"Os\"></a>Os</h1>","excerpt":"","more":"<h1 id=\"Os\"><a href=\"#Os\" class=\"headerlink\" title=\"Os\"></a>Os</h1>"},{"layout":"default","title":"Upsnap","nav_order":3,"has_children":true,"parent":"Upsnap","_content":"\n# Upsnap\n","source":"_posts/docker/app/upSnap/index.md","raw":"---\nlayout: default\ntitle: Upsnap\nnav_order: 3\nhas_children: true\nparent: Upsnap\npermalink: \"/docker/app/upsnap/\"\n---\n\n# Upsnap\n","slug":"docker/app/upSnap/index","published":1,"date":"2025-02-23T07:43:31.080Z","updated":"2025-02-23T07:43:31.080Z","__permalink":"/docker/app/upsnap/","comments":1,"photos":[],"_id":"cm7k5rwah002mmsws69is74u0","content":"<h1 id=\"Upsnap\"><a href=\"#Upsnap\" class=\"headerlink\" title=\"Upsnap\"></a>Upsnap</h1>","excerpt":"","more":"<h1 id=\"Upsnap\"><a href=\"#Upsnap\" class=\"headerlink\" title=\"Upsnap\"></a>Upsnap</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"UpSnap使用记录","parent":"Upsnap","has_children":false,"grand_parent":"App","_content":"\n# UpSnap使用记录\n\n[代码仓库](https://github.com/seriousm4x/UpSnap.git)\n\n局域网唤醒工具\n\n```bash\ncd UpSnap\ndocker compose -f \"docker-compose.yml\" up -d --build\n```\n","source":"_posts/docker/app/upSnap/upSnap.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: UpSnap使用记录\nparent: Upsnap\nhas_children: false\npermalink: \"/docker/app/upsnap/upsnap/\"\ngrand_parent: App\n---\n\n# UpSnap使用记录\n\n[代码仓库](https://github.com/seriousm4x/UpSnap.git)\n\n局域网唤醒工具\n\n```bash\ncd UpSnap\ndocker compose -f \"docker-compose.yml\" up -d --build\n```\n","slug":"docker/app/upSnap/upSnap","published":1,"date":"2025-02-23T07:43:31.079Z","updated":"2025-02-23T07:43:31.080Z","__permalink":"/docker/app/upsnap/upsnap/","comments":1,"photos":[],"_id":"cm7k5rwah002nmswsb1axbll5","content":"<h1 id=\"UpSnap使用记录\"><a href=\"#UpSnap使用记录\" class=\"headerlink\" title=\"UpSnap使用记录\"></a>UpSnap使用记录</h1><p><a href=\"https://github.com/seriousm4x/UpSnap.git\">代码仓库</a></p>\n<p>局域网唤醒工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> UpSnap</span><br><span class=\"line\">docker compose -f <span class=\"string\">&quot;docker-compose.yml&quot;</span> up -d --build</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"UpSnap使用记录\"><a href=\"#UpSnap使用记录\" class=\"headerlink\" title=\"UpSnap使用记录\"></a>UpSnap使用记录</h1><p><a href=\"https://github.com/seriousm4x/UpSnap.git\">代码仓库</a></p>\n<p>局域网唤醒工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> UpSnap</span><br><span class=\"line\">docker compose -f <span class=\"string\">&quot;docker-compose.yml&quot;</span> up -d --build</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Ai","nav_order":3,"has_children":true,"parent":"Ai","_content":"\n# Ai\n","source":"_posts/docker/dev_utls/ai/index.md","raw":"---\nlayout: default\ntitle: Ai\nnav_order: 3\nhas_children: true\nparent: Ai\npermalink: \"/docker/dev_utls/ai/\"\n---\n\n# Ai\n","slug":"docker/dev_utls/ai/index","published":1,"date":"2025-02-23T07:43:31.171Z","updated":"2025-02-23T07:43:31.171Z","__permalink":"/docker/dev_utls/ai/","comments":1,"photos":[],"_id":"cm7k5rwah002omsws4s4g2y82","content":"<h1 id=\"Ai\"><a href=\"#Ai\" class=\"headerlink\" title=\"Ai\"></a>Ai</h1>","excerpt":"","more":"<h1 id=\"Ai\"><a href=\"#Ai\" class=\"headerlink\" title=\"Ai\"></a>Ai</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"docker容器中部署系统相关文档","parent":"Os","has_children":false,"grand_parent":"App","_content":"\n# docker容器中部署系统相关文档\n\n## win系统\n\n- 方式一: `docker-compose.yml`方式\n- 方式二: `docker run`方式\n  \n  ```shell\n  docker run -it --rm -p 8006:8006 --device=/dev/kvm --cap-add NET_ADMIN --stop-timeout 120 dockurr/windows\n  ```\n\n- 相关文章\n  - [开源地址](https://github.com/dockur/windows)\n\n## Linux中安装可视化虚拟机\n\n- 测试版\n  \n[参考文章](https://github.com/quickemu-project/quickemu/wiki/01-Installation)\n[参考文章](https://mp.weixin.qq.com/s/W99irRFN5geQ5wHr2i4y2w)\n\n```bash\n# 没成功...可能系统不支持\nyum install -y dnf\n\nsudo dnf install bash coreutils curl edk2-tools genisoimage grep jq mesa-demos pciutils procps python3 qemu sed socat spice-gtk-tools swtpm unzip usbutils util-linux xdg-user-dirs xrandr zsync\n\ngit clone https://github.com/quickemu-project/quickemu.git\n\n```\n","source":"_posts/docker/app/os/os.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: docker容器中部署系统相关文档\nparent: Os\nhas_children: false\npermalink: \"/docker/app/os/os/\"\ngrand_parent: App\n---\n\n# docker容器中部署系统相关文档\n\n## win系统\n\n- 方式一: `docker-compose.yml`方式\n- 方式二: `docker run`方式\n  \n  ```shell\n  docker run -it --rm -p 8006:8006 --device=/dev/kvm --cap-add NET_ADMIN --stop-timeout 120 dockurr/windows\n  ```\n\n- 相关文章\n  - [开源地址](https://github.com/dockur/windows)\n\n## Linux中安装可视化虚拟机\n\n- 测试版\n  \n[参考文章](https://github.com/quickemu-project/quickemu/wiki/01-Installation)\n[参考文章](https://mp.weixin.qq.com/s/W99irRFN5geQ5wHr2i4y2w)\n\n```bash\n# 没成功...可能系统不支持\nyum install -y dnf\n\nsudo dnf install bash coreutils curl edk2-tools genisoimage grep jq mesa-demos pciutils procps python3 qemu sed socat spice-gtk-tools swtpm unzip usbutils util-linux xdg-user-dirs xrandr zsync\n\ngit clone https://github.com/quickemu-project/quickemu.git\n\n```\n","slug":"docker/app/os/os","published":1,"date":"2025-02-23T07:43:31.078Z","updated":"2025-02-23T07:43:31.078Z","__permalink":"/docker/app/os/os/","comments":1,"photos":[],"_id":"cm7k5rwah002pmsws9oxa85yu","content":"<h1 id=\"docker容器中部署系统相关文档\"><a href=\"#docker容器中部署系统相关文档\" class=\"headerlink\" title=\"docker容器中部署系统相关文档\"></a>docker容器中部署系统相关文档</h1><h2 id=\"win系统\"><a href=\"#win系统\" class=\"headerlink\" title=\"win系统\"></a>win系统</h2><ul>\n<li><p>方式一: <code>docker-compose.yml</code>方式</p>\n</li>\n<li><p>方式二: <code>docker run</code>方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -p 8006:8006 --device=/dev/kvm --cap-add NET_ADMIN --stop-timeout 120 dockurr/windows</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>相关文章</p>\n<ul>\n<li><a href=\"https://github.com/dockur/windows\">开源地址</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux中安装可视化虚拟机\"><a href=\"#Linux中安装可视化虚拟机\" class=\"headerlink\" title=\"Linux中安装可视化虚拟机\"></a>Linux中安装可视化虚拟机</h2><ul>\n<li>测试版</li>\n</ul>\n<p><a href=\"https://github.com/quickemu-project/quickemu/wiki/01-Installation\">参考文章</a><br><a href=\"https://mp.weixin.qq.com/s/W99irRFN5geQ5wHr2i4y2w\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 没成功...可能系统不支持</span></span><br><span class=\"line\">yum install -y dnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> dnf install bash coreutils curl edk2-tools genisoimage grep jq mesa-demos pciutils procps python3 qemu sed socat spice-gtk-tools swtpm unzip usbutils util-linux xdg-user-dirs xrandr zsync</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/quickemu-project/quickemu.git</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker容器中部署系统相关文档\"><a href=\"#docker容器中部署系统相关文档\" class=\"headerlink\" title=\"docker容器中部署系统相关文档\"></a>docker容器中部署系统相关文档</h1><h2 id=\"win系统\"><a href=\"#win系统\" class=\"headerlink\" title=\"win系统\"></a>win系统</h2><ul>\n<li><p>方式一: <code>docker-compose.yml</code>方式</p>\n</li>\n<li><p>方式二: <code>docker run</code>方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -p 8006:8006 --device=/dev/kvm --cap-add NET_ADMIN --stop-timeout 120 dockurr/windows</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>相关文章</p>\n<ul>\n<li><a href=\"https://github.com/dockur/windows\">开源地址</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux中安装可视化虚拟机\"><a href=\"#Linux中安装可视化虚拟机\" class=\"headerlink\" title=\"Linux中安装可视化虚拟机\"></a>Linux中安装可视化虚拟机</h2><ul>\n<li>测试版</li>\n</ul>\n<p><a href=\"https://github.com/quickemu-project/quickemu/wiki/01-Installation\">参考文章</a><br><a href=\"https://mp.weixin.qq.com/s/W99irRFN5geQ5wHr2i4y2w\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 没成功...可能系统不支持</span></span><br><span class=\"line\">yum install -y dnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> dnf install bash coreutils curl edk2-tools genisoimage grep jq mesa-demos pciutils procps python3 qemu sed socat spice-gtk-tools swtpm unzip usbutils util-linux xdg-user-dirs xrandr zsync</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/quickemu-project/quickemu.git</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":13,"description":"开发容器相关记录","parent":"Dev-container","has_children":false,"grand_parent":"Dev Utls","_content":"\n# 开发容器相关记录\n\nps: 在远程容器中进行开发，或者在本地开发在远程容器中运行和debug\n\n## 在idea中使用\n\n- docker compose配置调整\n  - 在modify option中勾选project-name可以把相同项目名的应用放到一个compose里去\n    - 生成的命令为`docker compose -f ./docker-compose.yml -p ma-compose up -d`\n      - 使用--build选项：在运行docker-compose up命令时，添加--build选项可以确保每次都重新构建镜像。\n        - eg: `docker compose -f ./docker-compose.yml -p ma-compose up -d --build`\n  \n## dev container\n\n- 解决域名无法解析的问题\n  - code /etc/resolv.conf\n\n```bash\nnameserver 127.0.0.1\nnameserver 127.0.0.11\n# 以下两个配置来源于当前连接的WiFi\nnameserver 119.29.29.29\nnameserver 223.5.5.5\n\n```\n\n## docker忽略文件的使用\n\n- 文件名:[.dockerignore]与Dockerfile文件同级\n\n```bash\n*\n!dist\n!wap.conf\n\n```\n\n## devcontainer.json的使用\n\n- 关于\"SSH_AUTH_SOCK\"配置使用记录[对应的devcontainer配置](./example/.devcontainer/devcontainer.json)\n  - \"SSH_AUTH_SOCK\": $SSH_AUTH_SOCK, // 这个配置不生效的话，看看是不是需要在`ssh config`文件（~/.ssh/config）中配置`ForwardAgent yes`才行\n  \n","source":"_posts/docker/dev_utls/dev-container/dev-container.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: 开发容器相关记录\nparent: Dev-container\nhas_children: false\npermalink: \"/docker/dev_utls/dev-container/dev-container/\"\ngrand_parent: Dev Utls\n---\n\n# 开发容器相关记录\n\nps: 在远程容器中进行开发，或者在本地开发在远程容器中运行和debug\n\n## 在idea中使用\n\n- docker compose配置调整\n  - 在modify option中勾选project-name可以把相同项目名的应用放到一个compose里去\n    - 生成的命令为`docker compose -f ./docker-compose.yml -p ma-compose up -d`\n      - 使用--build选项：在运行docker-compose up命令时，添加--build选项可以确保每次都重新构建镜像。\n        - eg: `docker compose -f ./docker-compose.yml -p ma-compose up -d --build`\n  \n## dev container\n\n- 解决域名无法解析的问题\n  - code /etc/resolv.conf\n\n```bash\nnameserver 127.0.0.1\nnameserver 127.0.0.11\n# 以下两个配置来源于当前连接的WiFi\nnameserver 119.29.29.29\nnameserver 223.5.5.5\n\n```\n\n## docker忽略文件的使用\n\n- 文件名:[.dockerignore]与Dockerfile文件同级\n\n```bash\n*\n!dist\n!wap.conf\n\n```\n\n## devcontainer.json的使用\n\n- 关于\"SSH_AUTH_SOCK\"配置使用记录[对应的devcontainer配置](./example/.devcontainer/devcontainer.json)\n  - \"SSH_AUTH_SOCK\": $SSH_AUTH_SOCK, // 这个配置不生效的话，看看是不是需要在`ssh config`文件（~/.ssh/config）中配置`ForwardAgent yes`才行\n  \n","slug":"docker/dev_utls/dev-container/dev-container","published":1,"date":"2025-02-23T07:43:31.170Z","updated":"2025-02-23T07:43:31.170Z","__permalink":"/docker/dev_utls/dev-container/dev-container/","comments":1,"photos":[],"_id":"cm7k5rwah002qmsws9u9bfj7n","content":"<h1 id=\"开发容器相关记录\"><a href=\"#开发容器相关记录\" class=\"headerlink\" title=\"开发容器相关记录\"></a>开发容器相关记录</h1><p>ps: 在远程容器中进行开发，或者在本地开发在远程容器中运行和debug</p>\n<h2 id=\"在idea中使用\"><a href=\"#在idea中使用\" class=\"headerlink\" title=\"在idea中使用\"></a>在idea中使用</h2><ul>\n<li>docker compose配置调整<ul>\n<li>在modify option中勾选project-name可以把相同项目名的应用放到一个compose里去<ul>\n<li>生成的命令为<code>docker compose -f ./docker-compose.yml -p ma-compose up -d</code><ul>\n<li>使用–build选项：在运行docker-compose up命令时，添加–build选项可以确保每次都重新构建镜像。<ul>\n<li>eg: <code>docker compose -f ./docker-compose.yml -p ma-compose up -d --build</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dev-container\"><a href=\"#dev-container\" class=\"headerlink\" title=\"dev container\"></a>dev container</h2><ul>\n<li>解决域名无法解析的问题<ul>\n<li>code &#x2F;etc&#x2F;resolv.conf</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nameserver 127.0.0.1</span><br><span class=\"line\">nameserver 127.0.0.11</span><br><span class=\"line\"><span class=\"comment\"># 以下两个配置来源于当前连接的WiFi</span></span><br><span class=\"line\">nameserver 119.29.29.29</span><br><span class=\"line\">nameserver 223.5.5.5</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker忽略文件的使用\"><a href=\"#docker忽略文件的使用\" class=\"headerlink\" title=\"docker忽略文件的使用\"></a>docker忽略文件的使用</h2><ul>\n<li>文件名:[.dockerignore]与Dockerfile文件同级</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*</span><br><span class=\"line\">!dist</span><br><span class=\"line\">!wap.conf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"devcontainer-json的使用\"><a href=\"#devcontainer-json的使用\" class=\"headerlink\" title=\"devcontainer.json的使用\"></a>devcontainer.json的使用</h2><ul>\n<li>关于”SSH_AUTH_SOCK”配置使用记录<a href=\"./example/.devcontainer/devcontainer.json\">对应的devcontainer配置</a><ul>\n<li>“SSH_AUTH_SOCK”: $SSH_AUTH_SOCK, &#x2F;&#x2F; 这个配置不生效的话，看看是不是需要在<code>ssh config</code>文件（~&#x2F;.ssh&#x2F;config）中配置<code>ForwardAgent yes</code>才行</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"开发容器相关记录\"><a href=\"#开发容器相关记录\" class=\"headerlink\" title=\"开发容器相关记录\"></a>开发容器相关记录</h1><p>ps: 在远程容器中进行开发，或者在本地开发在远程容器中运行和debug</p>\n<h2 id=\"在idea中使用\"><a href=\"#在idea中使用\" class=\"headerlink\" title=\"在idea中使用\"></a>在idea中使用</h2><ul>\n<li>docker compose配置调整<ul>\n<li>在modify option中勾选project-name可以把相同项目名的应用放到一个compose里去<ul>\n<li>生成的命令为<code>docker compose -f ./docker-compose.yml -p ma-compose up -d</code><ul>\n<li>使用–build选项：在运行docker-compose up命令时，添加–build选项可以确保每次都重新构建镜像。<ul>\n<li>eg: <code>docker compose -f ./docker-compose.yml -p ma-compose up -d --build</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dev-container\"><a href=\"#dev-container\" class=\"headerlink\" title=\"dev container\"></a>dev container</h2><ul>\n<li>解决域名无法解析的问题<ul>\n<li>code &#x2F;etc&#x2F;resolv.conf</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nameserver 127.0.0.1</span><br><span class=\"line\">nameserver 127.0.0.11</span><br><span class=\"line\"><span class=\"comment\"># 以下两个配置来源于当前连接的WiFi</span></span><br><span class=\"line\">nameserver 119.29.29.29</span><br><span class=\"line\">nameserver 223.5.5.5</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker忽略文件的使用\"><a href=\"#docker忽略文件的使用\" class=\"headerlink\" title=\"docker忽略文件的使用\"></a>docker忽略文件的使用</h2><ul>\n<li>文件名:[.dockerignore]与Dockerfile文件同级</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*</span><br><span class=\"line\">!dist</span><br><span class=\"line\">!wap.conf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"devcontainer-json的使用\"><a href=\"#devcontainer-json的使用\" class=\"headerlink\" title=\"devcontainer.json的使用\"></a>devcontainer.json的使用</h2><ul>\n<li>关于”SSH_AUTH_SOCK”配置使用记录<a href=\"./example/.devcontainer/devcontainer.json\">对应的devcontainer配置</a><ul>\n<li>“SSH_AUTH_SOCK”: $SSH_AUTH_SOCK, &#x2F;&#x2F; 这个配置不生效的话，看看是不是需要在<code>ssh config</code>文件（~&#x2F;.ssh&#x2F;config）中配置<code>ForwardAgent yes</code>才行</li>\n</ul>\n</li>\n</ul>\n"},{"layout":"default","title":"Dev-container","nav_order":3,"has_children":true,"parent":"Dev-container","_content":"\n# Dev-container\n","source":"_posts/docker/dev_utls/dev-container/index.md","raw":"---\nlayout: default\ntitle: Dev-container\nnav_order: 3\nhas_children: true\nparent: Dev-container\npermalink: \"/docker/dev_utls/dev-container/\"\n---\n\n# Dev-container\n","slug":"docker/dev_utls/dev-container/index","published":1,"date":"2025-02-23T07:43:31.170Z","updated":"2025-02-23T07:43:31.170Z","__permalink":"/docker/dev_utls/dev-container/","comments":1,"photos":[],"_id":"cm7k5rwah002rmswsa2dw1jcd","content":"<h1 id=\"Dev-container\"><a href=\"#Dev-container\" class=\"headerlink\" title=\"Dev-container\"></a>Dev-container</h1>","excerpt":"","more":"<h1 id=\"Dev-container\"><a href=\"#Dev-container\" class=\"headerlink\" title=\"Dev-container\"></a>Dev-container</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"git相关使用","parent":"Git","has_children":false,"grand_parent":"Dev Utls","_content":"\n# git相关使用\n\n## git升级\n\n- [相关链接](https://packages.endpointdev.com/)\n- [相关链接](https://www.endpointdev.com/blog/2021/12/installing-git-2-on-centos-7/#:~:text=lks%20you%20step%20b)\n\n```bash\n# 检查git版本\ngit --version\n# git version 1.8.3.1\n\n# 查看git安装位置\nwhich git\n# /usr/bin/git\n\n# 确保它是使用 yum 从 RPM 安装\nrpm -qi git\n# Name        : git\n# Version     : 1.8.3.1\n# Release     : 23.el7_8\n# Source RPM  : git-1.8.3.1-23.el7_8.src.rpm\n# Build Date  : Thu 28 May 2020 08:37:56 PM UTC\n# Build Host  : x86-02.bsys.centos.org\n# Packager    : CentOS BuildSystem <http://bugs.centos.org>\n# Vendor      : CentOS\n\n# 添加 End Point Yum 存储库\nsudo yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm\n\n# 安装或升级 git\nsudo yum install -y git\n\n# 如果您没有看到可用的新 git 版本，则可能需要使用以下命令清除 Yum 缓存：\nsudo yum clean all\n\n\n## 问题\n# 如果安装不成功可尝试先卸载git(也可能不是yum安装的git，就需要其他方式卸载了)\nsudo yum remove git\nsudo yum remove git-*\n\n```\n","source":"_posts/docker/dev_utls/git/git.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: git相关使用\nparent: Git\nhas_children: false\npermalink: \"/docker/dev_utls/git/git/\"\ngrand_parent: Dev Utls\n---\n\n# git相关使用\n\n## git升级\n\n- [相关链接](https://packages.endpointdev.com/)\n- [相关链接](https://www.endpointdev.com/blog/2021/12/installing-git-2-on-centos-7/#:~:text=lks%20you%20step%20b)\n\n```bash\n# 检查git版本\ngit --version\n# git version 1.8.3.1\n\n# 查看git安装位置\nwhich git\n# /usr/bin/git\n\n# 确保它是使用 yum 从 RPM 安装\nrpm -qi git\n# Name        : git\n# Version     : 1.8.3.1\n# Release     : 23.el7_8\n# Source RPM  : git-1.8.3.1-23.el7_8.src.rpm\n# Build Date  : Thu 28 May 2020 08:37:56 PM UTC\n# Build Host  : x86-02.bsys.centos.org\n# Packager    : CentOS BuildSystem <http://bugs.centos.org>\n# Vendor      : CentOS\n\n# 添加 End Point Yum 存储库\nsudo yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm\n\n# 安装或升级 git\nsudo yum install -y git\n\n# 如果您没有看到可用的新 git 版本，则可能需要使用以下命令清除 Yum 缓存：\nsudo yum clean all\n\n\n## 问题\n# 如果安装不成功可尝试先卸载git(也可能不是yum安装的git，就需要其他方式卸载了)\nsudo yum remove git\nsudo yum remove git-*\n\n```\n","slug":"docker/dev_utls/git/git","published":1,"date":"2025-02-23T07:43:31.173Z","updated":"2025-02-23T07:43:31.173Z","__permalink":"/docker/dev_utls/git/git/","comments":1,"photos":[],"_id":"cm7k5rwai002smsws2s7cblxn","content":"<h1 id=\"git相关使用\"><a href=\"#git相关使用\" class=\"headerlink\" title=\"git相关使用\"></a>git相关使用</h1><h2 id=\"git升级\"><a href=\"#git升级\" class=\"headerlink\" title=\"git升级\"></a>git升级</h2><ul>\n<li><a href=\"https://packages.endpointdev.com/\">相关链接</a></li>\n<li><a href=\"https://www.endpointdev.com/blog/2021/12/installing-git-2-on-centos-7/#:~:text=lks%20you%20step%20b\">相关链接</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查git版本</span></span><br><span class=\"line\">git --version</span><br><span class=\"line\"><span class=\"comment\"># git version 1.8.3.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看git安装位置</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> git</span><br><span class=\"line\"><span class=\"comment\"># /usr/bin/git</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确保它是使用 yum 从 RPM 安装</span></span><br><span class=\"line\">rpm -qi git</span><br><span class=\"line\"><span class=\"comment\"># Name        : git</span></span><br><span class=\"line\"><span class=\"comment\"># Version     : 1.8.3.1</span></span><br><span class=\"line\"><span class=\"comment\"># Release     : 23.el7_8</span></span><br><span class=\"line\"><span class=\"comment\"># Source RPM  : git-1.8.3.1-23.el7_8.src.rpm</span></span><br><span class=\"line\"><span class=\"comment\"># Build Date  : Thu 28 May 2020 08:37:56 PM UTC</span></span><br><span class=\"line\"><span class=\"comment\"># Build Host  : x86-02.bsys.centos.org</span></span><br><span class=\"line\"><span class=\"comment\"># Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Vendor      : CentOS</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 End Point Yum 存储库</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装或升级 git</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install -y git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果您没有看到可用的新 git 版本，则可能需要使用以下命令清除 Yum 缓存：</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum clean all</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 问题</span></span><br><span class=\"line\"><span class=\"comment\"># 如果安装不成功可尝试先卸载git(也可能不是yum安装的git，就需要其他方式卸载了)</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum remove git</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum remove git-*</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"git相关使用\"><a href=\"#git相关使用\" class=\"headerlink\" title=\"git相关使用\"></a>git相关使用</h1><h2 id=\"git升级\"><a href=\"#git升级\" class=\"headerlink\" title=\"git升级\"></a>git升级</h2><ul>\n<li><a href=\"https://packages.endpointdev.com/\">相关链接</a></li>\n<li><a href=\"https://www.endpointdev.com/blog/2021/12/installing-git-2-on-centos-7/#:~:text=lks%20you%20step%20b\">相关链接</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查git版本</span></span><br><span class=\"line\">git --version</span><br><span class=\"line\"><span class=\"comment\"># git version 1.8.3.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看git安装位置</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> git</span><br><span class=\"line\"><span class=\"comment\"># /usr/bin/git</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确保它是使用 yum 从 RPM 安装</span></span><br><span class=\"line\">rpm -qi git</span><br><span class=\"line\"><span class=\"comment\"># Name        : git</span></span><br><span class=\"line\"><span class=\"comment\"># Version     : 1.8.3.1</span></span><br><span class=\"line\"><span class=\"comment\"># Release     : 23.el7_8</span></span><br><span class=\"line\"><span class=\"comment\"># Source RPM  : git-1.8.3.1-23.el7_8.src.rpm</span></span><br><span class=\"line\"><span class=\"comment\"># Build Date  : Thu 28 May 2020 08:37:56 PM UTC</span></span><br><span class=\"line\"><span class=\"comment\"># Build Host  : x86-02.bsys.centos.org</span></span><br><span class=\"line\"><span class=\"comment\"># Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Vendor      : CentOS</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 End Point Yum 存储库</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装或升级 git</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install -y git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果您没有看到可用的新 git 版本，则可能需要使用以下命令清除 Yum 缓存：</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum clean all</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 问题</span></span><br><span class=\"line\"><span class=\"comment\"># 如果安装不成功可尝试先卸载git(也可能不是yum安装的git，就需要其他方式卸载了)</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum remove git</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum remove git-*</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Serverless","nav_order":3,"has_children":true,"parent":"Serverless","_content":"\n# Serverless\n","source":"_posts/docker/dev_utls/serverless/index.md","raw":"---\nlayout: default\ntitle: Serverless\nnav_order: 3\nhas_children: true\nparent: Serverless\npermalink: \"/docker/dev_utls/serverless/\"\n---\n\n# Serverless\n","slug":"docker/dev_utls/serverless/index","published":1,"date":"2025-02-23T07:43:31.139Z","updated":"2025-02-23T07:43:31.139Z","__permalink":"/docker/dev_utls/serverless/","comments":1,"photos":[],"_id":"cm7k5rwai002tmswsf24g2b38","content":"<h1 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h1>","excerpt":"","more":"<h1 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h1>"},{"layout":"default","title":"Git","nav_order":3,"has_children":true,"parent":"Git","_content":"\n# Git\n","source":"_posts/docker/dev_utls/git/index.md","raw":"---\nlayout: default\ntitle: Git\nnav_order: 3\nhas_children: true\nparent: Git\npermalink: \"/docker/dev_utls/git/\"\n---\n\n# Git\n","slug":"docker/dev_utls/git/index","published":1,"date":"2025-02-23T07:43:31.173Z","updated":"2025-02-23T07:43:31.173Z","__permalink":"/docker/dev_utls/git/","comments":1,"photos":[],"_id":"cm7k5rwai002umsws0mtvfh1q","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1>","excerpt":"","more":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"记录","parent":"Serverless","has_children":false,"grand_parent":"Dev Utls","_content":"\n# 记录\n\n## 安装\n\n```shell\nsudo yarn global add @serverless-devs/s\n\n# or\ncurl -o- -L http://cli.so/install.sh | bash\n\n# 查看版本\nsudo s -v\n```\n\n## 配置\n\n```shell\ns config add\n\n# or\ns config add --AccessKeyID LTAI4G4cwJkK4Rza6xd9**** --AccessKeySecret  eCc0GxSpzfq1DVspnqqd6nmYNN**** --AccountID 188077086902**** --access ***\n\n# or \ns config add --AccessKeyID ${{secrets.AccessKeyID}} --AccessKeySecret ${{secrets.AccessKeySecret}} -a default -f\n```\n\n## 部署\n\n```shell\ns deploy\n```\n","source":"_posts/docker/dev_utls/serverless/serverless.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: 记录\nparent: Serverless\nhas_children: false\npermalink: \"/docker/dev_utls/serverless/serverless/\"\ngrand_parent: Dev Utls\n---\n\n# 记录\n\n## 安装\n\n```shell\nsudo yarn global add @serverless-devs/s\n\n# or\ncurl -o- -L http://cli.so/install.sh | bash\n\n# 查看版本\nsudo s -v\n```\n\n## 配置\n\n```shell\ns config add\n\n# or\ns config add --AccessKeyID LTAI4G4cwJkK4Rza6xd9**** --AccessKeySecret  eCc0GxSpzfq1DVspnqqd6nmYNN**** --AccountID 188077086902**** --access ***\n\n# or \ns config add --AccessKeyID ${{secrets.AccessKeyID}} --AccessKeySecret ${{secrets.AccessKeySecret}} -a default -f\n```\n\n## 部署\n\n```shell\ns deploy\n```\n","slug":"docker/dev_utls/serverless/serverless","published":1,"date":"2025-02-23T07:43:31.140Z","updated":"2025-02-23T07:43:31.140Z","__permalink":"/docker/dev_utls/serverless/serverless/","comments":1,"photos":[],"_id":"cm7k5rwai002vmswsabep9psv","content":"<h1 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yarn global add @serverless-devs/s</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\">curl -o- -L http://cli.so/install.sh | bash</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看版本</span></span><br><span class=\"line\">sudo s -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s config add</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\">s config add --AccessKeyID LTAI4G4cwJkK4Rza6xd9**** --AccessKeySecret  eCc0GxSpzfq1DVspnqqd6nmYNN**** --AccountID 188077086902**** --access ***</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span> </span><br><span class=\"line\">s config add --AccessKeyID $&#123;&#123;secrets.AccessKeyID&#125;&#125; --AccessKeySecret $&#123;&#123;secrets.AccessKeySecret&#125;&#125; -a default -f</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s deploy</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yarn global add @serverless-devs/s</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\">curl -o- -L http://cli.so/install.sh | bash</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看版本</span></span><br><span class=\"line\">sudo s -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s config add</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\">s config add --AccessKeyID LTAI4G4cwJkK4Rza6xd9**** --AccessKeySecret  eCc0GxSpzfq1DVspnqqd6nmYNN**** --AccountID 188077086902**** --access ***</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span> </span><br><span class=\"line\">s config add --AccessKeyID $&#123;&#123;secrets.AccessKeyID&#125;&#125; --AccessKeySecret $&#123;&#123;secrets.AccessKeySecret&#125;&#125; -a default -f</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s deploy</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"X11docker","nav_order":3,"has_children":true,"parent":"X11docker","_content":"\n# X11docker\n","source":"_posts/docker/dev_utls/x11docker/index.md","raw":"---\nlayout: default\ntitle: X11docker\nnav_order: 3\nhas_children: true\nparent: X11docker\npermalink: \"/docker/dev_utls/x11docker/\"\n---\n\n# X11docker\n","slug":"docker/dev_utls/x11docker/index","published":1,"date":"2025-02-23T07:43:31.172Z","updated":"2025-02-23T07:43:31.172Z","__permalink":"/docker/dev_utls/x11docker/","comments":1,"photos":[],"_id":"cm7k5rwai002wmswsabsl2vax","content":"<h1 id=\"X11docker\"><a href=\"#X11docker\" class=\"headerlink\" title=\"X11docker\"></a>X11docker</h1>","excerpt":"","more":"<h1 id=\"X11docker\"><a href=\"#X11docker\" class=\"headerlink\" title=\"X11docker\"></a>X11docker</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"x11docker","parent":"X11docker","has_children":false,"grand_parent":"Dev Utls","_content":"\n# x11docker\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker | bash -s -- --update\n```\n","source":"_posts/docker/dev_utls/x11docker/x11docker.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: x11docker\nparent: X11docker\nhas_children: false\npermalink: \"/docker/dev_utls/x11docker/x11docker/\"\ngrand_parent: Dev Utls\n---\n\n# x11docker\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker | bash -s -- --update\n```\n","slug":"docker/dev_utls/x11docker/x11docker","published":1,"date":"2025-02-23T07:43:31.172Z","updated":"2025-02-23T07:43:31.172Z","__permalink":"/docker/dev_utls/x11docker/x11docker/","comments":1,"photos":[],"_id":"cm7k5rwai002xmswsb6fc7ahu","content":"<h1 id=\"x11docker\"><a href=\"#x11docker\" class=\"headerlink\" title=\"x11docker\"></a>x11docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker | bash -s -- --update</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"x11docker\"><a href=\"#x11docker\" class=\"headerlink\" title=\"x11docker\"></a>x11docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker | bash -s -- --update</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":13,"description":"部署MySQL```shell mysql开启集群的sql命令","parent":"Haproxy","has_children":false,"grand_parent":"Mid","_content":"\n## 部署MySQL\n```shell\n# mysql开启集群的sql命令\n\n# 设置sql执行模式为幂等的（例如，insert主键冲突时，将sql改为delete加insert）（非必须）\nset global replica_exec_mode=idempotent;\nshow global VARIABLES like \"%exec_mode%\";\n\n# all 用于查看SOURCE_LOG_FILE和SOURCE_LOG_POS的值\nshow master status\n\n# host1执行\nSTOP REPLICA for channel 'channel1';\nRESET REPLICA for channel 'channel1';\nCHANGE REPLICATION SOURCE to SOURCE_HOST='mysql_m2',SOURCE_PORT=3306,SOURCE_LOG_FILE='binlog.000008',SOURCE_LOG_POS=156 for channel 'channel1';\nRESET REPLICA for channel 'channel1';\nSTART REPLICA USER='root' PASSWORD='root' for channel 'channel1';\n\n# 查看状态。当看见Slave_IO_Running: YES、Slave_SQL_Running: YES时，主从复制即完成。\nSHOW REPLICA STATUS;\n\n###########\n\n# host2执行\nSTOP REPLICA for channel 'channel1';\nRESET REPLICA for channel 'channel1';\nCHANGE REPLICATION SOURCE to SOURCE_HOST='mysql_m1',SOURCE_PORT=3306,SOURCE_LOG_FILE='binlog.000008',SOURCE_LOG_POS=156 for channel 'channel1';\nRESET REPLICA for channel 'channel1';\nSTART REPLICA USER='root' PASSWORD='root' for channel 'channel1';\n\n# 查看状态。当看见Slave_IO_Running: YES、Slave_SQL_Running: YES时，主从复制即完成。\nSHOW REPLICA STATUS;\n\n```\n# Last_SQL_Errno\n```shell\n1007：数据库已存在，创建数据库失败\n1008：数据库不存在，删除数据库失败\n1049：创建表时，发现数据库不存在\n1050：数据表已存在，创建数据表失败\n1051：数据表不存在，删除数据表失败\n1054：字段不存在，或程序文件跟数据库有冲突\n1060：字段重复，导致无法插入\n1061：重复键名\n1068：定义了多个主键\n1094：位置线程ID\n1146：数据表缺失，请恢复数据库\n1053：复制过程中主服务器宕机\n1062：主键冲突 Duplicate entry '%s' for key %d\n```\n","source":"_posts/docker/mid/HAProxy/HAProxy.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: 部署MySQL```shell mysql开启集群的sql命令\nparent: Haproxy\nhas_children: false\npermalink: \"/docker/mid/haproxy/haproxy/\"\ngrand_parent: Mid\n---\n\n## 部署MySQL\n```shell\n# mysql开启集群的sql命令\n\n# 设置sql执行模式为幂等的（例如，insert主键冲突时，将sql改为delete加insert）（非必须）\nset global replica_exec_mode=idempotent;\nshow global VARIABLES like \"%exec_mode%\";\n\n# all 用于查看SOURCE_LOG_FILE和SOURCE_LOG_POS的值\nshow master status\n\n# host1执行\nSTOP REPLICA for channel 'channel1';\nRESET REPLICA for channel 'channel1';\nCHANGE REPLICATION SOURCE to SOURCE_HOST='mysql_m2',SOURCE_PORT=3306,SOURCE_LOG_FILE='binlog.000008',SOURCE_LOG_POS=156 for channel 'channel1';\nRESET REPLICA for channel 'channel1';\nSTART REPLICA USER='root' PASSWORD='root' for channel 'channel1';\n\n# 查看状态。当看见Slave_IO_Running: YES、Slave_SQL_Running: YES时，主从复制即完成。\nSHOW REPLICA STATUS;\n\n###########\n\n# host2执行\nSTOP REPLICA for channel 'channel1';\nRESET REPLICA for channel 'channel1';\nCHANGE REPLICATION SOURCE to SOURCE_HOST='mysql_m1',SOURCE_PORT=3306,SOURCE_LOG_FILE='binlog.000008',SOURCE_LOG_POS=156 for channel 'channel1';\nRESET REPLICA for channel 'channel1';\nSTART REPLICA USER='root' PASSWORD='root' for channel 'channel1';\n\n# 查看状态。当看见Slave_IO_Running: YES、Slave_SQL_Running: YES时，主从复制即完成。\nSHOW REPLICA STATUS;\n\n```\n# Last_SQL_Errno\n```shell\n1007：数据库已存在，创建数据库失败\n1008：数据库不存在，删除数据库失败\n1049：创建表时，发现数据库不存在\n1050：数据表已存在，创建数据表失败\n1051：数据表不存在，删除数据表失败\n1054：字段不存在，或程序文件跟数据库有冲突\n1060：字段重复，导致无法插入\n1061：重复键名\n1068：定义了多个主键\n1094：位置线程ID\n1146：数据表缺失，请恢复数据库\n1053：复制过程中主服务器宕机\n1062：主键冲突 Duplicate entry '%s' for key %d\n```\n","slug":"docker/mid/HAProxy/HAProxy","published":1,"date":"2025-02-23T07:43:31.129Z","updated":"2025-02-23T07:43:31.129Z","__permalink":"/docker/mid/haproxy/haproxy/","comments":1,"photos":[],"_id":"cm7k5rwai002ymsws6azyaqww","content":"<h2 id=\"部署MySQL\"><a href=\"#部署MySQL\" class=\"headerlink\" title=\"部署MySQL\"></a>部署MySQL</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql开启集群的sql命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置sql执行模式为幂等的（例如，insert主键冲突时，将sql改为delete加insert）（非必须）</span></span><br><span class=\"line\">set global replica_exec_mode=idempotent;</span><br><span class=\"line\">show global VARIABLES like &quot;%exec_mode%&quot;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">all 用于查看SOURCE_LOG_FILE和SOURCE_LOG_POS的值</span></span><br><span class=\"line\">show master status</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host1执行</span></span><br><span class=\"line\">STOP REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">RESET REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">CHANGE REPLICATION SOURCE to SOURCE_HOST=&#x27;mysql_m2&#x27;,SOURCE_PORT=3306,SOURCE_LOG_FILE=&#x27;binlog.000008&#x27;,SOURCE_LOG_POS=156 for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">RESET REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">START REPLICA USER=&#x27;root&#x27; PASSWORD=&#x27;root&#x27; for channel &#x27;channel1&#x27;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看状态。当看见Slave_IO_Running: YES、Slave_SQL_Running: YES时，主从复制即完成。</span></span><br><span class=\"line\">SHOW REPLICA STATUS;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##########</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host2执行</span></span><br><span class=\"line\">STOP REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">RESET REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">CHANGE REPLICATION SOURCE to SOURCE_HOST=&#x27;mysql_m1&#x27;,SOURCE_PORT=3306,SOURCE_LOG_FILE=&#x27;binlog.000008&#x27;,SOURCE_LOG_POS=156 for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">RESET REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">START REPLICA USER=&#x27;root&#x27; PASSWORD=&#x27;root&#x27; for channel &#x27;channel1&#x27;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看状态。当看见Slave_IO_Running: YES、Slave_SQL_Running: YES时，主从复制即完成。</span></span><br><span class=\"line\">SHOW REPLICA STATUS;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"Last-SQL-Errno\"><a href=\"#Last-SQL-Errno\" class=\"headerlink\" title=\"Last_SQL_Errno\"></a>Last_SQL_Errno</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1007：数据库已存在，创建数据库失败</span><br><span class=\"line\">1008：数据库不存在，删除数据库失败</span><br><span class=\"line\">1049：创建表时，发现数据库不存在</span><br><span class=\"line\">1050：数据表已存在，创建数据表失败</span><br><span class=\"line\">1051：数据表不存在，删除数据表失败</span><br><span class=\"line\">1054：字段不存在，或程序文件跟数据库有冲突</span><br><span class=\"line\">1060：字段重复，导致无法插入</span><br><span class=\"line\">1061：重复键名</span><br><span class=\"line\">1068：定义了多个主键</span><br><span class=\"line\">1094：位置线程ID</span><br><span class=\"line\">1146：数据表缺失，请恢复数据库</span><br><span class=\"line\">1053：复制过程中主服务器宕机</span><br><span class=\"line\">1062：主键冲突 Duplicate entry &#x27;%s&#x27; for key %d</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"部署MySQL\"><a href=\"#部署MySQL\" class=\"headerlink\" title=\"部署MySQL\"></a>部署MySQL</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql开启集群的sql命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置sql执行模式为幂等的（例如，insert主键冲突时，将sql改为delete加insert）（非必须）</span></span><br><span class=\"line\">set global replica_exec_mode=idempotent;</span><br><span class=\"line\">show global VARIABLES like &quot;%exec_mode%&quot;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">all 用于查看SOURCE_LOG_FILE和SOURCE_LOG_POS的值</span></span><br><span class=\"line\">show master status</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host1执行</span></span><br><span class=\"line\">STOP REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">RESET REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">CHANGE REPLICATION SOURCE to SOURCE_HOST=&#x27;mysql_m2&#x27;,SOURCE_PORT=3306,SOURCE_LOG_FILE=&#x27;binlog.000008&#x27;,SOURCE_LOG_POS=156 for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">RESET REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">START REPLICA USER=&#x27;root&#x27; PASSWORD=&#x27;root&#x27; for channel &#x27;channel1&#x27;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看状态。当看见Slave_IO_Running: YES、Slave_SQL_Running: YES时，主从复制即完成。</span></span><br><span class=\"line\">SHOW REPLICA STATUS;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##########</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host2执行</span></span><br><span class=\"line\">STOP REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">RESET REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">CHANGE REPLICATION SOURCE to SOURCE_HOST=&#x27;mysql_m1&#x27;,SOURCE_PORT=3306,SOURCE_LOG_FILE=&#x27;binlog.000008&#x27;,SOURCE_LOG_POS=156 for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">RESET REPLICA for channel &#x27;channel1&#x27;;</span><br><span class=\"line\">START REPLICA USER=&#x27;root&#x27; PASSWORD=&#x27;root&#x27; for channel &#x27;channel1&#x27;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看状态。当看见Slave_IO_Running: YES、Slave_SQL_Running: YES时，主从复制即完成。</span></span><br><span class=\"line\">SHOW REPLICA STATUS;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"Last-SQL-Errno\"><a href=\"#Last-SQL-Errno\" class=\"headerlink\" title=\"Last_SQL_Errno\"></a>Last_SQL_Errno</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1007：数据库已存在，创建数据库失败</span><br><span class=\"line\">1008：数据库不存在，删除数据库失败</span><br><span class=\"line\">1049：创建表时，发现数据库不存在</span><br><span class=\"line\">1050：数据表已存在，创建数据表失败</span><br><span class=\"line\">1051：数据表不存在，删除数据表失败</span><br><span class=\"line\">1054：字段不存在，或程序文件跟数据库有冲突</span><br><span class=\"line\">1060：字段重复，导致无法插入</span><br><span class=\"line\">1061：重复键名</span><br><span class=\"line\">1068：定义了多个主键</span><br><span class=\"line\">1094：位置线程ID</span><br><span class=\"line\">1146：数据表缺失，请恢复数据库</span><br><span class=\"line\">1053：复制过程中主服务器宕机</span><br><span class=\"line\">1062：主键冲突 Duplicate entry &#x27;%s&#x27; for key %d</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Haproxy","nav_order":3,"has_children":true,"parent":"Haproxy","_content":"\n# Haproxy\n","source":"_posts/docker/mid/HAProxy/index.md","raw":"---\nlayout: default\ntitle: Haproxy\nnav_order: 3\nhas_children: true\nparent: Haproxy\npermalink: \"/docker/mid/haproxy/\"\n---\n\n# Haproxy\n","slug":"docker/mid/HAProxy/index","published":1,"date":"2025-02-23T07:43:31.130Z","updated":"2025-02-23T07:43:31.130Z","__permalink":"/docker/mid/haproxy/","comments":1,"photos":[],"_id":"cm7k5rwai002zmswshruvhowj","content":"<h1 id=\"Haproxy\"><a href=\"#Haproxy\" class=\"headerlink\" title=\"Haproxy\"></a>Haproxy</h1>","excerpt":"","more":"<h1 id=\"Haproxy\"><a href=\"#Haproxy\" class=\"headerlink\" title=\"Haproxy\"></a>Haproxy</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"MyPerf4J是用记录","parent":"Myperf4j","has_children":false,"grand_parent":"Mid","_content":"\n# MyPerf4J是用记录\n\n[github地址](https://github.com/LinShunKang/MyPerf4J)\n\n## java-agent的使用\n\n- 环境变量的配置\n\n```shell\nJAVA_TOOL_OPTIONS=\"$JAVA_TOOL_OPTIONS -javaagent:/Users/fa/dev/projects/java-agents/MyPerf4J-ASM-3.4.0-SNAPSHOT/MyPerf4J-ASM-3.4.0-SNAPSHOT.jar\"\n```\n\n[MyPerf4J.properties配置文件内容](./java-agent/MyPerf4J.properties)\n\n## influxdb安装\n\n[docker快速部署](https://github.com/influxdata/sandbox.git)\n\n```bash\n./sandbox up\n```\n\n[docker镜像拉取失败的解决方案](https://github.com/183461750/docker-image-pusher/blob/70e22300d71cca30f14c4ab8e0a99cb9467734e2/README.md)\n\n## grafana可视化界面安装\n\n`docker-compose.yml`版\n\n```bash\nservices:\n  \n  grafana:\n    image: grafana/grafana:10.0.3\n    container_name: grafana\n    ports:\n      - 3000:3000\n    restart: always\n\n```\n","source":"_posts/docker/mid/MyPerf4J/MyPerf4J.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: MyPerf4J是用记录\nparent: Myperf4j\nhas_children: false\npermalink: \"/docker/mid/myperf4j/myperf4j/\"\ngrand_parent: Mid\n---\n\n# MyPerf4J是用记录\n\n[github地址](https://github.com/LinShunKang/MyPerf4J)\n\n## java-agent的使用\n\n- 环境变量的配置\n\n```shell\nJAVA_TOOL_OPTIONS=\"$JAVA_TOOL_OPTIONS -javaagent:/Users/fa/dev/projects/java-agents/MyPerf4J-ASM-3.4.0-SNAPSHOT/MyPerf4J-ASM-3.4.0-SNAPSHOT.jar\"\n```\n\n[MyPerf4J.properties配置文件内容](./java-agent/MyPerf4J.properties)\n\n## influxdb安装\n\n[docker快速部署](https://github.com/influxdata/sandbox.git)\n\n```bash\n./sandbox up\n```\n\n[docker镜像拉取失败的解决方案](https://github.com/183461750/docker-image-pusher/blob/70e22300d71cca30f14c4ab8e0a99cb9467734e2/README.md)\n\n## grafana可视化界面安装\n\n`docker-compose.yml`版\n\n```bash\nservices:\n  \n  grafana:\n    image: grafana/grafana:10.0.3\n    container_name: grafana\n    ports:\n      - 3000:3000\n    restart: always\n\n```\n","slug":"docker/mid/MyPerf4J/MyPerf4J","published":1,"date":"2025-02-23T07:43:31.123Z","updated":"2025-02-23T07:43:31.123Z","__permalink":"/docker/mid/myperf4j/myperf4j/","comments":1,"photos":[],"_id":"cm7k5rwaj0030mswscaj89ld3","content":"<h1 id=\"MyPerf4J是用记录\"><a href=\"#MyPerf4J是用记录\" class=\"headerlink\" title=\"MyPerf4J是用记录\"></a>MyPerf4J是用记录</h1><p><a href=\"https://github.com/LinShunKang/MyPerf4J\">github地址</a></p>\n<h2 id=\"java-agent的使用\"><a href=\"#java-agent的使用\" class=\"headerlink\" title=\"java-agent的使用\"></a>java-agent的使用</h2><ul>\n<li>环境变量的配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_TOOL_OPTIONS=&quot;$JAVA_TOOL_OPTIONS -javaagent:/Users/fa/dev/projects/java-agents/MyPerf4J-ASM-3.4.0-SNAPSHOT/MyPerf4J-ASM-3.4.0-SNAPSHOT.jar&quot;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"./java-agent/MyPerf4J.properties\">MyPerf4J.properties配置文件内容</a></p>\n<h2 id=\"influxdb安装\"><a href=\"#influxdb安装\" class=\"headerlink\" title=\"influxdb安装\"></a>influxdb安装</h2><p><a href=\"https://github.com/influxdata/sandbox.git\">docker快速部署</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sandbox up</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/183461750/docker-image-pusher/blob/70e22300d71cca30f14c4ab8e0a99cb9467734e2/README.md\">docker镜像拉取失败的解决方案</a></p>\n<h2 id=\"grafana可视化界面安装\"><a href=\"#grafana可视化界面安装\" class=\"headerlink\" title=\"grafana可视化界面安装\"></a>grafana可视化界面安装</h2><p><code>docker-compose.yml</code>版</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\">  grafana:</span><br><span class=\"line\">    image: grafana/grafana:10.0.3</span><br><span class=\"line\">    container_name: grafana</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3000:3000</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"MyPerf4J是用记录\"><a href=\"#MyPerf4J是用记录\" class=\"headerlink\" title=\"MyPerf4J是用记录\"></a>MyPerf4J是用记录</h1><p><a href=\"https://github.com/LinShunKang/MyPerf4J\">github地址</a></p>\n<h2 id=\"java-agent的使用\"><a href=\"#java-agent的使用\" class=\"headerlink\" title=\"java-agent的使用\"></a>java-agent的使用</h2><ul>\n<li>环境变量的配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_TOOL_OPTIONS=&quot;$JAVA_TOOL_OPTIONS -javaagent:/Users/fa/dev/projects/java-agents/MyPerf4J-ASM-3.4.0-SNAPSHOT/MyPerf4J-ASM-3.4.0-SNAPSHOT.jar&quot;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"./java-agent/MyPerf4J.properties\">MyPerf4J.properties配置文件内容</a></p>\n<h2 id=\"influxdb安装\"><a href=\"#influxdb安装\" class=\"headerlink\" title=\"influxdb安装\"></a>influxdb安装</h2><p><a href=\"https://github.com/influxdata/sandbox.git\">docker快速部署</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sandbox up</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/183461750/docker-image-pusher/blob/70e22300d71cca30f14c4ab8e0a99cb9467734e2/README.md\">docker镜像拉取失败的解决方案</a></p>\n<h2 id=\"grafana可视化界面安装\"><a href=\"#grafana可视化界面安装\" class=\"headerlink\" title=\"grafana可视化界面安装\"></a>grafana可视化界面安装</h2><p><code>docker-compose.yml</code>版</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\">  grafana:</span><br><span class=\"line\">    image: grafana/grafana:10.0.3</span><br><span class=\"line\">    container_name: grafana</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3000:3000</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Myperf4j","nav_order":3,"has_children":true,"parent":"Myperf4j","_content":"\n# Myperf4j\n","source":"_posts/docker/mid/MyPerf4J/index.md","raw":"---\nlayout: default\ntitle: Myperf4j\nnav_order: 3\nhas_children: true\nparent: Myperf4j\npermalink: \"/docker/mid/myperf4j/\"\n---\n\n# Myperf4j\n","slug":"docker/mid/MyPerf4J/index","published":1,"date":"2025-02-23T07:43:31.123Z","updated":"2025-02-23T07:43:31.123Z","__permalink":"/docker/mid/myperf4j/","comments":1,"photos":[],"_id":"cm7k5rwaj0031msws6g2ehpnn","content":"<h1 id=\"Myperf4j\"><a href=\"#Myperf4j\" class=\"headerlink\" title=\"Myperf4j\"></a>Myperf4j</h1>","excerpt":"","more":"<h1 id=\"Myperf4j\"><a href=\"#Myperf4j\" class=\"headerlink\" title=\"Myperf4j\"></a>Myperf4j</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"telegraf是用记录","parent":"Telegraf","has_children":false,"grand_parent":"Mid","_content":"\n# telegraf是用记录\n\n[相关资料1](https://github.com/influxdata/sandbox.git)\n[相关资料2](https://github.com/LinShunKang/MyPerf4J/wiki/Telegraf_)\n\n## 简单运行\n\n```bash\ndocker run -d --name=telegraf \\\n    -v $PWD/conf/telegraf.conf:/etc/telegraf/telegraf.conf:ro \\\n    -v /tmp/MyPerf4J/data/logs/MyPerf4J:/tmp/MyPerf4J/data/logs/MyPerf4J:ro \\\n    telegraf\n```\n","source":"_posts/docker/mid/Telegraf/Telegraf.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: telegraf是用记录\nparent: Telegraf\nhas_children: false\npermalink: \"/docker/mid/telegraf/telegraf/\"\ngrand_parent: Mid\n---\n\n# telegraf是用记录\n\n[相关资料1](https://github.com/influxdata/sandbox.git)\n[相关资料2](https://github.com/LinShunKang/MyPerf4J/wiki/Telegraf_)\n\n## 简单运行\n\n```bash\ndocker run -d --name=telegraf \\\n    -v $PWD/conf/telegraf.conf:/etc/telegraf/telegraf.conf:ro \\\n    -v /tmp/MyPerf4J/data/logs/MyPerf4J:/tmp/MyPerf4J/data/logs/MyPerf4J:ro \\\n    telegraf\n```\n","slug":"docker/mid/Telegraf/Telegraf","published":1,"date":"2025-02-23T07:43:31.081Z","updated":"2025-02-23T07:43:31.081Z","__permalink":"/docker/mid/telegraf/telegraf/","comments":1,"photos":[],"_id":"cm7k5rwaj0032msws9ejo4oe8","content":"<h1 id=\"telegraf是用记录\"><a href=\"#telegraf是用记录\" class=\"headerlink\" title=\"telegraf是用记录\"></a>telegraf是用记录</h1><p><a href=\"https://github.com/influxdata/sandbox.git\">相关资料1</a><br><a href=\"https://github.com/LinShunKang/MyPerf4J/wiki/Telegraf_\">相关资料2</a></p>\n<h2 id=\"简单运行\"><a href=\"#简单运行\" class=\"headerlink\" title=\"简单运行\"></a>简单运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=telegraf \\</span><br><span class=\"line\">    -v <span class=\"variable\">$PWD</span>/conf/telegraf.conf:/etc/telegraf/telegraf.conf:ro \\</span><br><span class=\"line\">    -v /tmp/MyPerf4J/data/logs/MyPerf4J:/tmp/MyPerf4J/data/logs/MyPerf4J:ro \\</span><br><span class=\"line\">    telegraf</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"telegraf是用记录\"><a href=\"#telegraf是用记录\" class=\"headerlink\" title=\"telegraf是用记录\"></a>telegraf是用记录</h1><p><a href=\"https://github.com/influxdata/sandbox.git\">相关资料1</a><br><a href=\"https://github.com/LinShunKang/MyPerf4J/wiki/Telegraf_\">相关资料2</a></p>\n<h2 id=\"简单运行\"><a href=\"#简单运行\" class=\"headerlink\" title=\"简单运行\"></a>简单运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=telegraf \\</span><br><span class=\"line\">    -v <span class=\"variable\">$PWD</span>/conf/telegraf.conf:/etc/telegraf/telegraf.conf:ro \\</span><br><span class=\"line\">    -v /tmp/MyPerf4J/data/logs/MyPerf4J:/tmp/MyPerf4J/data/logs/MyPerf4J:ro \\</span><br><span class=\"line\">    telegraf</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Telegraf","nav_order":3,"has_children":true,"parent":"Telegraf","_content":"\n# Telegraf\n","source":"_posts/docker/mid/Telegraf/index.md","raw":"---\nlayout: default\ntitle: Telegraf\nnav_order: 3\nhas_children: true\nparent: Telegraf\npermalink: \"/docker/mid/telegraf/\"\n---\n\n# Telegraf\n","slug":"docker/mid/Telegraf/index","published":1,"date":"2025-02-23T07:43:31.081Z","updated":"2025-02-23T07:43:31.081Z","__permalink":"/docker/mid/telegraf/","comments":1,"photos":[],"_id":"cm7k5rwaj0033msws80815xr5","content":"<h1 id=\"Telegraf\"><a href=\"#Telegraf\" class=\"headerlink\" title=\"Telegraf\"></a>Telegraf</h1>","excerpt":"","more":"<h1 id=\"Telegraf\"><a href=\"#Telegraf\" class=\"headerlink\" title=\"Telegraf\"></a>Telegraf</h1>"},{"layout":"default","title":"Rabbitmq","nav_order":3,"has_children":true,"parent":"Rabbitmq","_content":"\n# Rabbitmq\n","source":"_posts/docker/mid/RabbitMQ/index.md","raw":"---\nlayout: default\ntitle: Rabbitmq\nnav_order: 3\nhas_children: true\nparent: Rabbitmq\npermalink: \"/docker/mid/rabbitmq/\"\n---\n\n# Rabbitmq\n","slug":"docker/mid/RabbitMQ/index","published":1,"date":"2025-02-23T07:43:31.087Z","updated":"2025-02-23T07:43:31.087Z","__permalink":"/docker/mid/rabbitmq/","comments":1,"photos":[],"_id":"cm7k5rwaj0034mswsbjoscids","content":"<h1 id=\"Rabbitmq\"><a href=\"#Rabbitmq\" class=\"headerlink\" title=\"Rabbitmq\"></a>Rabbitmq</h1>","excerpt":"","more":"<h1 id=\"Rabbitmq\"><a href=\"#Rabbitmq\" class=\"headerlink\" title=\"Rabbitmq\"></a>Rabbitmq</h1>"},{"layout":"default","title":"Kafka","nav_order":3,"has_children":true,"parent":"Kafka","_content":"\n# Kafka\n","source":"_posts/docker/mid/kafka/index.md","raw":"---\nlayout: default\ntitle: Kafka\nnav_order: 3\nhas_children: true\nparent: Kafka\npermalink: \"/docker/mid/kafka/\"\n---\n\n# Kafka\n","slug":"docker/mid/kafka/index","published":1,"date":"2025-02-23T07:43:31.119Z","updated":"2025-02-23T07:43:31.119Z","__permalink":"/docker/mid/kafka/","comments":1,"photos":[],"_id":"cm7k5rwaj0035msws372w1w1a","content":"<h1 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h1>","excerpt":"","more":"<h1 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h1>"},{"layout":"default","title":"Nacos","nav_order":3,"has_children":true,"parent":"Nacos","_content":"\n# Nacos\n","source":"_posts/docker/mid/nacos/index.md","raw":"---\nlayout: default\ntitle: Nacos\nnav_order: 3\nhas_children: true\nparent: Nacos\npermalink: \"/docker/mid/nacos/\"\n---\n\n# Nacos\n","slug":"docker/mid/nacos/index","published":1,"date":"2025-02-23T07:43:31.082Z","updated":"2025-02-23T07:43:31.083Z","__permalink":"/docker/mid/nacos/","comments":1,"photos":[],"_id":"cm7k5rwaj0036mswsea6zf6fb","content":"<h1 id=\"Nacos\"><a href=\"#Nacos\" class=\"headerlink\" title=\"Nacos\"></a>Nacos</h1>","excerpt":"","more":"<h1 id=\"Nacos\"><a href=\"#Nacos\" class=\"headerlink\" title=\"Nacos\"></a>Nacos</h1>"},{"layout":"default","title":"Nginx","nav_order":3,"has_children":true,"parent":"Nginx","_content":"\n# Nginx\n","source":"_posts/docker/mid/nginx/index.md","raw":"---\nlayout: default\ntitle: Nginx\nnav_order: 3\nhas_children: true\nparent: Nginx\npermalink: \"/docker/mid/nginx/\"\n---\n\n# Nginx\n","slug":"docker/mid/nginx/index","published":1,"date":"2025-02-23T07:43:31.113Z","updated":"2025-02-23T07:43:31.113Z","__permalink":"/docker/mid/nginx/","comments":1,"photos":[],"_id":"cm7k5rwaj0037mswshuxe2tzn","content":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1>","excerpt":"","more":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1>"},{"layout":"default","title":"Github","nav_order":3,"has_children":true,"parent":"Github","_content":"\n# Github\n","source":"_posts/docker/mid/github/index.md","raw":"---\nlayout: default\ntitle: Github\nnav_order: 3\nhas_children: true\nparent: Github\npermalink: \"/docker/mid/github/\"\n---\n\n# Github\n","slug":"docker/mid/github/index","published":1,"date":"2025-02-23T07:43:31.090Z","updated":"2025-02-23T07:43:31.090Z","__permalink":"/docker/mid/github/","comments":1,"photos":[],"_id":"cm7k5rwaj0038mswsamgf02ce","content":"<h1 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h1>","excerpt":"","more":"<h1 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h1>"},{"layout":"default","title":"Rocketmq","nav_order":3,"has_children":true,"parent":"Rocketmq","_content":"\n# Rocketmq\n","source":"_posts/docker/mid/rocketMq/index.md","raw":"---\nlayout: default\ntitle: Rocketmq\nnav_order: 3\nhas_children: true\nparent: Rocketmq\npermalink: \"/docker/mid/rocketmq/\"\n---\n\n# Rocketmq\n","slug":"docker/mid/rocketMq/index","published":1,"date":"2025-02-23T07:43:31.126Z","updated":"2025-02-23T07:43:31.127Z","__permalink":"/docker/mid/rocketmq/","comments":1,"photos":[],"_id":"cm7k5rwak0039mswshf0tglgj","content":"<h1 id=\"Rocketmq\"><a href=\"#Rocketmq\" class=\"headerlink\" title=\"Rocketmq\"></a>Rocketmq</h1>","excerpt":"","more":"<h1 id=\"Rocketmq\"><a href=\"#Rocketmq\" class=\"headerlink\" title=\"Rocketmq\"></a>Rocketmq</h1>"},{"layout":"default","title":"Zipkin","nav_order":3,"has_children":true,"parent":"Zipkin","_content":"\n# Zipkin\n","source":"_posts/docker/mid/zipkin/index.md","raw":"---\nlayout: default\ntitle: Zipkin\nnav_order: 3\nhas_children: true\nparent: Zipkin\npermalink: \"/docker/mid/zipkin/\"\n---\n\n# Zipkin\n","slug":"docker/mid/zipkin/index","published":1,"date":"2025-02-23T07:43:31.091Z","updated":"2025-02-23T07:43:31.091Z","__permalink":"/docker/mid/zipkin/","comments":1,"photos":[],"_id":"cm7k5rwak003amswsdvc4clap","content":"<h1 id=\"Zipkin\"><a href=\"#Zipkin\" class=\"headerlink\" title=\"Zipkin\"></a>Zipkin</h1>","excerpt":"","more":"<h1 id=\"Zipkin\"><a href=\"#Zipkin\" class=\"headerlink\" title=\"Zipkin\"></a>Zipkin</h1>"},{"layout":"default","title":"docker-compose服务间依赖通过自定义健康检查实现顺序启动","nav_order":13,"description":"docker-compose服务间依赖通过自定义健康检查实现顺序启动","parent":"Article","has_children":false,"grand_parent":"Doc","_content":"\n# docker-compose服务间依赖通过自定义健康检查实现顺序启动\n\nDocker Compose中的`condition: service_healthy`配置是用来判断依赖的服务是否健康的。当一个服务依赖于另一个服务时，可以使用`depends_on`和`condition: service_healthy`来确保依赖的服务已经健康启动。\n\n下面是关于如何判断服务是否健康的一些相关内容：\n\n1. 健康检查命令：在Dockerfile或docker container run命令中，可以使用`HEALTHCHECK`来定义容器的健康检查命令[[1]](https://blog.csdn.net/weixin_48447848/article/details/122632562)。健康检查命令可以是任何能够返回0或非0退出代码的命令，例如使用`curl`命令检查服务是否可访问。\n\n2. 健康检查参数：健康检查命令可以使用一些参数来配置检查的间隔、超时和重试次数等。常用的健康检查参数包括：\n   - `--interval`：指定检查的间隔时间，默认为30秒。\n   - `--timeout`：指定每次检查的超时时间，默认为30秒。\n   - `--retries`：指定连续失败的次数后将服务标记为不健康，默认为3次。\n   - `--start-period`：指定容器启动后等待健康检查开始的时间，默认为0秒。\n\n3. `condition: service_healthy`配置：在Docker Compose中，可以使用`condition: service_healthy`来指定依赖的服务是否健康。当依赖的服务的健康状态为健康时，才会启动当前的服务。这样可以确保依赖的服务已经成功启动并且可用。\n\n下面是一个示例的docker-compose.yml文件，演示了如何使用健康检查和`condition: service_healthy`来判断服务是否健康并依次启动：\n\n```yaml\nversion: \"3.8\"\n\nservices:\n  flask:\n    build:\n      context: ./flask\n      dockerfile: Dockerfile\n    image: flask-demo:latest\n    environment:\n      - REDIS_HOST=redis-server\n      - REDIS_PASS=${REDIS_PASSWORD}\n    healthcheck: \n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:5000\"]\n      interval: 30s\n      timeout: 3s\n      retries: 3\n      start_period: 40s\n    depends_on:\n      redis-server:\n        condition: service_healthy\n    networks:\n      - backend\n      - frontend\n\n  redis-server:\n    image: redis\n```\n\n在上述示例中，flask服务依赖于redis-server服务。flask服务的健康检查命令是使用`curl`命令检查`http://localhost:5000`是否可访问。只有当redis-server服务的健康状态为健康时，flask服务才会启动。\n\n---\nLearn more:\n\n1. [【Docker系列】Docker Compose 服务依赖和健康检查_docker-compose healthcheck-CSDN博客](https://blog.csdn.net/weixin_48447848/article/details/122632562)\n2. [[docker]-docker-compose通过healthcheck判断容器状态并依次启动_docker-compose healthcheck-CSDN博客](https://blog.csdn.net/xujiamin0022016/article/details/123642210)\n3. [Docker compose 服务依赖关系及健康检查 - 掘金](https://juejin.cn/post/7250374485567619131)\n\n## 参考内容\n\n- [nocodb部署yml](https://github.com/nocodb/nocodb/blob/develop/docker-compose/pg/docker-compose.yml)\n  \n","source":"_posts/docker/doc/article/docker-compose服务间依赖通过自定义健康检查实现顺序启动.md","raw":"---\nlayout: default\ntitle: docker-compose服务间依赖通过自定义健康检查实现顺序启动\nnav_order: 13\ndescription: docker-compose服务间依赖通过自定义健康检查实现顺序启动\nparent: Article\nhas_children: false\npermalink: \"/docker/doc/article/docker-compose服务间依赖通过自定义健康检查实现顺序启动/\"\ngrand_parent: Doc\n---\n\n# docker-compose服务间依赖通过自定义健康检查实现顺序启动\n\nDocker Compose中的`condition: service_healthy`配置是用来判断依赖的服务是否健康的。当一个服务依赖于另一个服务时，可以使用`depends_on`和`condition: service_healthy`来确保依赖的服务已经健康启动。\n\n下面是关于如何判断服务是否健康的一些相关内容：\n\n1. 健康检查命令：在Dockerfile或docker container run命令中，可以使用`HEALTHCHECK`来定义容器的健康检查命令[[1]](https://blog.csdn.net/weixin_48447848/article/details/122632562)。健康检查命令可以是任何能够返回0或非0退出代码的命令，例如使用`curl`命令检查服务是否可访问。\n\n2. 健康检查参数：健康检查命令可以使用一些参数来配置检查的间隔、超时和重试次数等。常用的健康检查参数包括：\n   - `--interval`：指定检查的间隔时间，默认为30秒。\n   - `--timeout`：指定每次检查的超时时间，默认为30秒。\n   - `--retries`：指定连续失败的次数后将服务标记为不健康，默认为3次。\n   - `--start-period`：指定容器启动后等待健康检查开始的时间，默认为0秒。\n\n3. `condition: service_healthy`配置：在Docker Compose中，可以使用`condition: service_healthy`来指定依赖的服务是否健康。当依赖的服务的健康状态为健康时，才会启动当前的服务。这样可以确保依赖的服务已经成功启动并且可用。\n\n下面是一个示例的docker-compose.yml文件，演示了如何使用健康检查和`condition: service_healthy`来判断服务是否健康并依次启动：\n\n```yaml\nversion: \"3.8\"\n\nservices:\n  flask:\n    build:\n      context: ./flask\n      dockerfile: Dockerfile\n    image: flask-demo:latest\n    environment:\n      - REDIS_HOST=redis-server\n      - REDIS_PASS=${REDIS_PASSWORD}\n    healthcheck: \n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:5000\"]\n      interval: 30s\n      timeout: 3s\n      retries: 3\n      start_period: 40s\n    depends_on:\n      redis-server:\n        condition: service_healthy\n    networks:\n      - backend\n      - frontend\n\n  redis-server:\n    image: redis\n```\n\n在上述示例中，flask服务依赖于redis-server服务。flask服务的健康检查命令是使用`curl`命令检查`http://localhost:5000`是否可访问。只有当redis-server服务的健康状态为健康时，flask服务才会启动。\n\n---\nLearn more:\n\n1. [【Docker系列】Docker Compose 服务依赖和健康检查_docker-compose healthcheck-CSDN博客](https://blog.csdn.net/weixin_48447848/article/details/122632562)\n2. [[docker]-docker-compose通过healthcheck判断容器状态并依次启动_docker-compose healthcheck-CSDN博客](https://blog.csdn.net/xujiamin0022016/article/details/123642210)\n3. [Docker compose 服务依赖关系及健康检查 - 掘金](https://juejin.cn/post/7250374485567619131)\n\n## 参考内容\n\n- [nocodb部署yml](https://github.com/nocodb/nocodb/blob/develop/docker-compose/pg/docker-compose.yml)\n  \n","slug":"docker/doc/article/docker-compose服务间依赖通过自定义健康检查实现顺序启动","published":1,"date":"2025-02-23T07:43:31.199Z","updated":"2025-02-23T07:43:31.199Z","__permalink":"/docker/doc/article/docker-compose服务间依赖通过自定义健康检查实现顺序启动/","comments":1,"photos":[],"_id":"cm7k5rwak003bmswsdsur6hn0","content":"<h1 id=\"docker-compose服务间依赖通过自定义健康检查实现顺序启动\"><a href=\"#docker-compose服务间依赖通过自定义健康检查实现顺序启动\" class=\"headerlink\" title=\"docker-compose服务间依赖通过自定义健康检查实现顺序启动\"></a>docker-compose服务间依赖通过自定义健康检查实现顺序启动</h1><p>Docker Compose中的<code>condition: service_healthy</code>配置是用来判断依赖的服务是否健康的。当一个服务依赖于另一个服务时，可以使用<code>depends_on</code>和<code>condition: service_healthy</code>来确保依赖的服务已经健康启动。</p>\n<p>下面是关于如何判断服务是否健康的一些相关内容：</p>\n<ol>\n<li><p>健康检查命令：在Dockerfile或docker container run命令中，可以使用<code>HEALTHCHECK</code>来定义容器的健康检查命令<a href=\"https://blog.csdn.net/weixin_48447848/article/details/122632562\">[1]</a>。健康检查命令可以是任何能够返回0或非0退出代码的命令，例如使用<code>curl</code>命令检查服务是否可访问。</p>\n</li>\n<li><p>健康检查参数：健康检查命令可以使用一些参数来配置检查的间隔、超时和重试次数等。常用的健康检查参数包括：</p>\n<ul>\n<li><code>--interval</code>：指定检查的间隔时间，默认为30秒。</li>\n<li><code>--timeout</code>：指定每次检查的超时时间，默认为30秒。</li>\n<li><code>--retries</code>：指定连续失败的次数后将服务标记为不健康，默认为3次。</li>\n<li><code>--start-period</code>：指定容器启动后等待健康检查开始的时间，默认为0秒。</li>\n</ul>\n</li>\n<li><p><code>condition: service_healthy</code>配置：在Docker Compose中，可以使用<code>condition: service_healthy</code>来指定依赖的服务是否健康。当依赖的服务的健康状态为健康时，才会启动当前的服务。这样可以确保依赖的服务已经成功启动并且可用。</p>\n</li>\n</ol>\n<p>下面是一个示例的docker-compose.yml文件，演示了如何使用健康检查和<code>condition: service_healthy</code>来判断服务是否健康并依次启动：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">flask:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span></span><br><span class=\"line\">      <span class=\"attr\">context:</span> <span class=\"string\">./flask</span></span><br><span class=\"line\">      <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">flask-demo:latest</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">REDIS_HOST=redis-server</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">REDIS_PASS=$&#123;REDIS_PASSWORD&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span> </span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:5000&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">3s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">40s</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"attr\">redis-server:</span></span><br><span class=\"line\">        <span class=\"attr\">condition:</span> <span class=\"string\">service_healthy</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">backend</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">frontend</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">redis-server:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，flask服务依赖于redis-server服务。flask服务的健康检查命令是使用<code>curl</code>命令检查<code>http://localhost:5000</code>是否可访问。只有当redis-server服务的健康状态为健康时，flask服务才会启动。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/weixin_48447848/article/details/122632562\">【Docker系列】Docker Compose 服务依赖和健康检查_docker-compose healthcheck-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/xujiamin0022016/article/details/123642210\">[docker]-docker-compose通过healthcheck判断容器状态并依次启动_docker-compose healthcheck-CSDN博客</a></li>\n<li><a href=\"https://juejin.cn/post/7250374485567619131\">Docker compose 服务依赖关系及健康检查 - 掘金</a></li>\n</ol>\n<h2 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h2><ul>\n<li><a href=\"https://github.com/nocodb/nocodb/blob/develop/docker-compose/pg/docker-compose.yml\">nocodb部署yml</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"docker-compose服务间依赖通过自定义健康检查实现顺序启动\"><a href=\"#docker-compose服务间依赖通过自定义健康检查实现顺序启动\" class=\"headerlink\" title=\"docker-compose服务间依赖通过自定义健康检查实现顺序启动\"></a>docker-compose服务间依赖通过自定义健康检查实现顺序启动</h1><p>Docker Compose中的<code>condition: service_healthy</code>配置是用来判断依赖的服务是否健康的。当一个服务依赖于另一个服务时，可以使用<code>depends_on</code>和<code>condition: service_healthy</code>来确保依赖的服务已经健康启动。</p>\n<p>下面是关于如何判断服务是否健康的一些相关内容：</p>\n<ol>\n<li><p>健康检查命令：在Dockerfile或docker container run命令中，可以使用<code>HEALTHCHECK</code>来定义容器的健康检查命令<a href=\"https://blog.csdn.net/weixin_48447848/article/details/122632562\">[1]</a>。健康检查命令可以是任何能够返回0或非0退出代码的命令，例如使用<code>curl</code>命令检查服务是否可访问。</p>\n</li>\n<li><p>健康检查参数：健康检查命令可以使用一些参数来配置检查的间隔、超时和重试次数等。常用的健康检查参数包括：</p>\n<ul>\n<li><code>--interval</code>：指定检查的间隔时间，默认为30秒。</li>\n<li><code>--timeout</code>：指定每次检查的超时时间，默认为30秒。</li>\n<li><code>--retries</code>：指定连续失败的次数后将服务标记为不健康，默认为3次。</li>\n<li><code>--start-period</code>：指定容器启动后等待健康检查开始的时间，默认为0秒。</li>\n</ul>\n</li>\n<li><p><code>condition: service_healthy</code>配置：在Docker Compose中，可以使用<code>condition: service_healthy</code>来指定依赖的服务是否健康。当依赖的服务的健康状态为健康时，才会启动当前的服务。这样可以确保依赖的服务已经成功启动并且可用。</p>\n</li>\n</ol>\n<p>下面是一个示例的docker-compose.yml文件，演示了如何使用健康检查和<code>condition: service_healthy</code>来判断服务是否健康并依次启动：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">flask:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span></span><br><span class=\"line\">      <span class=\"attr\">context:</span> <span class=\"string\">./flask</span></span><br><span class=\"line\">      <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">flask-demo:latest</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">REDIS_HOST=redis-server</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">REDIS_PASS=$&#123;REDIS_PASSWORD&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span> </span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:5000&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">3s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">40s</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"attr\">redis-server:</span></span><br><span class=\"line\">        <span class=\"attr\">condition:</span> <span class=\"string\">service_healthy</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">backend</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">frontend</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">redis-server:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，flask服务依赖于redis-server服务。flask服务的健康检查命令是使用<code>curl</code>命令检查<code>http://localhost:5000</code>是否可访问。只有当redis-server服务的健康状态为健康时，flask服务才会启动。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/weixin_48447848/article/details/122632562\">【Docker系列】Docker Compose 服务依赖和健康检查_docker-compose healthcheck-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/xujiamin0022016/article/details/123642210\">[docker]-docker-compose通过healthcheck判断容器状态并依次启动_docker-compose healthcheck-CSDN博客</a></li>\n<li><a href=\"https://juejin.cn/post/7250374485567619131\">Docker compose 服务依赖关系及健康检查 - 掘金</a></li>\n</ol>\n<h2 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h2><ul>\n<li><a href=\"https://github.com/nocodb/nocodb/blob/develop/docker-compose/pg/docker-compose.yml\">nocodb部署yml</a></li>\n</ul>\n"},{"layout":"default","title":"docker镜像源","nav_order":13,"description":"docker镜像源","parent":"Article","has_children":false,"grand_parent":"Doc","_content":"\n# docker镜像源\n\n[参考文章](https://developer.aliyun.com/article/653081)\n\n```bash\n# Docker 官方中国区\n# https://registry.docker-cn.com\n# 网易\n# http://hub-mirror.c.163.com\n# ustc\n# https://docker.mirrors.ustc.edu.cn\n\n# 测试镜像源\ndocker run --rm hello-world --registry-mirror=https://registry.docker-cn.com\ndocker run --rm hello-world --registry-mirror=http://hub-mirror.c.163.com\ndocker run --rm hello-world --registry-mirror=https://docker.mirrors.ustc.edu.cn\n\ndocker run --rm node:14.21.1-slim --registry-mirror=https://registry.docker-cn.com\ndocker run --rm node:14.21.1-slim --registry-mirror=http://hub-mirror.c.163.com\ndocker run --rm node:14.21.1-slim --registry-mirror=https://docker.mirrors.ustc.edu.cn\n\n```\n\n- 最新可用的docker镜像源\n  - docker.fxxk.dedyn.io\n    - 顺便研究下Cloudflare Workers的工作原理, 感觉挺有用的\n    - [相关博客](https://blog.cmliussss.com/p/CF-Workers-docker.io/)\n  - 自己部署的docker镜像源\n    - [docker镜像源](https://cf-workers-docker-io-ac6.pages.dev/)\n","source":"_posts/docker/doc/article/docker镜像源.md","raw":"---\nlayout: default\ntitle: docker镜像源\nnav_order: 13\ndescription: docker镜像源\nparent: Article\nhas_children: false\npermalink: \"/docker/doc/article/docker镜像源/\"\ngrand_parent: Doc\n---\n\n# docker镜像源\n\n[参考文章](https://developer.aliyun.com/article/653081)\n\n```bash\n# Docker 官方中国区\n# https://registry.docker-cn.com\n# 网易\n# http://hub-mirror.c.163.com\n# ustc\n# https://docker.mirrors.ustc.edu.cn\n\n# 测试镜像源\ndocker run --rm hello-world --registry-mirror=https://registry.docker-cn.com\ndocker run --rm hello-world --registry-mirror=http://hub-mirror.c.163.com\ndocker run --rm hello-world --registry-mirror=https://docker.mirrors.ustc.edu.cn\n\ndocker run --rm node:14.21.1-slim --registry-mirror=https://registry.docker-cn.com\ndocker run --rm node:14.21.1-slim --registry-mirror=http://hub-mirror.c.163.com\ndocker run --rm node:14.21.1-slim --registry-mirror=https://docker.mirrors.ustc.edu.cn\n\n```\n\n- 最新可用的docker镜像源\n  - docker.fxxk.dedyn.io\n    - 顺便研究下Cloudflare Workers的工作原理, 感觉挺有用的\n    - [相关博客](https://blog.cmliussss.com/p/CF-Workers-docker.io/)\n  - 自己部署的docker镜像源\n    - [docker镜像源](https://cf-workers-docker-io-ac6.pages.dev/)\n","slug":"docker/doc/article/docker镜像源","published":1,"date":"2025-02-23T07:43:31.199Z","updated":"2025-02-23T07:43:31.200Z","__permalink":"/docker/doc/article/docker镜像源/","comments":1,"photos":[],"_id":"cm7k5rwak003cmswsewtb66w4","content":"<h1 id=\"docker镜像源\"><a href=\"#docker镜像源\" class=\"headerlink\" title=\"docker镜像源\"></a>docker镜像源</h1><p><a href=\"https://developer.aliyun.com/article/653081\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Docker 官方中国区</span></span><br><span class=\"line\"><span class=\"comment\"># https://registry.docker-cn.com</span></span><br><span class=\"line\"><span class=\"comment\"># 网易</span></span><br><span class=\"line\"><span class=\"comment\"># http://hub-mirror.c.163.com</span></span><br><span class=\"line\"><span class=\"comment\"># ustc</span></span><br><span class=\"line\"><span class=\"comment\"># https://docker.mirrors.ustc.edu.cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试镜像源</span></span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> hello-world --registry-mirror=https://registry.docker-cn.com</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> hello-world --registry-mirror=http://hub-mirror.c.163.com</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> hello-world --registry-mirror=https://docker.mirrors.ustc.edu.cn</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> node:14.21.1-slim --registry-mirror=https://registry.docker-cn.com</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> node:14.21.1-slim --registry-mirror=http://hub-mirror.c.163.com</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> node:14.21.1-slim --registry-mirror=https://docker.mirrors.ustc.edu.cn</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最新可用的docker镜像源<ul>\n<li>docker.fxxk.dedyn.io<ul>\n<li>顺便研究下Cloudflare Workers的工作原理, 感觉挺有用的</li>\n<li><a href=\"https://blog.cmliussss.com/p/CF-Workers-docker.io/\">相关博客</a></li>\n</ul>\n</li>\n<li>自己部署的docker镜像源<ul>\n<li><a href=\"https://cf-workers-docker-io-ac6.pages.dev/\">docker镜像源</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"docker镜像源\"><a href=\"#docker镜像源\" class=\"headerlink\" title=\"docker镜像源\"></a>docker镜像源</h1><p><a href=\"https://developer.aliyun.com/article/653081\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Docker 官方中国区</span></span><br><span class=\"line\"><span class=\"comment\"># https://registry.docker-cn.com</span></span><br><span class=\"line\"><span class=\"comment\"># 网易</span></span><br><span class=\"line\"><span class=\"comment\"># http://hub-mirror.c.163.com</span></span><br><span class=\"line\"><span class=\"comment\"># ustc</span></span><br><span class=\"line\"><span class=\"comment\"># https://docker.mirrors.ustc.edu.cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试镜像源</span></span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> hello-world --registry-mirror=https://registry.docker-cn.com</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> hello-world --registry-mirror=http://hub-mirror.c.163.com</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> hello-world --registry-mirror=https://docker.mirrors.ustc.edu.cn</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> node:14.21.1-slim --registry-mirror=https://registry.docker-cn.com</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> node:14.21.1-slim --registry-mirror=http://hub-mirror.c.163.com</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> node:14.21.1-slim --registry-mirror=https://docker.mirrors.ustc.edu.cn</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最新可用的docker镜像源<ul>\n<li>docker.fxxk.dedyn.io<ul>\n<li>顺便研究下Cloudflare Workers的工作原理, 感觉挺有用的</li>\n<li><a href=\"https://blog.cmliussss.com/p/CF-Workers-docker.io/\">相关博客</a></li>\n</ul>\n</li>\n<li>自己部署的docker镜像源<ul>\n<li><a href=\"https://cf-workers-docker-io-ac6.pages.dev/\">docker镜像源</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"layout":"default","title":"doc","nav_order":13,"description":"zipkin","parent":"Zipkin","has_children":false,"grand_parent":"Mid","_content":"\n# zipkin\n\n## simple\n\n```shell\nhttps://github.com/openzipkin-attic/docker-zipkin.git\n```\n","source":"_posts/docker/mid/zipkin/zipkin.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: zipkin\nparent: Zipkin\nhas_children: false\npermalink: \"/docker/mid/zipkin/zipkin/\"\ngrand_parent: Mid\n---\n\n# zipkin\n\n## simple\n\n```shell\nhttps://github.com/openzipkin-attic/docker-zipkin.git\n```\n","slug":"docker/mid/zipkin/zipkin","published":1,"date":"2025-02-23T07:43:31.091Z","updated":"2025-02-23T07:43:31.091Z","__permalink":"/docker/mid/zipkin/zipkin/","comments":1,"photos":[],"_id":"cm7k5rwak003dmsws8wi7hw7c","content":"<h1 id=\"zipkin\"><a href=\"#zipkin\" class=\"headerlink\" title=\"zipkin\"></a>zipkin</h1><h2 id=\"simple\"><a href=\"#simple\" class=\"headerlink\" title=\"simple\"></a>simple</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/openzipkin-attic/docker-zipkin.git</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"zipkin\"><a href=\"#zipkin\" class=\"headerlink\" title=\"zipkin\"></a>zipkin</h1><h2 id=\"simple\"><a href=\"#simple\" class=\"headerlink\" title=\"simple\"></a>simple</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/openzipkin-attic/docker-zipkin.git</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":13,"description":"docker容器记录","parent":"Container","has_children":false,"grand_parent":"Doc","_content":"\n# docker容器记录\n\n启动busybox\n\n```bash\n# 通过指定网络启动\ndocker run -it --rm --network middleware busybox\n```\n","source":"_posts/docker/doc/container/container.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: docker容器记录\nparent: Container\nhas_children: false\npermalink: \"/docker/doc/container/container/\"\ngrand_parent: Doc\n---\n\n# docker容器记录\n\n启动busybox\n\n```bash\n# 通过指定网络启动\ndocker run -it --rm --network middleware busybox\n```\n","slug":"docker/doc/container/container","published":1,"date":"2025-02-23T07:43:31.179Z","updated":"2025-02-23T07:43:31.179Z","__permalink":"/docker/doc/container/container/","comments":1,"photos":[],"_id":"cm7k5rwak003emsws146a3nn6","content":"<h1 id=\"docker容器记录\"><a href=\"#docker容器记录\" class=\"headerlink\" title=\"docker容器记录\"></a>docker容器记录</h1><p>启动busybox</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过指定网络启动</span></span><br><span class=\"line\">docker run -it --<span class=\"built_in\">rm</span> --network middleware busybox</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker容器记录\"><a href=\"#docker容器记录\" class=\"headerlink\" title=\"docker容器记录\"></a>docker容器记录</h1><p>启动busybox</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过指定网络启动</span></span><br><span class=\"line\">docker run -it --<span class=\"built_in\">rm</span> --network middleware busybox</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Container","nav_order":3,"has_children":true,"parent":"Container","_content":"\n# Container\n","source":"_posts/docker/doc/container/index.md","raw":"---\nlayout: default\ntitle: Container\nnav_order: 3\nhas_children: true\nparent: Container\npermalink: \"/docker/doc/container/\"\n---\n\n# Container\n","slug":"docker/doc/container/index","published":1,"date":"2025-02-23T07:43:31.179Z","updated":"2025-02-23T07:43:31.179Z","__permalink":"/docker/doc/container/","comments":1,"photos":[],"_id":"cm7k5rwak003fmsws4tw56jqr","content":"<h1 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h1>","excerpt":"","more":"<h1 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h1>"},{"layout":"default","title":"Article","nav_order":3,"has_children":true,"parent":"Article","_content":"\n# Article\n","source":"_posts/docker/doc/article/index.md","raw":"---\nlayout: default\ntitle: Article\nnav_order: 3\nhas_children: true\nparent: Article\npermalink: \"/docker/doc/article/\"\n---\n\n# Article\n","slug":"docker/doc/article/index","published":1,"date":"2025-02-23T07:43:31.198Z","updated":"2025-02-23T07:43:31.198Z","__permalink":"/docker/doc/article/","comments":1,"photos":[],"_id":"cm7k5rwak003gmswsaa7sfb1n","content":"<h1 id=\"Article\"><a href=\"#Article\" class=\"headerlink\" title=\"Article\"></a>Article</h1>","excerpt":"","more":"<h1 id=\"Article\"><a href=\"#Article\" class=\"headerlink\" title=\"Article\"></a>Article</h1>"},{"layout":"default","title":"docker-context","nav_order":13,"description":"docker上下文相关记录","parent":"Docker-context","has_children":false,"grand_parent":"Doc","_content":"\n# docker上下文相关记录\n\n[参考文章](https://dockerdocs.cn/engine/context/working-with-contexts/)\n\n## 创建上下文\n\n```bash\ndocker context create unix-test \\\n  --docker host=unix:///var/run/docker.sock\n# 使用k8s作为协调器(被遗弃了)\ndocker context create k8s-test \\\n  --default-stack-orchestrator=kubernetes \\\n  --kubernetes config-file=/home/ubuntu/.kube/config \\\n  --docker host=unix:///var/run/docker.sock\n```\n","source":"_posts/docker/doc/docker-context/docker-context.md","raw":"---\nlayout: default\ntitle: docker-context\nnav_order: 13\ndescription: docker上下文相关记录\nparent: Docker-context\nhas_children: false\npermalink: \"/docker/doc/docker-context/docker-context/\"\ngrand_parent: Doc\n---\n\n# docker上下文相关记录\n\n[参考文章](https://dockerdocs.cn/engine/context/working-with-contexts/)\n\n## 创建上下文\n\n```bash\ndocker context create unix-test \\\n  --docker host=unix:///var/run/docker.sock\n# 使用k8s作为协调器(被遗弃了)\ndocker context create k8s-test \\\n  --default-stack-orchestrator=kubernetes \\\n  --kubernetes config-file=/home/ubuntu/.kube/config \\\n  --docker host=unix:///var/run/docker.sock\n```\n","slug":"docker/doc/docker-context/docker-context","published":1,"date":"2025-02-23T07:43:31.181Z","updated":"2025-02-23T07:43:31.181Z","__permalink":"/docker/doc/docker-context/docker-context/","comments":1,"photos":[],"_id":"cm7k5rwak003hmsws6b9b8cxb","content":"<h1 id=\"docker上下文相关记录\"><a href=\"#docker上下文相关记录\" class=\"headerlink\" title=\"docker上下文相关记录\"></a>docker上下文相关记录</h1><p><a href=\"https://dockerdocs.cn/engine/context/working-with-contexts/\">参考文章</a></p>\n<h2 id=\"创建上下文\"><a href=\"#创建上下文\" class=\"headerlink\" title=\"创建上下文\"></a>创建上下文</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker context create unix-test \\</span><br><span class=\"line\">  --docker host=unix:///var/run/docker.sock</span><br><span class=\"line\"><span class=\"comment\"># 使用k8s作为协调器(被遗弃了)</span></span><br><span class=\"line\">docker context create k8s-test \\</span><br><span class=\"line\">  --default-stack-orchestrator=kubernetes \\</span><br><span class=\"line\">  --kubernetes config-file=/home/ubuntu/.kube/config \\</span><br><span class=\"line\">  --docker host=unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker上下文相关记录\"><a href=\"#docker上下文相关记录\" class=\"headerlink\" title=\"docker上下文相关记录\"></a>docker上下文相关记录</h1><p><a href=\"https://dockerdocs.cn/engine/context/working-with-contexts/\">参考文章</a></p>\n<h2 id=\"创建上下文\"><a href=\"#创建上下文\" class=\"headerlink\" title=\"创建上下文\"></a>创建上下文</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker context create unix-test \\</span><br><span class=\"line\">  --docker host=unix:///var/run/docker.sock</span><br><span class=\"line\"><span class=\"comment\"># 使用k8s作为协调器(被遗弃了)</span></span><br><span class=\"line\">docker context create k8s-test \\</span><br><span class=\"line\">  --default-stack-orchestrator=kubernetes \\</span><br><span class=\"line\">  --kubernetes config-file=/home/ubuntu/.kube/config \\</span><br><span class=\"line\">  --docker host=unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Docker-context","nav_order":3,"has_children":true,"parent":"Docker-context","_content":"\n# Docker-context\n","source":"_posts/docker/doc/docker-context/index.md","raw":"---\nlayout: default\ntitle: Docker-context\nnav_order: 3\nhas_children: true\nparent: Docker-context\npermalink: \"/docker/doc/docker-context/\"\n---\n\n# Docker-context\n","slug":"docker/doc/docker-context/index","published":1,"date":"2025-02-23T07:43:31.182Z","updated":"2025-02-23T07:43:31.182Z","__permalink":"/docker/doc/docker-context/","comments":1,"photos":[],"_id":"cm7k5rwak003imswsbp6y1ql5","content":"<h1 id=\"Docker-context\"><a href=\"#Docker-context\" class=\"headerlink\" title=\"Docker-context\"></a>Docker-context</h1>","excerpt":"","more":"<h1 id=\"Docker-context\"><a href=\"#Docker-context\" class=\"headerlink\" title=\"Docker-context\"></a>Docker-context</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"yum安装erlang","parent":"Erlang","has_children":false,"grand_parent":"Doc","_content":"\n# yum安装erlang\n\n```shell\n\n#卸载erlang\nyum -y remove erlang-*\n\n#按官网的提示操作\n\n#使用存储库安装\nwget https://packages.erlang-solutions.com/erlang-solutions-2.0-1.noarch.rpm\nrpm -Uvh erlang-solutions-2.0-1.noarch.rpm\n\n#手动添加存储库条目\nrpm --import https://packages.erlang-solutions.com/rpm/erlang_solutions.asc\n\n# 清楚原有yum缓存\nyum clean all\n# 生成缓存\nyum makecache\n# 查看配置好的yum源是否正常\nyum repolist\n\n#查看erlang可安装版本\nyum list | grep erlang\n\nyum list erlang --showduplicates | sort -r\n\n#安装erlang,也可安装指定版本\nyum install -y erlang\n\n#安装erlang指定版本\nyum install erlang-24.0-1.el7.aarch64\n\n```\n","source":"_posts/docker/doc/erlang/erlang.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: yum安装erlang\nparent: Erlang\nhas_children: false\npermalink: \"/docker/doc/erlang/erlang/\"\ngrand_parent: Doc\n---\n\n# yum安装erlang\n\n```shell\n\n#卸载erlang\nyum -y remove erlang-*\n\n#按官网的提示操作\n\n#使用存储库安装\nwget https://packages.erlang-solutions.com/erlang-solutions-2.0-1.noarch.rpm\nrpm -Uvh erlang-solutions-2.0-1.noarch.rpm\n\n#手动添加存储库条目\nrpm --import https://packages.erlang-solutions.com/rpm/erlang_solutions.asc\n\n# 清楚原有yum缓存\nyum clean all\n# 生成缓存\nyum makecache\n# 查看配置好的yum源是否正常\nyum repolist\n\n#查看erlang可安装版本\nyum list | grep erlang\n\nyum list erlang --showduplicates | sort -r\n\n#安装erlang,也可安装指定版本\nyum install -y erlang\n\n#安装erlang指定版本\nyum install erlang-24.0-1.el7.aarch64\n\n```\n","slug":"docker/doc/erlang/erlang","published":1,"date":"2025-02-23T07:43:31.176Z","updated":"2025-02-23T07:43:31.176Z","__permalink":"/docker/doc/erlang/erlang/","comments":1,"photos":[],"_id":"cm7k5rwal003jmsws26kh6mhn","content":"<h1 id=\"yum安装erlang\"><a href=\"#yum安装erlang\" class=\"headerlink\" title=\"yum安装erlang\"></a>yum安装erlang</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">卸载erlang</span></span><br><span class=\"line\">yum -y remove erlang-*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">按官网的提示操作</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用存储库安装</span></span><br><span class=\"line\">wget https://packages.erlang-solutions.com/erlang-solutions-2.0-1.noarch.rpm</span><br><span class=\"line\">rpm -Uvh erlang-solutions-2.0-1.noarch.rpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">手动添加存储库条目</span></span><br><span class=\"line\">rpm --import https://packages.erlang-solutions.com/rpm/erlang_solutions.asc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清楚原有yum缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成缓存</span></span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看配置好的yum源是否正常</span></span><br><span class=\"line\">yum repolist</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看erlang可安装版本</span></span><br><span class=\"line\">yum list | grep erlang</span><br><span class=\"line\"></span><br><span class=\"line\">yum list erlang --showduplicates | sort -r</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装erlang,也可安装指定版本</span></span><br><span class=\"line\">yum install -y erlang</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装erlang指定版本</span></span><br><span class=\"line\">yum install erlang-24.0-1.el7.aarch64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"yum安装erlang\"><a href=\"#yum安装erlang\" class=\"headerlink\" title=\"yum安装erlang\"></a>yum安装erlang</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">卸载erlang</span></span><br><span class=\"line\">yum -y remove erlang-*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">按官网的提示操作</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用存储库安装</span></span><br><span class=\"line\">wget https://packages.erlang-solutions.com/erlang-solutions-2.0-1.noarch.rpm</span><br><span class=\"line\">rpm -Uvh erlang-solutions-2.0-1.noarch.rpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">手动添加存储库条目</span></span><br><span class=\"line\">rpm --import https://packages.erlang-solutions.com/rpm/erlang_solutions.asc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清楚原有yum缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成缓存</span></span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看配置好的yum源是否正常</span></span><br><span class=\"line\">yum repolist</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看erlang可安装版本</span></span><br><span class=\"line\">yum list | grep erlang</span><br><span class=\"line\"></span><br><span class=\"line\">yum list erlang --showduplicates | sort -r</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装erlang,也可安装指定版本</span></span><br><span class=\"line\">yum install -y erlang</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装erlang指定版本</span></span><br><span class=\"line\">yum install erlang-24.0-1.el7.aarch64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Erlang","nav_order":3,"has_children":true,"parent":"Erlang","_content":"\n# Erlang\n","source":"_posts/docker/doc/erlang/index.md","raw":"---\nlayout: default\ntitle: Erlang\nnav_order: 3\nhas_children: true\nparent: Erlang\npermalink: \"/docker/doc/erlang/\"\n---\n\n# Erlang\n","slug":"docker/doc/erlang/index","published":1,"date":"2025-02-23T07:43:31.176Z","updated":"2025-02-23T07:43:31.177Z","__permalink":"/docker/doc/erlang/","comments":1,"photos":[],"_id":"cm7k5rwal003kmsws0lya0n92","content":"<h1 id=\"Erlang\"><a href=\"#Erlang\" class=\"headerlink\" title=\"Erlang\"></a>Erlang</h1>","excerpt":"","more":"<h1 id=\"Erlang\"><a href=\"#Erlang\" class=\"headerlink\" title=\"Erlang\"></a>Erlang</h1>"},{"layout":"default","title":"Material","nav_order":3,"has_children":true,"parent":"Material","_content":"\n# Material\n","source":"_posts/docker/doc/material/index.md","raw":"---\nlayout: default\ntitle: Material\nnav_order: 3\nhas_children: true\nparent: Material\npermalink: \"/docker/doc/material/\"\n---\n\n# Material\n","slug":"docker/doc/material/index","published":1,"date":"2025-02-23T07:43:31.245Z","updated":"2025-02-23T07:43:31.245Z","__permalink":"/docker/doc/material/","comments":1,"photos":[],"_id":"cm7k5rwal003lmsws9zul6uhh","content":"<h1 id=\"Material\"><a href=\"#Material\" class=\"headerlink\" title=\"Material\"></a>Material</h1>","excerpt":"","more":"<h1 id=\"Material\"><a href=\"#Material\" class=\"headerlink\" title=\"Material\"></a>Material</h1>"},{"layout":"default","title":"docker-container-permission-denied","nav_order":13,"description":"docker容器没权限问题","parent":"Problems","has_children":false,"grand_parent":"Doc","_content":"\n# docker容器没权限问题\n\n1. 创建docker容器时，指定`--privileged`参数\n\n## docker gid 查看命令\n\n[参考地址1](https://www.doubao.com/thread/w9e714164e14f12b9)\n[参考地址2](https://github.com/influxdata/sandbox/issues/79)(PS: 貌似没啥用的样子)\n[参考地址3](https://github.com/influxdata/sandbox/issues/83)\n\n```bash\nstat -c '%g' /var/run/docker.sock\n```\n","source":"_posts/docker/doc/problems/docker-container-permission-denied.md","raw":"---\nlayout: default\ntitle: docker-container-permission-denied\nnav_order: 13\ndescription: docker容器没权限问题\nparent: Problems\nhas_children: false\npermalink: \"/docker/doc/problems/docker-container-permission-denied/\"\ngrand_parent: Doc\n---\n\n# docker容器没权限问题\n\n1. 创建docker容器时，指定`--privileged`参数\n\n## docker gid 查看命令\n\n[参考地址1](https://www.doubao.com/thread/w9e714164e14f12b9)\n[参考地址2](https://github.com/influxdata/sandbox/issues/79)(PS: 貌似没啥用的样子)\n[参考地址3](https://github.com/influxdata/sandbox/issues/83)\n\n```bash\nstat -c '%g' /var/run/docker.sock\n```\n","slug":"docker/doc/problems/docker-container-permission-denied","published":1,"date":"2025-02-23T07:43:31.178Z","updated":"2025-02-23T07:43:31.178Z","__permalink":"/docker/doc/problems/docker-container-permission-denied/","comments":1,"photos":[],"_id":"cm7k5rwal003mmswsfc5s67mm","content":"<h1 id=\"docker容器没权限问题\"><a href=\"#docker容器没权限问题\" class=\"headerlink\" title=\"docker容器没权限问题\"></a>docker容器没权限问题</h1><ol>\n<li>创建docker容器时，指定<code>--privileged</code>参数</li>\n</ol>\n<h2 id=\"docker-gid-查看命令\"><a href=\"#docker-gid-查看命令\" class=\"headerlink\" title=\"docker gid 查看命令\"></a>docker gid 查看命令</h2><p><a href=\"https://www.doubao.com/thread/w9e714164e14f12b9\">参考地址1</a><br><a href=\"https://github.com/influxdata/sandbox/issues/79\">参考地址2</a>(PS: 貌似没啥用的样子)<br><a href=\"https://github.com/influxdata/sandbox/issues/83\">参考地址3</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">&#x27;%g&#x27;</span> /var/run/docker.sock</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker容器没权限问题\"><a href=\"#docker容器没权限问题\" class=\"headerlink\" title=\"docker容器没权限问题\"></a>docker容器没权限问题</h1><ol>\n<li>创建docker容器时，指定<code>--privileged</code>参数</li>\n</ol>\n<h2 id=\"docker-gid-查看命令\"><a href=\"#docker-gid-查看命令\" class=\"headerlink\" title=\"docker gid 查看命令\"></a>docker gid 查看命令</h2><p><a href=\"https://www.doubao.com/thread/w9e714164e14f12b9\">参考地址1</a><br><a href=\"https://github.com/influxdata/sandbox/issues/79\">参考地址2</a>(PS: 貌似没啥用的样子)<br><a href=\"https://github.com/influxdata/sandbox/issues/83\">参考地址3</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">&#x27;%g&#x27;</span> /var/run/docker.sock</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"docker-swarm-networks","nav_order":13,"description":"docker swarm networks","parent":"Problems","has_children":false,"grand_parent":"Doc","_content":"\n# docker swarm networks\n\n## 网段冲突问题解决方案\n\n根据搜索结果，以下是关于如何更改Docker Ingress网络默认子网范围的解决方案：\n\n1. 首先，我们需要确认当前Docker Ingress网络的默认子网范围。可以使用以下命令检查网络配置信息：`docker network inspect ingress` [[1]](https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network)。\n2. 如果默认子网范围与您的计算机子网范围冲突，您可以尝试以下方法来更改Docker Ingress网络的子网范围：\n\n   - 方法一：使用Docker Swarm命令行选项来指定子网范围。在初始化或加入Docker Swarm时，可以使用`--default-addr-pool`选项来指定子网范围。例如：`docker swarm init --default-addr-pool 192.168.0.0/16` [[1]](https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network)。\n   - 方法二：编辑Docker的守护进程配置文件`daemon.json`来指定子网范围。您可以使用以下步骤进行操作：\n     - 使用文本编辑器打开`/etc/docker/daemon.json`文件（在Windows上是`C:\\ProgramData\\Docker\\config\\daemon.json`）。\n     - 添加以下内容到文件中：\n  \n       ```json\n       {\n         \"default-address-pools\": [\n           {\"base\":\"192.168.0.0/16\",\"size\":24}\n         ]\n       }\n       ```\n\n       将`192.168.0.0/16`替换为您想要的子网范围。\n     - 保存文件并重启Docker服务，以使更改生效。在Linux上，可以使用`sudo systemctl restart docker`命令来重启Docker服务，在Windows上，可以通过Docker桌面界面的\"Troubleshoot\"选项来重启Docker Desktop [[2]](https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet)。\n\n请注意，更改Docker网络的子网范围可能会影响到已经运行的容器和网络连接，请谨慎操作并确保备份重要数据。\n\n---\n\nLearn more:\n\n1. [networking - How to change ip address range of docker swarm ingress network - Stack Overflow](https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network)\n2. [How to change the default docker subnet IP range](https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet)\n3. [Changing Docker's default subnet IP range | cylab.be](https://cylab.be/blog/277/changing-dockers-default-subnet-ip-range)\n\n## 宿主机与容器不通问题\n\n```bash\n# 方式一：添加路由\n# route add -net 192.168.1.0 netmask 255.255.255.0 gw 172.20.0.1 dev docker_gwbridge # dev 是用来指定网络接口的参数。它用于指定要添加路由的网络接口设备。\nroute add -net <容器IP网段> netmask <容器IP网段的子网掩码> gw <docker_gwbridge的网关IP>  dev docker_gwbridge\n  ## 查看路由\nroute -n\n\n## 更多操作\n\n# 端口转发问题(上面解决了路由的问题，若还有端口访问不通，则按下面方式解决)\n\n# 查看nat转发的规则\niptables -t nat -nvL\n\n# 添加nat转发规则(实现宿主机访问容器中未开放的端口(即docker run时未添加-p参数))\niptables -t nat -A DOCKER -p tcp -m tcp --dport 8088 -j DNAT --to-destination 10.0.0.2:8088\n# 删除nat\n  ## 查看规则编号\n  iptables -t nat -nL --line-number\n  ## 删除编号\n  iptables -t nat -D DOCKER 4 \n```\n","source":"_posts/docker/doc/problems/docker-swarm-networks.md","raw":"---\nlayout: default\ntitle: docker-swarm-networks\nnav_order: 13\ndescription: docker swarm networks\nparent: Problems\nhas_children: false\npermalink: \"/docker/doc/problems/docker-swarm-networks/\"\ngrand_parent: Doc\n---\n\n# docker swarm networks\n\n## 网段冲突问题解决方案\n\n根据搜索结果，以下是关于如何更改Docker Ingress网络默认子网范围的解决方案：\n\n1. 首先，我们需要确认当前Docker Ingress网络的默认子网范围。可以使用以下命令检查网络配置信息：`docker network inspect ingress` [[1]](https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network)。\n2. 如果默认子网范围与您的计算机子网范围冲突，您可以尝试以下方法来更改Docker Ingress网络的子网范围：\n\n   - 方法一：使用Docker Swarm命令行选项来指定子网范围。在初始化或加入Docker Swarm时，可以使用`--default-addr-pool`选项来指定子网范围。例如：`docker swarm init --default-addr-pool 192.168.0.0/16` [[1]](https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network)。\n   - 方法二：编辑Docker的守护进程配置文件`daemon.json`来指定子网范围。您可以使用以下步骤进行操作：\n     - 使用文本编辑器打开`/etc/docker/daemon.json`文件（在Windows上是`C:\\ProgramData\\Docker\\config\\daemon.json`）。\n     - 添加以下内容到文件中：\n  \n       ```json\n       {\n         \"default-address-pools\": [\n           {\"base\":\"192.168.0.0/16\",\"size\":24}\n         ]\n       }\n       ```\n\n       将`192.168.0.0/16`替换为您想要的子网范围。\n     - 保存文件并重启Docker服务，以使更改生效。在Linux上，可以使用`sudo systemctl restart docker`命令来重启Docker服务，在Windows上，可以通过Docker桌面界面的\"Troubleshoot\"选项来重启Docker Desktop [[2]](https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet)。\n\n请注意，更改Docker网络的子网范围可能会影响到已经运行的容器和网络连接，请谨慎操作并确保备份重要数据。\n\n---\n\nLearn more:\n\n1. [networking - How to change ip address range of docker swarm ingress network - Stack Overflow](https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network)\n2. [How to change the default docker subnet IP range](https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet)\n3. [Changing Docker's default subnet IP range | cylab.be](https://cylab.be/blog/277/changing-dockers-default-subnet-ip-range)\n\n## 宿主机与容器不通问题\n\n```bash\n# 方式一：添加路由\n# route add -net 192.168.1.0 netmask 255.255.255.0 gw 172.20.0.1 dev docker_gwbridge # dev 是用来指定网络接口的参数。它用于指定要添加路由的网络接口设备。\nroute add -net <容器IP网段> netmask <容器IP网段的子网掩码> gw <docker_gwbridge的网关IP>  dev docker_gwbridge\n  ## 查看路由\nroute -n\n\n## 更多操作\n\n# 端口转发问题(上面解决了路由的问题，若还有端口访问不通，则按下面方式解决)\n\n# 查看nat转发的规则\niptables -t nat -nvL\n\n# 添加nat转发规则(实现宿主机访问容器中未开放的端口(即docker run时未添加-p参数))\niptables -t nat -A DOCKER -p tcp -m tcp --dport 8088 -j DNAT --to-destination 10.0.0.2:8088\n# 删除nat\n  ## 查看规则编号\n  iptables -t nat -nL --line-number\n  ## 删除编号\n  iptables -t nat -D DOCKER 4 \n```\n","slug":"docker/doc/problems/docker-swarm-networks","published":1,"date":"2025-02-23T07:43:31.177Z","updated":"2025-02-23T07:43:31.177Z","__permalink":"/docker/doc/problems/docker-swarm-networks/","comments":1,"photos":[],"_id":"cm7k5rwal003nmswsbgkp9xk5","content":"<h1 id=\"docker-swarm-networks\"><a href=\"#docker-swarm-networks\" class=\"headerlink\" title=\"docker swarm networks\"></a>docker swarm networks</h1><h2 id=\"网段冲突问题解决方案\"><a href=\"#网段冲突问题解决方案\" class=\"headerlink\" title=\"网段冲突问题解决方案\"></a>网段冲突问题解决方案</h2><p>根据搜索结果，以下是关于如何更改Docker Ingress网络默认子网范围的解决方案：</p>\n<ol>\n<li><p>首先，我们需要确认当前Docker Ingress网络的默认子网范围。可以使用以下命令检查网络配置信息：<code>docker network inspect ingress</code> <a href=\"https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network\">[1]</a>。</p>\n</li>\n<li><p>如果默认子网范围与您的计算机子网范围冲突，您可以尝试以下方法来更改Docker Ingress网络的子网范围：</p>\n<ul>\n<li>方法一：使用Docker Swarm命令行选项来指定子网范围。在初始化或加入Docker Swarm时，可以使用<code>--default-addr-pool</code>选项来指定子网范围。例如：<code>docker swarm init --default-addr-pool 192.168.0.0/16</code> <a href=\"https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network\">[1]</a>。</li>\n<li>方法二：编辑Docker的守护进程配置文件<code>daemon.json</code>来指定子网范围。您可以使用以下步骤进行操作：<ul>\n<li><p>使用文本编辑器打开<code>/etc/docker/daemon.json</code>文件（在Windows上是<code>C:\\ProgramData\\Docker\\config\\daemon.json</code>）。</p>\n</li>\n<li><p>添加以下内容到文件中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;default-address-pools&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;base&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;192.168.0.0/16&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">24</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>将<code>192.168.0.0/16</code>替换为您想要的子网范围。</p>\n</li>\n<li><p>保存文件并重启Docker服务，以使更改生效。在Linux上，可以使用<code>sudo systemctl restart docker</code>命令来重启Docker服务，在Windows上，可以通过Docker桌面界面的”Troubleshoot”选项来重启Docker Desktop <a href=\"https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet\">[2]</a>。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>请注意，更改Docker网络的子网范围可能会影响到已经运行的容器和网络连接，请谨慎操作并确保备份重要数据。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network\">networking - How to change ip address range of docker swarm ingress network - Stack Overflow</a></li>\n<li><a href=\"https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet\">How to change the default docker subnet IP range</a></li>\n<li><a href=\"https://cylab.be/blog/277/changing-dockers-default-subnet-ip-range\">Changing Docker’s default subnet IP range | cylab.be</a></li>\n</ol>\n<h2 id=\"宿主机与容器不通问题\"><a href=\"#宿主机与容器不通问题\" class=\"headerlink\" title=\"宿主机与容器不通问题\"></a>宿主机与容器不通问题</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：添加路由</span></span><br><span class=\"line\"><span class=\"comment\"># route add -net 192.168.1.0 netmask 255.255.255.0 gw 172.20.0.1 dev docker_gwbridge # dev 是用来指定网络接口的参数。它用于指定要添加路由的网络接口设备。</span></span><br><span class=\"line\">route add -net &lt;容器IP网段&gt; netmask &lt;容器IP网段的子网掩码&gt; gw &lt;docker_gwbridge的网关IP&gt;  dev docker_gwbridge</span><br><span class=\"line\">  <span class=\"comment\">## 查看路由</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 更多操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 端口转发问题(上面解决了路由的问题，若还有端口访问不通，则按下面方式解决)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nat转发的规则</span></span><br><span class=\"line\">iptables -t nat -nvL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加nat转发规则(实现宿主机访问容器中未开放的端口(即docker run时未添加-p参数))</span></span><br><span class=\"line\">iptables -t nat -A DOCKER -p tcp -m tcp --dport 8088 -j DNAT --to-destination 10.0.0.2:8088</span><br><span class=\"line\"><span class=\"comment\"># 删除nat</span></span><br><span class=\"line\">  <span class=\"comment\">## 查看规则编号</span></span><br><span class=\"line\">  iptables -t nat -nL --line-number</span><br><span class=\"line\">  <span class=\"comment\">## 删除编号</span></span><br><span class=\"line\">  iptables -t nat -D DOCKER 4 </span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker-swarm-networks\"><a href=\"#docker-swarm-networks\" class=\"headerlink\" title=\"docker swarm networks\"></a>docker swarm networks</h1><h2 id=\"网段冲突问题解决方案\"><a href=\"#网段冲突问题解决方案\" class=\"headerlink\" title=\"网段冲突问题解决方案\"></a>网段冲突问题解决方案</h2><p>根据搜索结果，以下是关于如何更改Docker Ingress网络默认子网范围的解决方案：</p>\n<ol>\n<li><p>首先，我们需要确认当前Docker Ingress网络的默认子网范围。可以使用以下命令检查网络配置信息：<code>docker network inspect ingress</code> <a href=\"https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network\">[1]</a>。</p>\n</li>\n<li><p>如果默认子网范围与您的计算机子网范围冲突，您可以尝试以下方法来更改Docker Ingress网络的子网范围：</p>\n<ul>\n<li>方法一：使用Docker Swarm命令行选项来指定子网范围。在初始化或加入Docker Swarm时，可以使用<code>--default-addr-pool</code>选项来指定子网范围。例如：<code>docker swarm init --default-addr-pool 192.168.0.0/16</code> <a href=\"https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network\">[1]</a>。</li>\n<li>方法二：编辑Docker的守护进程配置文件<code>daemon.json</code>来指定子网范围。您可以使用以下步骤进行操作：<ul>\n<li><p>使用文本编辑器打开<code>/etc/docker/daemon.json</code>文件（在Windows上是<code>C:\\ProgramData\\Docker\\config\\daemon.json</code>）。</p>\n</li>\n<li><p>添加以下内容到文件中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;default-address-pools&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;base&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;192.168.0.0/16&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">24</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>将<code>192.168.0.0/16</code>替换为您想要的子网范围。</p>\n</li>\n<li><p>保存文件并重启Docker服务，以使更改生效。在Linux上，可以使用<code>sudo systemctl restart docker</code>命令来重启Docker服务，在Windows上，可以通过Docker桌面界面的”Troubleshoot”选项来重启Docker Desktop <a href=\"https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet\">[2]</a>。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>请注意，更改Docker网络的子网范围可能会影响到已经运行的容器和网络连接，请谨慎操作并确保备份重要数据。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/42954017/how-to-change-ip-address-range-of-docker-swarm-ingress-network\">networking - How to change ip address range of docker swarm ingress network - Stack Overflow</a></li>\n<li><a href=\"https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet\">How to change the default docker subnet IP range</a></li>\n<li><a href=\"https://cylab.be/blog/277/changing-dockers-default-subnet-ip-range\">Changing Docker’s default subnet IP range | cylab.be</a></li>\n</ol>\n<h2 id=\"宿主机与容器不通问题\"><a href=\"#宿主机与容器不通问题\" class=\"headerlink\" title=\"宿主机与容器不通问题\"></a>宿主机与容器不通问题</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：添加路由</span></span><br><span class=\"line\"><span class=\"comment\"># route add -net 192.168.1.0 netmask 255.255.255.0 gw 172.20.0.1 dev docker_gwbridge # dev 是用来指定网络接口的参数。它用于指定要添加路由的网络接口设备。</span></span><br><span class=\"line\">route add -net &lt;容器IP网段&gt; netmask &lt;容器IP网段的子网掩码&gt; gw &lt;docker_gwbridge的网关IP&gt;  dev docker_gwbridge</span><br><span class=\"line\">  <span class=\"comment\">## 查看路由</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 更多操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 端口转发问题(上面解决了路由的问题，若还有端口访问不通，则按下面方式解决)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nat转发的规则</span></span><br><span class=\"line\">iptables -t nat -nvL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加nat转发规则(实现宿主机访问容器中未开放的端口(即docker run时未添加-p参数))</span></span><br><span class=\"line\">iptables -t nat -A DOCKER -p tcp -m tcp --dport 8088 -j DNAT --to-destination 10.0.0.2:8088</span><br><span class=\"line\"><span class=\"comment\"># 删除nat</span></span><br><span class=\"line\">  <span class=\"comment\">## 查看规则编号</span></span><br><span class=\"line\">  iptables -t nat -nL --line-number</span><br><span class=\"line\">  <span class=\"comment\">## 删除编号</span></span><br><span class=\"line\">  iptables -t nat -D DOCKER 4 </span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Problems","nav_order":3,"has_children":true,"parent":"Problems","_content":"\n# Problems\n","source":"_posts/docker/doc/problems/index.md","raw":"---\nlayout: default\ntitle: Problems\nnav_order: 3\nhas_children: true\nparent: Problems\npermalink: \"/docker/doc/problems/\"\n---\n\n# Problems\n","slug":"docker/doc/problems/index","published":1,"date":"2025-02-23T07:43:31.178Z","updated":"2025-02-23T07:43:31.178Z","__permalink":"/docker/doc/problems/","comments":1,"photos":[],"_id":"cm7k5rwal003omsws8mm01g9e","content":"<h1 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h1>","excerpt":"","more":"<h1 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h1>"},{"layout":"default","title":"test2","nav_order":13,"description":"test2","parent":"Test","has_children":false,"grand_parent":"Doc","_content":"\n# test2\n\n## 这里是测试2的二级标题\n\n### 这里是测试2的三级标题\n\n#### 这里是测试2的四级标题\n\n##### 这里是测试2的五级标题\n\n###### 这里是测试2的六级标题\n","source":"_posts/docker/doc/test/test2.md","raw":"---\nlayout: default\ntitle: test2\nnav_order: 13\ndescription: test2\nparent: Test\nhas_children: false\npermalink: \"/docker/doc/test/test2/\"\ngrand_parent: Doc\n---\n\n# test2\n\n## 这里是测试2的二级标题\n\n### 这里是测试2的三级标题\n\n#### 这里是测试2的四级标题\n\n##### 这里是测试2的五级标题\n\n###### 这里是测试2的六级标题\n","slug":"docker/doc/test/test2","published":1,"date":"2025-02-23T07:43:31.175Z","updated":"2025-02-23T07:43:31.175Z","__permalink":"/docker/doc/test/test2/","comments":1,"photos":[],"_id":"cm7k5rwal003pmsws0cs5efwq","content":"<h1 id=\"test2\"><a href=\"#test2\" class=\"headerlink\" title=\"test2\"></a>test2</h1><h2 id=\"这里是测试2的二级标题\"><a href=\"#这里是测试2的二级标题\" class=\"headerlink\" title=\"这里是测试2的二级标题\"></a>这里是测试2的二级标题</h2><h3 id=\"这里是测试2的三级标题\"><a href=\"#这里是测试2的三级标题\" class=\"headerlink\" title=\"这里是测试2的三级标题\"></a>这里是测试2的三级标题</h3><h4 id=\"这里是测试2的四级标题\"><a href=\"#这里是测试2的四级标题\" class=\"headerlink\" title=\"这里是测试2的四级标题\"></a>这里是测试2的四级标题</h4><h5 id=\"这里是测试2的五级标题\"><a href=\"#这里是测试2的五级标题\" class=\"headerlink\" title=\"这里是测试2的五级标题\"></a>这里是测试2的五级标题</h5><h6 id=\"这里是测试2的六级标题\"><a href=\"#这里是测试2的六级标题\" class=\"headerlink\" title=\"这里是测试2的六级标题\"></a>这里是测试2的六级标题</h6>","excerpt":"","more":"<h1 id=\"test2\"><a href=\"#test2\" class=\"headerlink\" title=\"test2\"></a>test2</h1><h2 id=\"这里是测试2的二级标题\"><a href=\"#这里是测试2的二级标题\" class=\"headerlink\" title=\"这里是测试2的二级标题\"></a>这里是测试2的二级标题</h2><h3 id=\"这里是测试2的三级标题\"><a href=\"#这里是测试2的三级标题\" class=\"headerlink\" title=\"这里是测试2的三级标题\"></a>这里是测试2的三级标题</h3><h4 id=\"这里是测试2的四级标题\"><a href=\"#这里是测试2的四级标题\" class=\"headerlink\" title=\"这里是测试2的四级标题\"></a>这里是测试2的四级标题</h4><h5 id=\"这里是测试2的五级标题\"><a href=\"#这里是测试2的五级标题\" class=\"headerlink\" title=\"这里是测试2的五级标题\"></a>这里是测试2的五级标题</h5><h6 id=\"这里是测试2的六级标题\"><a href=\"#这里是测试2的六级标题\" class=\"headerlink\" title=\"这里是测试2的六级标题\"></a>这里是测试2的六级标题</h6>"},{"layout":"default","title":"doc","nav_order":13,"description":"k8s dashboard","parent":"Dashboard","has_children":false,"grand_parent":"App","_content":"\n# k8s dashboard\n\n## 部署 Dashboard UI\n\n```shell\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n```\n\n## 创建用户\n\n```shell\n# dashboard-ClusterRoleBinding.yaml\nkubectl apply -f dashboard-ClusterRoleBinding.yaml\n# dashboard-ServiceAccount.yaml\nkubectl apply -f dashboard-ServiceAccount.yaml\n# Getting a Bearer Token\nkubectl -n kubernetes-dashboard create token admin-user\n# Clean up and next steps\nkubectl -n kubernetes-dashboard delete serviceaccount admin-user\nkubectl -n kubernetes-dashboard delete clusterrolebinding admin-user\n```\n\n## 命令行代理\n\n```shell\nkubectl proxy\n# PS: kubectl 会使得 Dashboard 可以通过 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ 访问。\n\n```\n\n## 部署MySQL\n\n```yaml\n# ./deploy/mysql.yml\n```\n","source":"_posts/kubernetes/app/dashboard/dashboard.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: k8s dashboard\nparent: Dashboard\nhas_children: false\npermalink: \"/kubernetes/app/dashboard/dashboard/\"\ngrand_parent: App\n---\n\n# k8s dashboard\n\n## 部署 Dashboard UI\n\n```shell\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n```\n\n## 创建用户\n\n```shell\n# dashboard-ClusterRoleBinding.yaml\nkubectl apply -f dashboard-ClusterRoleBinding.yaml\n# dashboard-ServiceAccount.yaml\nkubectl apply -f dashboard-ServiceAccount.yaml\n# Getting a Bearer Token\nkubectl -n kubernetes-dashboard create token admin-user\n# Clean up and next steps\nkubectl -n kubernetes-dashboard delete serviceaccount admin-user\nkubectl -n kubernetes-dashboard delete clusterrolebinding admin-user\n```\n\n## 命令行代理\n\n```shell\nkubectl proxy\n# PS: kubectl 会使得 Dashboard 可以通过 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ 访问。\n\n```\n\n## 部署MySQL\n\n```yaml\n# ./deploy/mysql.yml\n```\n","slug":"kubernetes/app/dashboard/dashboard","published":1,"date":"2025-02-23T07:43:31.557Z","updated":"2025-02-23T07:43:31.557Z","__permalink":"/kubernetes/app/dashboard/dashboard/","comments":1,"photos":[],"_id":"cm7k5rwal003qmsws82914w52","content":"<h1 id=\"k8s-dashboard\"><a href=\"#k8s-dashboard\" class=\"headerlink\" title=\"k8s dashboard\"></a>k8s dashboard</h1><h2 id=\"部署-Dashboard-UI\"><a href=\"#部署-Dashboard-UI\" class=\"headerlink\" title=\"部署 Dashboard UI\"></a>部署 Dashboard UI</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">dashboard-ClusterRoleBinding.yaml</span></span><br><span class=\"line\">kubectl apply -f dashboard-ClusterRoleBinding.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">dashboard-ServiceAccount.yaml</span></span><br><span class=\"line\">kubectl apply -f dashboard-ServiceAccount.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Getting a Bearer Token</span></span><br><span class=\"line\">kubectl -n kubernetes-dashboard create token admin-user</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Clean up and next steps</span></span><br><span class=\"line\">kubectl -n kubernetes-dashboard delete serviceaccount admin-user</span><br><span class=\"line\">kubectl -n kubernetes-dashboard delete clusterrolebinding admin-user</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令行代理\"><a href=\"#命令行代理\" class=\"headerlink\" title=\"命令行代理\"></a>命令行代理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl proxy</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PS: kubectl 会使得 Dashboard 可以通过 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ 访问。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署MySQL\"><a href=\"#部署MySQL\" class=\"headerlink\" title=\"部署MySQL\"></a>部署MySQL</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./deploy/mysql.yml</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"k8s-dashboard\"><a href=\"#k8s-dashboard\" class=\"headerlink\" title=\"k8s dashboard\"></a>k8s dashboard</h1><h2 id=\"部署-Dashboard-UI\"><a href=\"#部署-Dashboard-UI\" class=\"headerlink\" title=\"部署 Dashboard UI\"></a>部署 Dashboard UI</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">dashboard-ClusterRoleBinding.yaml</span></span><br><span class=\"line\">kubectl apply -f dashboard-ClusterRoleBinding.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">dashboard-ServiceAccount.yaml</span></span><br><span class=\"line\">kubectl apply -f dashboard-ServiceAccount.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Getting a Bearer Token</span></span><br><span class=\"line\">kubectl -n kubernetes-dashboard create token admin-user</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Clean up and next steps</span></span><br><span class=\"line\">kubectl -n kubernetes-dashboard delete serviceaccount admin-user</span><br><span class=\"line\">kubectl -n kubernetes-dashboard delete clusterrolebinding admin-user</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令行代理\"><a href=\"#命令行代理\" class=\"headerlink\" title=\"命令行代理\"></a>命令行代理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl proxy</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PS: kubectl 会使得 Dashboard 可以通过 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ 访问。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署MySQL\"><a href=\"#部署MySQL\" class=\"headerlink\" title=\"部署MySQL\"></a>部署MySQL</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./deploy/mysql.yml</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Test","nav_order":3,"has_children":true,"parent":"Test","_content":"\n# Test\n","source":"_posts/docker/doc/test/index.md","raw":"---\nlayout: default\ntitle: Test\nnav_order: 3\nhas_children: true\nparent: Test\npermalink: \"/docker/doc/test/\"\n---\n\n# Test\n","slug":"docker/doc/test/index","published":1,"date":"2025-02-23T07:43:31.175Z","updated":"2025-02-23T07:43:31.175Z","__permalink":"/docker/doc/test/","comments":1,"photos":[],"_id":"cm7k5rwal003rmsws1lwzg0yp","content":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>","excerpt":"","more":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>"},{"layout":"default","title":"test1","nav_order":13,"description":"test1","parent":"Test","has_children":false,"grand_parent":"Doc","_content":"\n# test1\n\n## 1.1\n\n- [x] 1\n- [x] 2\n- [x] 3\n- [x] 4\n- [x] 5\n- [x] 6\n- [x] 7\n- [x] 8\n- [x] 9\n- [x] 10\n- [x] 11\n- [[test2.md]]\n  \n","source":"_posts/docker/doc/test/test1.md","raw":"---\nlayout: default\ntitle: test1\nnav_order: 13\ndescription: test1\nparent: Test\nhas_children: false\npermalink: \"/docker/doc/test/test1/\"\ngrand_parent: Doc\n---\n\n# test1\n\n## 1.1\n\n- [x] 1\n- [x] 2\n- [x] 3\n- [x] 4\n- [x] 5\n- [x] 6\n- [x] 7\n- [x] 8\n- [x] 9\n- [x] 10\n- [x] 11\n- [[test2.md]]\n  \n","slug":"docker/doc/test/test1","published":1,"date":"2025-02-23T07:43:31.175Z","updated":"2025-02-23T07:43:31.175Z","__permalink":"/docker/doc/test/test1/","comments":1,"photos":[],"_id":"cm7k5rwal003smswsfiyscnqf","content":"<h1 id=\"test1\"><a href=\"#test1\" class=\"headerlink\" title=\"test1\"></a>test1</h1><h2 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1\"></a>1.1</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 2</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 3</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 4</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 5</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 6</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 7</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 8</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 9</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 10</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 11</li>\n<li>[[test2.md]]</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"test1\"><a href=\"#test1\" class=\"headerlink\" title=\"test1\"></a>test1</h1><h2 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1\"></a>1.1</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 2</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 3</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 4</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 5</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 6</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 7</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 8</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 9</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 10</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 11</li>\n<li>[[test2.md]]</li>\n</ul>\n"},{"layout":"default","title":"Dashboard","nav_order":3,"has_children":true,"parent":"Dashboard","_content":"\n# Dashboard\n","source":"_posts/kubernetes/app/dashboard/index.md","raw":"---\nlayout: default\ntitle: Dashboard\nnav_order: 3\nhas_children: true\nparent: Dashboard\npermalink: \"/kubernetes/app/dashboard/\"\n---\n\n# Dashboard\n","slug":"kubernetes/app/dashboard/index","published":1,"date":"2025-02-23T07:43:31.558Z","updated":"2025-02-23T07:43:31.558Z","__permalink":"/kubernetes/app/dashboard/","comments":1,"photos":[],"_id":"cm7k5rwal003tmsws25t8ab8l","content":"<h1 id=\"Dashboard\"><a href=\"#Dashboard\" class=\"headerlink\" title=\"Dashboard\"></a>Dashboard</h1>","excerpt":"","more":"<h1 id=\"Dashboard\"><a href=\"#Dashboard\" class=\"headerlink\" title=\"Dashboard\"></a>Dashboard</h1>"},{"layout":"default","title":"Devs","nav_order":3,"has_children":true,"parent":"Devs","_content":"\n# Devs\n","source":"_posts/kubernetes/app/devs/index.md","raw":"---\nlayout: default\ntitle: Devs\nnav_order: 3\nhas_children: true\nparent: Devs\npermalink: \"/kubernetes/app/devs/\"\n---\n\n# Devs\n","slug":"kubernetes/app/devs/index","published":1,"date":"2025-02-23T07:43:31.451Z","updated":"2025-02-23T07:43:31.451Z","__permalink":"/kubernetes/app/devs/","comments":1,"photos":[],"_id":"cm7k5rwam003umsws8b03ee9u","content":"<h1 id=\"Devs\"><a href=\"#Devs\" class=\"headerlink\" title=\"Devs\"></a>Devs</h1>","excerpt":"","more":"<h1 id=\"Devs\"><a href=\"#Devs\" class=\"headerlink\" title=\"Devs\"></a>Devs</h1>"},{"layout":"default","title":"Elk","nav_order":3,"has_children":true,"parent":"Elk","_content":"\n# Elk\n","source":"_posts/kubernetes/app/elk/index.md","raw":"---\nlayout: default\ntitle: Elk\nnav_order: 3\nhas_children: true\nparent: Elk\npermalink: \"/kubernetes/app/elk/\"\n---\n\n# Elk\n","slug":"kubernetes/app/elk/index","published":1,"date":"2025-02-23T07:43:31.556Z","updated":"2025-02-23T07:43:31.556Z","__permalink":"/kubernetes/app/elk/","comments":1,"photos":[],"_id":"cm7k5rwam003vmsws4w4l9h8l","content":"<h1 id=\"Elk\"><a href=\"#Elk\" class=\"headerlink\" title=\"Elk\"></a>Elk</h1>","excerpt":"","more":"<h1 id=\"Elk\"><a href=\"#Elk\" class=\"headerlink\" title=\"Elk\"></a>Elk</h1>"},{"layout":"default","title":"Harbor","nav_order":3,"has_children":true,"parent":"Harbor","_content":"\n# Harbor\n","source":"_posts/kubernetes/app/harbor/index.md","raw":"---\nlayout: default\ntitle: Harbor\nnav_order: 3\nhas_children: true\nparent: Harbor\npermalink: \"/kubernetes/app/harbor/\"\n---\n\n# Harbor\n","slug":"kubernetes/app/harbor/index","published":1,"date":"2025-02-23T07:43:31.552Z","updated":"2025-02-23T07:43:31.552Z","__permalink":"/kubernetes/app/harbor/","comments":1,"photos":[],"_id":"cm7k5rwam003wmswsapgmebmx","content":"<h1 id=\"Harbor\"><a href=\"#Harbor\" class=\"headerlink\" title=\"Harbor\"></a>Harbor</h1>","excerpt":"","more":"<h1 id=\"Harbor\"><a href=\"#Harbor\" class=\"headerlink\" title=\"Harbor\"></a>Harbor</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"Harbor使用记录","parent":"Harbor","has_children":false,"grand_parent":"App","_content":"\n# Harbor使用记录\n\n## 安装\n\n- [官网](https://goharbor.io/docs/2.10.0/install-config/harbor-ha-helm/)\n- [values.yaml](https://github.com/goharbor/harbor-helm/blob/main/values.yaml)\n\n```bash\n# 创建命名空间\nkubectl create namespace harbor\nhelm repo add harbor https://helm.goharbor.io\nhelm fetch harbor/harbor --untar\n# 安装\nhelm install harbor-helm harbor/\n# 卸载\nhelm uninstall harbor-helm\n\n# 自定义安装(--set配置参考`values.yaml`)\nhelm install harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://core.harbor.domain \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# 访问, 使用以下命令, 或vscode中使用插件界面中操作代理到本地(admin/Harbor12345)\nkubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 8080:8080 -n harbor6\n\n# 查看密码, 进入harbor-core的pod中执行命令\nprintenv |grep PASSWORD\n\n## PS: 查看日志发现, 需要手动创建PersistentVolume\n## PS: 查看日志发现(用 kubectl logs <pod name>, 或者vscode插件界面查看), 需要手动创建数据库registry\n#    \\\n#   --set expose.tls.enabled=false\n\n# 更新\nhelm upgrade --namespace harbor5 harbor-helm harbor/harbor -f ~/harbor/values.yaml\n\nhelm upgrade --namespace harbor5 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://core.harbor.domain \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# test示例\n\n# 镜像上传需要harbor-helm-core的pod上传, portal为管理页面 --set externalURL=http://core.harbor.domain.harbor6:8080 \\\nhelm upgrade --namespace harbor6 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://core.harbor.domain.harbor6:8080 \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# test示例二, 配合kt-connect使用  \nsudo ktctl connect -n harbor6\n\n# 镜像上传需要harbor-helm-core的pod上传, portal为管理页面 --set externalURL=http://harbor-helm-core.harbor6 \\\nhelm upgrade --namespace harbor6 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://harbor-helm-core.harbor6 \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# 测试连通性\ncurl http://harbor-helm-core.harbor6/v2/\n\n# test示例三, 配合kt-connect使用  \nsudo ktctl connect -n harbor6\n\nhelm upgrade --namespace harbor6 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://harbor.harbor6 \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# 测试连通性\ncurl http://harbor.harbor6/v2/\n\n# ---\n\n# 暴露端口, 会创建个service\nkubectl expose deployment harbor-helm-core --port=80 --target-port=8080\n\n\n```\n\n- 生成ssl\n\n```bash\nsudo mkdir -p /etc/harbor/ssl/\nopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/harbor/ssl/harbor.key -out /etc/harbor/ssl/harbor.crt\n```\n\n```bash\n# (参考文章)[https://wghdr.top/?p=3700]\n\n# test示例四, cert-manage自动管理ssl(有点问题)\n\nhelm upgrade --namespace harbor6 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=core.harbor.domain \\\n  --set expose.tls.auto.commonName=letsencrypt-harbor \\\n  --set expose.ingress.hosts.core=core.harbor.domain \\\n  --set expose.ingress.annotations.kubernetes.io/tls-acme=true \\\n  --set expose.ingress.annotations.certmanager.k8s.io/issuer=letsencrypt-harbor\n\n# 检查\nkubectl get ing -n harbor6 -o yaml | grep -A 3 tls\nkubectl get secret -n harbor6 harbor-ingress -o yaml\n\n# 配置nginx.ingress.kubernetes.io/proxy-body-size=500M, 不然上传镜像可能报错\n```\n\n- 创建初始化容器, 给trivy调整文件夹权限\n\n[参考链接](https://github.com/goharbor/harbor-helm/issues/1084)\n![初始化容器配置](img/image.png)\n![挂载卷配置](img/image-1.png)\n\n```bash\ninitContainers:\n  - name: trivy-permission-fix\n    securityContext:\n      runAsUser: 0  # Run as root user\n    image: busybox\n    command: ['sh', '-c', 'chown -R 10000:10000 /home/scanner']\n    volumeMounts:\n    - name: data\n      mountPath: /home/scanner\n\n```\n\n- 构建并上传镜像\n\n[demo](https://goharbor.io/docs/2.10.0/install-config/demo-server/)\n\n```bash\n# 打标\ndocker tag SOURCE_IMAGE[:TAG] core.harbor.domain/lx/REPOSITORY[:TAG]\n# 推送\ndocker push core.harbor.domain/lx/REPOSITORY[:TAG]\n# 示例\ndocker login -u admin -p Harbor12345 core.harbor.domain:8080\ndocker tag app-service:latest core.harbor.domain:8080/lx/app-service:latest\ndocker push core.harbor.domain:8080/lx/app-service:latest\n```\n\n```bash\n# 配置本地hosts(code /etc/hosts)\n127.0.0.1 harbor.harbor6\n# 转发端口到本地(PS: 由于没有kubectl, 用的docker加alias实现的[参考文档](https://github.com/183461750/doc-record/blob/b9d7b122aa78712f6106df23f92518a0bfc199be/k8s/kubectl.md))\nkubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 80:8080 -n harbor6\ndocker login -u admin -p Harbor12345 harbor.harbor6\n# 拉取镜像\ndocker pull harbor.harbor6/lx/app-service:latest\n```\n\n- k8s中拉取镜像\n\n```bash\n# 转发端口\nkubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 80:8080 -n harbor6\n# 配置本地hosts(code /etc/hosts)\n127.0.0.1 harbor.harbor6\n# 设置不安全容器镜像仓库[参考文档](https://github.com/183461750/doc-record/blob/c80d519ba5e1d55e5ee385a867211800ea118c4b/k8s/crictl.md)\n# 拉取镜像\ncrictl pull harbor.harbor6/lx/app-service:latest\n```\n\n- NodePort服务类型的访问\n  - 在kuboard中配置\n![service配置](img/image-2.png)\n\n```bash\n# 配置本地hosts(code /etc/hosts)(PS: 配置多个IP对应一个域名会随机选择一个IP进行访问)\n10.0.1.139 harbor.harbor6\n10.0.1.177 harbor.harbor6\n\n```\n\n- 镜像拉取超时的问题\n\n```bash\nwget https://github.com/goharbor/harbor/releases/download/v2.9.1/harbor-offline-installer-v2.9.1.tgz\ntar xvf harbor-offline-installer-v2.9.1.tgz\ncd harbor\nnerdctl -n k8s.io load -i harbor.v2.9.1.tar.gz\n```\n","source":"_posts/kubernetes/app/harbor/harbor.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: Harbor使用记录\nparent: Harbor\nhas_children: false\npermalink: \"/kubernetes/app/harbor/harbor/\"\ngrand_parent: App\n---\n\n# Harbor使用记录\n\n## 安装\n\n- [官网](https://goharbor.io/docs/2.10.0/install-config/harbor-ha-helm/)\n- [values.yaml](https://github.com/goharbor/harbor-helm/blob/main/values.yaml)\n\n```bash\n# 创建命名空间\nkubectl create namespace harbor\nhelm repo add harbor https://helm.goharbor.io\nhelm fetch harbor/harbor --untar\n# 安装\nhelm install harbor-helm harbor/\n# 卸载\nhelm uninstall harbor-helm\n\n# 自定义安装(--set配置参考`values.yaml`)\nhelm install harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://core.harbor.domain \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# 访问, 使用以下命令, 或vscode中使用插件界面中操作代理到本地(admin/Harbor12345)\nkubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 8080:8080 -n harbor6\n\n# 查看密码, 进入harbor-core的pod中执行命令\nprintenv |grep PASSWORD\n\n## PS: 查看日志发现, 需要手动创建PersistentVolume\n## PS: 查看日志发现(用 kubectl logs <pod name>, 或者vscode插件界面查看), 需要手动创建数据库registry\n#    \\\n#   --set expose.tls.enabled=false\n\n# 更新\nhelm upgrade --namespace harbor5 harbor-helm harbor/harbor -f ~/harbor/values.yaml\n\nhelm upgrade --namespace harbor5 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://core.harbor.domain \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# test示例\n\n# 镜像上传需要harbor-helm-core的pod上传, portal为管理页面 --set externalURL=http://core.harbor.domain.harbor6:8080 \\\nhelm upgrade --namespace harbor6 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://core.harbor.domain.harbor6:8080 \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# test示例二, 配合kt-connect使用  \nsudo ktctl connect -n harbor6\n\n# 镜像上传需要harbor-helm-core的pod上传, portal为管理页面 --set externalURL=http://harbor-helm-core.harbor6 \\\nhelm upgrade --namespace harbor6 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://harbor-helm-core.harbor6 \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# 测试连通性\ncurl http://harbor-helm-core.harbor6/v2/\n\n# test示例三, 配合kt-connect使用  \nsudo ktctl connect -n harbor6\n\nhelm upgrade --namespace harbor6 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=http://harbor.harbor6 \\\n  --set expose.tls.enabled=false \\\n  --set expose.type=loadBalancer \\\n  --set ipFamily.ipv6.enabled=false\n\n# 测试连通性\ncurl http://harbor.harbor6/v2/\n\n# ---\n\n# 暴露端口, 会创建个service\nkubectl expose deployment harbor-helm-core --port=80 --target-port=8080\n\n\n```\n\n- 生成ssl\n\n```bash\nsudo mkdir -p /etc/harbor/ssl/\nopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/harbor/ssl/harbor.key -out /etc/harbor/ssl/harbor.crt\n```\n\n```bash\n# (参考文章)[https://wghdr.top/?p=3700]\n\n# test示例四, cert-manage自动管理ssl(有点问题)\n\nhelm upgrade --namespace harbor6 harbor-helm harbor/harbor \\\n  --set database.type=external \\\n  --set database.external.host=10.0.0.11 \\\n  --set database.external.username=dbadmin \\\n  --set database.external.password=dbadmin \\\n  --set redis.type=external \\\n  --set redis.external.addr=10.0.0.23:6379 \\\n  --set redis.external.password=foobared \\\n  --set harborAdminPassword=Harbor12345 \\\n  --set externalURL=core.harbor.domain \\\n  --set expose.tls.auto.commonName=letsencrypt-harbor \\\n  --set expose.ingress.hosts.core=core.harbor.domain \\\n  --set expose.ingress.annotations.kubernetes.io/tls-acme=true \\\n  --set expose.ingress.annotations.certmanager.k8s.io/issuer=letsencrypt-harbor\n\n# 检查\nkubectl get ing -n harbor6 -o yaml | grep -A 3 tls\nkubectl get secret -n harbor6 harbor-ingress -o yaml\n\n# 配置nginx.ingress.kubernetes.io/proxy-body-size=500M, 不然上传镜像可能报错\n```\n\n- 创建初始化容器, 给trivy调整文件夹权限\n\n[参考链接](https://github.com/goharbor/harbor-helm/issues/1084)\n![初始化容器配置](img/image.png)\n![挂载卷配置](img/image-1.png)\n\n```bash\ninitContainers:\n  - name: trivy-permission-fix\n    securityContext:\n      runAsUser: 0  # Run as root user\n    image: busybox\n    command: ['sh', '-c', 'chown -R 10000:10000 /home/scanner']\n    volumeMounts:\n    - name: data\n      mountPath: /home/scanner\n\n```\n\n- 构建并上传镜像\n\n[demo](https://goharbor.io/docs/2.10.0/install-config/demo-server/)\n\n```bash\n# 打标\ndocker tag SOURCE_IMAGE[:TAG] core.harbor.domain/lx/REPOSITORY[:TAG]\n# 推送\ndocker push core.harbor.domain/lx/REPOSITORY[:TAG]\n# 示例\ndocker login -u admin -p Harbor12345 core.harbor.domain:8080\ndocker tag app-service:latest core.harbor.domain:8080/lx/app-service:latest\ndocker push core.harbor.domain:8080/lx/app-service:latest\n```\n\n```bash\n# 配置本地hosts(code /etc/hosts)\n127.0.0.1 harbor.harbor6\n# 转发端口到本地(PS: 由于没有kubectl, 用的docker加alias实现的[参考文档](https://github.com/183461750/doc-record/blob/b9d7b122aa78712f6106df23f92518a0bfc199be/k8s/kubectl.md))\nkubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 80:8080 -n harbor6\ndocker login -u admin -p Harbor12345 harbor.harbor6\n# 拉取镜像\ndocker pull harbor.harbor6/lx/app-service:latest\n```\n\n- k8s中拉取镜像\n\n```bash\n# 转发端口\nkubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 80:8080 -n harbor6\n# 配置本地hosts(code /etc/hosts)\n127.0.0.1 harbor.harbor6\n# 设置不安全容器镜像仓库[参考文档](https://github.com/183461750/doc-record/blob/c80d519ba5e1d55e5ee385a867211800ea118c4b/k8s/crictl.md)\n# 拉取镜像\ncrictl pull harbor.harbor6/lx/app-service:latest\n```\n\n- NodePort服务类型的访问\n  - 在kuboard中配置\n![service配置](img/image-2.png)\n\n```bash\n# 配置本地hosts(code /etc/hosts)(PS: 配置多个IP对应一个域名会随机选择一个IP进行访问)\n10.0.1.139 harbor.harbor6\n10.0.1.177 harbor.harbor6\n\n```\n\n- 镜像拉取超时的问题\n\n```bash\nwget https://github.com/goharbor/harbor/releases/download/v2.9.1/harbor-offline-installer-v2.9.1.tgz\ntar xvf harbor-offline-installer-v2.9.1.tgz\ncd harbor\nnerdctl -n k8s.io load -i harbor.v2.9.1.tar.gz\n```\n","slug":"kubernetes/app/harbor/harbor","published":1,"date":"2025-02-23T07:43:31.552Z","updated":"2025-02-23T07:43:31.553Z","__permalink":"/kubernetes/app/harbor/harbor/","comments":1,"photos":[],"_id":"cm7k5rwam003xmswseier3v70","content":"<h1 id=\"Harbor使用记录\"><a href=\"#Harbor使用记录\" class=\"headerlink\" title=\"Harbor使用记录\"></a>Harbor使用记录</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><a href=\"https://goharbor.io/docs/2.10.0/install-config/harbor-ha-helm/\">官网</a></li>\n<li><a href=\"https://github.com/goharbor/harbor-helm/blob/main/values.yaml\">values.yaml</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建命名空间</span></span><br><span class=\"line\">kubectl create namespace harbor</span><br><span class=\"line\">helm repo add harbor https://helm.goharbor.io</span><br><span class=\"line\">helm fetch harbor/harbor --untar</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">helm install harbor-helm harbor/</span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">helm uninstall harbor-helm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义安装(--set配置参考`values.yaml`)</span></span><br><span class=\"line\">helm install harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://core.harbor.domain \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问, 使用以下命令, 或vscode中使用插件界面中操作代理到本地(admin/Harbor12345)</span></span><br><span class=\"line\">kubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 8080:8080 -n harbor6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看密码, 进入harbor-core的pod中执行命令</span></span><br><span class=\"line\"><span class=\"built_in\">printenv</span> |grep PASSWORD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## PS: 查看日志发现, 需要手动创建PersistentVolume</span></span><br><span class=\"line\"><span class=\"comment\">## PS: 查看日志发现(用 kubectl logs &lt;pod name&gt;, 或者vscode插件界面查看), 需要手动创建数据库registry</span></span><br><span class=\"line\"><span class=\"comment\">#    \\</span></span><br><span class=\"line\"><span class=\"comment\">#   --set expose.tls.enabled=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">helm upgrade --namespace harbor5 harbor-helm harbor/harbor -f ~/harbor/values.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --namespace harbor5 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://core.harbor.domain \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test示例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 镜像上传需要harbor-helm-core的pod上传, portal为管理页面 --set externalURL=http://core.harbor.domain.harbor6:8080 \\</span></span><br><span class=\"line\">helm upgrade --namespace harbor6 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://core.harbor.domain.harbor6:8080 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test示例二, 配合kt-connect使用  </span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ktctl connect -n harbor6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 镜像上传需要harbor-helm-core的pod上传, portal为管理页面 --set externalURL=http://harbor-helm-core.harbor6 \\</span></span><br><span class=\"line\">helm upgrade --namespace harbor6 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://harbor-helm-core.harbor6 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试连通性</span></span><br><span class=\"line\">curl http://harbor-helm-core.harbor6/v2/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test示例三, 配合kt-connect使用  </span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ktctl connect -n harbor6</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --namespace harbor6 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://harbor.harbor6 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试连通性</span></span><br><span class=\"line\">curl http://harbor.harbor6/v2/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露端口, 会创建个service</span></span><br><span class=\"line\">kubectl expose deployment harbor-helm-core --port=80 --target-port=8080</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成ssl</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> -p /etc/harbor/ssl/</span><br><span class=\"line\">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/harbor/ssl/harbor.key -out /etc/harbor/ssl/harbor.crt</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (参考文章)[https://wghdr.top/?p=3700]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test示例四, cert-manage自动管理ssl(有点问题)</span></span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --namespace harbor6 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=core.harbor.domain \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.auto.commonName=letsencrypt-harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.ingress.hosts.core=core.harbor.domain \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.ingress.annotations.kubernetes.io/tls-acme=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.ingress.annotations.certmanager.k8s.io/issuer=letsencrypt-harbor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">kubectl get ing -n harbor6 -o yaml | grep -A 3 tls</span><br><span class=\"line\">kubectl get secret -n harbor6 harbor-ingress -o yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置nginx.ingress.kubernetes.io/proxy-body-size=500M, 不然上传镜像可能报错</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建初始化容器, 给trivy调整文件夹权限</li>\n</ul>\n<p><a href=\"https://github.com/goharbor/harbor-helm/issues/1084\">参考链接</a><br><img data-src=\"/img/image.png\" alt=\"初始化容器配置\"><br><img data-src=\"/img/image-1.png\" alt=\"挂载卷配置\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initContainers:</span><br><span class=\"line\">  - name: trivy-permission-fix</span><br><span class=\"line\">    securityContext:</span><br><span class=\"line\">      runAsUser: 0  <span class=\"comment\"># Run as root user</span></span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;chown -R 10000:10000 /home/scanner&#x27;</span>]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: data</span><br><span class=\"line\">      mountPath: /home/scanner</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构建并上传镜像</li>\n</ul>\n<p><a href=\"https://goharbor.io/docs/2.10.0/install-config/demo-server/\">demo</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打标</span></span><br><span class=\"line\">docker tag SOURCE_IMAGE[:TAG] core.harbor.domain/lx/REPOSITORY[:TAG]</span><br><span class=\"line\"><span class=\"comment\"># 推送</span></span><br><span class=\"line\">docker push core.harbor.domain/lx/REPOSITORY[:TAG]</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">docker login -u admin -p Harbor12345 core.harbor.domain:8080</span><br><span class=\"line\">docker tag app-service:latest core.harbor.domain:8080/lx/app-service:latest</span><br><span class=\"line\">docker push core.harbor.domain:8080/lx/app-service:latest</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置本地hosts(code /etc/hosts)</span></span><br><span class=\"line\">127.0.0.1 harbor.harbor6</span><br><span class=\"line\"><span class=\"comment\"># 转发端口到本地(PS: 由于没有kubectl, 用的docker加alias实现的[参考文档](https://github.com/183461750/doc-record/blob/b9d7b122aa78712f6106df23f92518a0bfc199be/k8s/kubectl.md))</span></span><br><span class=\"line\">kubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 80:8080 -n harbor6</span><br><span class=\"line\">docker login -u admin -p Harbor12345 harbor.harbor6</span><br><span class=\"line\"><span class=\"comment\"># 拉取镜像</span></span><br><span class=\"line\">docker pull harbor.harbor6/lx/app-service:latest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>k8s中拉取镜像</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 转发端口</span></span><br><span class=\"line\">kubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 80:8080 -n harbor6</span><br><span class=\"line\"><span class=\"comment\"># 配置本地hosts(code /etc/hosts)</span></span><br><span class=\"line\">127.0.0.1 harbor.harbor6</span><br><span class=\"line\"><span class=\"comment\"># 设置不安全容器镜像仓库[参考文档](https://github.com/183461750/doc-record/blob/c80d519ba5e1d55e5ee385a867211800ea118c4b/k8s/crictl.md)</span></span><br><span class=\"line\"><span class=\"comment\"># 拉取镜像</span></span><br><span class=\"line\">crictl pull harbor.harbor6/lx/app-service:latest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NodePort服务类型的访问<ul>\n<li>在kuboard中配置<br><img data-src=\"/img/image-2.png\" alt=\"service配置\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置本地hosts(code /etc/hosts)(PS: 配置多个IP对应一个域名会随机选择一个IP进行访问)</span></span><br><span class=\"line\">10.0.1.139 harbor.harbor6</span><br><span class=\"line\">10.0.1.177 harbor.harbor6</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>镜像拉取超时的问题</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/goharbor/harbor/releases/download/v2.9.1/harbor-offline-installer-v2.9.1.tgz</span><br><span class=\"line\">tar xvf harbor-offline-installer-v2.9.1.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> harbor</span><br><span class=\"line\">nerdctl -n k8s.io load -i harbor.v2.9.1.tar.gz</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Harbor使用记录\"><a href=\"#Harbor使用记录\" class=\"headerlink\" title=\"Harbor使用记录\"></a>Harbor使用记录</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><a href=\"https://goharbor.io/docs/2.10.0/install-config/harbor-ha-helm/\">官网</a></li>\n<li><a href=\"https://github.com/goharbor/harbor-helm/blob/main/values.yaml\">values.yaml</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建命名空间</span></span><br><span class=\"line\">kubectl create namespace harbor</span><br><span class=\"line\">helm repo add harbor https://helm.goharbor.io</span><br><span class=\"line\">helm fetch harbor/harbor --untar</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">helm install harbor-helm harbor/</span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">helm uninstall harbor-helm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义安装(--set配置参考`values.yaml`)</span></span><br><span class=\"line\">helm install harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://core.harbor.domain \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问, 使用以下命令, 或vscode中使用插件界面中操作代理到本地(admin/Harbor12345)</span></span><br><span class=\"line\">kubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 8080:8080 -n harbor6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看密码, 进入harbor-core的pod中执行命令</span></span><br><span class=\"line\"><span class=\"built_in\">printenv</span> |grep PASSWORD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## PS: 查看日志发现, 需要手动创建PersistentVolume</span></span><br><span class=\"line\"><span class=\"comment\">## PS: 查看日志发现(用 kubectl logs &lt;pod name&gt;, 或者vscode插件界面查看), 需要手动创建数据库registry</span></span><br><span class=\"line\"><span class=\"comment\">#    \\</span></span><br><span class=\"line\"><span class=\"comment\">#   --set expose.tls.enabled=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">helm upgrade --namespace harbor5 harbor-helm harbor/harbor -f ~/harbor/values.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --namespace harbor5 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://core.harbor.domain \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test示例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 镜像上传需要harbor-helm-core的pod上传, portal为管理页面 --set externalURL=http://core.harbor.domain.harbor6:8080 \\</span></span><br><span class=\"line\">helm upgrade --namespace harbor6 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://core.harbor.domain.harbor6:8080 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test示例二, 配合kt-connect使用  </span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ktctl connect -n harbor6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 镜像上传需要harbor-helm-core的pod上传, portal为管理页面 --set externalURL=http://harbor-helm-core.harbor6 \\</span></span><br><span class=\"line\">helm upgrade --namespace harbor6 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://harbor-helm-core.harbor6 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试连通性</span></span><br><span class=\"line\">curl http://harbor-helm-core.harbor6/v2/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test示例三, 配合kt-connect使用  </span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ktctl connect -n harbor6</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --namespace harbor6 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=http://harbor.harbor6 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.type=loadBalancer \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ipFamily.ipv6.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试连通性</span></span><br><span class=\"line\">curl http://harbor.harbor6/v2/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露端口, 会创建个service</span></span><br><span class=\"line\">kubectl expose deployment harbor-helm-core --port=80 --target-port=8080</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成ssl</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> -p /etc/harbor/ssl/</span><br><span class=\"line\">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/harbor/ssl/harbor.key -out /etc/harbor/ssl/harbor.crt</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (参考文章)[https://wghdr.top/?p=3700]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test示例四, cert-manage自动管理ssl(有点问题)</span></span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --namespace harbor6 harbor-helm harbor/harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.host=10.0.0.11 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.username=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> database.external.password=dbadmin \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.type=external \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.addr=10.0.0.23:6379 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> redis.external.password=foobared \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> harborAdminPassword=Harbor12345 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> externalURL=core.harbor.domain \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.tls.auto.commonName=letsencrypt-harbor \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.ingress.hosts.core=core.harbor.domain \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.ingress.annotations.kubernetes.io/tls-acme=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> expose.ingress.annotations.certmanager.k8s.io/issuer=letsencrypt-harbor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">kubectl get ing -n harbor6 -o yaml | grep -A 3 tls</span><br><span class=\"line\">kubectl get secret -n harbor6 harbor-ingress -o yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置nginx.ingress.kubernetes.io/proxy-body-size=500M, 不然上传镜像可能报错</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建初始化容器, 给trivy调整文件夹权限</li>\n</ul>\n<p><a href=\"https://github.com/goharbor/harbor-helm/issues/1084\">参考链接</a><br><img data-src=\"/img/image.png\" alt=\"初始化容器配置\"><br><img data-src=\"/img/image-1.png\" alt=\"挂载卷配置\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initContainers:</span><br><span class=\"line\">  - name: trivy-permission-fix</span><br><span class=\"line\">    securityContext:</span><br><span class=\"line\">      runAsUser: 0  <span class=\"comment\"># Run as root user</span></span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;chown -R 10000:10000 /home/scanner&#x27;</span>]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: data</span><br><span class=\"line\">      mountPath: /home/scanner</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构建并上传镜像</li>\n</ul>\n<p><a href=\"https://goharbor.io/docs/2.10.0/install-config/demo-server/\">demo</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打标</span></span><br><span class=\"line\">docker tag SOURCE_IMAGE[:TAG] core.harbor.domain/lx/REPOSITORY[:TAG]</span><br><span class=\"line\"><span class=\"comment\"># 推送</span></span><br><span class=\"line\">docker push core.harbor.domain/lx/REPOSITORY[:TAG]</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">docker login -u admin -p Harbor12345 core.harbor.domain:8080</span><br><span class=\"line\">docker tag app-service:latest core.harbor.domain:8080/lx/app-service:latest</span><br><span class=\"line\">docker push core.harbor.domain:8080/lx/app-service:latest</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置本地hosts(code /etc/hosts)</span></span><br><span class=\"line\">127.0.0.1 harbor.harbor6</span><br><span class=\"line\"><span class=\"comment\"># 转发端口到本地(PS: 由于没有kubectl, 用的docker加alias实现的[参考文档](https://github.com/183461750/doc-record/blob/b9d7b122aa78712f6106df23f92518a0bfc199be/k8s/kubectl.md))</span></span><br><span class=\"line\">kubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 80:8080 -n harbor6</span><br><span class=\"line\">docker login -u admin -p Harbor12345 harbor.harbor6</span><br><span class=\"line\"><span class=\"comment\"># 拉取镜像</span></span><br><span class=\"line\">docker pull harbor.harbor6/lx/app-service:latest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>k8s中拉取镜像</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 转发端口</span></span><br><span class=\"line\">kubectl port-forward pods/harbor-helm-nginx-cc76b85fb-mzj7z 80:8080 -n harbor6</span><br><span class=\"line\"><span class=\"comment\"># 配置本地hosts(code /etc/hosts)</span></span><br><span class=\"line\">127.0.0.1 harbor.harbor6</span><br><span class=\"line\"><span class=\"comment\"># 设置不安全容器镜像仓库[参考文档](https://github.com/183461750/doc-record/blob/c80d519ba5e1d55e5ee385a867211800ea118c4b/k8s/crictl.md)</span></span><br><span class=\"line\"><span class=\"comment\"># 拉取镜像</span></span><br><span class=\"line\">crictl pull harbor.harbor6/lx/app-service:latest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NodePort服务类型的访问<ul>\n<li>在kuboard中配置<br><img data-src=\"/img/image-2.png\" alt=\"service配置\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置本地hosts(code /etc/hosts)(PS: 配置多个IP对应一个域名会随机选择一个IP进行访问)</span></span><br><span class=\"line\">10.0.1.139 harbor.harbor6</span><br><span class=\"line\">10.0.1.177 harbor.harbor6</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>镜像拉取超时的问题</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/goharbor/harbor/releases/download/v2.9.1/harbor-offline-installer-v2.9.1.tgz</span><br><span class=\"line\">tar xvf harbor-offline-installer-v2.9.1.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> harbor</span><br><span class=\"line\">nerdctl -n k8s.io load -i harbor.v2.9.1.tar.gz</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Kuboard","nav_order":3,"has_children":true,"parent":"Kuboard","_content":"\n# Kuboard\n","source":"_posts/kubernetes/app/kuboard/index.md","raw":"---\nlayout: default\ntitle: Kuboard\nnav_order: 3\nhas_children: true\nparent: Kuboard\npermalink: \"/kubernetes/app/kuboard/\"\n---\n\n# Kuboard\n","slug":"kubernetes/app/kuboard/index","published":1,"date":"2025-02-23T07:43:31.558Z","updated":"2025-02-23T07:43:31.558Z","__permalink":"/kubernetes/app/kuboard/","comments":1,"photos":[],"_id":"cm7k5rwam003ymsws7qngbljb","content":"<h1 id=\"Kuboard\"><a href=\"#Kuboard\" class=\"headerlink\" title=\"Kuboard\"></a>Kuboard</h1>","excerpt":"","more":"<h1 id=\"Kuboard\"><a href=\"#Kuboard\" class=\"headerlink\" title=\"Kuboard\"></a>Kuboard</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"kuboard使用","parent":"Kuboard","has_children":false,"grand_parent":"App","_content":"\n# kuboard使用\n\n## 使用helm的方式部署\n\n```bash\n# 添加Kuboard的Helm仓库。在命令行中执行以下命令\nhelm repo add kuboard https://kuboard.cn/charts\nhelm repo update\n# 创建一个命名空间用于安装Kuboard。\nkubectl create namespace kuboard\n# 安装Kuboard。\nhelm install kuboard kuboard/kuboard --namespace kuboard\n# 等待安装完成。您可以使用以下命令检查Kuboard的安装状态：\nkubectl get pods -n kuboard\n# 访问Kuboard。您可以使用以下命令获取Kuboard的访问地址：\nkubectl get svc -n kuboard\n```\n","source":"_posts/kubernetes/app/kuboard/kuboard.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: kuboard使用\nparent: Kuboard\nhas_children: false\npermalink: \"/kubernetes/app/kuboard/kuboard/\"\ngrand_parent: App\n---\n\n# kuboard使用\n\n## 使用helm的方式部署\n\n```bash\n# 添加Kuboard的Helm仓库。在命令行中执行以下命令\nhelm repo add kuboard https://kuboard.cn/charts\nhelm repo update\n# 创建一个命名空间用于安装Kuboard。\nkubectl create namespace kuboard\n# 安装Kuboard。\nhelm install kuboard kuboard/kuboard --namespace kuboard\n# 等待安装完成。您可以使用以下命令检查Kuboard的安装状态：\nkubectl get pods -n kuboard\n# 访问Kuboard。您可以使用以下命令获取Kuboard的访问地址：\nkubectl get svc -n kuboard\n```\n","slug":"kubernetes/app/kuboard/kuboard","published":1,"date":"2025-02-23T07:43:31.558Z","updated":"2025-02-23T07:43:31.558Z","__permalink":"/kubernetes/app/kuboard/kuboard/","comments":1,"photos":[],"_id":"cm7k5rwam003zmswsep7bfqz3","content":"<h1 id=\"kuboard使用\"><a href=\"#kuboard使用\" class=\"headerlink\" title=\"kuboard使用\"></a>kuboard使用</h1><h2 id=\"使用helm的方式部署\"><a href=\"#使用helm的方式部署\" class=\"headerlink\" title=\"使用helm的方式部署\"></a>使用helm的方式部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加Kuboard的Helm仓库。在命令行中执行以下命令</span></span><br><span class=\"line\">helm repo add kuboard https://kuboard.cn/charts</span><br><span class=\"line\">helm repo update</span><br><span class=\"line\"><span class=\"comment\"># 创建一个命名空间用于安装Kuboard。</span></span><br><span class=\"line\">kubectl create namespace kuboard</span><br><span class=\"line\"><span class=\"comment\"># 安装Kuboard。</span></span><br><span class=\"line\">helm install kuboard kuboard/kuboard --namespace kuboard</span><br><span class=\"line\"><span class=\"comment\"># 等待安装完成。您可以使用以下命令检查Kuboard的安装状态：</span></span><br><span class=\"line\">kubectl get pods -n kuboard</span><br><span class=\"line\"><span class=\"comment\"># 访问Kuboard。您可以使用以下命令获取Kuboard的访问地址：</span></span><br><span class=\"line\">kubectl get svc -n kuboard</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"kuboard使用\"><a href=\"#kuboard使用\" class=\"headerlink\" title=\"kuboard使用\"></a>kuboard使用</h1><h2 id=\"使用helm的方式部署\"><a href=\"#使用helm的方式部署\" class=\"headerlink\" title=\"使用helm的方式部署\"></a>使用helm的方式部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加Kuboard的Helm仓库。在命令行中执行以下命令</span></span><br><span class=\"line\">helm repo add kuboard https://kuboard.cn/charts</span><br><span class=\"line\">helm repo update</span><br><span class=\"line\"><span class=\"comment\"># 创建一个命名空间用于安装Kuboard。</span></span><br><span class=\"line\">kubectl create namespace kuboard</span><br><span class=\"line\"><span class=\"comment\"># 安装Kuboard。</span></span><br><span class=\"line\">helm install kuboard kuboard/kuboard --namespace kuboard</span><br><span class=\"line\"><span class=\"comment\"># 等待安装完成。您可以使用以下命令检查Kuboard的安装状态：</span></span><br><span class=\"line\">kubectl get pods -n kuboard</span><br><span class=\"line\"><span class=\"comment\"># 访问Kuboard。您可以使用以下命令获取Kuboard的访问地址：</span></span><br><span class=\"line\">kubectl get svc -n kuboard</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Metersphere","nav_order":3,"has_children":true,"parent":"Metersphere","_content":"\n# Metersphere\n","source":"_posts/kubernetes/app/metersphere/index.md","raw":"---\nlayout: default\ntitle: Metersphere\nnav_order: 3\nhas_children: true\nparent: Metersphere\npermalink: \"/kubernetes/app/metersphere/\"\n---\n\n# Metersphere\n","slug":"kubernetes/app/metersphere/index","published":1,"date":"2025-02-23T07:43:31.559Z","updated":"2025-02-23T07:43:31.559Z","__permalink":"/kubernetes/app/metersphere/","comments":1,"photos":[],"_id":"cm7k5rwam0040mswsezfv7w86","content":"<h1 id=\"Metersphere\"><a href=\"#Metersphere\" class=\"headerlink\" title=\"Metersphere\"></a>Metersphere</h1>","excerpt":"","more":"<h1 id=\"Metersphere\"><a href=\"#Metersphere\" class=\"headerlink\" title=\"Metersphere\"></a>Metersphere</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"metersphere使用","parent":"Metersphere","has_children":false,"grand_parent":"App","_content":"\n# metersphere使用\n\n## k8s部署\n\n```bash\nkubectl create ns ms\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add metersphere https://metersphere.github.io/helm-chart/\n# 从 chart 仓库中更新本地可用chart的信息\nhelm repo update  \nhelm install metersphere metersphere/metersphere -n ms\n\n# 创建 Node Port 访问方式\n## 使用命令 kubectl get svc -n ms 可查看 metersphere-gateway 所占用的端口号。如果不使用 ingress 的访问方式，可以创建一个 nodeport。\n\nvi ms-gateway-nodeport.yaml\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: metersphere-gateway-nodeport\n  namespace: ms\nspec:\n  ports:\n    - name: metersphere-gateway\n      protocol: TCP\n      port: 8000\n      targetPort: 8000\n      nodePort: 30801\n  type: NodePort\n  selector:\n    app: metersphere-gateway\n\nkubectl create -f ms-gateway-nodeport.yaml \n访问 MeterSphere 页面: http://nodeIP:30801\n\n```\n","source":"_posts/kubernetes/app/metersphere/metersphere.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: metersphere使用\nparent: Metersphere\nhas_children: false\npermalink: \"/kubernetes/app/metersphere/metersphere/\"\ngrand_parent: App\n---\n\n# metersphere使用\n\n## k8s部署\n\n```bash\nkubectl create ns ms\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add metersphere https://metersphere.github.io/helm-chart/\n# 从 chart 仓库中更新本地可用chart的信息\nhelm repo update  \nhelm install metersphere metersphere/metersphere -n ms\n\n# 创建 Node Port 访问方式\n## 使用命令 kubectl get svc -n ms 可查看 metersphere-gateway 所占用的端口号。如果不使用 ingress 的访问方式，可以创建一个 nodeport。\n\nvi ms-gateway-nodeport.yaml\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: metersphere-gateway-nodeport\n  namespace: ms\nspec:\n  ports:\n    - name: metersphere-gateway\n      protocol: TCP\n      port: 8000\n      targetPort: 8000\n      nodePort: 30801\n  type: NodePort\n  selector:\n    app: metersphere-gateway\n\nkubectl create -f ms-gateway-nodeport.yaml \n访问 MeterSphere 页面: http://nodeIP:30801\n\n```\n","slug":"kubernetes/app/metersphere/metersphere","published":1,"date":"2025-02-23T07:43:31.559Z","updated":"2025-02-23T07:43:31.559Z","__permalink":"/kubernetes/app/metersphere/metersphere/","comments":1,"photos":[],"_id":"cm7k5rwam0041msws6u4q9t99","content":"<h1 id=\"metersphere使用\"><a href=\"#metersphere使用\" class=\"headerlink\" title=\"metersphere使用\"></a>metersphere使用</h1><h2 id=\"k8s部署\"><a href=\"#k8s部署\" class=\"headerlink\" title=\"k8s部署\"></a>k8s部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create ns ms</span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\">helm repo add metersphere https://metersphere.github.io/helm-chart/</span><br><span class=\"line\"><span class=\"comment\"># 从 chart 仓库中更新本地可用chart的信息</span></span><br><span class=\"line\">helm repo update  </span><br><span class=\"line\">helm install metersphere metersphere/metersphere -n ms</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 Node Port 访问方式</span></span><br><span class=\"line\"><span class=\"comment\">## 使用命令 kubectl get svc -n ms 可查看 metersphere-gateway 所占用的端口号。如果不使用 ingress 的访问方式，可以创建一个 nodeport。</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi ms-gateway-nodeport.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: metersphere-gateway-nodeport</span><br><span class=\"line\">  namespace: ms</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - name: metersphere-gateway</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      port: 8000</span><br><span class=\"line\">      targetPort: 8000</span><br><span class=\"line\">      nodePort: 30801</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: metersphere-gateway</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl create -f ms-gateway-nodeport.yaml </span><br><span class=\"line\">访问 MeterSphere 页面: http://nodeIP:30801</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"metersphere使用\"><a href=\"#metersphere使用\" class=\"headerlink\" title=\"metersphere使用\"></a>metersphere使用</h1><h2 id=\"k8s部署\"><a href=\"#k8s部署\" class=\"headerlink\" title=\"k8s部署\"></a>k8s部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create ns ms</span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\">helm repo add metersphere https://metersphere.github.io/helm-chart/</span><br><span class=\"line\"><span class=\"comment\"># 从 chart 仓库中更新本地可用chart的信息</span></span><br><span class=\"line\">helm repo update  </span><br><span class=\"line\">helm install metersphere metersphere/metersphere -n ms</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 Node Port 访问方式</span></span><br><span class=\"line\"><span class=\"comment\">## 使用命令 kubectl get svc -n ms 可查看 metersphere-gateway 所占用的端口号。如果不使用 ingress 的访问方式，可以创建一个 nodeport。</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi ms-gateway-nodeport.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: metersphere-gateway-nodeport</span><br><span class=\"line\">  namespace: ms</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - name: metersphere-gateway</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      port: 8000</span><br><span class=\"line\">      targetPort: 8000</span><br><span class=\"line\">      nodePort: 30801</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: metersphere-gateway</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl create -f ms-gateway-nodeport.yaml </span><br><span class=\"line\">访问 MeterSphere 页面: http://nodeIP:30801</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Nacos","nav_order":3,"has_children":true,"parent":"Nacos","_content":"\n# Nacos\n","source":"_posts/kubernetes/app/nacos/index.md","raw":"---\nlayout: default\ntitle: Nacos\nnav_order: 3\nhas_children: true\nparent: Nacos\npermalink: \"/kubernetes/app/nacos/\"\n---\n\n# Nacos\n","slug":"kubernetes/app/nacos/index","published":1,"date":"2025-02-23T07:43:31.549Z","updated":"2025-02-23T07:43:31.549Z","__permalink":"/kubernetes/app/nacos/","comments":1,"photos":[],"_id":"cm7k5rwam0042mswsajwgh182","content":"<h1 id=\"Nacos\"><a href=\"#Nacos\" class=\"headerlink\" title=\"Nacos\"></a>Nacos</h1>","excerpt":"","more":"<h1 id=\"Nacos\"><a href=\"#Nacos\" class=\"headerlink\" title=\"Nacos\"></a>Nacos</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"skywalking使用记录","parent":"Skywalking","has_children":false,"grand_parent":"App","_content":"\n# skywalking使用记录\n\n## 安装\n\n- 快速开始\n\n[Quick Start](https://skywalking.apache.org/docs/skywalking-showcase/next/readme/#quick-start)\n  \n```bash\ngit clone https://github.com/apache/skywalking-showcase.git\ncd skywalking-showcase\nmake deploy.kubernetes\n```\n\n[skywalking-helm](https://github.com/apache/skywalking-helm/tree/v4.5.0)\n\n```bash\n# 创建命名空间\nkubectl create namespace skywalking\n\n# 设置环境变量\nexport SKYWALKING_RELEASE_VERSION=4.3.0\nexport SKYWALKING_RELEASE_NAME=skywalking\nexport SKYWALKING_RELEASE_NAMESPACE=skywalking\n\n# 执行安装\nhelm install \"${SKYWALKING_RELEASE_NAME}\" \\\n  oci://registry-1.docker.io/apache/skywalking-helm \\\n  --version \"${SKYWALKING_RELEASE_VERSION}\" \\\n  -n \"${SKYWALKING_RELEASE_NAMESPACE}\" \\\n  --set oap.image.tag=9.2.0 \\\n  --set oap.storageType=elasticsearch \\\n  --set ui.image.tag=9.2.0\n```\n\n- 使用 master 分支安装 SkyWalking 的开发版本\n\n```bash\nexport REPO=chart\ngit clone https://github.com/apache/skywalking-kubernetes\ncd skywalking-kubernetes\nhelm repo add elastic https://helm.elastic.co\nhelm dep up ${REPO}/skywalking\n```\n\n- 使用现有 Elasticsearch 安装特定版本的 SkyWalking\n\n修改文件 values-my-es.yaml 中已有 elasticsearch 集群的连接信息。\n    - [values-my-es.yaml](https://github.com/apache/skywalking-helm/blob/v4.5.0/chart/skywalking/values-my-es.yaml)\n\n```bash\nexport SKYWALKING_RELEASE_NAME=skywalking\nexport SKYWALKING_RELEASE_NAMESPACE=skywalking\nexport REPO=chart\ngit clone https://github.com/apache/skywalking-kubernetes\ncd skywalking-kubernetes\nhelm install \"${SKYWALKING_RELEASE_NAME}\" ${REPO}/skywalking -n \"${SKYWALKING_RELEASE_NAMESPACE}\" \\\n  -f ./${REPO}/skywalking/values-my-es.yaml\n```\n\n```bash\n# 方式二(目前用的方式)\n\n# 设置环境变量\nexport SKYWALKING_RELEASE_VERSION=4.3.0\nexport SKYWALKING_RELEASE_NAME=skywalking\nexport SKYWALKING_RELEASE_NAMESPACE=skywalking\nexport ELASTICSEARCH_CONFIG_HOST=10.0.1.90\n\nhelm install \"${SKYWALKING_RELEASE_NAME}\" \\\n  oci://registry-1.docker.io/apache/skywalking-helm \\\n  --version \"${SKYWALKING_RELEASE_VERSION}\" \\\n  -n \"${SKYWALKING_RELEASE_NAMESPACE}\" \\\n  --set oap.image.tag=9.2.0 \\\n  --set oap.storageType=elasticsearch \\\n  --set elasticsearch.enabled=false \\\n  --set elasticsearch.config.host=\"${ELASTICSEARCH_CONFIG_HOST}\" \\\n  --set elasticsearch.config.user=\"\" \\\n  --set elasticsearch.config.password=\"\" \\\n  --set ui.image.tag=9.2.0\n```\n\n```bash\n\n# 设置环境变量\nexport SKYWALKING_RELEASE_NAME=skywalking\nexport SKYWALKING_RELEASE_NAMESPACE=skywalking\n\nhelm upgrade \"${SKYWALKING_RELEASE_NAME}\" \\\n  oci://registry-1.docker.io/apache/skywalking-helm \\\n  --version \"4.5.0\" \\\n  -n \"${SKYWALKING_RELEASE_NAMESPACE}\" \\\n  --set oap.image.repository=\"apache/skywalking-oap-server\" \\\n  --set oap.image.tag=latest \\\n  --set oap.storageType=elasticsearch \\\n  --set elasticsearch.enabled=false \\\n  --set elasticsearch.config.host=\"10.0.1.90\" \\\n  --set elasticsearch.config.user=\"\" \\\n  --set elasticsearch.config.password=\"\" \\\n  --set ui.image.repository=\"apache/skywalking-ui\" \\\n  --set ui.image.tag=latest \\\n  --set satellite.enabled=true \\\n  --set satellite.image.repository=\"apache/skywalking-satellite\" \\\n  --set satellite.image.tag=v1.2.0\n\n\n```\n","source":"_posts/kubernetes/app/skywalking/skywalking.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: skywalking使用记录\nparent: Skywalking\nhas_children: false\npermalink: \"/kubernetes/app/skywalking/skywalking/\"\ngrand_parent: App\n---\n\n# skywalking使用记录\n\n## 安装\n\n- 快速开始\n\n[Quick Start](https://skywalking.apache.org/docs/skywalking-showcase/next/readme/#quick-start)\n  \n```bash\ngit clone https://github.com/apache/skywalking-showcase.git\ncd skywalking-showcase\nmake deploy.kubernetes\n```\n\n[skywalking-helm](https://github.com/apache/skywalking-helm/tree/v4.5.0)\n\n```bash\n# 创建命名空间\nkubectl create namespace skywalking\n\n# 设置环境变量\nexport SKYWALKING_RELEASE_VERSION=4.3.0\nexport SKYWALKING_RELEASE_NAME=skywalking\nexport SKYWALKING_RELEASE_NAMESPACE=skywalking\n\n# 执行安装\nhelm install \"${SKYWALKING_RELEASE_NAME}\" \\\n  oci://registry-1.docker.io/apache/skywalking-helm \\\n  --version \"${SKYWALKING_RELEASE_VERSION}\" \\\n  -n \"${SKYWALKING_RELEASE_NAMESPACE}\" \\\n  --set oap.image.tag=9.2.0 \\\n  --set oap.storageType=elasticsearch \\\n  --set ui.image.tag=9.2.0\n```\n\n- 使用 master 分支安装 SkyWalking 的开发版本\n\n```bash\nexport REPO=chart\ngit clone https://github.com/apache/skywalking-kubernetes\ncd skywalking-kubernetes\nhelm repo add elastic https://helm.elastic.co\nhelm dep up ${REPO}/skywalking\n```\n\n- 使用现有 Elasticsearch 安装特定版本的 SkyWalking\n\n修改文件 values-my-es.yaml 中已有 elasticsearch 集群的连接信息。\n    - [values-my-es.yaml](https://github.com/apache/skywalking-helm/blob/v4.5.0/chart/skywalking/values-my-es.yaml)\n\n```bash\nexport SKYWALKING_RELEASE_NAME=skywalking\nexport SKYWALKING_RELEASE_NAMESPACE=skywalking\nexport REPO=chart\ngit clone https://github.com/apache/skywalking-kubernetes\ncd skywalking-kubernetes\nhelm install \"${SKYWALKING_RELEASE_NAME}\" ${REPO}/skywalking -n \"${SKYWALKING_RELEASE_NAMESPACE}\" \\\n  -f ./${REPO}/skywalking/values-my-es.yaml\n```\n\n```bash\n# 方式二(目前用的方式)\n\n# 设置环境变量\nexport SKYWALKING_RELEASE_VERSION=4.3.0\nexport SKYWALKING_RELEASE_NAME=skywalking\nexport SKYWALKING_RELEASE_NAMESPACE=skywalking\nexport ELASTICSEARCH_CONFIG_HOST=10.0.1.90\n\nhelm install \"${SKYWALKING_RELEASE_NAME}\" \\\n  oci://registry-1.docker.io/apache/skywalking-helm \\\n  --version \"${SKYWALKING_RELEASE_VERSION}\" \\\n  -n \"${SKYWALKING_RELEASE_NAMESPACE}\" \\\n  --set oap.image.tag=9.2.0 \\\n  --set oap.storageType=elasticsearch \\\n  --set elasticsearch.enabled=false \\\n  --set elasticsearch.config.host=\"${ELASTICSEARCH_CONFIG_HOST}\" \\\n  --set elasticsearch.config.user=\"\" \\\n  --set elasticsearch.config.password=\"\" \\\n  --set ui.image.tag=9.2.0\n```\n\n```bash\n\n# 设置环境变量\nexport SKYWALKING_RELEASE_NAME=skywalking\nexport SKYWALKING_RELEASE_NAMESPACE=skywalking\n\nhelm upgrade \"${SKYWALKING_RELEASE_NAME}\" \\\n  oci://registry-1.docker.io/apache/skywalking-helm \\\n  --version \"4.5.0\" \\\n  -n \"${SKYWALKING_RELEASE_NAMESPACE}\" \\\n  --set oap.image.repository=\"apache/skywalking-oap-server\" \\\n  --set oap.image.tag=latest \\\n  --set oap.storageType=elasticsearch \\\n  --set elasticsearch.enabled=false \\\n  --set elasticsearch.config.host=\"10.0.1.90\" \\\n  --set elasticsearch.config.user=\"\" \\\n  --set elasticsearch.config.password=\"\" \\\n  --set ui.image.repository=\"apache/skywalking-ui\" \\\n  --set ui.image.tag=latest \\\n  --set satellite.enabled=true \\\n  --set satellite.image.repository=\"apache/skywalking-satellite\" \\\n  --set satellite.image.tag=v1.2.0\n\n\n```\n","slug":"kubernetes/app/skywalking/skywalking","published":1,"date":"2025-02-23T07:43:31.690Z","updated":"2025-02-23T07:43:31.690Z","__permalink":"/kubernetes/app/skywalking/skywalking/","comments":1,"photos":[],"_id":"cm7k5rwam0043msws96l1h5oo","content":"<h1 id=\"skywalking使用记录\"><a href=\"#skywalking使用记录\" class=\"headerlink\" title=\"skywalking使用记录\"></a>skywalking使用记录</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>快速开始</li>\n</ul>\n<p><a href=\"https://skywalking.apache.org/docs/skywalking-showcase/next/readme/#quick-start\">Quick Start</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/apache/skywalking-showcase.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> skywalking-showcase</span><br><span class=\"line\">make deploy.kubernetes</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/apache/skywalking-helm/tree/v4.5.0\">skywalking-helm</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建命名空间</span></span><br><span class=\"line\">kubectl create namespace skywalking</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_VERSION=4.3.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAME=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAMESPACE=skywalking</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行安装</span></span><br><span class=\"line\">helm install <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  oci://registry-1.docker.io/apache/skywalking-helm \\</span><br><span class=\"line\">  --version <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_VERSION&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.image.tag=9.2.0 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.storageType=elasticsearch \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ui.image.tag=9.2.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 master 分支安装 SkyWalking 的开发版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> REPO=chart</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/apache/skywalking-kubernetes</span><br><span class=\"line\"><span class=\"built_in\">cd</span> skywalking-kubernetes</span><br><span class=\"line\">helm repo add elastic https://helm.elastic.co</span><br><span class=\"line\">helm dep up <span class=\"variable\">$&#123;REPO&#125;</span>/skywalking</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用现有 Elasticsearch 安装特定版本的 SkyWalking</li>\n</ul>\n<p>修改文件 values-my-es.yaml 中已有 elasticsearch 集群的连接信息。<br>    - <a href=\"https://github.com/apache/skywalking-helm/blob/v4.5.0/chart/skywalking/values-my-es.yaml\">values-my-es.yaml</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAME=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAMESPACE=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> REPO=chart</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/apache/skywalking-kubernetes</span><br><span class=\"line\"><span class=\"built_in\">cd</span> skywalking-kubernetes</span><br><span class=\"line\">helm install <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> <span class=\"variable\">$&#123;REPO&#125;</span>/skywalking -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  -f ./<span class=\"variable\">$&#123;REPO&#125;</span>/skywalking/values-my-es.yaml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式二(目前用的方式)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_VERSION=4.3.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAME=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAMESPACE=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> ELASTICSEARCH_CONFIG_HOST=10.0.1.90</span><br><span class=\"line\"></span><br><span class=\"line\">helm install <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  oci://registry-1.docker.io/apache/skywalking-helm \\</span><br><span class=\"line\">  --version <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_VERSION&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.image.tag=9.2.0 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.storageType=elasticsearch \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.host=<span class=\"string\">&quot;<span class=\"variable\">$&#123;ELASTICSEARCH_CONFIG_HOST&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.user=<span class=\"string\">&quot;&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.password=<span class=\"string\">&quot;&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ui.image.tag=9.2.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAME=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAMESPACE=skywalking</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  oci://registry-1.docker.io/apache/skywalking-helm \\</span><br><span class=\"line\">  --version <span class=\"string\">&quot;4.5.0&quot;</span> \\</span><br><span class=\"line\">  -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.image.repository=<span class=\"string\">&quot;apache/skywalking-oap-server&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.image.tag=latest \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.storageType=elasticsearch \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.host=<span class=\"string\">&quot;10.0.1.90&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.user=<span class=\"string\">&quot;&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.password=<span class=\"string\">&quot;&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ui.image.repository=<span class=\"string\">&quot;apache/skywalking-ui&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ui.image.tag=latest \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> satellite.enabled=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> satellite.image.repository=<span class=\"string\">&quot;apache/skywalking-satellite&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> satellite.image.tag=v1.2.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"skywalking使用记录\"><a href=\"#skywalking使用记录\" class=\"headerlink\" title=\"skywalking使用记录\"></a>skywalking使用记录</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>快速开始</li>\n</ul>\n<p><a href=\"https://skywalking.apache.org/docs/skywalking-showcase/next/readme/#quick-start\">Quick Start</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/apache/skywalking-showcase.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> skywalking-showcase</span><br><span class=\"line\">make deploy.kubernetes</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/apache/skywalking-helm/tree/v4.5.0\">skywalking-helm</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建命名空间</span></span><br><span class=\"line\">kubectl create namespace skywalking</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_VERSION=4.3.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAME=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAMESPACE=skywalking</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行安装</span></span><br><span class=\"line\">helm install <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  oci://registry-1.docker.io/apache/skywalking-helm \\</span><br><span class=\"line\">  --version <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_VERSION&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.image.tag=9.2.0 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.storageType=elasticsearch \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ui.image.tag=9.2.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 master 分支安装 SkyWalking 的开发版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> REPO=chart</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/apache/skywalking-kubernetes</span><br><span class=\"line\"><span class=\"built_in\">cd</span> skywalking-kubernetes</span><br><span class=\"line\">helm repo add elastic https://helm.elastic.co</span><br><span class=\"line\">helm dep up <span class=\"variable\">$&#123;REPO&#125;</span>/skywalking</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用现有 Elasticsearch 安装特定版本的 SkyWalking</li>\n</ul>\n<p>修改文件 values-my-es.yaml 中已有 elasticsearch 集群的连接信息。<br>    - <a href=\"https://github.com/apache/skywalking-helm/blob/v4.5.0/chart/skywalking/values-my-es.yaml\">values-my-es.yaml</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAME=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAMESPACE=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> REPO=chart</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/apache/skywalking-kubernetes</span><br><span class=\"line\"><span class=\"built_in\">cd</span> skywalking-kubernetes</span><br><span class=\"line\">helm install <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> <span class=\"variable\">$&#123;REPO&#125;</span>/skywalking -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  -f ./<span class=\"variable\">$&#123;REPO&#125;</span>/skywalking/values-my-es.yaml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式二(目前用的方式)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_VERSION=4.3.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAME=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAMESPACE=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> ELASTICSEARCH_CONFIG_HOST=10.0.1.90</span><br><span class=\"line\"></span><br><span class=\"line\">helm install <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  oci://registry-1.docker.io/apache/skywalking-helm \\</span><br><span class=\"line\">  --version <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_VERSION&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.image.tag=9.2.0 \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.storageType=elasticsearch \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.host=<span class=\"string\">&quot;<span class=\"variable\">$&#123;ELASTICSEARCH_CONFIG_HOST&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.user=<span class=\"string\">&quot;&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.password=<span class=\"string\">&quot;&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ui.image.tag=9.2.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAME=skywalking</span><br><span class=\"line\"><span class=\"built_in\">export</span> SKYWALKING_RELEASE_NAMESPACE=skywalking</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  oci://registry-1.docker.io/apache/skywalking-helm \\</span><br><span class=\"line\">  --version <span class=\"string\">&quot;4.5.0&quot;</span> \\</span><br><span class=\"line\">  -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.image.repository=<span class=\"string\">&quot;apache/skywalking-oap-server&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.image.tag=latest \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> oap.storageType=elasticsearch \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.enabled=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.host=<span class=\"string\">&quot;10.0.1.90&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.user=<span class=\"string\">&quot;&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> elasticsearch.config.password=<span class=\"string\">&quot;&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ui.image.repository=<span class=\"string\">&quot;apache/skywalking-ui&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> ui.image.tag=latest \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> satellite.enabled=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> satellite.image.repository=<span class=\"string\">&quot;apache/skywalking-satellite&quot;</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> satellite.image.tag=v1.2.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Skywalking","nav_order":3,"has_children":true,"parent":"Skywalking","_content":"\n# Skywalking\n","source":"_posts/kubernetes/app/skywalking/index.md","raw":"---\nlayout: default\ntitle: Skywalking\nnav_order: 3\nhas_children: true\nparent: Skywalking\npermalink: \"/kubernetes/app/skywalking/\"\n---\n\n# Skywalking\n","slug":"kubernetes/app/skywalking/index","published":1,"date":"2025-02-23T07:43:31.689Z","updated":"2025-02-23T07:43:31.689Z","__permalink":"/kubernetes/app/skywalking/","comments":1,"photos":[],"_id":"cm7k5rwam0044msws7b2d6pld","content":"<h1 id=\"Skywalking\"><a href=\"#Skywalking\" class=\"headerlink\" title=\"Skywalking\"></a>Skywalking</h1>","excerpt":"","more":"<h1 id=\"Skywalking\"><a href=\"#Skywalking\" class=\"headerlink\" title=\"Skywalking\"></a>Skywalking</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"nacos使用记录","parent":"Nacos","has_children":false,"grand_parent":"App","_content":"\n# nacos使用记录\n\n- [参考](https://nacos.io/en/docs/latest/quickstart/quick-start-kubernetes/)\n\n```shell\ngit clone https://github.com/nacos-group/nacos-k8s.git\ncd nacos-k8s\nchmod +x quick-startup.sh\n./quick-startup.sh\n\n```\n","source":"_posts/kubernetes/app/nacos/nacos.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: nacos使用记录\nparent: Nacos\nhas_children: false\npermalink: \"/kubernetes/app/nacos/nacos/\"\ngrand_parent: App\n---\n\n# nacos使用记录\n\n- [参考](https://nacos.io/en/docs/latest/quickstart/quick-start-kubernetes/)\n\n```shell\ngit clone https://github.com/nacos-group/nacos-k8s.git\ncd nacos-k8s\nchmod +x quick-startup.sh\n./quick-startup.sh\n\n```\n","slug":"kubernetes/app/nacos/nacos","published":1,"date":"2025-02-23T07:43:31.549Z","updated":"2025-02-23T07:43:31.549Z","__permalink":"/kubernetes/app/nacos/nacos/","comments":1,"photos":[],"_id":"cm7k5rwan0045msws1vkn1097","content":"<h1 id=\"nacos使用记录\"><a href=\"#nacos使用记录\" class=\"headerlink\" title=\"nacos使用记录\"></a>nacos使用记录</h1><ul>\n<li><a href=\"https://nacos.io/en/docs/latest/quickstart/quick-start-kubernetes/\">参考</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/nacos-group/nacos-k8s.git</span><br><span class=\"line\">cd nacos-k8s</span><br><span class=\"line\">chmod +x quick-startup.sh</span><br><span class=\"line\">./quick-startup.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"nacos使用记录\"><a href=\"#nacos使用记录\" class=\"headerlink\" title=\"nacos使用记录\"></a>nacos使用记录</h1><ul>\n<li><a href=\"https://nacos.io/en/docs/latest/quickstart/quick-start-kubernetes/\">参考</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/nacos-group/nacos-k8s.git</span><br><span class=\"line\">cd nacos-k8s</span><br><span class=\"line\">chmod +x quick-startup.sh</span><br><span class=\"line\">./quick-startup.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":13,"description":"cert-manager使用记录","parent":"Cert-manager","has_children":false,"grand_parent":"Docs","_content":"\n# cert-manager使用记录\n\n[参考地址](https://cert-manager.io/docs/installation/)\n\n## 安装\n\n```bash\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml\n```\n\n- helm方式安装\n\n```bash\nhelm repo add jetstack https://charts.jetstack.io --force-update\nhelm repo update\nhelm install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.14.4 \\\n  # --set installCRDs=true\n```\n\n# 卸载\n\n```bash\n# 检查\nkubectl get Issuers,ClusterIssuers,Certificates,CertificateRequests,Orders,Challenges --all-namespaces\n# Uninstalling with Helm\nhelm --namespace cert-manager delete cert-manager\nkubectl delete namespace cert-manager\n# Uninstalling with kubectl\nkubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/vX.Y.Z/cert-manager.crds.yaml\nkubectl delete apiservice v1beta1.webhook.cert-manager.io\n```\n","source":"_posts/kubernetes/docs/cert-manager/cert-manager.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: cert-manager使用记录\nparent: Cert-manager\nhas_children: false\npermalink: \"/kubernetes/docs/cert-manager/cert-manager/\"\ngrand_parent: Docs\n---\n\n# cert-manager使用记录\n\n[参考地址](https://cert-manager.io/docs/installation/)\n\n## 安装\n\n```bash\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml\n```\n\n- helm方式安装\n\n```bash\nhelm repo add jetstack https://charts.jetstack.io --force-update\nhelm repo update\nhelm install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.14.4 \\\n  # --set installCRDs=true\n```\n\n# 卸载\n\n```bash\n# 检查\nkubectl get Issuers,ClusterIssuers,Certificates,CertificateRequests,Orders,Challenges --all-namespaces\n# Uninstalling with Helm\nhelm --namespace cert-manager delete cert-manager\nkubectl delete namespace cert-manager\n# Uninstalling with kubectl\nkubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/vX.Y.Z/cert-manager.crds.yaml\nkubectl delete apiservice v1beta1.webhook.cert-manager.io\n```\n","slug":"kubernetes/docs/cert-manager/cert-manager","published":1,"date":"2025-02-23T07:43:31.697Z","updated":"2025-02-23T07:43:31.698Z","__permalink":"/kubernetes/docs/cert-manager/cert-manager/","comments":1,"photos":[],"_id":"cm7k5rwan0046msws4w6041vd","content":"<h1 id=\"cert-manager使用记录\"><a href=\"#cert-manager使用记录\" class=\"headerlink\" title=\"cert-manager使用记录\"></a>cert-manager使用记录</h1><p><a href=\"https://cert-manager.io/docs/installation/\">参考地址</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>helm方式安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add jetstack https://charts.jetstack.io --force-update</span><br><span class=\"line\">helm repo update</span><br><span class=\"line\">helm install \\</span><br><span class=\"line\">  cert-manager jetstack/cert-manager \\</span><br><span class=\"line\">  --namespace cert-manager \\</span><br><span class=\"line\">  --create-namespace \\</span><br><span class=\"line\">  --version v1.14.4 \\</span><br><span class=\"line\">  <span class=\"comment\"># --set installCRDs=true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">kubectl get Issuers,ClusterIssuers,Certificates,CertificateRequests,Orders,Challenges --all-namespaces</span><br><span class=\"line\"><span class=\"comment\"># Uninstalling with Helm</span></span><br><span class=\"line\">helm --namespace cert-manager delete cert-manager</span><br><span class=\"line\">kubectl delete namespace cert-manager</span><br><span class=\"line\"><span class=\"comment\"># Uninstalling with kubectl</span></span><br><span class=\"line\">kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/vX.Y.Z/cert-manager.crds.yaml</span><br><span class=\"line\">kubectl delete apiservice v1beta1.webhook.cert-manager.io</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"cert-manager使用记录\"><a href=\"#cert-manager使用记录\" class=\"headerlink\" title=\"cert-manager使用记录\"></a>cert-manager使用记录</h1><p><a href=\"https://cert-manager.io/docs/installation/\">参考地址</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>helm方式安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add jetstack https://charts.jetstack.io --force-update</span><br><span class=\"line\">helm repo update</span><br><span class=\"line\">helm install \\</span><br><span class=\"line\">  cert-manager jetstack/cert-manager \\</span><br><span class=\"line\">  --namespace cert-manager \\</span><br><span class=\"line\">  --create-namespace \\</span><br><span class=\"line\">  --version v1.14.4 \\</span><br><span class=\"line\">  <span class=\"comment\"># --set installCRDs=true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">kubectl get Issuers,ClusterIssuers,Certificates,CertificateRequests,Orders,Challenges --all-namespaces</span><br><span class=\"line\"><span class=\"comment\"># Uninstalling with Helm</span></span><br><span class=\"line\">helm --namespace cert-manager delete cert-manager</span><br><span class=\"line\">kubectl delete namespace cert-manager</span><br><span class=\"line\"><span class=\"comment\"># Uninstalling with kubectl</span></span><br><span class=\"line\">kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/vX.Y.Z/cert-manager.crds.yaml</span><br><span class=\"line\">kubectl delete apiservice v1beta1.webhook.cert-manager.io</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Cert-manager","nav_order":3,"has_children":true,"parent":"Cert-manager","_content":"\n# Cert-manager\n","source":"_posts/kubernetes/docs/cert-manager/index.md","raw":"---\nlayout: default\ntitle: Cert-manager\nnav_order: 3\nhas_children: true\nparent: Cert-manager\npermalink: \"/kubernetes/docs/cert-manager/\"\n---\n\n# Cert-manager\n","slug":"kubernetes/docs/cert-manager/index","published":1,"date":"2025-02-23T07:43:31.701Z","updated":"2025-02-23T07:43:31.701Z","__permalink":"/kubernetes/docs/cert-manager/","comments":1,"photos":[],"_id":"cm7k5rwan0047msws69kzdiza","content":"<h1 id=\"Cert-manager\"><a href=\"#Cert-manager\" class=\"headerlink\" title=\"Cert-manager\"></a>Cert-manager</h1>","excerpt":"","more":"<h1 id=\"Cert-manager\"><a href=\"#Cert-manager\" class=\"headerlink\" title=\"Cert-manager\"></a>Cert-manager</h1>"},{"layout":"default","title":"Problems","nav_order":3,"has_children":true,"parent":"Problems","_content":"\n# Problems\n","source":"_posts/kubernetes/docs/problems/index.md","raw":"---\nlayout: default\ntitle: Problems\nnav_order: 3\nhas_children: true\nparent: Problems\npermalink: \"/kubernetes/docs/problems/\"\n---\n\n# Problems\n","slug":"kubernetes/docs/problems/index","published":1,"date":"2025-02-23T07:43:31.702Z","updated":"2025-02-23T07:43:31.702Z","__permalink":"/kubernetes/docs/problems/","comments":1,"photos":[],"_id":"cm7k5rwan0048mswsdw1ya6ko","content":"<h1 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h1>","excerpt":"","more":"<h1 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"问题记录","parent":"Problems","has_children":false,"grand_parent":"Docs","_content":"\n# 问题记录\n\nFailed to create pod sandbox: rpc error: code = Unknown desc = failed to get sandbox image \"k8s.gcr.io/pause:3.2\": failed to pull image \"k8s.gcr.io/pause:3.2\": failed to pull and unpack image \"k8s.gcr.io/pause:3.2\": failed to resolve reference \"k8s.gcr.io/pause:3.2\": failed to do request: Head \"https://k8s.gcr.io/v2/pause/manifests/3.2\": dial tcp 173.194.174.82:443: i/o timeout\n\n```shell\ncrictl pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2\nctr -n k8s.io i tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2\n```\n","source":"_posts/kubernetes/docs/problems/problems.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: 问题记录\nparent: Problems\nhas_children: false\npermalink: \"/kubernetes/docs/problems/problems/\"\ngrand_parent: Docs\n---\n\n# 问题记录\n\nFailed to create pod sandbox: rpc error: code = Unknown desc = failed to get sandbox image \"k8s.gcr.io/pause:3.2\": failed to pull image \"k8s.gcr.io/pause:3.2\": failed to pull and unpack image \"k8s.gcr.io/pause:3.2\": failed to resolve reference \"k8s.gcr.io/pause:3.2\": failed to do request: Head \"https://k8s.gcr.io/v2/pause/manifests/3.2\": dial tcp 173.194.174.82:443: i/o timeout\n\n```shell\ncrictl pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2\nctr -n k8s.io i tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2\n```\n","slug":"kubernetes/docs/problems/problems","published":1,"date":"2025-02-23T07:43:31.701Z","updated":"2025-02-23T07:43:31.702Z","__permalink":"/kubernetes/docs/problems/problems/","comments":1,"photos":[],"_id":"cm7k5rwan0049mswsby38gp3k","content":"<h1 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h1><p>Failed to create pod sandbox: rpc error: code &#x3D; Unknown desc &#x3D; failed to get sandbox image “k8s.gcr.io&#x2F;pause:3.2”: failed to pull image “k8s.gcr.io&#x2F;pause:3.2”: failed to pull and unpack image “k8s.gcr.io&#x2F;pause:3.2”: failed to resolve reference “k8s.gcr.io&#x2F;pause:3.2”: failed to do request: Head “<a href=\"https://k8s.gcr.io/v2/pause/manifests/3.2\">https://k8s.gcr.io/v2/pause/manifests/3.2</a>“: dial tcp 173.194.174.82:443: i&#x2F;o timeout</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2</span><br><span class=\"line\">ctr -n k8s.io i tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h1><p>Failed to create pod sandbox: rpc error: code &#x3D; Unknown desc &#x3D; failed to get sandbox image “k8s.gcr.io&#x2F;pause:3.2”: failed to pull image “k8s.gcr.io&#x2F;pause:3.2”: failed to pull and unpack image “k8s.gcr.io&#x2F;pause:3.2”: failed to resolve reference “k8s.gcr.io&#x2F;pause:3.2”: failed to do request: Head “<a href=\"https://k8s.gcr.io/v2/pause/manifests/3.2\">https://k8s.gcr.io/v2/pause/manifests/3.2</a>“: dial tcp 173.194.174.82:443: i&#x2F;o timeout</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2</span><br><span class=\"line\">ctr -n k8s.io i tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Telepresence","nav_order":3,"has_children":true,"parent":"Telepresence","_content":"\n# Telepresence\n","source":"_posts/kubernetes/docs/telepresence/index.md","raw":"---\nlayout: default\ntitle: Telepresence\nnav_order: 3\nhas_children: true\nparent: Telepresence\npermalink: \"/kubernetes/docs/telepresence/\"\n---\n\n# Telepresence\n","slug":"kubernetes/docs/telepresence/index","published":1,"date":"2025-02-23T07:43:31.702Z","updated":"2025-02-23T07:43:31.703Z","__permalink":"/kubernetes/docs/telepresence/","comments":1,"photos":[],"_id":"cm7k5rwan004amsws0klogd1f","content":"<h1 id=\"Telepresence\"><a href=\"#Telepresence\" class=\"headerlink\" title=\"Telepresence\"></a>Telepresence</h1>","excerpt":"","more":"<h1 id=\"Telepresence\"><a href=\"#Telepresence\" class=\"headerlink\" title=\"Telepresence\"></a>Telepresence</h1>"},{"layout":"default","title":"doc","nav_order":13,"description":"Telepresence 使用记录","parent":"Telepresence","has_children":false,"grand_parent":"Docs","_content":"\n# Telepresence 使用记录\n\n## Telepresence Quick Start\n\n[Telepresence Quick Start](https://www.getambassador.io/docs/telepresence/latest/quick-start?os=macos)\n\n## kubectl通过kubeconfig连接集群\n\n```shell\n# 设置集群\nkubectl config set-cluster ocms-dsu --kubeconfig ~/dev/projects/IdeaProjects/company/ssy/lingxi/outsource-deploy/snow/ocms-dsu.yaml\nkubectl config set-context ocms-dsu --kubeconfig ~/dev/projects/IdeaProjects/company/ssy/lingxi/outsource-deploy/snow/ocms-dsu.yaml\n# 查看当前集群\nkubectl config current-context\n\n```\n\n## 相关疑问\n\n`git clone https://github.com/ambassadorlabs/telepresence-local-quickstart.git --recurse-submodules`\n    - 关于这个命令中的`--recurse-submodules`作用是啥?\n        确保在克隆主项目的同时，其依赖的所有子模块也被克隆并设置好，以便开发者可以直接开始工作，而无需手动初始化和更新子模块。\n","source":"_posts/kubernetes/docs/telepresence/telepresence.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: Telepresence 使用记录\nparent: Telepresence\nhas_children: false\npermalink: \"/kubernetes/docs/telepresence/telepresence/\"\ngrand_parent: Docs\n---\n\n# Telepresence 使用记录\n\n## Telepresence Quick Start\n\n[Telepresence Quick Start](https://www.getambassador.io/docs/telepresence/latest/quick-start?os=macos)\n\n## kubectl通过kubeconfig连接集群\n\n```shell\n# 设置集群\nkubectl config set-cluster ocms-dsu --kubeconfig ~/dev/projects/IdeaProjects/company/ssy/lingxi/outsource-deploy/snow/ocms-dsu.yaml\nkubectl config set-context ocms-dsu --kubeconfig ~/dev/projects/IdeaProjects/company/ssy/lingxi/outsource-deploy/snow/ocms-dsu.yaml\n# 查看当前集群\nkubectl config current-context\n\n```\n\n## 相关疑问\n\n`git clone https://github.com/ambassadorlabs/telepresence-local-quickstart.git --recurse-submodules`\n    - 关于这个命令中的`--recurse-submodules`作用是啥?\n        确保在克隆主项目的同时，其依赖的所有子模块也被克隆并设置好，以便开发者可以直接开始工作，而无需手动初始化和更新子模块。\n","slug":"kubernetes/docs/telepresence/telepresence","published":1,"date":"2025-02-23T07:43:31.703Z","updated":"2025-02-23T07:43:31.703Z","__permalink":"/kubernetes/docs/telepresence/telepresence/","comments":1,"photos":[],"_id":"cm7k5rwan004bmswsgzzpa820","content":"<h1 id=\"Telepresence-使用记录\"><a href=\"#Telepresence-使用记录\" class=\"headerlink\" title=\"Telepresence 使用记录\"></a>Telepresence 使用记录</h1><h2 id=\"Telepresence-Quick-Start\"><a href=\"#Telepresence-Quick-Start\" class=\"headerlink\" title=\"Telepresence Quick Start\"></a>Telepresence Quick Start</h2><p><a href=\"https://www.getambassador.io/docs/telepresence/latest/quick-start?os=macos\">Telepresence Quick Start</a></p>\n<h2 id=\"kubectl通过kubeconfig连接集群\"><a href=\"#kubectl通过kubeconfig连接集群\" class=\"headerlink\" title=\"kubectl通过kubeconfig连接集群\"></a>kubectl通过kubeconfig连接集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置集群</span></span><br><span class=\"line\">kubectl config set-cluster ocms-dsu --kubeconfig ~/dev/projects/IdeaProjects/company/ssy/lingxi/outsource-deploy/snow/ocms-dsu.yaml</span><br><span class=\"line\">kubectl config set-context ocms-dsu --kubeconfig ~/dev/projects/IdeaProjects/company/ssy/lingxi/outsource-deploy/snow/ocms-dsu.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前集群</span></span><br><span class=\"line\">kubectl config current-context</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关疑问\"><a href=\"#相关疑问\" class=\"headerlink\" title=\"相关疑问\"></a>相关疑问</h2><p><code>git clone https://github.com/ambassadorlabs/telepresence-local-quickstart.git --recurse-submodules</code><br>    - 关于这个命令中的<code>--recurse-submodules</code>作用是啥?<br>        确保在克隆主项目的同时，其依赖的所有子模块也被克隆并设置好，以便开发者可以直接开始工作，而无需手动初始化和更新子模块。</p>\n","excerpt":"","more":"<h1 id=\"Telepresence-使用记录\"><a href=\"#Telepresence-使用记录\" class=\"headerlink\" title=\"Telepresence 使用记录\"></a>Telepresence 使用记录</h1><h2 id=\"Telepresence-Quick-Start\"><a href=\"#Telepresence-Quick-Start\" class=\"headerlink\" title=\"Telepresence Quick Start\"></a>Telepresence Quick Start</h2><p><a href=\"https://www.getambassador.io/docs/telepresence/latest/quick-start?os=macos\">Telepresence Quick Start</a></p>\n<h2 id=\"kubectl通过kubeconfig连接集群\"><a href=\"#kubectl通过kubeconfig连接集群\" class=\"headerlink\" title=\"kubectl通过kubeconfig连接集群\"></a>kubectl通过kubeconfig连接集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置集群</span></span><br><span class=\"line\">kubectl config set-cluster ocms-dsu --kubeconfig ~/dev/projects/IdeaProjects/company/ssy/lingxi/outsource-deploy/snow/ocms-dsu.yaml</span><br><span class=\"line\">kubectl config set-context ocms-dsu --kubeconfig ~/dev/projects/IdeaProjects/company/ssy/lingxi/outsource-deploy/snow/ocms-dsu.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前集群</span></span><br><span class=\"line\">kubectl config current-context</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关疑问\"><a href=\"#相关疑问\" class=\"headerlink\" title=\"相关疑问\"></a>相关疑问</h2><p><code>git clone https://github.com/ambassadorlabs/telepresence-local-quickstart.git --recurse-submodules</code><br>    - 关于这个命令中的<code>--recurse-submodules</code>作用是啥?<br>        确保在克隆主项目的同时，其依赖的所有子模块也被克隆并设置好，以便开发者可以直接开始工作，而无需手动初始化和更新子模块。</p>\n"},{"layout":"default","title":"doc","nav_order":13,"description":"RabbitMQ相关记录","parent":"Rabbitmq","has_children":false,"grand_parent":"Mid","_content":"\n# RabbitMQ相关记录\n\n## 部署\n\n```bash\n# 使用./config/rabbitmq.yaml文件部署\nkubectl create -f rabbitmq.yaml --namespace=kube-public\n# 查看暴露的端口\nkubectl get svc --namespace=kube-public\n# 在浏览器中输入：http://10.0.33.203:31199/，访问部署好的RabbitMQ。在登录页面输入用户名和密码（此处初始user/bitnami），系统将会进入RabbitMQ的主页。\n```\n\n- helm3安装\n\n```bash\nhelm repo add stable https://charts.helm.sh/stable\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add ali https://apphub.aliyuncs.com/stable\n\n# 安装\n# 设置size为8G\nhelm install rabbitmq bitnami/rabbitmq --namespace middleware \\\n--set rabbitmq.username=admin,rabbitmq.password=admin,rabbitmq.persistence.storageClass=local-path,rabbitmq.persistence.size=8G\n\nhelm install rabbitmq bitnami/rabbitmq --namespace middleware \\\n--set auth.username=user,auth.password=admin,persistence.enabled=false\n\n# 卸载\nhelm uninstall rabbitmq\n\n# 更新\nhelm upgrade rabbitmq bitnami/rabbitmq --namespace middleware \\\n--set auth.username=user,auth.password=admin,persistence.enabled=false,auth.tls.enabled=false\n\n```\n\n- Kubernetes Operator方式安装\n  - [参考文章](https://www.rabbitmq.com/kubernetes/operator/install-operator)\n\n```bash\nkubectl apply -f \"https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml\"\n\n# Installation using Helm chart\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install my-release bitnami/rabbitmq-cluster-operator\n\n# 查看\nkubectl get all -n rabbitmq-system\nkubectl get customresourcedefinitions.apiextensions.k8s.io | grep rabbit\n\n###### 示例\nkubectl apply -f https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/docs/examples/hello-world/rabbitmq.yaml\n\n```\n","source":"_posts/kubernetes/mid/RabbitMQ/RabbitMQ.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: RabbitMQ相关记录\nparent: Rabbitmq\nhas_children: false\npermalink: \"/kubernetes/mid/rabbitmq/rabbitmq/\"\ngrand_parent: Mid\n---\n\n# RabbitMQ相关记录\n\n## 部署\n\n```bash\n# 使用./config/rabbitmq.yaml文件部署\nkubectl create -f rabbitmq.yaml --namespace=kube-public\n# 查看暴露的端口\nkubectl get svc --namespace=kube-public\n# 在浏览器中输入：http://10.0.33.203:31199/，访问部署好的RabbitMQ。在登录页面输入用户名和密码（此处初始user/bitnami），系统将会进入RabbitMQ的主页。\n```\n\n- helm3安装\n\n```bash\nhelm repo add stable https://charts.helm.sh/stable\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add ali https://apphub.aliyuncs.com/stable\n\n# 安装\n# 设置size为8G\nhelm install rabbitmq bitnami/rabbitmq --namespace middleware \\\n--set rabbitmq.username=admin,rabbitmq.password=admin,rabbitmq.persistence.storageClass=local-path,rabbitmq.persistence.size=8G\n\nhelm install rabbitmq bitnami/rabbitmq --namespace middleware \\\n--set auth.username=user,auth.password=admin,persistence.enabled=false\n\n# 卸载\nhelm uninstall rabbitmq\n\n# 更新\nhelm upgrade rabbitmq bitnami/rabbitmq --namespace middleware \\\n--set auth.username=user,auth.password=admin,persistence.enabled=false,auth.tls.enabled=false\n\n```\n\n- Kubernetes Operator方式安装\n  - [参考文章](https://www.rabbitmq.com/kubernetes/operator/install-operator)\n\n```bash\nkubectl apply -f \"https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml\"\n\n# Installation using Helm chart\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install my-release bitnami/rabbitmq-cluster-operator\n\n# 查看\nkubectl get all -n rabbitmq-system\nkubectl get customresourcedefinitions.apiextensions.k8s.io | grep rabbit\n\n###### 示例\nkubectl apply -f https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/docs/examples/hello-world/rabbitmq.yaml\n\n```\n","slug":"kubernetes/mid/RabbitMQ/RabbitMQ","published":1,"date":"2025-02-23T07:43:31.694Z","updated":"2025-02-23T07:43:31.694Z","__permalink":"/kubernetes/mid/rabbitmq/rabbitmq/","comments":1,"photos":[],"_id":"cm7k5rwan004cmswsbmotacgy","content":"<h1 id=\"RabbitMQ相关记录\"><a href=\"#RabbitMQ相关记录\" class=\"headerlink\" title=\"RabbitMQ相关记录\"></a>RabbitMQ相关记录</h1><h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用./config/rabbitmq.yaml文件部署</span></span><br><span class=\"line\">kubectl create -f rabbitmq.yaml --namespace=kube-public</span><br><span class=\"line\"><span class=\"comment\"># 查看暴露的端口</span></span><br><span class=\"line\">kubectl get svc --namespace=kube-public</span><br><span class=\"line\"><span class=\"comment\"># 在浏览器中输入：http://10.0.33.203:31199/，访问部署好的RabbitMQ。在登录页面输入用户名和密码（此处初始user/bitnami），系统将会进入RabbitMQ的主页。</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>helm3安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add stable https://charts.helm.sh/stable</span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\">helm repo add ali https://apphub.aliyuncs.com/stable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\"><span class=\"comment\"># 设置size为8G</span></span><br><span class=\"line\">helm install rabbitmq bitnami/rabbitmq --namespace middleware \\</span><br><span class=\"line\">--<span class=\"built_in\">set</span> rabbitmq.username=admin,rabbitmq.password=admin,rabbitmq.persistence.storageClass=local-path,rabbitmq.persistence.size=8G</span><br><span class=\"line\"></span><br><span class=\"line\">helm install rabbitmq bitnami/rabbitmq --namespace middleware \\</span><br><span class=\"line\">--<span class=\"built_in\">set</span> auth.username=user,auth.password=admin,persistence.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">helm uninstall rabbitmq</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">helm upgrade rabbitmq bitnami/rabbitmq --namespace middleware \\</span><br><span class=\"line\">--<span class=\"built_in\">set</span> auth.username=user,auth.password=admin,persistence.enabled=<span class=\"literal\">false</span>,auth.tls.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Kubernetes Operator方式安装<ul>\n<li><a href=\"https://www.rabbitmq.com/kubernetes/operator/install-operator\">参考文章</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f <span class=\"string\">&quot;https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Installation using Helm chart</span></span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\">helm install my-release bitnami/rabbitmq-cluster-operator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">kubectl get all -n rabbitmq-system</span><br><span class=\"line\">kubectl get customresourcedefinitions.apiextensions.k8s.io | grep rabbit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###### 示例</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/docs/examples/hello-world/rabbitmq.yaml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"RabbitMQ相关记录\"><a href=\"#RabbitMQ相关记录\" class=\"headerlink\" title=\"RabbitMQ相关记录\"></a>RabbitMQ相关记录</h1><h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用./config/rabbitmq.yaml文件部署</span></span><br><span class=\"line\">kubectl create -f rabbitmq.yaml --namespace=kube-public</span><br><span class=\"line\"><span class=\"comment\"># 查看暴露的端口</span></span><br><span class=\"line\">kubectl get svc --namespace=kube-public</span><br><span class=\"line\"><span class=\"comment\"># 在浏览器中输入：http://10.0.33.203:31199/，访问部署好的RabbitMQ。在登录页面输入用户名和密码（此处初始user/bitnami），系统将会进入RabbitMQ的主页。</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>helm3安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add stable https://charts.helm.sh/stable</span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\">helm repo add ali https://apphub.aliyuncs.com/stable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\"><span class=\"comment\"># 设置size为8G</span></span><br><span class=\"line\">helm install rabbitmq bitnami/rabbitmq --namespace middleware \\</span><br><span class=\"line\">--<span class=\"built_in\">set</span> rabbitmq.username=admin,rabbitmq.password=admin,rabbitmq.persistence.storageClass=local-path,rabbitmq.persistence.size=8G</span><br><span class=\"line\"></span><br><span class=\"line\">helm install rabbitmq bitnami/rabbitmq --namespace middleware \\</span><br><span class=\"line\">--<span class=\"built_in\">set</span> auth.username=user,auth.password=admin,persistence.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">helm uninstall rabbitmq</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">helm upgrade rabbitmq bitnami/rabbitmq --namespace middleware \\</span><br><span class=\"line\">--<span class=\"built_in\">set</span> auth.username=user,auth.password=admin,persistence.enabled=<span class=\"literal\">false</span>,auth.tls.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Kubernetes Operator方式安装<ul>\n<li><a href=\"https://www.rabbitmq.com/kubernetes/operator/install-operator\">参考文章</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f <span class=\"string\">&quot;https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Installation using Helm chart</span></span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\">helm install my-release bitnami/rabbitmq-cluster-operator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">kubectl get all -n rabbitmq-system</span><br><span class=\"line\">kubectl get customresourcedefinitions.apiextensions.k8s.io | grep rabbit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###### 示例</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/docs/examples/hello-world/rabbitmq.yaml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Rabbitmq","nav_order":3,"has_children":true,"parent":"Rabbitmq","_content":"\n# Rabbitmq\n","source":"_posts/kubernetes/mid/RabbitMQ/index.md","raw":"---\nlayout: default\ntitle: Rabbitmq\nnav_order: 3\nhas_children: true\nparent: Rabbitmq\npermalink: \"/kubernetes/mid/rabbitmq/\"\n---\n\n# Rabbitmq\n","slug":"kubernetes/mid/RabbitMQ/index","published":1,"date":"2025-02-23T07:43:31.695Z","updated":"2025-02-23T07:43:31.695Z","__permalink":"/kubernetes/mid/rabbitmq/","comments":1,"photos":[],"_id":"cm7k5rwan004dmsws0gow0f61","content":"<h1 id=\"Rabbitmq\"><a href=\"#Rabbitmq\" class=\"headerlink\" title=\"Rabbitmq\"></a>Rabbitmq</h1>","excerpt":"","more":"<h1 id=\"Rabbitmq\"><a href=\"#Rabbitmq\" class=\"headerlink\" title=\"Rabbitmq\"></a>Rabbitmq</h1>"},{"layout":"default","title":"centos系统彻底卸载docker和k8s","nav_order":13,"description":"centos系统彻底卸载docker和k8s","parent":"Cloud-native","has_children":false,"grand_parent":"Ai","_content":"\n# centos系统彻底卸载docker和k8s\n\n如果您需要在 CentOS 系统上彻底卸载 Docker 和 Kubernetes (k8s)，可以按照以下步骤操作:\n\n1. 卸载 Docker:\n\n   ```bash\n   # 停止 Docker 服务\n   systemctl stop docker\n   systemctl stop docker.socket\n\n   # 卸载 Docker 软件包\n   yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine\n\n   # 删除 Docker 相关目录\n   rm -rf /var/lib/docker\n   rm -rf /etc/docker\n   ```\n\n2. 卸载 Kubernetes:\n\n   ```bash\n   # 停止 Kubernetes 服务\n   systemctl stop kubelet\n   systemctl stop kube-apiserver\n   systemctl stop kube-controller-manager\n   systemctl stop kube-scheduler\n   systemctl stop kube-proxy\n\n   # 卸载 Kubernetes 软件包\n   yum remove kubelet kubeadm kubectl\n\n   # 删除 Kubernetes 相关目录\n   rm -rf /etc/kubernetes\n   rm -rf /var/lib/etcd\n   rm -rf /var/lib/kubelet\n   ```\n\n3. 清理残留文件:\n\n   ```bash\n   # 删除 Docker 和 Kubernetes 相关的配置文件和日志\n   rm -rf /etc/systemd/system/docker.service.d\n   rm -rf /etc/systemd/system/kubelet.service.d\n   rm -rf /var/log/docker\n   rm -rf /var/log/kubernetes\n   ```\n\n4. 更新系统配置:\n\n   ```bash\n   # 更新 systemd 配置\n   systemctl daemon-reload\n   systemctl reset-failed\n   ```\n\n完成上述步骤后,您的 CentOS 系统应该已经彻底卸载了 Docker 和 Kubernetes。请确保在重新安装这些软件之前,您已经清理干净了系统上的所有相关组件和配置文件。\n","source":"_posts/materiel/ai/cloud-native/centos系统彻底卸载docker和k8s.md","raw":"---\nlayout: default\ntitle: centos系统彻底卸载docker和k8s\nnav_order: 13\ndescription: centos系统彻底卸载docker和k8s\nparent: Cloud-native\nhas_children: false\npermalink: \"/materiel/ai/cloud-native/centos系统彻底卸载docker和k8s/\"\ngrand_parent: Ai\n---\n\n# centos系统彻底卸载docker和k8s\n\n如果您需要在 CentOS 系统上彻底卸载 Docker 和 Kubernetes (k8s)，可以按照以下步骤操作:\n\n1. 卸载 Docker:\n\n   ```bash\n   # 停止 Docker 服务\n   systemctl stop docker\n   systemctl stop docker.socket\n\n   # 卸载 Docker 软件包\n   yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine\n\n   # 删除 Docker 相关目录\n   rm -rf /var/lib/docker\n   rm -rf /etc/docker\n   ```\n\n2. 卸载 Kubernetes:\n\n   ```bash\n   # 停止 Kubernetes 服务\n   systemctl stop kubelet\n   systemctl stop kube-apiserver\n   systemctl stop kube-controller-manager\n   systemctl stop kube-scheduler\n   systemctl stop kube-proxy\n\n   # 卸载 Kubernetes 软件包\n   yum remove kubelet kubeadm kubectl\n\n   # 删除 Kubernetes 相关目录\n   rm -rf /etc/kubernetes\n   rm -rf /var/lib/etcd\n   rm -rf /var/lib/kubelet\n   ```\n\n3. 清理残留文件:\n\n   ```bash\n   # 删除 Docker 和 Kubernetes 相关的配置文件和日志\n   rm -rf /etc/systemd/system/docker.service.d\n   rm -rf /etc/systemd/system/kubelet.service.d\n   rm -rf /var/log/docker\n   rm -rf /var/log/kubernetes\n   ```\n\n4. 更新系统配置:\n\n   ```bash\n   # 更新 systemd 配置\n   systemctl daemon-reload\n   systemctl reset-failed\n   ```\n\n完成上述步骤后,您的 CentOS 系统应该已经彻底卸载了 Docker 和 Kubernetes。请确保在重新安装这些软件之前,您已经清理干净了系统上的所有相关组件和配置文件。\n","slug":"materiel/ai/cloud-native/centos系统彻底卸载docker和k8s","published":1,"date":"2025-02-23T07:43:31.725Z","updated":"2025-02-23T07:43:31.725Z","__permalink":"/materiel/ai/cloud-native/centos系统彻底卸载docker和k8s/","comments":1,"photos":[],"_id":"cm7k5rwan004emsws3sbbdqzo","content":"<h1 id=\"centos系统彻底卸载docker和k8s\"><a href=\"#centos系统彻底卸载docker和k8s\" class=\"headerlink\" title=\"centos系统彻底卸载docker和k8s\"></a>centos系统彻底卸载docker和k8s</h1><p>如果您需要在 CentOS 系统上彻底卸载 Docker 和 Kubernetes (k8s)，可以按照以下步骤操作:</p>\n<ol>\n<li><p>卸载 Docker:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止 Docker 服务</span></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\">systemctl stop docker.socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载 Docker 软件包</span></span><br><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">               docker-client \\</span><br><span class=\"line\">               docker-client-latest \\</span><br><span class=\"line\">               docker-common \\</span><br><span class=\"line\">               docker-latest \\</span><br><span class=\"line\">               docker-latest-logrotate \\</span><br><span class=\"line\">               docker-logrotate \\</span><br><span class=\"line\">               docker-selinux \\</span><br><span class=\"line\">               docker-engine-selinux \\</span><br><span class=\"line\">               docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除 Docker 相关目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/docker</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载 Kubernetes:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止 Kubernetes 服务</span></span><br><span class=\"line\">systemctl stop kubelet</span><br><span class=\"line\">systemctl stop kube-apiserver</span><br><span class=\"line\">systemctl stop kube-controller-manager</span><br><span class=\"line\">systemctl stop kube-scheduler</span><br><span class=\"line\">systemctl stop kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载 Kubernetes 软件包</span></span><br><span class=\"line\">yum remove kubelet kubeadm kubectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除 Kubernetes 相关目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/kubernetes</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/etcd</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/kubelet</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理残留文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除 Docker 和 Kubernetes 相关的配置文件和日志</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/systemd/system/docker.service.d</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/systemd/system/kubelet.service.d</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/log/docker</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/log/kubernetes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新系统配置:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 systemd 配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl reset-failed</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>完成上述步骤后,您的 CentOS 系统应该已经彻底卸载了 Docker 和 Kubernetes。请确保在重新安装这些软件之前,您已经清理干净了系统上的所有相关组件和配置文件。</p>\n","excerpt":"","more":"<h1 id=\"centos系统彻底卸载docker和k8s\"><a href=\"#centos系统彻底卸载docker和k8s\" class=\"headerlink\" title=\"centos系统彻底卸载docker和k8s\"></a>centos系统彻底卸载docker和k8s</h1><p>如果您需要在 CentOS 系统上彻底卸载 Docker 和 Kubernetes (k8s)，可以按照以下步骤操作:</p>\n<ol>\n<li><p>卸载 Docker:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止 Docker 服务</span></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\">systemctl stop docker.socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载 Docker 软件包</span></span><br><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">               docker-client \\</span><br><span class=\"line\">               docker-client-latest \\</span><br><span class=\"line\">               docker-common \\</span><br><span class=\"line\">               docker-latest \\</span><br><span class=\"line\">               docker-latest-logrotate \\</span><br><span class=\"line\">               docker-logrotate \\</span><br><span class=\"line\">               docker-selinux \\</span><br><span class=\"line\">               docker-engine-selinux \\</span><br><span class=\"line\">               docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除 Docker 相关目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/docker</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载 Kubernetes:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止 Kubernetes 服务</span></span><br><span class=\"line\">systemctl stop kubelet</span><br><span class=\"line\">systemctl stop kube-apiserver</span><br><span class=\"line\">systemctl stop kube-controller-manager</span><br><span class=\"line\">systemctl stop kube-scheduler</span><br><span class=\"line\">systemctl stop kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载 Kubernetes 软件包</span></span><br><span class=\"line\">yum remove kubelet kubeadm kubectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除 Kubernetes 相关目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/kubernetes</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/etcd</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/kubelet</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理残留文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除 Docker 和 Kubernetes 相关的配置文件和日志</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/systemd/system/docker.service.d</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/systemd/system/kubelet.service.d</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/log/docker</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/log/kubernetes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新系统配置:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 systemd 配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl reset-failed</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>完成上述步骤后,您的 CentOS 系统应该已经彻底卸载了 Docker 和 Kubernetes。请确保在重新安装这些软件之前,您已经清理干净了系统上的所有相关组件和配置文件。</p>\n"},{"layout":"default","title":"Cloud-native","nav_order":3,"has_children":true,"parent":"Cloud-native","_content":"\n# Cloud-native\n","source":"_posts/materiel/ai/cloud-native/index.md","raw":"---\nlayout: default\ntitle: Cloud-native\nnav_order: 3\nhas_children: true\nparent: Cloud-native\npermalink: \"/materiel/ai/cloud-native/\"\n---\n\n# Cloud-native\n","slug":"materiel/ai/cloud-native/index","published":1,"date":"2025-02-23T07:43:31.725Z","updated":"2025-02-23T07:43:31.725Z","__permalink":"/materiel/ai/cloud-native/","comments":1,"photos":[],"_id":"cm7k5rwan004fmswsf14e9sbp","content":"<h1 id=\"Cloud-native\"><a href=\"#Cloud-native\" class=\"headerlink\" title=\"Cloud-native\"></a>Cloud-native</h1>","excerpt":"","more":"<h1 id=\"Cloud-native\"><a href=\"#Cloud-native\" class=\"headerlink\" title=\"Cloud-native\"></a>Cloud-native</h1>"},{"layout":"default","title":"daemon.json配置,怎么配置远程控制","nav_order":13,"description":"/etc/docker/daemon.json配置, 怎么配置远程控制","parent":"Docker","has_children":false,"grand_parent":"Ai","_content":"\n# /etc/docker/daemon.json配置, 怎么配置远程控制\n\n要在 Docker 中配置远程控制，你需要在 `/etc/docker/daemon.json` 文件中进行一些配置变更。这个文件用于配置 Docker 守护进程的的行为。以下是一些配置远程控制所需要设置的选项：\n\n1. **开启远程API访问**：\n\n   你可以通过设置 `--api-cors-header` 参数来允许跨域请求。例如，如果你想允许所有来源的跨域请求，可以设置为 `\"*\"`。\n\n   ```json\n   {\n     \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n     \"log-driver\": \"json-file\",\n     \"log-opts\": {\n       \"max-size\": \"100m\"\n     },\n     \"storage-driver\": \"overlay2\",\n     \"storage-opts\": [\n       \"overlay2.override_kernel_check=true\"\n     ],\n     \"registry-mirrors\": [\n       \"https://registry.docker-cn.com\"\n     ],\n     \"api-cors-header\": \"*\"\n   }\n   ```\n\n2. **配置 TLS 证书**：\n   如果你想通过 TLS 安全地访问 Docker API，你需要配置 TLS 证书。这通常涉及到为 Docker 守护进程和服务器端创建证书。然后，你可以在 `daemon.json` 中指定这些证书的路径。\n\n   ```json\n   {\n     \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n     \"tls-verify\": \"true\",\n     \"tls-ca-cert\": \"/path/to/ca.pem\",\n     \"tls-cert\": \"/path/to/cert.pem\",\n     \"tls-key\": \"/path/to/key.pem\"\n   }\n   ```\n\n3. **配置监听端口**：\n   默认情况下，Docker 守护进程监听本地 Unix 套接字和 TCP 端口 2375。如果你想监听不同的端口或套接字，可以设置 `debug` 和 `hosts` 选项。\n\n   ```json\n   {\n     \"debug\": true,\n     \"hosts\": [\"tcp://0.0.0.0:2376\", \"unix:///var/run/docker.sock\"],\n     \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n     \"log-driver\": \"json-file\",\n     \"log-opts\": {\n       \"max-size\": \"100m\"\n     },\n     \"storage-driver\": \"overlay2\",\n     \"storage-opts\": [\n       \"overlay2.override_kernel_check=true\"\n     ],\n     \"registry-mirrors\": [\n       \"https://registry.docker-cn.com\"\n     ],\n     \"tls-verify\": \"true\",\n     \"tls-ca-cert\": \"/path/to/ca.pem\",\n     \"tls-cert\": \"/path/to/cert.pem\",\n     \"tls-key\": \"/path/to/key.pem\"\n   }\n   ```\n\n请确保根据你的实际情况调整上述配置中的路径和值。在修改 `daemon.json` 文件后，需要重启 Docker 服务以使配置生效。\n在 Linux 系统中，你可以使用以下命令来重启 Docker 服务：\n\n```bash\nsudo systemctl restart docker\n```\n\n如果你使用的是 Docker Desktop 版本，通常会有一个 GUI 界面来帮助你进行配置和重启操作。\n","source":"_posts/materiel/ai/docker/daemon.json配置,怎么配置远程控制.md","raw":"---\nlayout: default\ntitle: daemon.json配置,怎么配置远程控制\nnav_order: 13\ndescription: \"/etc/docker/daemon.json配置, 怎么配置远程控制\"\nparent: Docker\nhas_children: false\npermalink: \"/materiel/ai/docker/daemon.json配置,怎么配置远程控制/\"\ngrand_parent: Ai\n---\n\n# /etc/docker/daemon.json配置, 怎么配置远程控制\n\n要在 Docker 中配置远程控制，你需要在 `/etc/docker/daemon.json` 文件中进行一些配置变更。这个文件用于配置 Docker 守护进程的的行为。以下是一些配置远程控制所需要设置的选项：\n\n1. **开启远程API访问**：\n\n   你可以通过设置 `--api-cors-header` 参数来允许跨域请求。例如，如果你想允许所有来源的跨域请求，可以设置为 `\"*\"`。\n\n   ```json\n   {\n     \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n     \"log-driver\": \"json-file\",\n     \"log-opts\": {\n       \"max-size\": \"100m\"\n     },\n     \"storage-driver\": \"overlay2\",\n     \"storage-opts\": [\n       \"overlay2.override_kernel_check=true\"\n     ],\n     \"registry-mirrors\": [\n       \"https://registry.docker-cn.com\"\n     ],\n     \"api-cors-header\": \"*\"\n   }\n   ```\n\n2. **配置 TLS 证书**：\n   如果你想通过 TLS 安全地访问 Docker API，你需要配置 TLS 证书。这通常涉及到为 Docker 守护进程和服务器端创建证书。然后，你可以在 `daemon.json` 中指定这些证书的路径。\n\n   ```json\n   {\n     \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n     \"tls-verify\": \"true\",\n     \"tls-ca-cert\": \"/path/to/ca.pem\",\n     \"tls-cert\": \"/path/to/cert.pem\",\n     \"tls-key\": \"/path/to/key.pem\"\n   }\n   ```\n\n3. **配置监听端口**：\n   默认情况下，Docker 守护进程监听本地 Unix 套接字和 TCP 端口 2375。如果你想监听不同的端口或套接字，可以设置 `debug` 和 `hosts` 选项。\n\n   ```json\n   {\n     \"debug\": true,\n     \"hosts\": [\"tcp://0.0.0.0:2376\", \"unix:///var/run/docker.sock\"],\n     \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n     \"log-driver\": \"json-file\",\n     \"log-opts\": {\n       \"max-size\": \"100m\"\n     },\n     \"storage-driver\": \"overlay2\",\n     \"storage-opts\": [\n       \"overlay2.override_kernel_check=true\"\n     ],\n     \"registry-mirrors\": [\n       \"https://registry.docker-cn.com\"\n     ],\n     \"tls-verify\": \"true\",\n     \"tls-ca-cert\": \"/path/to/ca.pem\",\n     \"tls-cert\": \"/path/to/cert.pem\",\n     \"tls-key\": \"/path/to/key.pem\"\n   }\n   ```\n\n请确保根据你的实际情况调整上述配置中的路径和值。在修改 `daemon.json` 文件后，需要重启 Docker 服务以使配置生效。\n在 Linux 系统中，你可以使用以下命令来重启 Docker 服务：\n\n```bash\nsudo systemctl restart docker\n```\n\n如果你使用的是 Docker Desktop 版本，通常会有一个 GUI 界面来帮助你进行配置和重启操作。\n","slug":"materiel/ai/docker/daemon.json配置,怎么配置远程控制","published":1,"date":"2025-02-23T07:43:31.724Z","updated":"2025-02-23T07:43:31.724Z","__permalink":"/materiel/ai/docker/daemon.json配置,怎么配置远程控制/","comments":1,"photos":[],"_id":"cm7k5rwao004gmswscyst3p4d","content":"<h1 id=\"x2F-etc-x2F-docker-x2F-daemon-json配置-怎么配置远程控制\"><a href=\"#x2F-etc-x2F-docker-x2F-daemon-json配置-怎么配置远程控制\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;docker&#x2F;daemon.json配置, 怎么配置远程控制\"></a>&#x2F;etc&#x2F;docker&#x2F;daemon.json配置, 怎么配置远程控制</h1><p>要在 Docker 中配置远程控制，你需要在 <code>/etc/docker/daemon.json</code> 文件中进行一些配置变更。这个文件用于配置 Docker 守护进程的的行为。以下是一些配置远程控制所需要设置的选项：</p>\n<ol>\n<li><p><strong>开启远程API访问</strong>：</p>\n<p>你可以通过设置 <code>--api-cors-header</code> 参数来允许跨域请求。例如，如果你想允许所有来源的跨域请求，可以设置为 <code>&quot;*&quot;</code>。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;exec-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;native.cgroupdriver=systemd&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;log-driver&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;json-file&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;log-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;max-size&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;100m&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;storage-driver&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;overlay2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;storage-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;overlay2.override_kernel_check=true&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;api-cors-header&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置 TLS 证书</strong>：<br>如果你想通过 TLS 安全地访问 Docker API，你需要配置 TLS 证书。这通常涉及到为 Docker 守护进程和服务器端创建证书。然后，你可以在 <code>daemon.json</code> 中指定这些证书的路径。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;exec-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;native.cgroupdriver=systemd&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-verify&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-ca-cert&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/ca.pem&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-cert&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/cert.pem&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/key.pem&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置监听端口</strong>：<br>默认情况下，Docker 守护进程监听本地 Unix 套接字和 TCP 端口 2375。如果你想监听不同的端口或套接字，可以设置 <code>debug</code> 和 <code>hosts</code> 选项。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;debug&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;hosts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tcp://0.0.0.0:2376&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;unix:///var/run/docker.sock&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;exec-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;native.cgroupdriver=systemd&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;log-driver&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;json-file&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;log-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;max-size&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;100m&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;storage-driver&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;overlay2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;storage-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;overlay2.override_kernel_check=true&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-verify&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-ca-cert&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/ca.pem&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-cert&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/cert.pem&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/key.pem&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>请确保根据你的实际情况调整上述配置中的路径和值。在修改 <code>daemon.json</code> 文件后，需要重启 Docker 服务以使配置生效。<br>在 Linux 系统中，你可以使用以下命令来重启 Docker 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>如果你使用的是 Docker Desktop 版本，通常会有一个 GUI 界面来帮助你进行配置和重启操作。</p>\n","excerpt":"","more":"<h1 id=\"x2F-etc-x2F-docker-x2F-daemon-json配置-怎么配置远程控制\"><a href=\"#x2F-etc-x2F-docker-x2F-daemon-json配置-怎么配置远程控制\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;docker&#x2F;daemon.json配置, 怎么配置远程控制\"></a>&#x2F;etc&#x2F;docker&#x2F;daemon.json配置, 怎么配置远程控制</h1><p>要在 Docker 中配置远程控制，你需要在 <code>/etc/docker/daemon.json</code> 文件中进行一些配置变更。这个文件用于配置 Docker 守护进程的的行为。以下是一些配置远程控制所需要设置的选项：</p>\n<ol>\n<li><p><strong>开启远程API访问</strong>：</p>\n<p>你可以通过设置 <code>--api-cors-header</code> 参数来允许跨域请求。例如，如果你想允许所有来源的跨域请求，可以设置为 <code>&quot;*&quot;</code>。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;exec-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;native.cgroupdriver=systemd&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;log-driver&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;json-file&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;log-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;max-size&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;100m&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;storage-driver&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;overlay2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;storage-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;overlay2.override_kernel_check=true&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;api-cors-header&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置 TLS 证书</strong>：<br>如果你想通过 TLS 安全地访问 Docker API，你需要配置 TLS 证书。这通常涉及到为 Docker 守护进程和服务器端创建证书。然后，你可以在 <code>daemon.json</code> 中指定这些证书的路径。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;exec-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;native.cgroupdriver=systemd&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-verify&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-ca-cert&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/ca.pem&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-cert&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/cert.pem&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/key.pem&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置监听端口</strong>：<br>默认情况下，Docker 守护进程监听本地 Unix 套接字和 TCP 端口 2375。如果你想监听不同的端口或套接字，可以设置 <code>debug</code> 和 <code>hosts</code> 选项。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;debug&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;hosts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tcp://0.0.0.0:2376&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;unix:///var/run/docker.sock&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;exec-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;native.cgroupdriver=systemd&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;log-driver&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;json-file&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;log-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;max-size&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;100m&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;storage-driver&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;overlay2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;storage-opts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;overlay2.override_kernel_check=true&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-verify&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-ca-cert&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/ca.pem&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-cert&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/cert.pem&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tls-key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/path/to/key.pem&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>请确保根据你的实际情况调整上述配置中的路径和值。在修改 <code>daemon.json</code> 文件后，需要重启 Docker 服务以使配置生效。<br>在 Linux 系统中，你可以使用以下命令来重启 Docker 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>如果你使用的是 Docker Desktop 版本，通常会有一个 GUI 界面来帮助你进行配置和重启操作。</p>\n"},{"layout":"default","title":"docker命令怎么控制远程docker","nav_order":13,"description":"docker命令怎么控制远程docker","parent":"Docker","has_children":false,"grand_parent":"Ai","_content":"\n# docker命令怎么控制远程docker\n\n要控制远程的 Docker 实例，您需要确保 Docker 守护进程（dockerd）在远程服务器上正在运行，并且客户端有权限与之通信。以下是详细步骤：\n\n## 1. 确保远程 Docker 服务正在运行\n\n首先，您需要确认远程服务器上的 Docker 守护进程正在运行。这可以通过 SSH 连接到远程服务器并执行以下命令来检查：\n\n```bash\nssh username@remote_server\ndocker ps\n```\n\n如果 Docker 正在运行，您应该能看到一些列出的容器。\n\n## 2. 配置 Docker 客户端\n\n您可能需要配置 Docker 客户端以连接到远程 Docker 守护进程。这可以通过环境变量或命令行参数来实现。\n\n### 使用环境变量\n\n您可以通过设置 `DOCKER_HOST` 环境变量来指定 Docker 守护进程的地址。例如，如果您知道远程 Docker 守护进程正在端口 2376 上监听 TCP，则可以这样设置：\n\n```bash\nexport DOCKER_HOST=tcp://remote_server:2376\n```\n\n为了确保这个环境变量在后续的 SSH 会话中也能使用，您可以将其添加到您的 `~/.bashrc` 或 `~/.profile` 文件中。\n\n### 使用命令行参数\n\n您也可以在每次使用 Docker 命令时通过命令行参数来指定 Docker 守护进程的地址，例如：\n\n```bash\ndocker -H tcp://remote_server:2376 ps\n```\n\n## 3. 使用 SSH 端口转发\n\n为了安全地连接到远程 Docker 守护进程，您可以通过 SSH 端口转发来实现。在 SSH 客户端上，您可以指定将本地端口转发到远程服务器上的 Docker 守护进程端口。\n例如，如果您希望在本地机器的 2376 端口上接收远程服务器上的 Docker 守护进程的流量，您可以这样做：\n\n```bash\nssh -L 2376:remote_server:2376 username@remote_server\n```\n\n执行此操作后，您可以通过 `docker -H tcp://localhost:2376 ps` 在本地机器上运行 Docker 命令，而实际上它们会通过 SSH 隧道转发到远程 Docker 守护进程。\n\n## 4. 验证连接\n\n完成上述配置后，您可以通过运行 Docker 命令并查看是否能够成功连接到远程 Docker 守护进程来验证设置是否正确。\n\n```bash\ndocker --host tcp://remote_server:2376 ps\n```\n\n如果一切设置正确，您应该能够看到远程服务器上的 Docker 容器列表。\n\n## 5. 注意安全性\n\n在配置远程 Docker 访问时，请确保采取适当的安全措施。这可能包括限制能够访问 Docker 守护进程的 IP 地址（例如，通过 SSH 密钥认证而非密码认证），使用 TLS 证书验证，以及在必要时设置密码或密钥传递。\n\n## 6. 使用 Docker Compose 和 Docker Machine（可选）\n\n如果您在远程服务器上使用 Docker Compose 或者通过 Docker Machine 管理 Docker 实例，您需要确保相应的配置文件和设置也指向正确的远程 Docker 守护进程。\n通过遵循这些步骤，您应该能够有效地控制远程服务器上的 Docker 实例。请确保您有足够的权限来启动和运行 Docker 守护进程，并且在操作过程中遵循最佳安全实践。\n","source":"_posts/materiel/ai/docker/docker命令怎么控制远程docker.md","raw":"---\nlayout: default\ntitle: docker命令怎么控制远程docker\nnav_order: 13\ndescription: docker命令怎么控制远程docker\nparent: Docker\nhas_children: false\npermalink: \"/materiel/ai/docker/docker命令怎么控制远程docker/\"\ngrand_parent: Ai\n---\n\n# docker命令怎么控制远程docker\n\n要控制远程的 Docker 实例，您需要确保 Docker 守护进程（dockerd）在远程服务器上正在运行，并且客户端有权限与之通信。以下是详细步骤：\n\n## 1. 确保远程 Docker 服务正在运行\n\n首先，您需要确认远程服务器上的 Docker 守护进程正在运行。这可以通过 SSH 连接到远程服务器并执行以下命令来检查：\n\n```bash\nssh username@remote_server\ndocker ps\n```\n\n如果 Docker 正在运行，您应该能看到一些列出的容器。\n\n## 2. 配置 Docker 客户端\n\n您可能需要配置 Docker 客户端以连接到远程 Docker 守护进程。这可以通过环境变量或命令行参数来实现。\n\n### 使用环境变量\n\n您可以通过设置 `DOCKER_HOST` 环境变量来指定 Docker 守护进程的地址。例如，如果您知道远程 Docker 守护进程正在端口 2376 上监听 TCP，则可以这样设置：\n\n```bash\nexport DOCKER_HOST=tcp://remote_server:2376\n```\n\n为了确保这个环境变量在后续的 SSH 会话中也能使用，您可以将其添加到您的 `~/.bashrc` 或 `~/.profile` 文件中。\n\n### 使用命令行参数\n\n您也可以在每次使用 Docker 命令时通过命令行参数来指定 Docker 守护进程的地址，例如：\n\n```bash\ndocker -H tcp://remote_server:2376 ps\n```\n\n## 3. 使用 SSH 端口转发\n\n为了安全地连接到远程 Docker 守护进程，您可以通过 SSH 端口转发来实现。在 SSH 客户端上，您可以指定将本地端口转发到远程服务器上的 Docker 守护进程端口。\n例如，如果您希望在本地机器的 2376 端口上接收远程服务器上的 Docker 守护进程的流量，您可以这样做：\n\n```bash\nssh -L 2376:remote_server:2376 username@remote_server\n```\n\n执行此操作后，您可以通过 `docker -H tcp://localhost:2376 ps` 在本地机器上运行 Docker 命令，而实际上它们会通过 SSH 隧道转发到远程 Docker 守护进程。\n\n## 4. 验证连接\n\n完成上述配置后，您可以通过运行 Docker 命令并查看是否能够成功连接到远程 Docker 守护进程来验证设置是否正确。\n\n```bash\ndocker --host tcp://remote_server:2376 ps\n```\n\n如果一切设置正确，您应该能够看到远程服务器上的 Docker 容器列表。\n\n## 5. 注意安全性\n\n在配置远程 Docker 访问时，请确保采取适当的安全措施。这可能包括限制能够访问 Docker 守护进程的 IP 地址（例如，通过 SSH 密钥认证而非密码认证），使用 TLS 证书验证，以及在必要时设置密码或密钥传递。\n\n## 6. 使用 Docker Compose 和 Docker Machine（可选）\n\n如果您在远程服务器上使用 Docker Compose 或者通过 Docker Machine 管理 Docker 实例，您需要确保相应的配置文件和设置也指向正确的远程 Docker 守护进程。\n通过遵循这些步骤，您应该能够有效地控制远程服务器上的 Docker 实例。请确保您有足够的权限来启动和运行 Docker 守护进程，并且在操作过程中遵循最佳安全实践。\n","slug":"materiel/ai/docker/docker命令怎么控制远程docker","published":1,"date":"2025-02-23T07:43:31.723Z","updated":"2025-02-23T07:43:31.723Z","__permalink":"/materiel/ai/docker/docker命令怎么控制远程docker/","comments":1,"photos":[],"_id":"cm7k5rwao004hmswsdxu5brrw","content":"<h1 id=\"docker命令怎么控制远程docker\"><a href=\"#docker命令怎么控制远程docker\" class=\"headerlink\" title=\"docker命令怎么控制远程docker\"></a>docker命令怎么控制远程docker</h1><p>要控制远程的 Docker 实例，您需要确保 Docker 守护进程（dockerd）在远程服务器上正在运行，并且客户端有权限与之通信。以下是详细步骤：</p>\n<h2 id=\"1-确保远程-Docker-服务正在运行\"><a href=\"#1-确保远程-Docker-服务正在运行\" class=\"headerlink\" title=\"1. 确保远程 Docker 服务正在运行\"></a>1. 确保远程 Docker 服务正在运行</h2><p>首先，您需要确认远程服务器上的 Docker 守护进程正在运行。这可以通过 SSH 连接到远程服务器并执行以下命令来检查：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@remote_server</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p>如果 Docker 正在运行，您应该能看到一些列出的容器。</p>\n<h2 id=\"2-配置-Docker-客户端\"><a href=\"#2-配置-Docker-客户端\" class=\"headerlink\" title=\"2. 配置 Docker 客户端\"></a>2. 配置 Docker 客户端</h2><p>您可能需要配置 Docker 客户端以连接到远程 Docker 守护进程。这可以通过环境变量或命令行参数来实现。</p>\n<h3 id=\"使用环境变量\"><a href=\"#使用环境变量\" class=\"headerlink\" title=\"使用环境变量\"></a>使用环境变量</h3><p>您可以通过设置 <code>DOCKER_HOST</code> 环境变量来指定 Docker 守护进程的地址。例如，如果您知道远程 Docker 守护进程正在端口 2376 上监听 TCP，则可以这样设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_HOST=tcp://remote_server:2376</span><br></pre></td></tr></table></figure>\n\n<p>为了确保这个环境变量在后续的 SSH 会话中也能使用，您可以将其添加到您的 <code>~/.bashrc</code> 或 <code>~/.profile</code> 文件中。</p>\n<h3 id=\"使用命令行参数\"><a href=\"#使用命令行参数\" class=\"headerlink\" title=\"使用命令行参数\"></a>使用命令行参数</h3><p>您也可以在每次使用 Docker 命令时通过命令行参数来指定 Docker 守护进程的地址，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -H tcp://remote_server:2376 ps</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用-SSH-端口转发\"><a href=\"#3-使用-SSH-端口转发\" class=\"headerlink\" title=\"3. 使用 SSH 端口转发\"></a>3. 使用 SSH 端口转发</h2><p>为了安全地连接到远程 Docker 守护进程，您可以通过 SSH 端口转发来实现。在 SSH 客户端上，您可以指定将本地端口转发到远程服务器上的 Docker 守护进程端口。<br>例如，如果您希望在本地机器的 2376 端口上接收远程服务器上的 Docker 守护进程的流量，您可以这样做：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -L 2376:remote_server:2376 username@remote_server</span><br></pre></td></tr></table></figure>\n\n<p>执行此操作后，您可以通过 <code>docker -H tcp://localhost:2376 ps</code> 在本地机器上运行 Docker 命令，而实际上它们会通过 SSH 隧道转发到远程 Docker 守护进程。</p>\n<h2 id=\"4-验证连接\"><a href=\"#4-验证连接\" class=\"headerlink\" title=\"4. 验证连接\"></a>4. 验证连接</h2><p>完成上述配置后，您可以通过运行 Docker 命令并查看是否能够成功连接到远程 Docker 守护进程来验证设置是否正确。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --host tcp://remote_server:2376 ps</span><br></pre></td></tr></table></figure>\n\n<p>如果一切设置正确，您应该能够看到远程服务器上的 Docker 容器列表。</p>\n<h2 id=\"5-注意安全性\"><a href=\"#5-注意安全性\" class=\"headerlink\" title=\"5. 注意安全性\"></a>5. 注意安全性</h2><p>在配置远程 Docker 访问时，请确保采取适当的安全措施。这可能包括限制能够访问 Docker 守护进程的 IP 地址（例如，通过 SSH 密钥认证而非密码认证），使用 TLS 证书验证，以及在必要时设置密码或密钥传递。</p>\n<h2 id=\"6-使用-Docker-Compose-和-Docker-Machine（可选）\"><a href=\"#6-使用-Docker-Compose-和-Docker-Machine（可选）\" class=\"headerlink\" title=\"6. 使用 Docker Compose 和 Docker Machine（可选）\"></a>6. 使用 Docker Compose 和 Docker Machine（可选）</h2><p>如果您在远程服务器上使用 Docker Compose 或者通过 Docker Machine 管理 Docker 实例，您需要确保相应的配置文件和设置也指向正确的远程 Docker 守护进程。<br>通过遵循这些步骤，您应该能够有效地控制远程服务器上的 Docker 实例。请确保您有足够的权限来启动和运行 Docker 守护进程，并且在操作过程中遵循最佳安全实践。</p>\n","excerpt":"","more":"<h1 id=\"docker命令怎么控制远程docker\"><a href=\"#docker命令怎么控制远程docker\" class=\"headerlink\" title=\"docker命令怎么控制远程docker\"></a>docker命令怎么控制远程docker</h1><p>要控制远程的 Docker 实例，您需要确保 Docker 守护进程（dockerd）在远程服务器上正在运行，并且客户端有权限与之通信。以下是详细步骤：</p>\n<h2 id=\"1-确保远程-Docker-服务正在运行\"><a href=\"#1-确保远程-Docker-服务正在运行\" class=\"headerlink\" title=\"1. 确保远程 Docker 服务正在运行\"></a>1. 确保远程 Docker 服务正在运行</h2><p>首先，您需要确认远程服务器上的 Docker 守护进程正在运行。这可以通过 SSH 连接到远程服务器并执行以下命令来检查：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@remote_server</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p>如果 Docker 正在运行，您应该能看到一些列出的容器。</p>\n<h2 id=\"2-配置-Docker-客户端\"><a href=\"#2-配置-Docker-客户端\" class=\"headerlink\" title=\"2. 配置 Docker 客户端\"></a>2. 配置 Docker 客户端</h2><p>您可能需要配置 Docker 客户端以连接到远程 Docker 守护进程。这可以通过环境变量或命令行参数来实现。</p>\n<h3 id=\"使用环境变量\"><a href=\"#使用环境变量\" class=\"headerlink\" title=\"使用环境变量\"></a>使用环境变量</h3><p>您可以通过设置 <code>DOCKER_HOST</code> 环境变量来指定 Docker 守护进程的地址。例如，如果您知道远程 Docker 守护进程正在端口 2376 上监听 TCP，则可以这样设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_HOST=tcp://remote_server:2376</span><br></pre></td></tr></table></figure>\n\n<p>为了确保这个环境变量在后续的 SSH 会话中也能使用，您可以将其添加到您的 <code>~/.bashrc</code> 或 <code>~/.profile</code> 文件中。</p>\n<h3 id=\"使用命令行参数\"><a href=\"#使用命令行参数\" class=\"headerlink\" title=\"使用命令行参数\"></a>使用命令行参数</h3><p>您也可以在每次使用 Docker 命令时通过命令行参数来指定 Docker 守护进程的地址，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -H tcp://remote_server:2376 ps</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用-SSH-端口转发\"><a href=\"#3-使用-SSH-端口转发\" class=\"headerlink\" title=\"3. 使用 SSH 端口转发\"></a>3. 使用 SSH 端口转发</h2><p>为了安全地连接到远程 Docker 守护进程，您可以通过 SSH 端口转发来实现。在 SSH 客户端上，您可以指定将本地端口转发到远程服务器上的 Docker 守护进程端口。<br>例如，如果您希望在本地机器的 2376 端口上接收远程服务器上的 Docker 守护进程的流量，您可以这样做：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -L 2376:remote_server:2376 username@remote_server</span><br></pre></td></tr></table></figure>\n\n<p>执行此操作后，您可以通过 <code>docker -H tcp://localhost:2376 ps</code> 在本地机器上运行 Docker 命令，而实际上它们会通过 SSH 隧道转发到远程 Docker 守护进程。</p>\n<h2 id=\"4-验证连接\"><a href=\"#4-验证连接\" class=\"headerlink\" title=\"4. 验证连接\"></a>4. 验证连接</h2><p>完成上述配置后，您可以通过运行 Docker 命令并查看是否能够成功连接到远程 Docker 守护进程来验证设置是否正确。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --host tcp://remote_server:2376 ps</span><br></pre></td></tr></table></figure>\n\n<p>如果一切设置正确，您应该能够看到远程服务器上的 Docker 容器列表。</p>\n<h2 id=\"5-注意安全性\"><a href=\"#5-注意安全性\" class=\"headerlink\" title=\"5. 注意安全性\"></a>5. 注意安全性</h2><p>在配置远程 Docker 访问时，请确保采取适当的安全措施。这可能包括限制能够访问 Docker 守护进程的 IP 地址（例如，通过 SSH 密钥认证而非密码认证），使用 TLS 证书验证，以及在必要时设置密码或密钥传递。</p>\n<h2 id=\"6-使用-Docker-Compose-和-Docker-Machine（可选）\"><a href=\"#6-使用-Docker-Compose-和-Docker-Machine（可选）\" class=\"headerlink\" title=\"6. 使用 Docker Compose 和 Docker Machine（可选）\"></a>6. 使用 Docker Compose 和 Docker Machine（可选）</h2><p>如果您在远程服务器上使用 Docker Compose 或者通过 Docker Machine 管理 Docker 实例，您需要确保相应的配置文件和设置也指向正确的远程 Docker 守护进程。<br>通过遵循这些步骤，您应该能够有效地控制远程服务器上的 Docker 实例。请确保您有足够的权限来启动和运行 Docker 守护进程，并且在操作过程中遵循最佳安全实践。</p>\n"},{"layout":"default","title":"Devs","nav_order":3,"has_children":true,"parent":"Devs","_content":"\n# Devs\n","source":"_posts/materiel/ai/devs/index.md","raw":"---\nlayout: default\ntitle: Devs\nnav_order: 3\nhas_children: true\nparent: Devs\npermalink: \"/materiel/ai/devs/\"\n---\n\n# Devs\n","slug":"materiel/ai/devs/index","published":1,"date":"2025-02-23T07:43:31.726Z","updated":"2025-02-23T07:43:31.726Z","__permalink":"/materiel/ai/devs/","comments":1,"photos":[],"_id":"cm7k5rwao004imsws2b1wd0pw","content":"<h1 id=\"Devs\"><a href=\"#Devs\" class=\"headerlink\" title=\"Devs\"></a>Devs</h1>","excerpt":"","more":"<h1 id=\"Devs\"><a href=\"#Devs\" class=\"headerlink\" title=\"Devs\"></a>Devs</h1>"},{"layout":"default","title":"Docker","nav_order":3,"has_children":true,"parent":"Docker","_content":"\n# Docker\n","source":"_posts/materiel/ai/docker/index.md","raw":"---\nlayout: default\ntitle: Docker\nnav_order: 3\nhas_children: true\nparent: Docker\npermalink: \"/materiel/ai/docker/\"\n---\n\n# Docker\n","slug":"materiel/ai/docker/index","published":1,"date":"2025-02-23T07:43:31.724Z","updated":"2025-02-23T07:43:31.724Z","__permalink":"/materiel/ai/docker/","comments":1,"photos":[],"_id":"cm7k5rwao004jmswseccp1m70","content":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1>","excerpt":"","more":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1>"},{"layout":"default","title":"如何让docker走代理","nav_order":13,"description":"如何让docker走代理","parent":"Docker","has_children":false,"grand_parent":"Ai","_content":"\n# 如何让docker走代理\n\n在使用 Docker 时让其通过代理来访问网络可以通过以下几种方法实现：\n\n**一、环境变量法**\n\n1. 对于 Linux 和 macOS 系统：\n   - 可以在启动 Docker 服务之前设置环境变量。打开终端，输入以下命令临时设置环境变量：\n     ```\n     export HTTP_PROXY=\"http://your_proxy_address:port\"\n     export HTTPS_PROXY=\"https://your_proxy_address:port\"\n     ```\n   - 如果需要永久设置，可以将这些命令添加到用户的 shell 配置文件中（如 `.bashrc`、`.zshrc` 等）。\n\n2. 对于 Windows 系统：\n   - 可以在系统环境变量中设置 `HTTP_PROXY` 和 `HTTPS_PROXY`。\n   - 打开“控制面板”->“系统和安全”->“系统”->“高级系统设置”->“环境变量”。在“系统变量”中新建两个变量，变量名分别为 `HTTP_PROXY` 和 `HTTPS_PROXY`，变量值设置为你的代理地址和端口，例如“http://127.0.0.1:8080”。\n\n**二、Docker 守护进程配置法（适用于 Linux）**\n\n1. 编辑 Docker 守护进程的配置文件 `/etc/docker/daemon.json`。如果该文件不存在，可以创建它。\n2. 在文件中添加以下内容：\n   ```json\n   {\n     \"proxies\": {\n       \"default\": {\n         \"httpProxy\": \"http://your_proxy_address:port\",\n         \"httpsProxy\": \"https://your_proxy_address:port\",\n         \"noProxy\": \"localhost,127.0.0.1,.your_domain.com\"\n       }\n     }\n   }\n   ```\n   - `httpProxy` 和 `httpsProxy` 设置代理地址和端口。\n   - `noProxy` 设置不需要通过代理访问的地址列表，用逗号分隔。\n\n3. 保存文件后，重新启动 Docker 服务：\n   ```\n   sudo systemctl restart docker\n   ```\n\n通过以上方法，你可以让 Docker 通过代理来访问网络，以便在网络受限的环境中顺利拉取镜像等操作。\n\n\nPS: 上面的方式貌似有问题\n\n[参考文章](https://cloud.tencent.com/developer/article/1806455)\n\n```bash\n# ~/.docker/config.json\n{\n \"proxies\":\n {\n   \"default\":\n   {\n     \"httpProxy\": \"http://proxy.example.com:8080\",\n     \"httpsProxy\": \"http://proxy.example.com:8080\",\n     \"noProxy\": \"localhost,127.0.0.1,.example.com\"\n   }\n }\n}\n```\n\n```bash\ndocker build . \\\n    --build-arg \"HTTP_PROXY=http://proxy.example.com:8080/\" \\\n    --build-arg \"HTTPS_PROXY=http://proxy.example.com:8080/\" \\\n    --build-arg \"NO_PROXY=localhost,127.0.0.1,.example.com\" \\\n    -t your/image:tag\n```\n\nPS: 但是, 尝试了下好像也没用\n\n之后, 再试试这个参数看看: --network host\n\nPS: 再次尝试了下新的方式(亲测可用)\n\n[参考文章](https://neucrack.com/p/286)\n\n```bash\n# sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8123\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8123\"\n```\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n```\n","source":"_posts/materiel/ai/docker/如何让docker走代理.md","raw":"---\nlayout: default\ntitle: 如何让docker走代理\nnav_order: 13\ndescription: 如何让docker走代理\nparent: Docker\nhas_children: false\npermalink: \"/materiel/ai/docker/如何让docker走代理/\"\ngrand_parent: Ai\n---\n\n# 如何让docker走代理\n\n在使用 Docker 时让其通过代理来访问网络可以通过以下几种方法实现：\n\n**一、环境变量法**\n\n1. 对于 Linux 和 macOS 系统：\n   - 可以在启动 Docker 服务之前设置环境变量。打开终端，输入以下命令临时设置环境变量：\n     ```\n     export HTTP_PROXY=\"http://your_proxy_address:port\"\n     export HTTPS_PROXY=\"https://your_proxy_address:port\"\n     ```\n   - 如果需要永久设置，可以将这些命令添加到用户的 shell 配置文件中（如 `.bashrc`、`.zshrc` 等）。\n\n2. 对于 Windows 系统：\n   - 可以在系统环境变量中设置 `HTTP_PROXY` 和 `HTTPS_PROXY`。\n   - 打开“控制面板”->“系统和安全”->“系统”->“高级系统设置”->“环境变量”。在“系统变量”中新建两个变量，变量名分别为 `HTTP_PROXY` 和 `HTTPS_PROXY`，变量值设置为你的代理地址和端口，例如“http://127.0.0.1:8080”。\n\n**二、Docker 守护进程配置法（适用于 Linux）**\n\n1. 编辑 Docker 守护进程的配置文件 `/etc/docker/daemon.json`。如果该文件不存在，可以创建它。\n2. 在文件中添加以下内容：\n   ```json\n   {\n     \"proxies\": {\n       \"default\": {\n         \"httpProxy\": \"http://your_proxy_address:port\",\n         \"httpsProxy\": \"https://your_proxy_address:port\",\n         \"noProxy\": \"localhost,127.0.0.1,.your_domain.com\"\n       }\n     }\n   }\n   ```\n   - `httpProxy` 和 `httpsProxy` 设置代理地址和端口。\n   - `noProxy` 设置不需要通过代理访问的地址列表，用逗号分隔。\n\n3. 保存文件后，重新启动 Docker 服务：\n   ```\n   sudo systemctl restart docker\n   ```\n\n通过以上方法，你可以让 Docker 通过代理来访问网络，以便在网络受限的环境中顺利拉取镜像等操作。\n\n\nPS: 上面的方式貌似有问题\n\n[参考文章](https://cloud.tencent.com/developer/article/1806455)\n\n```bash\n# ~/.docker/config.json\n{\n \"proxies\":\n {\n   \"default\":\n   {\n     \"httpProxy\": \"http://proxy.example.com:8080\",\n     \"httpsProxy\": \"http://proxy.example.com:8080\",\n     \"noProxy\": \"localhost,127.0.0.1,.example.com\"\n   }\n }\n}\n```\n\n```bash\ndocker build . \\\n    --build-arg \"HTTP_PROXY=http://proxy.example.com:8080/\" \\\n    --build-arg \"HTTPS_PROXY=http://proxy.example.com:8080/\" \\\n    --build-arg \"NO_PROXY=localhost,127.0.0.1,.example.com\" \\\n    -t your/image:tag\n```\n\nPS: 但是, 尝试了下好像也没用\n\n之后, 再试试这个参数看看: --network host\n\nPS: 再次尝试了下新的方式(亲测可用)\n\n[参考文章](https://neucrack.com/p/286)\n\n```bash\n# sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8123\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8123\"\n```\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n```\n","slug":"materiel/ai/docker/如何让docker走代理","published":1,"date":"2025-02-23T07:43:31.724Z","updated":"2025-02-23T07:43:31.724Z","__permalink":"/materiel/ai/docker/如何让docker走代理/","comments":1,"photos":[],"_id":"cm7k5rwao004kmsws4fr0c318","content":"<h1 id=\"如何让docker走代理\"><a href=\"#如何让docker走代理\" class=\"headerlink\" title=\"如何让docker走代理\"></a>如何让docker走代理</h1><p>在使用 Docker 时让其通过代理来访问网络可以通过以下几种方法实现：</p>\n<p><strong>一、环境变量法</strong></p>\n<ol>\n<li><p>对于 Linux 和 macOS 系统：</p>\n<ul>\n<li>可以在启动 Docker 服务之前设置环境变量。打开终端，输入以下命令临时设置环境变量：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HTTP_PROXY=&quot;http://your_proxy_address:port&quot;</span><br><span class=\"line\">export HTTPS_PROXY=&quot;https://your_proxy_address:port&quot;</span><br></pre></td></tr></table></figure></li>\n<li>如果需要永久设置，可以将这些命令添加到用户的 shell 配置文件中（如 <code>.bashrc</code>、<code>.zshrc</code> 等）。</li>\n</ul>\n</li>\n<li><p>对于 Windows 系统：</p>\n<ul>\n<li>可以在系统环境变量中设置 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code>。</li>\n<li>打开“控制面板”-&gt;“系统和安全”-&gt;“系统”-&gt;“高级系统设置”-&gt;“环境变量”。在“系统变量”中新建两个变量，变量名分别为 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code>，变量值设置为你的代理地址和端口，例如“<a href=\"http://127.0.0.1:8080”。\">http://127.0.0.1:8080”。</a></li>\n</ul>\n</li>\n</ol>\n<p><strong>二、Docker 守护进程配置法（适用于 Linux）</strong></p>\n<ol>\n<li><p>编辑 Docker 守护进程的配置文件 <code>/etc/docker/daemon.json</code>。如果该文件不存在，可以创建它。</p>\n</li>\n<li><p>在文件中添加以下内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;proxies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;default&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;httpProxy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://your_proxy_address:port&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;httpsProxy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://your_proxy_address:port&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;noProxy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;localhost,127.0.0.1,.your_domain.com&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>httpProxy</code> 和 <code>httpsProxy</code> 设置代理地址和端口。</li>\n<li><code>noProxy</code> 设置不需要通过代理访问的地址列表，用逗号分隔。</li>\n</ul>\n</li>\n<li><p>保存文件后，重新启动 Docker 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>通过以上方法，你可以让 Docker 通过代理来访问网络，以便在网络受限的环境中顺利拉取镜像等操作。</p>\n<p>PS: 上面的方式貌似有问题</p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1806455\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.docker/config.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;proxies&quot;</span>:</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;default&quot;</span>:</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"string\">&quot;httpProxy&quot;</span>: <span class=\"string\">&quot;http://proxy.example.com:8080&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;httpsProxy&quot;</span>: <span class=\"string\">&quot;http://proxy.example.com:8080&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;noProxy&quot;</span>: <span class=\"string\">&quot;localhost,127.0.0.1,.example.com&quot;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build . \\</span><br><span class=\"line\">    --build-arg <span class=\"string\">&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;</span> \\</span><br><span class=\"line\">    --build-arg <span class=\"string\">&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;</span> \\</span><br><span class=\"line\">    --build-arg <span class=\"string\">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span> \\</span><br><span class=\"line\">    -t your/image:tag</span><br></pre></td></tr></table></figure>\n\n<p>PS: 但是, 尝试了下好像也没用</p>\n<p>之后, 再试试这个参数看看: –network host</p>\n<p>PS: 再次尝试了下新的方式(亲测可用)</p>\n<p><a href=\"https://neucrack.com/p/286\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=<span class=\"string\">&quot;HTTP_PROXY=http://127.0.0.1:8123&quot;</span></span><br><span class=\"line\">Environment=<span class=\"string\">&quot;HTTPS_PROXY=http://127.0.0.1:8123&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl daemon-reload</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart docker</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"如何让docker走代理\"><a href=\"#如何让docker走代理\" class=\"headerlink\" title=\"如何让docker走代理\"></a>如何让docker走代理</h1><p>在使用 Docker 时让其通过代理来访问网络可以通过以下几种方法实现：</p>\n<p><strong>一、环境变量法</strong></p>\n<ol>\n<li><p>对于 Linux 和 macOS 系统：</p>\n<ul>\n<li>可以在启动 Docker 服务之前设置环境变量。打开终端，输入以下命令临时设置环境变量：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HTTP_PROXY=&quot;http://your_proxy_address:port&quot;</span><br><span class=\"line\">export HTTPS_PROXY=&quot;https://your_proxy_address:port&quot;</span><br></pre></td></tr></table></figure></li>\n<li>如果需要永久设置，可以将这些命令添加到用户的 shell 配置文件中（如 <code>.bashrc</code>、<code>.zshrc</code> 等）。</li>\n</ul>\n</li>\n<li><p>对于 Windows 系统：</p>\n<ul>\n<li>可以在系统环境变量中设置 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code>。</li>\n<li>打开“控制面板”-&gt;“系统和安全”-&gt;“系统”-&gt;“高级系统设置”-&gt;“环境变量”。在“系统变量”中新建两个变量，变量名分别为 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code>，变量值设置为你的代理地址和端口，例如“<a href=\"http://127.0.0.1:8080”。\">http://127.0.0.1:8080”。</a></li>\n</ul>\n</li>\n</ol>\n<p><strong>二、Docker 守护进程配置法（适用于 Linux）</strong></p>\n<ol>\n<li><p>编辑 Docker 守护进程的配置文件 <code>/etc/docker/daemon.json</code>。如果该文件不存在，可以创建它。</p>\n</li>\n<li><p>在文件中添加以下内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;proxies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;default&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;httpProxy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://your_proxy_address:port&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;httpsProxy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://your_proxy_address:port&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;noProxy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;localhost,127.0.0.1,.your_domain.com&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>httpProxy</code> 和 <code>httpsProxy</code> 设置代理地址和端口。</li>\n<li><code>noProxy</code> 设置不需要通过代理访问的地址列表，用逗号分隔。</li>\n</ul>\n</li>\n<li><p>保存文件后，重新启动 Docker 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>通过以上方法，你可以让 Docker 通过代理来访问网络，以便在网络受限的环境中顺利拉取镜像等操作。</p>\n<p>PS: 上面的方式貌似有问题</p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1806455\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.docker/config.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;proxies&quot;</span>:</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;default&quot;</span>:</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"string\">&quot;httpProxy&quot;</span>: <span class=\"string\">&quot;http://proxy.example.com:8080&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;httpsProxy&quot;</span>: <span class=\"string\">&quot;http://proxy.example.com:8080&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;noProxy&quot;</span>: <span class=\"string\">&quot;localhost,127.0.0.1,.example.com&quot;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build . \\</span><br><span class=\"line\">    --build-arg <span class=\"string\">&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;</span> \\</span><br><span class=\"line\">    --build-arg <span class=\"string\">&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;</span> \\</span><br><span class=\"line\">    --build-arg <span class=\"string\">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span> \\</span><br><span class=\"line\">    -t your/image:tag</span><br></pre></td></tr></table></figure>\n\n<p>PS: 但是, 尝试了下好像也没用</p>\n<p>之后, 再试试这个参数看看: –network host</p>\n<p>PS: 再次尝试了下新的方式(亲测可用)</p>\n<p><a href=\"https://neucrack.com/p/286\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=<span class=\"string\">&quot;HTTP_PROXY=http://127.0.0.1:8123&quot;</span></span><br><span class=\"line\">Environment=<span class=\"string\">&quot;HTTPS_PROXY=http://127.0.0.1:8123&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl daemon-reload</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart docker</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"修改docker容器的密码并且开启ssh远程连接","nav_order":13,"description":"修改docker容器的密码, 并且开启ssh远程连接","parent":"Docker","has_children":false,"grand_parent":"Ai","_content":"\n# 修改docker容器的密码, 并且开启ssh远程连接\n\n要修改Docker容器的密码并开启SSH远程连接，你需要确保容器中运行了一个SSH服务器。以下是一个基于Ubuntu镜像的示例，说明如何创建一个Docker容器，安装SSH服务器，设置一个root密码，并允许远程SSH连接。\n\n1. 创建一个Dockerfile，用于构建包含SSH服务器的镜像：\n\n```Dockerfile\n# 使用官方Ubuntu镜像\nFROM ubuntu\n# 安装SSH服务器\nRUN apt-get update && apt-get install -y openssh-server\nRUN mkdir /var/run/sshd\nRUN echo 'root:password' | chpasswd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n# 允许密码认证\nRUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config\n# 开放SSH端口\nEXPOSE 22\n# 启动SSH服务\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\n请注意，这个Dockerfile中使用了非常简单的密码（`password`）作为示例。在实际使用中，你应该使用一个更复杂的密码。\n2. 使用Dockerfile构建镜像：\n\n```bash\ndocker build -t my-ssh-image .\n```\n\n3. 运行容器：\n\n```bash\ndocker run -d -p 2222:22 my-ssh-image\n```\n\n这个命令将容器内部的22端口映射到宿主机的2222端口，以便你可以通过SSH连接到宿主机的2222端口来访问容器。\n4. 使用SSH客户端连接到容器：\n\n```bash\nssh root@<your-host-ip> -p 2222\n```\n\n将`<your-host-ip>`替换为你的宿主机IP地址。当你第一次连接时，SSH客户端可能会警告你新主机身份无法验证，输入`yes`以继续。\n5. 如果你需要修改已经运行的容器的root密码，你可以进入容器并使用`passwd`命令：\n\n```bash\ndocker exec -it <container-id> passwd\n```\n\n将`<container-id>`替换为你的容器ID。然后按照提示输入新密码。\n请确保你了解这些操作的安全性影响。在生产环境中，使用SSH访问容器时应该采取额外的安全措施，例如使用SSH密钥而不是密码，以及限制可以访问容器的IP地址。此外，运行SSH服务可能会增加安全风险，因此请确保你了解这些风险并采取适当的安全措施。\n","source":"_posts/materiel/ai/docker/修改docker容器的密码并且开启ssh远程连接.md","raw":"---\nlayout: default\ntitle: 修改docker容器的密码并且开启ssh远程连接\nnav_order: 13\ndescription: 修改docker容器的密码, 并且开启ssh远程连接\nparent: Docker\nhas_children: false\npermalink: \"/materiel/ai/docker/修改docker容器的密码并且开启ssh远程连接/\"\ngrand_parent: Ai\n---\n\n# 修改docker容器的密码, 并且开启ssh远程连接\n\n要修改Docker容器的密码并开启SSH远程连接，你需要确保容器中运行了一个SSH服务器。以下是一个基于Ubuntu镜像的示例，说明如何创建一个Docker容器，安装SSH服务器，设置一个root密码，并允许远程SSH连接。\n\n1. 创建一个Dockerfile，用于构建包含SSH服务器的镜像：\n\n```Dockerfile\n# 使用官方Ubuntu镜像\nFROM ubuntu\n# 安装SSH服务器\nRUN apt-get update && apt-get install -y openssh-server\nRUN mkdir /var/run/sshd\nRUN echo 'root:password' | chpasswd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n# 允许密码认证\nRUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config\n# 开放SSH端口\nEXPOSE 22\n# 启动SSH服务\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\n请注意，这个Dockerfile中使用了非常简单的密码（`password`）作为示例。在实际使用中，你应该使用一个更复杂的密码。\n2. 使用Dockerfile构建镜像：\n\n```bash\ndocker build -t my-ssh-image .\n```\n\n3. 运行容器：\n\n```bash\ndocker run -d -p 2222:22 my-ssh-image\n```\n\n这个命令将容器内部的22端口映射到宿主机的2222端口，以便你可以通过SSH连接到宿主机的2222端口来访问容器。\n4. 使用SSH客户端连接到容器：\n\n```bash\nssh root@<your-host-ip> -p 2222\n```\n\n将`<your-host-ip>`替换为你的宿主机IP地址。当你第一次连接时，SSH客户端可能会警告你新主机身份无法验证，输入`yes`以继续。\n5. 如果你需要修改已经运行的容器的root密码，你可以进入容器并使用`passwd`命令：\n\n```bash\ndocker exec -it <container-id> passwd\n```\n\n将`<container-id>`替换为你的容器ID。然后按照提示输入新密码。\n请确保你了解这些操作的安全性影响。在生产环境中，使用SSH访问容器时应该采取额外的安全措施，例如使用SSH密钥而不是密码，以及限制可以访问容器的IP地址。此外，运行SSH服务可能会增加安全风险，因此请确保你了解这些风险并采取适当的安全措施。\n","slug":"materiel/ai/docker/修改docker容器的密码并且开启ssh远程连接","published":1,"date":"2025-02-23T07:43:31.723Z","updated":"2025-02-23T07:43:31.723Z","__permalink":"/materiel/ai/docker/修改docker容器的密码并且开启ssh远程连接/","comments":1,"photos":[],"_id":"cm7k5rwao004lmswsfnep8dvp","content":"<h1 id=\"修改docker容器的密码-并且开启ssh远程连接\"><a href=\"#修改docker容器的密码-并且开启ssh远程连接\" class=\"headerlink\" title=\"修改docker容器的密码, 并且开启ssh远程连接\"></a>修改docker容器的密码, 并且开启ssh远程连接</h1><p>要修改Docker容器的密码并开启SSH远程连接，你需要确保容器中运行了一个SSH服务器。以下是一个基于Ubuntu镜像的示例，说明如何创建一个Docker容器，安装SSH服务器，设置一个root密码，并允许远程SSH连接。</p>\n<ol>\n<li>创建一个Dockerfile，用于构建包含SSH服务器的镜像：</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方Ubuntu镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"><span class=\"comment\"># 安装SSH服务器</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get install -y openssh-server</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> /var/run/sshd</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;root:password&#x27;</span> | chpasswd</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/PermitRootLogin prohibit-password/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"comment\"># 允许密码认证</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/#PasswordAuthentication yes/PasswordAuthentication yes/&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"comment\"># 开放SSH端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"comment\"># 启动SSH服务</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/usr/sbin/sshd&quot;</span>, <span class=\"string\">&quot;-D&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，这个Dockerfile中使用了非常简单的密码（<code>password</code>）作为示例。在实际使用中，你应该使用一个更复杂的密码。<br>2. 使用Dockerfile构建镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t my-ssh-image .</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>运行容器：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 2222:22 my-ssh-image</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将容器内部的22端口映射到宿主机的2222端口，以便你可以通过SSH连接到宿主机的2222端口来访问容器。<br>4. 使用SSH客户端连接到容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@&lt;your-host-ip&gt; -p 2222</span><br></pre></td></tr></table></figure>\n\n<p>将<code>&lt;your-host-ip&gt;</code>替换为你的宿主机IP地址。当你第一次连接时，SSH客户端可能会警告你新主机身份无法验证，输入<code>yes</code>以继续。<br>5. 如果你需要修改已经运行的容器的root密码，你可以进入容器并使用<code>passwd</code>命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;container-id&gt; passwd</span><br></pre></td></tr></table></figure>\n\n<p>将<code>&lt;container-id&gt;</code>替换为你的容器ID。然后按照提示输入新密码。<br>请确保你了解这些操作的安全性影响。在生产环境中，使用SSH访问容器时应该采取额外的安全措施，例如使用SSH密钥而不是密码，以及限制可以访问容器的IP地址。此外，运行SSH服务可能会增加安全风险，因此请确保你了解这些风险并采取适当的安全措施。</p>\n","excerpt":"","more":"<h1 id=\"修改docker容器的密码-并且开启ssh远程连接\"><a href=\"#修改docker容器的密码-并且开启ssh远程连接\" class=\"headerlink\" title=\"修改docker容器的密码, 并且开启ssh远程连接\"></a>修改docker容器的密码, 并且开启ssh远程连接</h1><p>要修改Docker容器的密码并开启SSH远程连接，你需要确保容器中运行了一个SSH服务器。以下是一个基于Ubuntu镜像的示例，说明如何创建一个Docker容器，安装SSH服务器，设置一个root密码，并允许远程SSH连接。</p>\n<ol>\n<li>创建一个Dockerfile，用于构建包含SSH服务器的镜像：</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方Ubuntu镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"><span class=\"comment\"># 安装SSH服务器</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get install -y openssh-server</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> /var/run/sshd</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;root:password&#x27;</span> | chpasswd</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/PermitRootLogin prohibit-password/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"comment\"># 允许密码认证</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/#PasswordAuthentication yes/PasswordAuthentication yes/&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"comment\"># 开放SSH端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"comment\"># 启动SSH服务</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/usr/sbin/sshd&quot;</span>, <span class=\"string\">&quot;-D&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，这个Dockerfile中使用了非常简单的密码（<code>password</code>）作为示例。在实际使用中，你应该使用一个更复杂的密码。<br>2. 使用Dockerfile构建镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t my-ssh-image .</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>运行容器：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 2222:22 my-ssh-image</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将容器内部的22端口映射到宿主机的2222端口，以便你可以通过SSH连接到宿主机的2222端口来访问容器。<br>4. 使用SSH客户端连接到容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@&lt;your-host-ip&gt; -p 2222</span><br></pre></td></tr></table></figure>\n\n<p>将<code>&lt;your-host-ip&gt;</code>替换为你的宿主机IP地址。当你第一次连接时，SSH客户端可能会警告你新主机身份无法验证，输入<code>yes</code>以继续。<br>5. 如果你需要修改已经运行的容器的root密码，你可以进入容器并使用<code>passwd</code>命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;container-id&gt; passwd</span><br></pre></td></tr></table></figure>\n\n<p>将<code>&lt;container-id&gt;</code>替换为你的容器ID。然后按照提示输入新密码。<br>请确保你了解这些操作的安全性影响。在生产环境中，使用SSH访问容器时应该采取额外的安全措施，例如使用SSH密钥而不是密码，以及限制可以访问容器的IP地址。此外，运行SSH服务可能会增加安全风险，因此请确保你了解这些风险并采取适当的安全措施。</p>\n"},{"layout":"default","title":"开启ssh的centos发行版的Dockerfile","nav_order":13,"description":"帮我写个dockerfile文件, 并且开启ssh远程连接 需要centos发行版","parent":"Docker","has_children":false,"grand_parent":"Ai","_content":"\n# 帮我写个dockerfile文件, 并且开启ssh远程连接 需要centos发行版\n\n要创建一个 Dockerfile 以构建一个包含 SSH 服务的 CentOS 容器，你可以按照以下步骤操作：\n\n1. **选择基础镜像：** 选择一个 CentOS 基础镜像。\n2. **安装 SSH 服务：** 在容器中安装 SSH 服务（通常是 `openssh-server`）。\n3. **生成 SSH 密钥：** 为了安全起见，生成一个新的 SSH 密钥对，避免使用默认的密钥。\n4. **设置 root 密码：** 设置一个 root 密码或者创建一个新的用户并设置密码。\n5. **配置 SSH 服务：** 配置 SSH 服务，例如允许 root 登录或者使用密码认证。\n6. **暴露 SSH 端口：** 在 Dockerfile 中指定要暴露的端口，通常是 22。\n7. **启动 SSH 服务：** 设置容器启动时自动启动 SSH 服务。\n下面是一个简单的 Dockerfile 示例：\n\n```Dockerfile\n# 使用官方 CentOS 基础镜像\nFROM centos:latest\n# 安装 SSH 服务\nRUN yum install -y openssh-server\n# 生成 SSH 密钥\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ''\nRUN ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ''\nRUN ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ''\n# 设置 root 密码\nRUN echo \"root:password\" | chpasswd\n# 配置 SSH 服务\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config\n# 暴露 SSH 端口\nEXPOSE 22\n# 启动 SSH 服务\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\n请注意，这个 Dockerfile 使用了简单密码 \"password\" 作为示例，实际使用时你应该使用一个更复杂的密码。此外，为了安全起见，你可能不希望使用 root 用户进行 SSH 连接，而是创建一个新的用户。\n构建镜像：\n\n```bash\ndocker build -t centos-ssh .\n```\n\n运行容器并映射端口：\n\n```bash\ndocker run -d --name centos-ssh -p 2222:22 centos-ssh\n```\n\n现在，你可以使用 SSH 客户端从宿主机连接到容器的 SSH 服务：\n\n```bash\nssh root@localhost -p 2222\n```\n\n输入之前设置的密码即可登录。\n请确保你了解运行 SSH 服务的 Docker 容器的安全风险，并根据实际情况进行相应的安全配置。\n","source":"_posts/materiel/ai/docker/开启ssh的centos发行版的Dockerfile.md","raw":"---\nlayout: default\ntitle: 开启ssh的centos发行版的Dockerfile\nnav_order: 13\ndescription: 帮我写个dockerfile文件, 并且开启ssh远程连接 需要centos发行版\nparent: Docker\nhas_children: false\npermalink: \"/materiel/ai/docker/开启ssh的centos发行版的dockerfile/\"\ngrand_parent: Ai\n---\n\n# 帮我写个dockerfile文件, 并且开启ssh远程连接 需要centos发行版\n\n要创建一个 Dockerfile 以构建一个包含 SSH 服务的 CentOS 容器，你可以按照以下步骤操作：\n\n1. **选择基础镜像：** 选择一个 CentOS 基础镜像。\n2. **安装 SSH 服务：** 在容器中安装 SSH 服务（通常是 `openssh-server`）。\n3. **生成 SSH 密钥：** 为了安全起见，生成一个新的 SSH 密钥对，避免使用默认的密钥。\n4. **设置 root 密码：** 设置一个 root 密码或者创建一个新的用户并设置密码。\n5. **配置 SSH 服务：** 配置 SSH 服务，例如允许 root 登录或者使用密码认证。\n6. **暴露 SSH 端口：** 在 Dockerfile 中指定要暴露的端口，通常是 22。\n7. **启动 SSH 服务：** 设置容器启动时自动启动 SSH 服务。\n下面是一个简单的 Dockerfile 示例：\n\n```Dockerfile\n# 使用官方 CentOS 基础镜像\nFROM centos:latest\n# 安装 SSH 服务\nRUN yum install -y openssh-server\n# 生成 SSH 密钥\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ''\nRUN ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ''\nRUN ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ''\n# 设置 root 密码\nRUN echo \"root:password\" | chpasswd\n# 配置 SSH 服务\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config\n# 暴露 SSH 端口\nEXPOSE 22\n# 启动 SSH 服务\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\n请注意，这个 Dockerfile 使用了简单密码 \"password\" 作为示例，实际使用时你应该使用一个更复杂的密码。此外，为了安全起见，你可能不希望使用 root 用户进行 SSH 连接，而是创建一个新的用户。\n构建镜像：\n\n```bash\ndocker build -t centos-ssh .\n```\n\n运行容器并映射端口：\n\n```bash\ndocker run -d --name centos-ssh -p 2222:22 centos-ssh\n```\n\n现在，你可以使用 SSH 客户端从宿主机连接到容器的 SSH 服务：\n\n```bash\nssh root@localhost -p 2222\n```\n\n输入之前设置的密码即可登录。\n请确保你了解运行 SSH 服务的 Docker 容器的安全风险，并根据实际情况进行相应的安全配置。\n","slug":"materiel/ai/docker/开启ssh的centos发行版的Dockerfile","published":1,"date":"2025-02-23T07:43:31.723Z","updated":"2025-02-23T07:43:31.723Z","__permalink":"/materiel/ai/docker/开启ssh的centos发行版的dockerfile/","comments":1,"photos":[],"_id":"cm7k5rwao004mmswscfjw61cq","content":"<h1 id=\"帮我写个dockerfile文件-并且开启ssh远程连接-需要centos发行版\"><a href=\"#帮我写个dockerfile文件-并且开启ssh远程连接-需要centos发行版\" class=\"headerlink\" title=\"帮我写个dockerfile文件, 并且开启ssh远程连接 需要centos发行版\"></a>帮我写个dockerfile文件, 并且开启ssh远程连接 需要centos发行版</h1><p>要创建一个 Dockerfile 以构建一个包含 SSH 服务的 CentOS 容器，你可以按照以下步骤操作：</p>\n<ol>\n<li><strong>选择基础镜像：</strong> 选择一个 CentOS 基础镜像。</li>\n<li><strong>安装 SSH 服务：</strong> 在容器中安装 SSH 服务（通常是 <code>openssh-server</code>）。</li>\n<li><strong>生成 SSH 密钥：</strong> 为了安全起见，生成一个新的 SSH 密钥对，避免使用默认的密钥。</li>\n<li><strong>设置 root 密码：</strong> 设置一个 root 密码或者创建一个新的用户并设置密码。</li>\n<li><strong>配置 SSH 服务：</strong> 配置 SSH 服务，例如允许 root 登录或者使用密码认证。</li>\n<li><strong>暴露 SSH 端口：</strong> 在 Dockerfile 中指定要暴露的端口，通常是 22。</li>\n<li><strong>启动 SSH 服务：</strong> 设置容器启动时自动启动 SSH 服务。<br>下面是一个简单的 Dockerfile 示例：</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方 CentOS 基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos:latest</span><br><span class=\"line\"><span class=\"comment\"># 安装 SSH 服务</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum install -y openssh-server</span></span><br><span class=\"line\"><span class=\"comment\"># 生成 SSH 密钥</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"comment\"># 设置 root 密码</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;root:password&quot;</span> | chpasswd</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 SSH 服务</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/PermitRootLogin prohibit-password/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/PasswordAuthentication no/PasswordAuthentication yes/&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"comment\"># 暴露 SSH 端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"comment\"># 启动 SSH 服务</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/usr/sbin/sshd&quot;</span>, <span class=\"string\">&quot;-D&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，这个 Dockerfile 使用了简单密码 “password” 作为示例，实际使用时你应该使用一个更复杂的密码。此外，为了安全起见，你可能不希望使用 root 用户进行 SSH 连接，而是创建一个新的用户。<br>构建镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t centos-ssh .</span><br></pre></td></tr></table></figure>\n\n<p>运行容器并映射端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name centos-ssh -p 2222:22 centos-ssh</span><br></pre></td></tr></table></figure>\n\n<p>现在，你可以使用 SSH 客户端从宿主机连接到容器的 SSH 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@localhost -p 2222</span><br></pre></td></tr></table></figure>\n\n<p>输入之前设置的密码即可登录。<br>请确保你了解运行 SSH 服务的 Docker 容器的安全风险，并根据实际情况进行相应的安全配置。</p>\n","excerpt":"","more":"<h1 id=\"帮我写个dockerfile文件-并且开启ssh远程连接-需要centos发行版\"><a href=\"#帮我写个dockerfile文件-并且开启ssh远程连接-需要centos发行版\" class=\"headerlink\" title=\"帮我写个dockerfile文件, 并且开启ssh远程连接 需要centos发行版\"></a>帮我写个dockerfile文件, 并且开启ssh远程连接 需要centos发行版</h1><p>要创建一个 Dockerfile 以构建一个包含 SSH 服务的 CentOS 容器，你可以按照以下步骤操作：</p>\n<ol>\n<li><strong>选择基础镜像：</strong> 选择一个 CentOS 基础镜像。</li>\n<li><strong>安装 SSH 服务：</strong> 在容器中安装 SSH 服务（通常是 <code>openssh-server</code>）。</li>\n<li><strong>生成 SSH 密钥：</strong> 为了安全起见，生成一个新的 SSH 密钥对，避免使用默认的密钥。</li>\n<li><strong>设置 root 密码：</strong> 设置一个 root 密码或者创建一个新的用户并设置密码。</li>\n<li><strong>配置 SSH 服务：</strong> 配置 SSH 服务，例如允许 root 登录或者使用密码认证。</li>\n<li><strong>暴露 SSH 端口：</strong> 在 Dockerfile 中指定要暴露的端口，通常是 22。</li>\n<li><strong>启动 SSH 服务：</strong> 设置容器启动时自动启动 SSH 服务。<br>下面是一个简单的 Dockerfile 示例：</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方 CentOS 基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos:latest</span><br><span class=\"line\"><span class=\"comment\"># 安装 SSH 服务</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum install -y openssh-server</span></span><br><span class=\"line\"><span class=\"comment\"># 生成 SSH 密钥</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"comment\"># 设置 root 密码</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;root:password&quot;</span> | chpasswd</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 SSH 服务</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/PermitRootLogin prohibit-password/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/PasswordAuthentication no/PasswordAuthentication yes/&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"comment\"># 暴露 SSH 端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"comment\"># 启动 SSH 服务</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/usr/sbin/sshd&quot;</span>, <span class=\"string\">&quot;-D&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，这个 Dockerfile 使用了简单密码 “password” 作为示例，实际使用时你应该使用一个更复杂的密码。此外，为了安全起见，你可能不希望使用 root 用户进行 SSH 连接，而是创建一个新的用户。<br>构建镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t centos-ssh .</span><br></pre></td></tr></table></figure>\n\n<p>运行容器并映射端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name centos-ssh -p 2222:22 centos-ssh</span><br></pre></td></tr></table></figure>\n\n<p>现在，你可以使用 SSH 客户端从宿主机连接到容器的 SSH 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@localhost -p 2222</span><br></pre></td></tr></table></figure>\n\n<p>输入之前设置的密码即可登录。<br>请确保你了解运行 SSH 服务的 Docker 容器的安全风险，并根据实际情况进行相应的安全配置。</p>\n"},{"layout":"default","title":"通过ssh协议使本地docker无感控制远程docker","nav_order":13,"description":"idea中Preparing Docker SSH environment...是怎么准备环境的? 原理是啥? 我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker","parent":"Docker","has_children":false,"grand_parent":"Ai","_content":"\n# idea中Preparing Docker SSH environment...是怎么准备环境的? 原理是啥? 我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker\n\n在使用 IntelliJ IDEA 进行 Docker 开发时，IDEA 支持通过 SSH 连接到远程 Docker 环境。当你在 IDEA 中看到 “Preparing Docker SSH environment...” 这样的提示时，通常意味着 IDEA 正在设置通过 SSH 代理来与远程 Docker 宿主机进行通信。\n\n## SSH 环境的准备过程\n\n1. **启动远程 Docker 服务**: 首先，需要在远程宿主机上启动 Docker 服务，并且确保远程宿主机上安装了 SSH 服务。\n2. **配置 SSH 密钥**: 在本地机器和远程宿主机之间需要有一对 SSH 密钥（通常是 `id_rsa` 和 `id_rsa.pub`），用于无密码登录。\n3. **设置 SSH 代理**: IDEA 使用一个名为 `idea-docker-ssh` 的内部工具，通过 SSH 隧道将本地 Docker 客户端的请求转发到远程宿主机的 Docker 服务。\n4. **建立连接**: 当 IDEA 检测到你想要通过 SSH 连接到远程 Docker 环境时，它会自动尝试使用配置好的 SSH 密钥和宿主机的 IP 地址来建立连接。\n\n## 原理\n\n- **SSH 隧道**: 通过 SSH 隧道技术，本地 Docker 客户端与远程宿主机之间的通信被加密并转发。\n\n- **Docker 远程 API**: 一旦通过 SSH 建立连接，本地 Docker 客户端会通过远程 API 与远程宿主机的 Docker 服务进行交互。\n\n## 在本地通过 SSH 控制内网 Docker\n\n要通过 SSH 在本地控制内网中的 Docker 宿主机，你需要确保以下条件满足：\n\n1. **远程宿主机配置**:\n\n   - 确保 Docker 服务正在运行。\n   - 确保宿主机上的 SSH 服务已安装并允许无密码登录（通过 `ssh-copy-id` 或 `ssh-agent`）。\n   - 确保防火墙和端口转发设置允许 SSH 连接。\n2. **本地机器配置**:\n   - 拥有对远程宿主机的 SSH 密钥。\n   - 安装并配置 `idea-docker-ssh` 工具（通常 IDEA 会自动处理这一步骤）。\n3. **在 IDEA 中配置**:\n   - 在 IDEA 中，打开 \"Preferences\"（或 \"Settings\"），然后找到 Docker 设置。\n   - 配置 Docker 的远程 URL 为 SSH 协议加上宿主机的 IP 地址和端口。例如： `ssh://<user>@<host>:<port>`。\n   - 输入你的 SSH 密钥路径，如果 IDEA 没有自动检测到。\n4. **建立连接并操作**:\n   - 完成以上设置后，IDEA 应该能够自动建立 SSH 连接和 Docker 环境。\n   - 你现在应该可以在 IDEA 中运行 Docker 命令，并对远程 Docker 宿主机上的容器进行操作。\n  \n## 注意事项\n\n- 确保你拥有访问远程宿主机的权限。\n- 确保所有操作符合你所在组织的政策和安全标准。\n- 保护好你的 SSH 密钥，不要让它落入未经授权的人手中。\n在操作过程中，如果有任何不确定的地方，建议查阅更详细的官方文档或咨询有经验的开发者。\n","source":"_posts/materiel/ai/docker/通过ssh协议使本地docker无感控制远程docker.md","raw":"---\nlayout: default\ntitle: 通过ssh协议使本地docker无感控制远程docker\nnav_order: 13\ndescription: idea中Preparing Docker SSH environment...是怎么准备环境的? 原理是啥? 我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker\nparent: Docker\nhas_children: false\npermalink: \"/materiel/ai/docker/通过ssh协议使本地docker无感控制远程docker/\"\ngrand_parent: Ai\n---\n\n# idea中Preparing Docker SSH environment...是怎么准备环境的? 原理是啥? 我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker\n\n在使用 IntelliJ IDEA 进行 Docker 开发时，IDEA 支持通过 SSH 连接到远程 Docker 环境。当你在 IDEA 中看到 “Preparing Docker SSH environment...” 这样的提示时，通常意味着 IDEA 正在设置通过 SSH 代理来与远程 Docker 宿主机进行通信。\n\n## SSH 环境的准备过程\n\n1. **启动远程 Docker 服务**: 首先，需要在远程宿主机上启动 Docker 服务，并且确保远程宿主机上安装了 SSH 服务。\n2. **配置 SSH 密钥**: 在本地机器和远程宿主机之间需要有一对 SSH 密钥（通常是 `id_rsa` 和 `id_rsa.pub`），用于无密码登录。\n3. **设置 SSH 代理**: IDEA 使用一个名为 `idea-docker-ssh` 的内部工具，通过 SSH 隧道将本地 Docker 客户端的请求转发到远程宿主机的 Docker 服务。\n4. **建立连接**: 当 IDEA 检测到你想要通过 SSH 连接到远程 Docker 环境时，它会自动尝试使用配置好的 SSH 密钥和宿主机的 IP 地址来建立连接。\n\n## 原理\n\n- **SSH 隧道**: 通过 SSH 隧道技术，本地 Docker 客户端与远程宿主机之间的通信被加密并转发。\n\n- **Docker 远程 API**: 一旦通过 SSH 建立连接，本地 Docker 客户端会通过远程 API 与远程宿主机的 Docker 服务进行交互。\n\n## 在本地通过 SSH 控制内网 Docker\n\n要通过 SSH 在本地控制内网中的 Docker 宿主机，你需要确保以下条件满足：\n\n1. **远程宿主机配置**:\n\n   - 确保 Docker 服务正在运行。\n   - 确保宿主机上的 SSH 服务已安装并允许无密码登录（通过 `ssh-copy-id` 或 `ssh-agent`）。\n   - 确保防火墙和端口转发设置允许 SSH 连接。\n2. **本地机器配置**:\n   - 拥有对远程宿主机的 SSH 密钥。\n   - 安装并配置 `idea-docker-ssh` 工具（通常 IDEA 会自动处理这一步骤）。\n3. **在 IDEA 中配置**:\n   - 在 IDEA 中，打开 \"Preferences\"（或 \"Settings\"），然后找到 Docker 设置。\n   - 配置 Docker 的远程 URL 为 SSH 协议加上宿主机的 IP 地址和端口。例如： `ssh://<user>@<host>:<port>`。\n   - 输入你的 SSH 密钥路径，如果 IDEA 没有自动检测到。\n4. **建立连接并操作**:\n   - 完成以上设置后，IDEA 应该能够自动建立 SSH 连接和 Docker 环境。\n   - 你现在应该可以在 IDEA 中运行 Docker 命令，并对远程 Docker 宿主机上的容器进行操作。\n  \n## 注意事项\n\n- 确保你拥有访问远程宿主机的权限。\n- 确保所有操作符合你所在组织的政策和安全标准。\n- 保护好你的 SSH 密钥，不要让它落入未经授权的人手中。\n在操作过程中，如果有任何不确定的地方，建议查阅更详细的官方文档或咨询有经验的开发者。\n","slug":"materiel/ai/docker/通过ssh协议使本地docker无感控制远程docker","published":1,"date":"2025-02-23T07:43:31.724Z","updated":"2025-02-23T07:43:31.724Z","__permalink":"/materiel/ai/docker/通过ssh协议使本地docker无感控制远程docker/","comments":1,"photos":[],"_id":"cm7k5rwao004nmsws9d2k0ue6","content":"<h1 id=\"idea中Preparing-Docker-SSH-environment…是怎么准备环境的-原理是啥-我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker\"><a href=\"#idea中Preparing-Docker-SSH-environment…是怎么准备环境的-原理是啥-我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker\" class=\"headerlink\" title=\"idea中Preparing Docker SSH environment…是怎么准备环境的? 原理是啥? 我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker\"></a>idea中Preparing Docker SSH environment…是怎么准备环境的? 原理是啥? 我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker</h1><p>在使用 IntelliJ IDEA 进行 Docker 开发时，IDEA 支持通过 SSH 连接到远程 Docker 环境。当你在 IDEA 中看到 “Preparing Docker SSH environment…” 这样的提示时，通常意味着 IDEA 正在设置通过 SSH 代理来与远程 Docker 宿主机进行通信。</p>\n<h2 id=\"SSH-环境的准备过程\"><a href=\"#SSH-环境的准备过程\" class=\"headerlink\" title=\"SSH 环境的准备过程\"></a>SSH 环境的准备过程</h2><ol>\n<li><strong>启动远程 Docker 服务</strong>: 首先，需要在远程宿主机上启动 Docker 服务，并且确保远程宿主机上安装了 SSH 服务。</li>\n<li><strong>配置 SSH 密钥</strong>: 在本地机器和远程宿主机之间需要有一对 SSH 密钥（通常是 <code>id_rsa</code> 和 <code>id_rsa.pub</code>），用于无密码登录。</li>\n<li><strong>设置 SSH 代理</strong>: IDEA 使用一个名为 <code>idea-docker-ssh</code> 的内部工具，通过 SSH 隧道将本地 Docker 客户端的请求转发到远程宿主机的 Docker 服务。</li>\n<li><strong>建立连接</strong>: 当 IDEA 检测到你想要通过 SSH 连接到远程 Docker 环境时，它会自动尝试使用配置好的 SSH 密钥和宿主机的 IP 地址来建立连接。</li>\n</ol>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li><p><strong>SSH 隧道</strong>: 通过 SSH 隧道技术，本地 Docker 客户端与远程宿主机之间的通信被加密并转发。</p>\n</li>\n<li><p><strong>Docker 远程 API</strong>: 一旦通过 SSH 建立连接，本地 Docker 客户端会通过远程 API 与远程宿主机的 Docker 服务进行交互。</p>\n</li>\n</ul>\n<h2 id=\"在本地通过-SSH-控制内网-Docker\"><a href=\"#在本地通过-SSH-控制内网-Docker\" class=\"headerlink\" title=\"在本地通过 SSH 控制内网 Docker\"></a>在本地通过 SSH 控制内网 Docker</h2><p>要通过 SSH 在本地控制内网中的 Docker 宿主机，你需要确保以下条件满足：</p>\n<ol>\n<li><p><strong>远程宿主机配置</strong>:</p>\n<ul>\n<li>确保 Docker 服务正在运行。</li>\n<li>确保宿主机上的 SSH 服务已安装并允许无密码登录（通过 <code>ssh-copy-id</code> 或 <code>ssh-agent</code>）。</li>\n<li>确保防火墙和端口转发设置允许 SSH 连接。</li>\n</ul>\n</li>\n<li><p><strong>本地机器配置</strong>:</p>\n<ul>\n<li>拥有对远程宿主机的 SSH 密钥。</li>\n<li>安装并配置 <code>idea-docker-ssh</code> 工具（通常 IDEA 会自动处理这一步骤）。</li>\n</ul>\n</li>\n<li><p><strong>在 IDEA 中配置</strong>:</p>\n<ul>\n<li>在 IDEA 中，打开 “Preferences”（或 “Settings”），然后找到 Docker 设置。</li>\n<li>配置 Docker 的远程 URL 为 SSH 协议加上宿主机的 IP 地址和端口。例如： <code>ssh://&lt;user&gt;@&lt;host&gt;:&lt;port&gt;</code>。</li>\n<li>输入你的 SSH 密钥路径，如果 IDEA 没有自动检测到。</li>\n</ul>\n</li>\n<li><p><strong>建立连接并操作</strong>:</p>\n<ul>\n<li>完成以上设置后，IDEA 应该能够自动建立 SSH 连接和 Docker 环境。</li>\n<li>你现在应该可以在 IDEA 中运行 Docker 命令，并对远程 Docker 宿主机上的容器进行操作。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>确保你拥有访问远程宿主机的权限。</li>\n<li>确保所有操作符合你所在组织的政策和安全标准。</li>\n<li>保护好你的 SSH 密钥，不要让它落入未经授权的人手中。<br>在操作过程中，如果有任何不确定的地方，建议查阅更详细的官方文档或咨询有经验的开发者。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"idea中Preparing-Docker-SSH-environment…是怎么准备环境的-原理是啥-我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker\"><a href=\"#idea中Preparing-Docker-SSH-environment…是怎么准备环境的-原理是啥-我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker\" class=\"headerlink\" title=\"idea中Preparing Docker SSH environment…是怎么准备环境的? 原理是啥? 我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker\"></a>idea中Preparing Docker SSH environment…是怎么准备环境的? 原理是啥? 我要如何操作才能通过ssh的方式在本地通过docker命令远程控制内网docker</h1><p>在使用 IntelliJ IDEA 进行 Docker 开发时，IDEA 支持通过 SSH 连接到远程 Docker 环境。当你在 IDEA 中看到 “Preparing Docker SSH environment…” 这样的提示时，通常意味着 IDEA 正在设置通过 SSH 代理来与远程 Docker 宿主机进行通信。</p>\n<h2 id=\"SSH-环境的准备过程\"><a href=\"#SSH-环境的准备过程\" class=\"headerlink\" title=\"SSH 环境的准备过程\"></a>SSH 环境的准备过程</h2><ol>\n<li><strong>启动远程 Docker 服务</strong>: 首先，需要在远程宿主机上启动 Docker 服务，并且确保远程宿主机上安装了 SSH 服务。</li>\n<li><strong>配置 SSH 密钥</strong>: 在本地机器和远程宿主机之间需要有一对 SSH 密钥（通常是 <code>id_rsa</code> 和 <code>id_rsa.pub</code>），用于无密码登录。</li>\n<li><strong>设置 SSH 代理</strong>: IDEA 使用一个名为 <code>idea-docker-ssh</code> 的内部工具，通过 SSH 隧道将本地 Docker 客户端的请求转发到远程宿主机的 Docker 服务。</li>\n<li><strong>建立连接</strong>: 当 IDEA 检测到你想要通过 SSH 连接到远程 Docker 环境时，它会自动尝试使用配置好的 SSH 密钥和宿主机的 IP 地址来建立连接。</li>\n</ol>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li><p><strong>SSH 隧道</strong>: 通过 SSH 隧道技术，本地 Docker 客户端与远程宿主机之间的通信被加密并转发。</p>\n</li>\n<li><p><strong>Docker 远程 API</strong>: 一旦通过 SSH 建立连接，本地 Docker 客户端会通过远程 API 与远程宿主机的 Docker 服务进行交互。</p>\n</li>\n</ul>\n<h2 id=\"在本地通过-SSH-控制内网-Docker\"><a href=\"#在本地通过-SSH-控制内网-Docker\" class=\"headerlink\" title=\"在本地通过 SSH 控制内网 Docker\"></a>在本地通过 SSH 控制内网 Docker</h2><p>要通过 SSH 在本地控制内网中的 Docker 宿主机，你需要确保以下条件满足：</p>\n<ol>\n<li><p><strong>远程宿主机配置</strong>:</p>\n<ul>\n<li>确保 Docker 服务正在运行。</li>\n<li>确保宿主机上的 SSH 服务已安装并允许无密码登录（通过 <code>ssh-copy-id</code> 或 <code>ssh-agent</code>）。</li>\n<li>确保防火墙和端口转发设置允许 SSH 连接。</li>\n</ul>\n</li>\n<li><p><strong>本地机器配置</strong>:</p>\n<ul>\n<li>拥有对远程宿主机的 SSH 密钥。</li>\n<li>安装并配置 <code>idea-docker-ssh</code> 工具（通常 IDEA 会自动处理这一步骤）。</li>\n</ul>\n</li>\n<li><p><strong>在 IDEA 中配置</strong>:</p>\n<ul>\n<li>在 IDEA 中，打开 “Preferences”（或 “Settings”），然后找到 Docker 设置。</li>\n<li>配置 Docker 的远程 URL 为 SSH 协议加上宿主机的 IP 地址和端口。例如： <code>ssh://&lt;user&gt;@&lt;host&gt;:&lt;port&gt;</code>。</li>\n<li>输入你的 SSH 密钥路径，如果 IDEA 没有自动检测到。</li>\n</ul>\n</li>\n<li><p><strong>建立连接并操作</strong>:</p>\n<ul>\n<li>完成以上设置后，IDEA 应该能够自动建立 SSH 连接和 Docker 环境。</li>\n<li>你现在应该可以在 IDEA 中运行 Docker 命令，并对远程 Docker 宿主机上的容器进行操作。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>确保你拥有访问远程宿主机的权限。</li>\n<li>确保所有操作符合你所在组织的政策和安全标准。</li>\n<li>保护好你的 SSH 密钥，不要让它落入未经授权的人手中。<br>在操作过程中，如果有任何不确定的地方，建议查阅更详细的官方文档或咨询有经验的开发者。</li>\n</ul>\n"},{"layout":"default","title":"git只克隆指定某几个子模块到本地","nav_order":13,"description":"git只克隆指定某几个子模块到本地","parent":"Git","has_children":false,"grand_parent":"Ai","_content":"\n# git只克隆指定某几个子模块到本地\n\n在 Git 中，如果您只想克隆指定的子模块到本地，可以按照以下步骤进行操作：\n\n1. 首先，克隆父项目，但不初始化子模块：\n\n   ```bash\n   git clone --no-recurse-submodules <父项目的 Git 地址>\n   ```\n\n2. 进入克隆下来的父项目目录。\n\n3. 编辑 `.gitmodules` 文件，将您不想要克隆的子模块的相关部分注释掉或者删除。\n\n4. 运行以下命令初始化并更新指定的子模块：\n\n   ```bash\n   git submodule update --init -- <子模块的路径>\n   ```\n\n例如，如果您的项目中有 `submodule1`、`submodule2` 和 `submodule3` 三个子模块，而您只想克隆 `submodule1` 和 `submodule2`，您可以按照上述步骤操作，在编辑 `.gitmodules` 文件时，保留 `submodule1` 和 `submodule2` 的相关配置，注释或删除 `submodule3` 的配置，然后运行 `git submodule update --init -- submodule1` 和 `git submodule update --init -- submodule2` 来分别初始化和克隆这两个子模块。\n","source":"_posts/materiel/ai/git/git只克隆指定某几个子模块到本地.md","raw":"---\nlayout: default\ntitle: git只克隆指定某几个子模块到本地\nnav_order: 13\ndescription: git只克隆指定某几个子模块到本地\nparent: Git\nhas_children: false\npermalink: \"/materiel/ai/git/git只克隆指定某几个子模块到本地/\"\ngrand_parent: Ai\n---\n\n# git只克隆指定某几个子模块到本地\n\n在 Git 中，如果您只想克隆指定的子模块到本地，可以按照以下步骤进行操作：\n\n1. 首先，克隆父项目，但不初始化子模块：\n\n   ```bash\n   git clone --no-recurse-submodules <父项目的 Git 地址>\n   ```\n\n2. 进入克隆下来的父项目目录。\n\n3. 编辑 `.gitmodules` 文件，将您不想要克隆的子模块的相关部分注释掉或者删除。\n\n4. 运行以下命令初始化并更新指定的子模块：\n\n   ```bash\n   git submodule update --init -- <子模块的路径>\n   ```\n\n例如，如果您的项目中有 `submodule1`、`submodule2` 和 `submodule3` 三个子模块，而您只想克隆 `submodule1` 和 `submodule2`，您可以按照上述步骤操作，在编辑 `.gitmodules` 文件时，保留 `submodule1` 和 `submodule2` 的相关配置，注释或删除 `submodule3` 的配置，然后运行 `git submodule update --init -- submodule1` 和 `git submodule update --init -- submodule2` 来分别初始化和克隆这两个子模块。\n","slug":"materiel/ai/git/git只克隆指定某几个子模块到本地","published":1,"date":"2025-02-23T07:43:31.734Z","updated":"2025-02-23T07:43:31.735Z","__permalink":"/materiel/ai/git/git只克隆指定某几个子模块到本地/","comments":1,"photos":[],"_id":"cm7k5rwao004omsws4ud22jzx","content":"<h1 id=\"git只克隆指定某几个子模块到本地\"><a href=\"#git只克隆指定某几个子模块到本地\" class=\"headerlink\" title=\"git只克隆指定某几个子模块到本地\"></a>git只克隆指定某几个子模块到本地</h1><p>在 Git 中，如果您只想克隆指定的子模块到本地，可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>首先，克隆父项目，但不初始化子模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --no-recurse-submodules &lt;父项目的 Git 地址&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入克隆下来的父项目目录。</p>\n</li>\n<li><p>编辑 <code>.gitmodules</code> 文件，将您不想要克隆的子模块的相关部分注释掉或者删除。</p>\n</li>\n<li><p>运行以下命令初始化并更新指定的子模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init -- &lt;子模块的路径&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>例如，如果您的项目中有 <code>submodule1</code>、<code>submodule2</code> 和 <code>submodule3</code> 三个子模块，而您只想克隆 <code>submodule1</code> 和 <code>submodule2</code>，您可以按照上述步骤操作，在编辑 <code>.gitmodules</code> 文件时，保留 <code>submodule1</code> 和 <code>submodule2</code> 的相关配置，注释或删除 <code>submodule3</code> 的配置，然后运行 <code>git submodule update --init -- submodule1</code> 和 <code>git submodule update --init -- submodule2</code> 来分别初始化和克隆这两个子模块。</p>\n","excerpt":"","more":"<h1 id=\"git只克隆指定某几个子模块到本地\"><a href=\"#git只克隆指定某几个子模块到本地\" class=\"headerlink\" title=\"git只克隆指定某几个子模块到本地\"></a>git只克隆指定某几个子模块到本地</h1><p>在 Git 中，如果您只想克隆指定的子模块到本地，可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>首先，克隆父项目，但不初始化子模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --no-recurse-submodules &lt;父项目的 Git 地址&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入克隆下来的父项目目录。</p>\n</li>\n<li><p>编辑 <code>.gitmodules</code> 文件，将您不想要克隆的子模块的相关部分注释掉或者删除。</p>\n</li>\n<li><p>运行以下命令初始化并更新指定的子模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init -- &lt;子模块的路径&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>例如，如果您的项目中有 <code>submodule1</code>、<code>submodule2</code> 和 <code>submodule3</code> 三个子模块，而您只想克隆 <code>submodule1</code> 和 <code>submodule2</code>，您可以按照上述步骤操作，在编辑 <code>.gitmodules</code> 文件时，保留 <code>submodule1</code> 和 <code>submodule2</code> 的相关配置，注释或删除 <code>submodule3</code> 的配置，然后运行 <code>git submodule update --init -- submodule1</code> 和 <code>git submodule update --init -- submodule2</code> 来分别初始化和克隆这两个子模块。</p>\n"},{"layout":"default","title":"git命令中的`--recurse-submodules`作用","nav_order":13,"description":"git命令中的`--recurse-submodules`作用","parent":"Git","has_children":false,"grand_parent":"Ai","_content":"\n# git命令中的`--recurse-submodules`作用\n\n在Git中，`--recurse-submodules`标志用于在克隆主项目的同时递归地克隆所有子模块。子模块是Git中一种将一个Git仓库作为另一个Git仓库的子目录的方式，通常用于当主项目需要依赖于其他项目时。\n当你运行带有`--recurse-submodules`标志的`git clone`命令时，Git会执行以下操作：\n\n1. 克隆主项目仓库。\n2. 检测主项目中的`.gitmodules`文件，该文件包含了子模块的配置信息。\n3. 对于`.gitmodules`文件中列出的每个子模块，Git会克隆子模块的仓库到主项目中指定的路径。\n4. 将子模块注册到主项目的`.git/config`文件中，以便于后续的子模块操作，如更新、推送等。\n简而言之，`--recurse-submodules`的作用是确保在克隆主项目的同时，其依赖的所有子模块也被克隆并设置好，以便开发者可以直接开始工作，而无需手动初始化和更新子模块。\n这是命令的示例输出：\n\n```sh\nCloning into 'telepresence-local-quickstart'...\n...\nSubmodule 'path/to/submodule' (https://github.com/username/submodule.git) registered for path 'path/to/submodule'\nCloning into 'path/to/submodule'...\n...\nSubmodule path 'path/to/submodule': checked out 'commit-hash'\n```\n\n在使用子模块时，请确保你熟悉如何更新子模块、解决子模块的合并冲突以及如何将更改推送到子模块的远程仓库。\n","source":"_posts/materiel/ai/git/git命令中的`--recurse-submodules`作用.md","raw":"---\nlayout: default\ntitle: git命令中的`--recurse-submodules`作用\nnav_order: 13\ndescription: git命令中的`--recurse-submodules`作用\nparent: Git\nhas_children: false\npermalink: \"/materiel/ai/git/git命令中的`--recurse-submodules`作用/\"\ngrand_parent: Ai\n---\n\n# git命令中的`--recurse-submodules`作用\n\n在Git中，`--recurse-submodules`标志用于在克隆主项目的同时递归地克隆所有子模块。子模块是Git中一种将一个Git仓库作为另一个Git仓库的子目录的方式，通常用于当主项目需要依赖于其他项目时。\n当你运行带有`--recurse-submodules`标志的`git clone`命令时，Git会执行以下操作：\n\n1. 克隆主项目仓库。\n2. 检测主项目中的`.gitmodules`文件，该文件包含了子模块的配置信息。\n3. 对于`.gitmodules`文件中列出的每个子模块，Git会克隆子模块的仓库到主项目中指定的路径。\n4. 将子模块注册到主项目的`.git/config`文件中，以便于后续的子模块操作，如更新、推送等。\n简而言之，`--recurse-submodules`的作用是确保在克隆主项目的同时，其依赖的所有子模块也被克隆并设置好，以便开发者可以直接开始工作，而无需手动初始化和更新子模块。\n这是命令的示例输出：\n\n```sh\nCloning into 'telepresence-local-quickstart'...\n...\nSubmodule 'path/to/submodule' (https://github.com/username/submodule.git) registered for path 'path/to/submodule'\nCloning into 'path/to/submodule'...\n...\nSubmodule path 'path/to/submodule': checked out 'commit-hash'\n```\n\n在使用子模块时，请确保你熟悉如何更新子模块、解决子模块的合并冲突以及如何将更改推送到子模块的远程仓库。\n","slug":"materiel/ai/git/git命令中的`--recurse-submodules`作用","published":1,"date":"2025-02-23T07:43:31.735Z","updated":"2025-02-23T07:43:31.735Z","__permalink":"/materiel/ai/git/git命令中的`--recurse-submodules`作用/","comments":1,"photos":[],"_id":"cm7k5rwao004pmsws5275684y","content":"<h1 id=\"git命令中的-recurse-submodules作用\"><a href=\"#git命令中的-recurse-submodules作用\" class=\"headerlink\" title=\"git命令中的--recurse-submodules作用\"></a>git命令中的<code>--recurse-submodules</code>作用</h1><p>在Git中，<code>--recurse-submodules</code>标志用于在克隆主项目的同时递归地克隆所有子模块。子模块是Git中一种将一个Git仓库作为另一个Git仓库的子目录的方式，通常用于当主项目需要依赖于其他项目时。<br>当你运行带有<code>--recurse-submodules</code>标志的<code>git clone</code>命令时，Git会执行以下操作：</p>\n<ol>\n<li>克隆主项目仓库。</li>\n<li>检测主项目中的<code>.gitmodules</code>文件，该文件包含了子模块的配置信息。</li>\n<li>对于<code>.gitmodules</code>文件中列出的每个子模块，Git会克隆子模块的仓库到主项目中指定的路径。</li>\n<li>将子模块注册到主项目的<code>.git/config</code>文件中，以便于后续的子模块操作，如更新、推送等。<br>简而言之，<code>--recurse-submodules</code>的作用是确保在克隆主项目的同时，其依赖的所有子模块也被克隆并设置好，以便开发者可以直接开始工作，而无需手动初始化和更新子模块。<br>这是命令的示例输出：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">&#x27;telepresence-local-quickstart&#x27;</span>...</span><br><span class=\"line\">...</span><br><span class=\"line\">Submodule <span class=\"string\">&#x27;path/to/submodule&#x27;</span> (https://github.com/username/submodule.git) registered <span class=\"keyword\">for</span> path <span class=\"string\">&#x27;path/to/submodule&#x27;</span></span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;path/to/submodule&#x27;</span>...</span><br><span class=\"line\">...</span><br><span class=\"line\">Submodule path <span class=\"string\">&#x27;path/to/submodule&#x27;</span>: checked out <span class=\"string\">&#x27;commit-hash&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用子模块时，请确保你熟悉如何更新子模块、解决子模块的合并冲突以及如何将更改推送到子模块的远程仓库。</p>\n","excerpt":"","more":"<h1 id=\"git命令中的-recurse-submodules作用\"><a href=\"#git命令中的-recurse-submodules作用\" class=\"headerlink\" title=\"git命令中的--recurse-submodules作用\"></a>git命令中的<code>--recurse-submodules</code>作用</h1><p>在Git中，<code>--recurse-submodules</code>标志用于在克隆主项目的同时递归地克隆所有子模块。子模块是Git中一种将一个Git仓库作为另一个Git仓库的子目录的方式，通常用于当主项目需要依赖于其他项目时。<br>当你运行带有<code>--recurse-submodules</code>标志的<code>git clone</code>命令时，Git会执行以下操作：</p>\n<ol>\n<li>克隆主项目仓库。</li>\n<li>检测主项目中的<code>.gitmodules</code>文件，该文件包含了子模块的配置信息。</li>\n<li>对于<code>.gitmodules</code>文件中列出的每个子模块，Git会克隆子模块的仓库到主项目中指定的路径。</li>\n<li>将子模块注册到主项目的<code>.git/config</code>文件中，以便于后续的子模块操作，如更新、推送等。<br>简而言之，<code>--recurse-submodules</code>的作用是确保在克隆主项目的同时，其依赖的所有子模块也被克隆并设置好，以便开发者可以直接开始工作，而无需手动初始化和更新子模块。<br>这是命令的示例输出：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">&#x27;telepresence-local-quickstart&#x27;</span>...</span><br><span class=\"line\">...</span><br><span class=\"line\">Submodule <span class=\"string\">&#x27;path/to/submodule&#x27;</span> (https://github.com/username/submodule.git) registered <span class=\"keyword\">for</span> path <span class=\"string\">&#x27;path/to/submodule&#x27;</span></span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;path/to/submodule&#x27;</span>...</span><br><span class=\"line\">...</span><br><span class=\"line\">Submodule path <span class=\"string\">&#x27;path/to/submodule&#x27;</span>: checked out <span class=\"string\">&#x27;commit-hash&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用子模块时，请确保你熟悉如何更新子模块、解决子模块的合并冲突以及如何将更改推送到子模块的远程仓库。</p>\n"},{"layout":"default","title":"git管理子项目的方式","nav_order":13,"description":"git管理子项目的方式","parent":"Git","has_children":false,"grand_parent":"Ai","_content":"\n# git管理子项目的方式\n\n在Git中管理子项目（submodules）是一种将一个Git仓库作为另一个Git仓库的子目录的方式。这种方式通常用于当你的主项目需要依赖于另一个项目，而这个被依赖的项目又有自己的独立版本控制需求时。\n以下是如何在Git中添加、使用和更新子项目的基本步骤：\n\n## 添加子项目\n\n1. 在主项目目录中，使用以下命令添加子项目：\n\n   ```sh\n   git submodule add <子项目URL> <子项目在主项目中的路径>\n   # 这种方式需要在指定目录下执行, 会自动生成<子项目在主项目中的路径>(生成规则: <指定路径>/<子项目URL最后一级路径(去掉了.git后缀)>)\n   git submodule add <子项目URL>\n   ```\n\n   例如：\n\n   ```sh\n   git submodule add https://github.com/username/subproject.git path/to/subproject\n   ```\n\n2. 提交更改到主项目的仓库：\n\n   ```sh\n   git commit -m \"Add submodule\"\n   ```\n\n3. 推送更改到远程仓库：\n\n   ```sh\n   git push origin <分支名>\n   ```\n\n## 克隆含有子项目的主项目\n\n当克隆一个含有子项目的主项目时，默认情况下子项目目录是空的。你需要运行以下命令来初始化并更新子项目：\n\n```sh\ngit submodule init\ngit submodule update\n```\n\n或者，你可以使用一条命令同时初始化和更新所有子项目：\n\n```sh\ngit submodule update --init --recursive\n```\n\n## 更新子项目\n\n当子项目有更新时，你可以使用以下命令来更新主项目中子项目的引用：\n\n```sh\ngit submodule update --remote <子项目名>\n```\n\n或者，如果你想更新所有子项目，可以使用：\n\n```sh\ngit submodule foreach git pull\n```\n\n## 删除子项目\n\n如果你想从主项目中删除子项目，可以使用以下步骤：\n\n1. 删除`.gitmodules`文件中对应的子项目条目。\n2. 删除`.git/config`文件中对应的子项目条目。\n3. 删除子项目目录。\n4. 提交更改并推送到远程仓库。\n\n## 注意事项\n\n- 子项目可以是任何Git仓库，包括公共的和私有的。\n- 子项目可以嵌套，即子项目本身可以包含其他子项目。\n- 使用子项目时需要小心，因为它们可能会增加项目的复杂性。\n子项目是一种强大的工具，但它们也有一定的学习曲线。确保你完全理解它们的操作方式，特别是当你需要在不同开发者之间共享项目时。\n","source":"_posts/materiel/ai/git/git管理子项目的方式.md","raw":"---\nlayout: default\ntitle: git管理子项目的方式\nnav_order: 13\ndescription: git管理子项目的方式\nparent: Git\nhas_children: false\npermalink: \"/materiel/ai/git/git管理子项目的方式/\"\ngrand_parent: Ai\n---\n\n# git管理子项目的方式\n\n在Git中管理子项目（submodules）是一种将一个Git仓库作为另一个Git仓库的子目录的方式。这种方式通常用于当你的主项目需要依赖于另一个项目，而这个被依赖的项目又有自己的独立版本控制需求时。\n以下是如何在Git中添加、使用和更新子项目的基本步骤：\n\n## 添加子项目\n\n1. 在主项目目录中，使用以下命令添加子项目：\n\n   ```sh\n   git submodule add <子项目URL> <子项目在主项目中的路径>\n   # 这种方式需要在指定目录下执行, 会自动生成<子项目在主项目中的路径>(生成规则: <指定路径>/<子项目URL最后一级路径(去掉了.git后缀)>)\n   git submodule add <子项目URL>\n   ```\n\n   例如：\n\n   ```sh\n   git submodule add https://github.com/username/subproject.git path/to/subproject\n   ```\n\n2. 提交更改到主项目的仓库：\n\n   ```sh\n   git commit -m \"Add submodule\"\n   ```\n\n3. 推送更改到远程仓库：\n\n   ```sh\n   git push origin <分支名>\n   ```\n\n## 克隆含有子项目的主项目\n\n当克隆一个含有子项目的主项目时，默认情况下子项目目录是空的。你需要运行以下命令来初始化并更新子项目：\n\n```sh\ngit submodule init\ngit submodule update\n```\n\n或者，你可以使用一条命令同时初始化和更新所有子项目：\n\n```sh\ngit submodule update --init --recursive\n```\n\n## 更新子项目\n\n当子项目有更新时，你可以使用以下命令来更新主项目中子项目的引用：\n\n```sh\ngit submodule update --remote <子项目名>\n```\n\n或者，如果你想更新所有子项目，可以使用：\n\n```sh\ngit submodule foreach git pull\n```\n\n## 删除子项目\n\n如果你想从主项目中删除子项目，可以使用以下步骤：\n\n1. 删除`.gitmodules`文件中对应的子项目条目。\n2. 删除`.git/config`文件中对应的子项目条目。\n3. 删除子项目目录。\n4. 提交更改并推送到远程仓库。\n\n## 注意事项\n\n- 子项目可以是任何Git仓库，包括公共的和私有的。\n- 子项目可以嵌套，即子项目本身可以包含其他子项目。\n- 使用子项目时需要小心，因为它们可能会增加项目的复杂性。\n子项目是一种强大的工具，但它们也有一定的学习曲线。确保你完全理解它们的操作方式，特别是当你需要在不同开发者之间共享项目时。\n","slug":"materiel/ai/git/git管理子项目的方式","published":1,"date":"2025-02-23T07:43:31.735Z","updated":"2025-02-23T07:43:31.735Z","__permalink":"/materiel/ai/git/git管理子项目的方式/","comments":1,"photos":[],"_id":"cm7k5rwao004qmswscvg24y3a","content":"<h1 id=\"git管理子项目的方式\"><a href=\"#git管理子项目的方式\" class=\"headerlink\" title=\"git管理子项目的方式\"></a>git管理子项目的方式</h1><p>在Git中管理子项目（submodules）是一种将一个Git仓库作为另一个Git仓库的子目录的方式。这种方式通常用于当你的主项目需要依赖于另一个项目，而这个被依赖的项目又有自己的独立版本控制需求时。<br>以下是如何在Git中添加、使用和更新子项目的基本步骤：</p>\n<h2 id=\"添加子项目\"><a href=\"#添加子项目\" class=\"headerlink\" title=\"添加子项目\"></a>添加子项目</h2><ol>\n<li><p>在主项目目录中，使用以下命令添加子项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;子项目URL&gt; &lt;子项目在主项目中的路径&gt;</span><br><span class=\"line\"><span class=\"comment\"># 这种方式需要在指定目录下执行, 会自动生成&lt;子项目在主项目中的路径&gt;(生成规则: &lt;指定路径&gt;/&lt;子项目URL最后一级路径(去掉了.git后缀)&gt;)</span></span><br><span class=\"line\">git submodule add &lt;子项目URL&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/username/subproject.git path/to/subproject</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交更改到主项目的仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;Add submodule&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送更改到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"克隆含有子项目的主项目\"><a href=\"#克隆含有子项目的主项目\" class=\"headerlink\" title=\"克隆含有子项目的主项目\"></a>克隆含有子项目的主项目</h2><p>当克隆一个含有子项目的主项目时，默认情况下子项目目录是空的。你需要运行以下命令来初始化并更新子项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n\n<p>或者，你可以使用一条命令同时初始化和更新所有子项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新子项目\"><a href=\"#更新子项目\" class=\"headerlink\" title=\"更新子项目\"></a>更新子项目</h2><p>当子项目有更新时，你可以使用以下命令来更新主项目中子项目的引用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --remote &lt;子项目名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或者，如果你想更新所有子项目，可以使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule foreach git pull</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除子项目\"><a href=\"#删除子项目\" class=\"headerlink\" title=\"删除子项目\"></a>删除子项目</h2><p>如果你想从主项目中删除子项目，可以使用以下步骤：</p>\n<ol>\n<li>删除<code>.gitmodules</code>文件中对应的子项目条目。</li>\n<li>删除<code>.git/config</code>文件中对应的子项目条目。</li>\n<li>删除子项目目录。</li>\n<li>提交更改并推送到远程仓库。</li>\n</ol>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>子项目可以是任何Git仓库，包括公共的和私有的。</li>\n<li>子项目可以嵌套，即子项目本身可以包含其他子项目。</li>\n<li>使用子项目时需要小心，因为它们可能会增加项目的复杂性。<br>子项目是一种强大的工具，但它们也有一定的学习曲线。确保你完全理解它们的操作方式，特别是当你需要在不同开发者之间共享项目时。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"git管理子项目的方式\"><a href=\"#git管理子项目的方式\" class=\"headerlink\" title=\"git管理子项目的方式\"></a>git管理子项目的方式</h1><p>在Git中管理子项目（submodules）是一种将一个Git仓库作为另一个Git仓库的子目录的方式。这种方式通常用于当你的主项目需要依赖于另一个项目，而这个被依赖的项目又有自己的独立版本控制需求时。<br>以下是如何在Git中添加、使用和更新子项目的基本步骤：</p>\n<h2 id=\"添加子项目\"><a href=\"#添加子项目\" class=\"headerlink\" title=\"添加子项目\"></a>添加子项目</h2><ol>\n<li><p>在主项目目录中，使用以下命令添加子项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;子项目URL&gt; &lt;子项目在主项目中的路径&gt;</span><br><span class=\"line\"><span class=\"comment\"># 这种方式需要在指定目录下执行, 会自动生成&lt;子项目在主项目中的路径&gt;(生成规则: &lt;指定路径&gt;/&lt;子项目URL最后一级路径(去掉了.git后缀)&gt;)</span></span><br><span class=\"line\">git submodule add &lt;子项目URL&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/username/subproject.git path/to/subproject</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交更改到主项目的仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;Add submodule&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送更改到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"克隆含有子项目的主项目\"><a href=\"#克隆含有子项目的主项目\" class=\"headerlink\" title=\"克隆含有子项目的主项目\"></a>克隆含有子项目的主项目</h2><p>当克隆一个含有子项目的主项目时，默认情况下子项目目录是空的。你需要运行以下命令来初始化并更新子项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n\n<p>或者，你可以使用一条命令同时初始化和更新所有子项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新子项目\"><a href=\"#更新子项目\" class=\"headerlink\" title=\"更新子项目\"></a>更新子项目</h2><p>当子项目有更新时，你可以使用以下命令来更新主项目中子项目的引用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --remote &lt;子项目名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或者，如果你想更新所有子项目，可以使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule foreach git pull</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除子项目\"><a href=\"#删除子项目\" class=\"headerlink\" title=\"删除子项目\"></a>删除子项目</h2><p>如果你想从主项目中删除子项目，可以使用以下步骤：</p>\n<ol>\n<li>删除<code>.gitmodules</code>文件中对应的子项目条目。</li>\n<li>删除<code>.git/config</code>文件中对应的子项目条目。</li>\n<li>删除子项目目录。</li>\n<li>提交更改并推送到远程仓库。</li>\n</ol>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>子项目可以是任何Git仓库，包括公共的和私有的。</li>\n<li>子项目可以嵌套，即子项目本身可以包含其他子项目。</li>\n<li>使用子项目时需要小心，因为它们可能会增加项目的复杂性。<br>子项目是一种强大的工具，但它们也有一定的学习曲线。确保你完全理解它们的操作方式，特别是当你需要在不同开发者之间共享项目时。</li>\n</ul>\n"},{"layout":"default","title":"Git","nav_order":3,"has_children":true,"parent":"Git","_content":"\n# Git\n","source":"_posts/materiel/ai/git/index.md","raw":"---\nlayout: default\ntitle: Git\nnav_order: 3\nhas_children: true\nparent: Git\npermalink: \"/materiel/ai/git/\"\n---\n\n# Git\n","slug":"materiel/ai/git/index","published":1,"date":"2025-02-23T07:43:31.735Z","updated":"2025-02-23T07:43:31.735Z","__permalink":"/materiel/ai/git/","comments":1,"photos":[],"_id":"cm7k5rwao004rmsws5d9u2901","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1>","excerpt":"","more":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1>"},{"layout":"default","title":"java中hprof文件如何导出","nav_order":13,"description":"java hprof文件如何导出","parent":"Java","has_children":false,"grand_parent":"Ai","_content":"\n# java hprof文件如何导出\n\n在 Java 中，要导出 `hprof` 文件可以通过以下几种方式：\n\n**使用 `jmap` 命令**：\n\n```bash\njmap -dump:format=b,file=your_dump_file.hprof <pid>\n```\n\n其中 `<pid>` 是要分析的 Java 进程的 ID。\n\n例如，如果进程 ID 是 12345 ，则命令为：\n\n```bash\njmap -dump:format=b,file=your_dump_file.hprof 12345\n```\n\n**在 Java 应用启动时添加参数**：\n可以在启动 Java 应用时添加 `-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/path/to/dump.hprof` 这样的参数。当发生内存溢出错误时，会自动生成 `hprof` 文件到指定的路径。\n\n**通过 JConsole 工具**：\n连接到正在运行的 Java 进程，在“内存”选项卡中，有导出堆转储的功能。\n\n需要注意的是，导出的 `hprof` 文件可能会很大，并且分析 `hprof` 文件需要使用专门的工具，如 `Eclipse Memory Analyzer` 等。\n","source":"_posts/materiel/ai/java/java中hprof文件如何导出.md","raw":"---\nlayout: default\ntitle: java中hprof文件如何导出\nnav_order: 13\ndescription: java hprof文件如何导出\nparent: Java\nhas_children: false\npermalink: \"/materiel/ai/java/java中hprof文件如何导出/\"\ngrand_parent: Ai\n---\n\n# java hprof文件如何导出\n\n在 Java 中，要导出 `hprof` 文件可以通过以下几种方式：\n\n**使用 `jmap` 命令**：\n\n```bash\njmap -dump:format=b,file=your_dump_file.hprof <pid>\n```\n\n其中 `<pid>` 是要分析的 Java 进程的 ID。\n\n例如，如果进程 ID 是 12345 ，则命令为：\n\n```bash\njmap -dump:format=b,file=your_dump_file.hprof 12345\n```\n\n**在 Java 应用启动时添加参数**：\n可以在启动 Java 应用时添加 `-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/path/to/dump.hprof` 这样的参数。当发生内存溢出错误时，会自动生成 `hprof` 文件到指定的路径。\n\n**通过 JConsole 工具**：\n连接到正在运行的 Java 进程，在“内存”选项卡中，有导出堆转储的功能。\n\n需要注意的是，导出的 `hprof` 文件可能会很大，并且分析 `hprof` 文件需要使用专门的工具，如 `Eclipse Memory Analyzer` 等。\n","slug":"materiel/ai/java/java中hprof文件如何导出","published":1,"date":"2025-02-23T07:43:31.727Z","updated":"2025-02-23T07:43:31.727Z","__permalink":"/materiel/ai/java/java中hprof文件如何导出/","comments":1,"photos":[],"_id":"cm7k5rwap004smsws3bhe6ae5","content":"<h1 id=\"java-hprof文件如何导出\"><a href=\"#java-hprof文件如何导出\" class=\"headerlink\" title=\"java hprof文件如何导出\"></a>java hprof文件如何导出</h1><p>在 Java 中，要导出 <code>hprof</code> 文件可以通过以下几种方式：</p>\n<p><strong>使用 <code>jmap</code> 命令</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:format=b,file=your_dump_file.hprof &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>&lt;pid&gt;</code> 是要分析的 Java 进程的 ID。</p>\n<p>例如，如果进程 ID 是 12345 ，则命令为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:format=b,file=your_dump_file.hprof 12345</span><br></pre></td></tr></table></figure>\n\n<p><strong>在 Java 应用启动时添加参数</strong>：<br>可以在启动 Java 应用时添加 <code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/path/to/dump.hprof</code> 这样的参数。当发生内存溢出错误时，会自动生成 <code>hprof</code> 文件到指定的路径。</p>\n<p><strong>通过 JConsole 工具</strong>：<br>连接到正在运行的 Java 进程，在“内存”选项卡中，有导出堆转储的功能。</p>\n<p>需要注意的是，导出的 <code>hprof</code> 文件可能会很大，并且分析 <code>hprof</code> 文件需要使用专门的工具，如 <code>Eclipse Memory Analyzer</code> 等。</p>\n","excerpt":"","more":"<h1 id=\"java-hprof文件如何导出\"><a href=\"#java-hprof文件如何导出\" class=\"headerlink\" title=\"java hprof文件如何导出\"></a>java hprof文件如何导出</h1><p>在 Java 中，要导出 <code>hprof</code> 文件可以通过以下几种方式：</p>\n<p><strong>使用 <code>jmap</code> 命令</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:format=b,file=your_dump_file.hprof &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>&lt;pid&gt;</code> 是要分析的 Java 进程的 ID。</p>\n<p>例如，如果进程 ID 是 12345 ，则命令为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:format=b,file=your_dump_file.hprof 12345</span><br></pre></td></tr></table></figure>\n\n<p><strong>在 Java 应用启动时添加参数</strong>：<br>可以在启动 Java 应用时添加 <code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/path/to/dump.hprof</code> 这样的参数。当发生内存溢出错误时，会自动生成 <code>hprof</code> 文件到指定的路径。</p>\n<p><strong>通过 JConsole 工具</strong>：<br>连接到正在运行的 Java 进程，在“内存”选项卡中，有导出堆转储的功能。</p>\n<p>需要注意的是，导出的 <code>hprof</code> 文件可能会很大，并且分析 <code>hprof</code> 文件需要使用专门的工具，如 <code>Eclipse Memory Analyzer</code> 等。</p>\n"},{"layout":"default","title":"Linux查看某个进程占用的内存大小","nav_order":13,"description":"Linux查看某个进程占用的内存大小","parent":"Linux","has_children":false,"grand_parent":"Ai","_content":"\n# Linux查看某个进程占用的内存大小\n\n在 Linux 系统中，有多种方法可以查看某个进程占用的内存大小，以下是一些常见的方法：\n\n**方法一：使用 `ps` 命令**\n\n`ps` 命令可以显示进程的状态信息，包括内存使用情况。\n\n例如：\n\n```bash\nps -aux | grep <进程名>\n```\n\n通过这个命令，可以获取到指定进程的相关信息，其中 `RSS` 列显示的就是进程占用的物理内存大小（单位为 KB）。\n\n**方法二：使用 `top` 命令**\n\n`top` 命令是一个动态的系统性能监控工具。\n\n在 `top` 界面中，按 `P` 键可以按照 CPU 使用率对进程排序，按 `M` 键可以按照内存使用率对进程排序。找到您关注的进程，就能看到其内存使用情况。\n\n**方法三：使用 `pmap` 命令**\n\n`pmap` 命令可以报告进程的内存映射关系及占用情况。\n\n例如：\n\n```bash\npmap <进程 ID>\n```\n\n它会显示进程的详细内存分布情况。\n\n假设我们要查看一个名为 `nginx` 的进程占用的内存大小，就可以使用上述命令来获取相关信息。比如使用 `ps -aux | grep nginx` ，输出可能类似于：\n\n```bash\nroot      1234  0.0  0.1 123456  7890?        Ss   14:00   0:00 nginx: master process /usr/sbin/nginx\n```\n\n其中 `123456` 就是该进程占用的物理内存大小（单位为 KB）。\n","source":"_posts/materiel/ai/linux/Linux查看某个进程占用的内存大小.md","raw":"---\nlayout: default\ntitle: Linux查看某个进程占用的内存大小\nnav_order: 13\ndescription: Linux查看某个进程占用的内存大小\nparent: Linux\nhas_children: false\npermalink: \"/materiel/ai/linux/linux查看某个进程占用的内存大小/\"\ngrand_parent: Ai\n---\n\n# Linux查看某个进程占用的内存大小\n\n在 Linux 系统中，有多种方法可以查看某个进程占用的内存大小，以下是一些常见的方法：\n\n**方法一：使用 `ps` 命令**\n\n`ps` 命令可以显示进程的状态信息，包括内存使用情况。\n\n例如：\n\n```bash\nps -aux | grep <进程名>\n```\n\n通过这个命令，可以获取到指定进程的相关信息，其中 `RSS` 列显示的就是进程占用的物理内存大小（单位为 KB）。\n\n**方法二：使用 `top` 命令**\n\n`top` 命令是一个动态的系统性能监控工具。\n\n在 `top` 界面中，按 `P` 键可以按照 CPU 使用率对进程排序，按 `M` 键可以按照内存使用率对进程排序。找到您关注的进程，就能看到其内存使用情况。\n\n**方法三：使用 `pmap` 命令**\n\n`pmap` 命令可以报告进程的内存映射关系及占用情况。\n\n例如：\n\n```bash\npmap <进程 ID>\n```\n\n它会显示进程的详细内存分布情况。\n\n假设我们要查看一个名为 `nginx` 的进程占用的内存大小，就可以使用上述命令来获取相关信息。比如使用 `ps -aux | grep nginx` ，输出可能类似于：\n\n```bash\nroot      1234  0.0  0.1 123456  7890?        Ss   14:00   0:00 nginx: master process /usr/sbin/nginx\n```\n\n其中 `123456` 就是该进程占用的物理内存大小（单位为 KB）。\n","slug":"materiel/ai/linux/Linux查看某个进程占用的内存大小","published":1,"date":"2025-02-23T07:43:31.729Z","updated":"2025-02-23T07:43:31.730Z","__permalink":"/materiel/ai/linux/linux查看某个进程占用的内存大小/","comments":1,"photos":[],"_id":"cm7k5rwap004tmsws61ry1ylg","content":"<h1 id=\"Linux查看某个进程占用的内存大小\"><a href=\"#Linux查看某个进程占用的内存大小\" class=\"headerlink\" title=\"Linux查看某个进程占用的内存大小\"></a>Linux查看某个进程占用的内存大小</h1><p>在 Linux 系统中，有多种方法可以查看某个进程占用的内存大小，以下是一些常见的方法：</p>\n<p><strong>方法一：使用 <code>ps</code> 命令</strong></p>\n<p><code>ps</code> 命令可以显示进程的状态信息，包括内存使用情况。</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux | grep &lt;进程名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>通过这个命令，可以获取到指定进程的相关信息，其中 <code>RSS</code> 列显示的就是进程占用的物理内存大小（单位为 KB）。</p>\n<p><strong>方法二：使用 <code>top</code> 命令</strong></p>\n<p><code>top</code> 命令是一个动态的系统性能监控工具。</p>\n<p>在 <code>top</code> 界面中，按 <code>P</code> 键可以按照 CPU 使用率对进程排序，按 <code>M</code> 键可以按照内存使用率对进程排序。找到您关注的进程，就能看到其内存使用情况。</p>\n<p><strong>方法三：使用 <code>pmap</code> 命令</strong></p>\n<p><code>pmap</code> 命令可以报告进程的内存映射关系及占用情况。</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pmap &lt;进程 ID&gt;</span><br></pre></td></tr></table></figure>\n\n<p>它会显示进程的详细内存分布情况。</p>\n<p>假设我们要查看一个名为 <code>nginx</code> 的进程占用的内存大小，就可以使用上述命令来获取相关信息。比如使用 <code>ps -aux | grep nginx</code> ，输出可能类似于：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      1234  0.0  0.1 123456  7890?        Ss   14:00   0:00 nginx: master process /usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>123456</code> 就是该进程占用的物理内存大小（单位为 KB）。</p>\n","excerpt":"","more":"<h1 id=\"Linux查看某个进程占用的内存大小\"><a href=\"#Linux查看某个进程占用的内存大小\" class=\"headerlink\" title=\"Linux查看某个进程占用的内存大小\"></a>Linux查看某个进程占用的内存大小</h1><p>在 Linux 系统中，有多种方法可以查看某个进程占用的内存大小，以下是一些常见的方法：</p>\n<p><strong>方法一：使用 <code>ps</code> 命令</strong></p>\n<p><code>ps</code> 命令可以显示进程的状态信息，包括内存使用情况。</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux | grep &lt;进程名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>通过这个命令，可以获取到指定进程的相关信息，其中 <code>RSS</code> 列显示的就是进程占用的物理内存大小（单位为 KB）。</p>\n<p><strong>方法二：使用 <code>top</code> 命令</strong></p>\n<p><code>top</code> 命令是一个动态的系统性能监控工具。</p>\n<p>在 <code>top</code> 界面中，按 <code>P</code> 键可以按照 CPU 使用率对进程排序，按 <code>M</code> 键可以按照内存使用率对进程排序。找到您关注的进程，就能看到其内存使用情况。</p>\n<p><strong>方法三：使用 <code>pmap</code> 命令</strong></p>\n<p><code>pmap</code> 命令可以报告进程的内存映射关系及占用情况。</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pmap &lt;进程 ID&gt;</span><br></pre></td></tr></table></figure>\n\n<p>它会显示进程的详细内存分布情况。</p>\n<p>假设我们要查看一个名为 <code>nginx</code> 的进程占用的内存大小，就可以使用上述命令来获取相关信息。比如使用 <code>ps -aux | grep nginx</code> ，输出可能类似于：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      1234  0.0  0.1 123456  7890?        Ss   14:00   0:00 nginx: master process /usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>123456</code> 就是该进程占用的物理内存大小（单位为 KB）。</p>\n"},{"layout":"default","title":"Neural-network","nav_order":3,"has_children":true,"parent":"Neural-network","_content":"\n# Neural-network\n","source":"_posts/materiel/ai/neural-network/index.md","raw":"---\nlayout: default\ntitle: Neural-network\nnav_order: 3\nhas_children: true\nparent: Neural-network\npermalink: \"/materiel/ai/neural-network/\"\n---\n\n# Neural-network\n","slug":"materiel/ai/neural-network/index","published":1,"date":"2025-02-23T07:43:31.722Z","updated":"2025-02-23T07:43:31.722Z","__permalink":"/materiel/ai/neural-network/","comments":1,"photos":[],"_id":"cm7k5rwap004umsws1fcqdq0r","content":"<h1 id=\"Neural-network\"><a href=\"#Neural-network\" class=\"headerlink\" title=\"Neural-network\"></a>Neural-network</h1>","excerpt":"","more":"<h1 id=\"Neural-network\"><a href=\"#Neural-network\" class=\"headerlink\" title=\"Neural-network\"></a>Neural-network</h1>"},{"layout":"default","title":"Java","nav_order":3,"has_children":true,"parent":"Java","_content":"\n# Java\n","source":"_posts/materiel/ai/java/index.md","raw":"---\nlayout: default\ntitle: Java\nnav_order: 3\nhas_children: true\nparent: Java\npermalink: \"/materiel/ai/java/\"\n---\n\n# Java\n","slug":"materiel/ai/java/index","published":1,"date":"2025-02-23T07:43:31.727Z","updated":"2025-02-23T07:43:31.727Z","__permalink":"/materiel/ai/java/","comments":1,"photos":[],"_id":"cm7k5rwap004vmswsdwleesrx","content":"<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1>","excerpt":"","more":"<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1>"},{"layout":"default","title":"Linux","nav_order":3,"has_children":true,"parent":"Linux","_content":"\n# Linux\n","source":"_posts/materiel/ai/linux/index.md","raw":"---\nlayout: default\ntitle: Linux\nnav_order: 3\nhas_children: true\nparent: Linux\npermalink: \"/materiel/ai/linux/\"\n---\n\n# Linux\n","slug":"materiel/ai/linux/index","published":1,"date":"2025-02-23T07:43:31.730Z","updated":"2025-02-23T07:43:31.730Z","__permalink":"/materiel/ai/linux/","comments":1,"photos":[],"_id":"cm7k5rwap004wmsws9wgtdvhb","content":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1>","excerpt":"","more":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1>"},{"layout":"default","title":"神经元和参数的关系","nav_order":13,"description":"神经元和参数的关系","parent":"Neural-network","has_children":false,"grand_parent":"Ai","_content":"\n# 神经元和参数的关系\n\n## AI问答\n\n> 问: 千亿参数的模型, 这里的参数指的是什么? 是神经网络中的一个神经元吗?\n\n答:\n\n千亿参数的模型中的参数不是指神经网络中的一个神经元，以下是具体介绍：\n\n### 模型参数的含义\n\n在机器学习和人工智能领域，模型的参数是指模型在训练过程中通过数据学习到的、用于调整模型行为以优化预测能力的变量. 以一个简单的线性回归模型 \\(y = wx + b\\) 为例，\\(w\\)（权重）和 \\(b\\)（偏差）就是模型的参数。在神经网络中，参数的数量会更多、更复杂，包括连接神经元的权重、神经元的偏置等，这些参数共同决定了神经网络如何对输入数据进行处理和转换，以生成相应的输出.\n\n### 与神经元的区别\n\n- **概念不同**：神经元是神经网络的基本组成单元，它接收输入信号，对其进行处理，并产生输出信号。而参数是用于描述神经元之间连接强度、偏置等特性的数值。例如，在一个简单的前馈神经网络中，每个神经元都有若干个输入连接，每个连接都对应一个权重参数，这些权重参数决定了输入信号对神经元激活程度的影响程度.\n- **数量关系不同**：一个神经元可能会有多个与之相关的参数，但一个参数并不等同于一个神经元 。以一个具有 \\(n\\) 个输入连接的神经元为例，它就有 \\(n\\) 个权重参数和 \\(1\\) 个偏置参数，总共有 \\(n + 1\\) 个参数来描述这个神经元的特性。而在一个包含多个神经元的神经网络中，参数的数量会随着神经元数量和连接方式的增加而急剧增加 。 比如，一个有 \\(1000\\) 个神经元的全连接神经网络，如果每个神经元有 \\(1000\\) 个输入连接，那么仅权重参数就有 \\(1000\\times1000 = 100\\) 万个，再加上每个神经元的偏置参数，总参数数量会更多.\n- **作用不同**：神经元主要负责对信息的处理和传递，它们通过激活函数对输入信号进行非线性变换，从而实现对复杂数据的建模。而参数则是通过训练过程不断调整，以找到一组最优的值，使得模型能够更好地拟合训练数据，并具有良好的泛化能力。换而言之，神经元是模型的结构组成部分，而参数是用于优化模型性能的可调整元素.\n","source":"_posts/materiel/ai/neural-network/神经元和参数的关系.md","raw":"---\nlayout: default\ntitle: 神经元和参数的关系\nnav_order: 13\ndescription: 神经元和参数的关系\nparent: Neural-network\nhas_children: false\npermalink: \"/materiel/ai/neural-network/神经元和参数的关系/\"\ngrand_parent: Ai\n---\n\n# 神经元和参数的关系\n\n## AI问答\n\n> 问: 千亿参数的模型, 这里的参数指的是什么? 是神经网络中的一个神经元吗?\n\n答:\n\n千亿参数的模型中的参数不是指神经网络中的一个神经元，以下是具体介绍：\n\n### 模型参数的含义\n\n在机器学习和人工智能领域，模型的参数是指模型在训练过程中通过数据学习到的、用于调整模型行为以优化预测能力的变量. 以一个简单的线性回归模型 \\(y = wx + b\\) 为例，\\(w\\)（权重）和 \\(b\\)（偏差）就是模型的参数。在神经网络中，参数的数量会更多、更复杂，包括连接神经元的权重、神经元的偏置等，这些参数共同决定了神经网络如何对输入数据进行处理和转换，以生成相应的输出.\n\n### 与神经元的区别\n\n- **概念不同**：神经元是神经网络的基本组成单元，它接收输入信号，对其进行处理，并产生输出信号。而参数是用于描述神经元之间连接强度、偏置等特性的数值。例如，在一个简单的前馈神经网络中，每个神经元都有若干个输入连接，每个连接都对应一个权重参数，这些权重参数决定了输入信号对神经元激活程度的影响程度.\n- **数量关系不同**：一个神经元可能会有多个与之相关的参数，但一个参数并不等同于一个神经元 。以一个具有 \\(n\\) 个输入连接的神经元为例，它就有 \\(n\\) 个权重参数和 \\(1\\) 个偏置参数，总共有 \\(n + 1\\) 个参数来描述这个神经元的特性。而在一个包含多个神经元的神经网络中，参数的数量会随着神经元数量和连接方式的增加而急剧增加 。 比如，一个有 \\(1000\\) 个神经元的全连接神经网络，如果每个神经元有 \\(1000\\) 个输入连接，那么仅权重参数就有 \\(1000\\times1000 = 100\\) 万个，再加上每个神经元的偏置参数，总参数数量会更多.\n- **作用不同**：神经元主要负责对信息的处理和传递，它们通过激活函数对输入信号进行非线性变换，从而实现对复杂数据的建模。而参数则是通过训练过程不断调整，以找到一组最优的值，使得模型能够更好地拟合训练数据，并具有良好的泛化能力。换而言之，神经元是模型的结构组成部分，而参数是用于优化模型性能的可调整元素.\n","slug":"materiel/ai/neural-network/神经元和参数的关系","published":1,"date":"2025-02-23T07:43:31.722Z","updated":"2025-02-23T07:43:31.722Z","__permalink":"/materiel/ai/neural-network/神经元和参数的关系/","comments":1,"photos":[],"_id":"cm7k5rwap004xmsws74jrhqxu","content":"<h1 id=\"神经元和参数的关系\"><a href=\"#神经元和参数的关系\" class=\"headerlink\" title=\"神经元和参数的关系\"></a>神经元和参数的关系</h1><h2 id=\"AI问答\"><a href=\"#AI问答\" class=\"headerlink\" title=\"AI问答\"></a>AI问答</h2><blockquote>\n<p>问: 千亿参数的模型, 这里的参数指的是什么? 是神经网络中的一个神经元吗?</p>\n</blockquote>\n<p>答:</p>\n<p>千亿参数的模型中的参数不是指神经网络中的一个神经元，以下是具体介绍：</p>\n<h3 id=\"模型参数的含义\"><a href=\"#模型参数的含义\" class=\"headerlink\" title=\"模型参数的含义\"></a>模型参数的含义</h3><p>在机器学习和人工智能领域，模型的参数是指模型在训练过程中通过数据学习到的、用于调整模型行为以优化预测能力的变量. 以一个简单的线性回归模型 (y &#x3D; wx + b) 为例，(w)（权重）和 (b)（偏差）就是模型的参数。在神经网络中，参数的数量会更多、更复杂，包括连接神经元的权重、神经元的偏置等，这些参数共同决定了神经网络如何对输入数据进行处理和转换，以生成相应的输出.</p>\n<h3 id=\"与神经元的区别\"><a href=\"#与神经元的区别\" class=\"headerlink\" title=\"与神经元的区别\"></a>与神经元的区别</h3><ul>\n<li><strong>概念不同</strong>：神经元是神经网络的基本组成单元，它接收输入信号，对其进行处理，并产生输出信号。而参数是用于描述神经元之间连接强度、偏置等特性的数值。例如，在一个简单的前馈神经网络中，每个神经元都有若干个输入连接，每个连接都对应一个权重参数，这些权重参数决定了输入信号对神经元激活程度的影响程度.</li>\n<li><strong>数量关系不同</strong>：一个神经元可能会有多个与之相关的参数，但一个参数并不等同于一个神经元 。以一个具有 (n) 个输入连接的神经元为例，它就有 (n) 个权重参数和 (1) 个偏置参数，总共有 (n + 1) 个参数来描述这个神经元的特性。而在一个包含多个神经元的神经网络中，参数的数量会随着神经元数量和连接方式的增加而急剧增加 。 比如，一个有 (1000) 个神经元的全连接神经网络，如果每个神经元有 (1000) 个输入连接，那么仅权重参数就有 (1000\\times1000 &#x3D; 100) 万个，再加上每个神经元的偏置参数，总参数数量会更多.</li>\n<li><strong>作用不同</strong>：神经元主要负责对信息的处理和传递，它们通过激活函数对输入信号进行非线性变换，从而实现对复杂数据的建模。而参数则是通过训练过程不断调整，以找到一组最优的值，使得模型能够更好地拟合训练数据，并具有良好的泛化能力。换而言之，神经元是模型的结构组成部分，而参数是用于优化模型性能的可调整元素.</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"神经元和参数的关系\"><a href=\"#神经元和参数的关系\" class=\"headerlink\" title=\"神经元和参数的关系\"></a>神经元和参数的关系</h1><h2 id=\"AI问答\"><a href=\"#AI问答\" class=\"headerlink\" title=\"AI问答\"></a>AI问答</h2><blockquote>\n<p>问: 千亿参数的模型, 这里的参数指的是什么? 是神经网络中的一个神经元吗?</p>\n</blockquote>\n<p>答:</p>\n<p>千亿参数的模型中的参数不是指神经网络中的一个神经元，以下是具体介绍：</p>\n<h3 id=\"模型参数的含义\"><a href=\"#模型参数的含义\" class=\"headerlink\" title=\"模型参数的含义\"></a>模型参数的含义</h3><p>在机器学习和人工智能领域，模型的参数是指模型在训练过程中通过数据学习到的、用于调整模型行为以优化预测能力的变量. 以一个简单的线性回归模型 (y &#x3D; wx + b) 为例，(w)（权重）和 (b)（偏差）就是模型的参数。在神经网络中，参数的数量会更多、更复杂，包括连接神经元的权重、神经元的偏置等，这些参数共同决定了神经网络如何对输入数据进行处理和转换，以生成相应的输出.</p>\n<h3 id=\"与神经元的区别\"><a href=\"#与神经元的区别\" class=\"headerlink\" title=\"与神经元的区别\"></a>与神经元的区别</h3><ul>\n<li><strong>概念不同</strong>：神经元是神经网络的基本组成单元，它接收输入信号，对其进行处理，并产生输出信号。而参数是用于描述神经元之间连接强度、偏置等特性的数值。例如，在一个简单的前馈神经网络中，每个神经元都有若干个输入连接，每个连接都对应一个权重参数，这些权重参数决定了输入信号对神经元激活程度的影响程度.</li>\n<li><strong>数量关系不同</strong>：一个神经元可能会有多个与之相关的参数，但一个参数并不等同于一个神经元 。以一个具有 (n) 个输入连接的神经元为例，它就有 (n) 个权重参数和 (1) 个偏置参数，总共有 (n + 1) 个参数来描述这个神经元的特性。而在一个包含多个神经元的神经网络中，参数的数量会随着神经元数量和连接方式的增加而急剧增加 。 比如，一个有 (1000) 个神经元的全连接神经网络，如果每个神经元有 (1000) 个输入连接，那么仅权重参数就有 (1000\\times1000 &#x3D; 100) 万个，再加上每个神经元的偏置参数，总参数数量会更多.</li>\n<li><strong>作用不同</strong>：神经元主要负责对信息的处理和传递，它们通过激活函数对输入信号进行非线性变换，从而实现对复杂数据的建模。而参数则是通过训练过程不断调整，以找到一组最优的值，使得模型能够更好地拟合训练数据，并具有良好的泛化能力。换而言之，神经元是模型的结构组成部分，而参数是用于优化模型性能的可调整元素.</li>\n</ul>\n"},{"layout":"default","title":"Prompts","nav_order":3,"has_children":true,"parent":"Prompts","_content":"\n# Prompts\n","source":"_posts/materiel/ai/prompts/index.md","raw":"---\nlayout: default\ntitle: Prompts\nnav_order: 3\nhas_children: true\nparent: Prompts\npermalink: \"/materiel/ai/prompts/\"\n---\n\n# Prompts\n","slug":"materiel/ai/prompts/index","published":1,"date":"2025-02-23T07:43:31.734Z","updated":"2025-02-23T07:43:31.734Z","__permalink":"/materiel/ai/prompts/","comments":1,"photos":[],"_id":"cm7k5rwap004ymsws7k563y88","content":"<h1 id=\"Prompts\"><a href=\"#Prompts\" class=\"headerlink\" title=\"Prompts\"></a>Prompts</h1>","excerpt":"","more":"<h1 id=\"Prompts\"><a href=\"#Prompts\" class=\"headerlink\" title=\"Prompts\"></a>Prompts</h1>"},{"layout":"default","title":"Sandbox","nav_order":3,"has_children":true,"parent":"Sandbox","_content":"\n# Sandbox\n","source":"_posts/materiel/ai/sandbox/index.md","raw":"---\nlayout: default\ntitle: Sandbox\nnav_order: 3\nhas_children: true\nparent: Sandbox\npermalink: \"/materiel/ai/sandbox/\"\n---\n\n# Sandbox\n","slug":"materiel/ai/sandbox/index","published":1,"date":"2025-02-23T07:43:31.729Z","updated":"2025-02-23T07:43:31.729Z","__permalink":"/materiel/ai/sandbox/","comments":1,"photos":[],"_id":"cm7k5rwap004zmsws9v1i64ki","content":"<h1 id=\"Sandbox\"><a href=\"#Sandbox\" class=\"headerlink\" title=\"Sandbox\"></a>Sandbox</h1>","excerpt":"","more":"<h1 id=\"Sandbox\"><a href=\"#Sandbox\" class=\"headerlink\" title=\"Sandbox\"></a>Sandbox</h1>"},{"title":"SSH -w 参数使用指南：配置文件与参数详解","date":"2024-02-23T16:00:00.000Z","_content":"\n# ssh -w要怎么使用ssh config配置文件配置, 以及它有哪些参数\n\n以下是关于如何在 SSH 配置文件中使用 `-w` 参数（隧道设备转发）的详细说明，包括参数解释和配置示例：\n\n---\n\n### **1. `ssh -w` 参数的作用与语法**\n- **功能**：创建 TUN/TAP 虚拟网络接口，实现网络层（L3）或数据链路层（L2）的隧道。\n- **语法**：\n  ```bash\n  ssh -w <local_tun>:<remote_tun> user@host\n  ```\n  - `<local_tun>`：本地 TUN 设备编号（如 `0` 表示 `tun0`）。\n  - `<remote_tun>`：远程 TUN 设备编号（如 `0` 表示 `tun0`）。\n  - 特殊值 `any`：允许系统自动分配设备号（如 `-w 5:any`）。\n\n---\n\n### **2. SSH 配置文件中的 `Tunnel` 指令**\n在 `~/.ssh/config` 中，使用 `Tunnel` 参数配置隧道设备：\n```bash\nHost my-tunnel-host\n  HostName remote-server.com\n  User root\n  # 隧道设备配置\n  Tunnel 0:0             # 等价于命令行 -w 0:0\n  TunnelDevice 0:0       # （可选）显式指定设备号\n  # 其他必要参数\n  IdentityFile ~/.ssh/id_rsa\n  PermitLocalCommand yes\n  # 保持连接活跃\n  ServerAliveInterval 60\n  ServerAliveCountMax 3\n```\n\n#### **关键参数说明**：\n| **参数**          | **作用**                                                                 |\n|-------------------|-------------------------------------------------------------------------|\n| `Tunnel`          | 指定本地和远程的 TUN 设备号，格式为 `<local>:<remote>`（如 `0:0`）。       |\n| `TunnelDevice`    | （部分版本支持）显式绑定到具体设备号，与 `Tunnel` 类似。                   |\n| `PermitTunnel`    | 需在服务端 `sshd_config` 中设置为 `yes`，否则隧道无法建立（见下文）。      |\n| `PermitLocalCommand` | 允许在本地执行命令（如自动配置 IP 地址）。                               |\n\n---\n\n### **3. 服务端配置（必需）**\n在远程服务器的 `/etc/ssh/sshd_config` 中启用隧道支持：\n```bash\nPermitTunnel yes    # 允许 TUN/TAP 隧道\n```\n重启 SSH 服务生效：\n```bash\nsudo systemctl restart sshd\n```\n\n---\n\n### **4. 使用步骤示例**\n#### **(1) 建立 SSH 隧道**\n```bash\nssh -w 0:0 root@remote-server.com\n```\n\n#### **(2) 配置虚拟接口 IP 地址**\n- **本地**：\n  ```bash\n  sudo ip addr add 10.0.0.1/24 dev tun0\n  sudo ip link set tun0 up\n  ```\n- **远程**：\n  ```bash\n  sudo ip addr add 10.0.0.2/24 dev tun0\n  sudo ip link set tun0 up\n  ```\n\n#### **(3) 测试连通性**\n```bash\nping 10.0.0.2  # 从本地 ping 远程隧道 IP\n```\n\n---\n\n### **5. 高级用法：自动化配置**\n在 SSH 配置文件中添加 `LocalCommand`，自动完成 IP 分配：\n```bash\nHost my-tunnel-host\n  HostName remote-server.com\n  User root\n  Tunnel 0:0\n  PermitLocalCommand yes\n  LocalCommand sudo ip addr add 10.0.0.1/24 dev tun0 && sudo ip link set tun0 up\n```\n\n---\n\n### **6. 常见问题与注意事项**\n1. **权限问题**：\n   - 需要 `root` 权限创建 TUN/TAP 设备，建议以 `sudo` 运行 SSH 命令。\n   - 如果使用普通用户，需配置 `CAP_NET_ADMIN` 权限：\n     ```bash\n     sudo setcap cap_net_admin=ep /usr/bin/ssh\n     ```\n\n2. **操作系统支持**：\n   - **Linux**：原生支持 TUN/TAP。\n   - **macOS**：需安装 [TUN/TAP 驱动](https://tuntaposx.sourceforge.net/)。\n   - **Windows**：需安装 OpenVPN 的 `tap-windows` 驱动。\n\n3. **协议选择**：\n   - TUN 模式（默认）：传输 IP 数据包（L3）。\n   - TAP 模式：传输以太网帧（L2），需显式指定：\n     ```bash\n     ssh -o Tunnel=ethernet -w 0:0 user@host\n     ```\n\n---\n\n### **7. 完整配置示例**\n```bash\n# ~/.ssh/config\nHost vpn-tunnel\n  HostName vpn.example.com\n  User root\n  IdentityFile ~/.ssh/vpn_key\n  Tunnel 0:0\n  PermitLocalCommand yes\n  LocalCommand sudo ip addr add 10.0.0.1/24 dev tun0 && sudo ip link set tun0 up\n  RemoteCommand sudo ip addr add 10.0.0.2/24 dev tun0 && sudo ip link set tun0 up\n  ServerAliveInterval 30\n  RequestTTY yes    # 允许执行远程命令（RemoteCommand）\n```\n\n---\n\n### **总结**\n- **`-w` 参数**：用于创建 TUN/TAP 隧道，需在配置文件中使用 `Tunnel` 指令。\n- **核心步骤**：服务端启用 `PermitTunnel`，客户端配置隧道设备并分配 IP。\n- **适用场景**：构建 VPN、跨网络透明代理、支持 UDP 的全协议转发。\n","source":"_posts/materiel/ai/ssh/ssh -w要怎么使用ssh config配置文件配置以及它有哪些参数.md","raw":"---\ntitle: SSH -w 参数使用指南：配置文件与参数详解\ndate: 2024-02-24\ncategories:\n  - materiel\n  - ai\n  - ssh\ntags:\n  - ssh\n  - vpn\n  - tunnel\n  - configuration\n---\n\n# ssh -w要怎么使用ssh config配置文件配置, 以及它有哪些参数\n\n以下是关于如何在 SSH 配置文件中使用 `-w` 参数（隧道设备转发）的详细说明，包括参数解释和配置示例：\n\n---\n\n### **1. `ssh -w` 参数的作用与语法**\n- **功能**：创建 TUN/TAP 虚拟网络接口，实现网络层（L3）或数据链路层（L2）的隧道。\n- **语法**：\n  ```bash\n  ssh -w <local_tun>:<remote_tun> user@host\n  ```\n  - `<local_tun>`：本地 TUN 设备编号（如 `0` 表示 `tun0`）。\n  - `<remote_tun>`：远程 TUN 设备编号（如 `0` 表示 `tun0`）。\n  - 特殊值 `any`：允许系统自动分配设备号（如 `-w 5:any`）。\n\n---\n\n### **2. SSH 配置文件中的 `Tunnel` 指令**\n在 `~/.ssh/config` 中，使用 `Tunnel` 参数配置隧道设备：\n```bash\nHost my-tunnel-host\n  HostName remote-server.com\n  User root\n  # 隧道设备配置\n  Tunnel 0:0             # 等价于命令行 -w 0:0\n  TunnelDevice 0:0       # （可选）显式指定设备号\n  # 其他必要参数\n  IdentityFile ~/.ssh/id_rsa\n  PermitLocalCommand yes\n  # 保持连接活跃\n  ServerAliveInterval 60\n  ServerAliveCountMax 3\n```\n\n#### **关键参数说明**：\n| **参数**          | **作用**                                                                 |\n|-------------------|-------------------------------------------------------------------------|\n| `Tunnel`          | 指定本地和远程的 TUN 设备号，格式为 `<local>:<remote>`（如 `0:0`）。       |\n| `TunnelDevice`    | （部分版本支持）显式绑定到具体设备号，与 `Tunnel` 类似。                   |\n| `PermitTunnel`    | 需在服务端 `sshd_config` 中设置为 `yes`，否则隧道无法建立（见下文）。      |\n| `PermitLocalCommand` | 允许在本地执行命令（如自动配置 IP 地址）。                               |\n\n---\n\n### **3. 服务端配置（必需）**\n在远程服务器的 `/etc/ssh/sshd_config` 中启用隧道支持：\n```bash\nPermitTunnel yes    # 允许 TUN/TAP 隧道\n```\n重启 SSH 服务生效：\n```bash\nsudo systemctl restart sshd\n```\n\n---\n\n### **4. 使用步骤示例**\n#### **(1) 建立 SSH 隧道**\n```bash\nssh -w 0:0 root@remote-server.com\n```\n\n#### **(2) 配置虚拟接口 IP 地址**\n- **本地**：\n  ```bash\n  sudo ip addr add 10.0.0.1/24 dev tun0\n  sudo ip link set tun0 up\n  ```\n- **远程**：\n  ```bash\n  sudo ip addr add 10.0.0.2/24 dev tun0\n  sudo ip link set tun0 up\n  ```\n\n#### **(3) 测试连通性**\n```bash\nping 10.0.0.2  # 从本地 ping 远程隧道 IP\n```\n\n---\n\n### **5. 高级用法：自动化配置**\n在 SSH 配置文件中添加 `LocalCommand`，自动完成 IP 分配：\n```bash\nHost my-tunnel-host\n  HostName remote-server.com\n  User root\n  Tunnel 0:0\n  PermitLocalCommand yes\n  LocalCommand sudo ip addr add 10.0.0.1/24 dev tun0 && sudo ip link set tun0 up\n```\n\n---\n\n### **6. 常见问题与注意事项**\n1. **权限问题**：\n   - 需要 `root` 权限创建 TUN/TAP 设备，建议以 `sudo` 运行 SSH 命令。\n   - 如果使用普通用户，需配置 `CAP_NET_ADMIN` 权限：\n     ```bash\n     sudo setcap cap_net_admin=ep /usr/bin/ssh\n     ```\n\n2. **操作系统支持**：\n   - **Linux**：原生支持 TUN/TAP。\n   - **macOS**：需安装 [TUN/TAP 驱动](https://tuntaposx.sourceforge.net/)。\n   - **Windows**：需安装 OpenVPN 的 `tap-windows` 驱动。\n\n3. **协议选择**：\n   - TUN 模式（默认）：传输 IP 数据包（L3）。\n   - TAP 模式：传输以太网帧（L2），需显式指定：\n     ```bash\n     ssh -o Tunnel=ethernet -w 0:0 user@host\n     ```\n\n---\n\n### **7. 完整配置示例**\n```bash\n# ~/.ssh/config\nHost vpn-tunnel\n  HostName vpn.example.com\n  User root\n  IdentityFile ~/.ssh/vpn_key\n  Tunnel 0:0\n  PermitLocalCommand yes\n  LocalCommand sudo ip addr add 10.0.0.1/24 dev tun0 && sudo ip link set tun0 up\n  RemoteCommand sudo ip addr add 10.0.0.2/24 dev tun0 && sudo ip link set tun0 up\n  ServerAliveInterval 30\n  RequestTTY yes    # 允许执行远程命令（RemoteCommand）\n```\n\n---\n\n### **总结**\n- **`-w` 参数**：用于创建 TUN/TAP 隧道，需在配置文件中使用 `Tunnel` 指令。\n- **核心步骤**：服务端启用 `PermitTunnel`，客户端配置隧道设备并分配 IP。\n- **适用场景**：构建 VPN、跨网络透明代理、支持 UDP 的全协议转发。\n","slug":"materiel/ai/ssh/ssh -w要怎么使用ssh config配置文件配置以及它有哪些参数","published":1,"updated":"2025-02-24T09:49:11.370Z","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwap0050mswsbq3d8cxh","content":"<h1 id=\"ssh-w要怎么使用ssh-config配置文件配置-以及它有哪些参数\"><a href=\"#ssh-w要怎么使用ssh-config配置文件配置-以及它有哪些参数\" class=\"headerlink\" title=\"ssh -w要怎么使用ssh config配置文件配置, 以及它有哪些参数\"></a>ssh -w要怎么使用ssh config配置文件配置, 以及它有哪些参数</h1><p>以下是关于如何在 SSH 配置文件中使用 <code>-w</code> 参数（隧道设备转发）的详细说明，包括参数解释和配置示例：</p>\n<hr>\n<h3 id=\"1-ssh-w-参数的作用与语法\"><a href=\"#1-ssh-w-参数的作用与语法\" class=\"headerlink\" title=\"1. ssh -w 参数的作用与语法\"></a><strong>1. <code>ssh -w</code> 参数的作用与语法</strong></h3><ul>\n<li><strong>功能</strong>：创建 TUN&#x2F;TAP 虚拟网络接口，实现网络层（L3）或数据链路层（L2）的隧道。</li>\n<li><strong>语法</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -w &lt;local_tun&gt;:&lt;remote_tun&gt; user@host</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;local_tun&gt;</code>：本地 TUN 设备编号（如 <code>0</code> 表示 <code>tun0</code>）。</li>\n<li><code>&lt;remote_tun&gt;</code>：远程 TUN 设备编号（如 <code>0</code> 表示 <code>tun0</code>）。</li>\n<li>特殊值 <code>any</code>：允许系统自动分配设备号（如 <code>-w 5:any</code>）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-SSH-配置文件中的-Tunnel-指令\"><a href=\"#2-SSH-配置文件中的-Tunnel-指令\" class=\"headerlink\" title=\"2. SSH 配置文件中的 Tunnel 指令\"></a><strong>2. SSH 配置文件中的 <code>Tunnel</code> 指令</strong></h3><p>在 <code>~/.ssh/config</code> 中，使用 <code>Tunnel</code> 参数配置隧道设备：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host my-tunnel-host</span><br><span class=\"line\">  HostName remote-server.com</span><br><span class=\"line\">  User root</span><br><span class=\"line\">  <span class=\"comment\"># 隧道设备配置</span></span><br><span class=\"line\">  Tunnel 0:0             <span class=\"comment\"># 等价于命令行 -w 0:0</span></span><br><span class=\"line\">  TunnelDevice 0:0       <span class=\"comment\"># （可选）显式指定设备号</span></span><br><span class=\"line\">  <span class=\"comment\"># 其他必要参数</span></span><br><span class=\"line\">  IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">  PermitLocalCommand <span class=\"built_in\">yes</span></span><br><span class=\"line\">  <span class=\"comment\"># 保持连接活跃</span></span><br><span class=\"line\">  ServerAliveInterval 60</span><br><span class=\"line\">  ServerAliveCountMax 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关键参数说明：\"><a href=\"#关键参数说明：\" class=\"headerlink\" title=\"关键参数说明：\"></a><strong>关键参数说明</strong>：</h4><table>\n<thead>\n<tr>\n<th><strong>参数</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Tunnel</code></td>\n<td>指定本地和远程的 TUN 设备号，格式为 <code>&lt;local&gt;:&lt;remote&gt;</code>（如 <code>0:0</code>）。</td>\n</tr>\n<tr>\n<td><code>TunnelDevice</code></td>\n<td>（部分版本支持）显式绑定到具体设备号，与 <code>Tunnel</code> 类似。</td>\n</tr>\n<tr>\n<td><code>PermitTunnel</code></td>\n<td>需在服务端 <code>sshd_config</code> 中设置为 <code>yes</code>，否则隧道无法建立（见下文）。</td>\n</tr>\n<tr>\n<td><code>PermitLocalCommand</code></td>\n<td>允许在本地执行命令（如自动配置 IP 地址）。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"3-服务端配置（必需）\"><a href=\"#3-服务端配置（必需）\" class=\"headerlink\" title=\"3. 服务端配置（必需）\"></a><strong>3. 服务端配置（必需）</strong></h3><p>在远程服务器的 <code>/etc/ssh/sshd_config</code> 中启用隧道支持：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PermitTunnel <span class=\"built_in\">yes</span>    <span class=\"comment\"># 允许 TUN/TAP 隧道</span></span><br></pre></td></tr></table></figure>\n<p>重启 SSH 服务生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-使用步骤示例\"><a href=\"#4-使用步骤示例\" class=\"headerlink\" title=\"4. 使用步骤示例\"></a><strong>4. 使用步骤示例</strong></h3><h4 id=\"1-建立-SSH-隧道\"><a href=\"#1-建立-SSH-隧道\" class=\"headerlink\" title=\"(1) 建立 SSH 隧道\"></a><strong>(1) 建立 SSH 隧道</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -w 0:0 root@remote-server.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-配置虚拟接口-IP-地址\"><a href=\"#2-配置虚拟接口-IP-地址\" class=\"headerlink\" title=\"(2) 配置虚拟接口 IP 地址\"></a><strong>(2) 配置虚拟接口 IP 地址</strong></h4><ul>\n<li><strong>本地</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ip addr add 10.0.0.1/24 dev tun0</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br></pre></td></tr></table></figure></li>\n<li><strong>远程</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ip addr add 10.0.0.2/24 dev tun0</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-测试连通性\"><a href=\"#3-测试连通性\" class=\"headerlink\" title=\"(3) 测试连通性\"></a><strong>(3) 测试连通性</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 10.0.0.2  <span class=\"comment\"># 从本地 ping 远程隧道 IP</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5-高级用法：自动化配置\"><a href=\"#5-高级用法：自动化配置\" class=\"headerlink\" title=\"5. 高级用法：自动化配置\"></a><strong>5. 高级用法：自动化配置</strong></h3><p>在 SSH 配置文件中添加 <code>LocalCommand</code>，自动完成 IP 分配：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host my-tunnel-host</span><br><span class=\"line\">  HostName remote-server.com</span><br><span class=\"line\">  User root</span><br><span class=\"line\">  Tunnel 0:0</span><br><span class=\"line\">  PermitLocalCommand <span class=\"built_in\">yes</span></span><br><span class=\"line\">  LocalCommand <span class=\"built_in\">sudo</span> ip addr add 10.0.0.1/24 dev tun0 &amp;&amp; <span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"6-常见问题与注意事项\"><a href=\"#6-常见问题与注意事项\" class=\"headerlink\" title=\"6. 常见问题与注意事项\"></a><strong>6. 常见问题与注意事项</strong></h3><ol>\n<li><p><strong>权限问题</strong>：</p>\n<ul>\n<li>需要 <code>root</code> 权限创建 TUN&#x2F;TAP 设备，建议以 <code>sudo</code> 运行 SSH 命令。</li>\n<li>如果使用普通用户，需配置 <code>CAP_NET_ADMIN</code> 权限：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">setcap</span> cap_net_admin=ep /usr/bin/ssh</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>操作系统支持</strong>：</p>\n<ul>\n<li><strong>Linux</strong>：原生支持 TUN&#x2F;TAP。</li>\n<li><strong>macOS</strong>：需安装 <a href=\"https://tuntaposx.sourceforge.net/\">TUN&#x2F;TAP 驱动</a>。</li>\n<li><strong>Windows</strong>：需安装 OpenVPN 的 <code>tap-windows</code> 驱动。</li>\n</ul>\n</li>\n<li><p><strong>协议选择</strong>：</p>\n<ul>\n<li>TUN 模式（默认）：传输 IP 数据包（L3）。</li>\n<li>TAP 模式：传输以太网帧（L2），需显式指定：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -o Tunnel=ethernet -w 0:0 user@host</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"7-完整配置示例\"><a href=\"#7-完整配置示例\" class=\"headerlink\" title=\"7. 完整配置示例\"></a><strong>7. 完整配置示例</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.ssh/config</span></span><br><span class=\"line\">Host vpn-tunnel</span><br><span class=\"line\">  HostName vpn.example.com</span><br><span class=\"line\">  User root</span><br><span class=\"line\">  IdentityFile ~/.ssh/vpn_key</span><br><span class=\"line\">  Tunnel 0:0</span><br><span class=\"line\">  PermitLocalCommand <span class=\"built_in\">yes</span></span><br><span class=\"line\">  LocalCommand <span class=\"built_in\">sudo</span> ip addr add 10.0.0.1/24 dev tun0 &amp;&amp; <span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br><span class=\"line\">  RemoteCommand <span class=\"built_in\">sudo</span> ip addr add 10.0.0.2/24 dev tun0 &amp;&amp; <span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br><span class=\"line\">  ServerAliveInterval 30</span><br><span class=\"line\">  RequestTTY <span class=\"built_in\">yes</span>    <span class=\"comment\"># 允许执行远程命令（RemoteCommand）</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><ul>\n<li><strong><code>-w</code> 参数</strong>：用于创建 TUN&#x2F;TAP 隧道，需在配置文件中使用 <code>Tunnel</code> 指令。</li>\n<li><strong>核心步骤</strong>：服务端启用 <code>PermitTunnel</code>，客户端配置隧道设备并分配 IP。</li>\n<li><strong>适用场景</strong>：构建 VPN、跨网络透明代理、支持 UDP 的全协议转发。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"ssh-w要怎么使用ssh-config配置文件配置-以及它有哪些参数\"><a href=\"#ssh-w要怎么使用ssh-config配置文件配置-以及它有哪些参数\" class=\"headerlink\" title=\"ssh -w要怎么使用ssh config配置文件配置, 以及它有哪些参数\"></a>ssh -w要怎么使用ssh config配置文件配置, 以及它有哪些参数</h1><p>以下是关于如何在 SSH 配置文件中使用 <code>-w</code> 参数（隧道设备转发）的详细说明，包括参数解释和配置示例：</p>\n<hr>\n<h3 id=\"1-ssh-w-参数的作用与语法\"><a href=\"#1-ssh-w-参数的作用与语法\" class=\"headerlink\" title=\"1. ssh -w 参数的作用与语法\"></a><strong>1. <code>ssh -w</code> 参数的作用与语法</strong></h3><ul>\n<li><strong>功能</strong>：创建 TUN&#x2F;TAP 虚拟网络接口，实现网络层（L3）或数据链路层（L2）的隧道。</li>\n<li><strong>语法</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -w &lt;local_tun&gt;:&lt;remote_tun&gt; user@host</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;local_tun&gt;</code>：本地 TUN 设备编号（如 <code>0</code> 表示 <code>tun0</code>）。</li>\n<li><code>&lt;remote_tun&gt;</code>：远程 TUN 设备编号（如 <code>0</code> 表示 <code>tun0</code>）。</li>\n<li>特殊值 <code>any</code>：允许系统自动分配设备号（如 <code>-w 5:any</code>）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-SSH-配置文件中的-Tunnel-指令\"><a href=\"#2-SSH-配置文件中的-Tunnel-指令\" class=\"headerlink\" title=\"2. SSH 配置文件中的 Tunnel 指令\"></a><strong>2. SSH 配置文件中的 <code>Tunnel</code> 指令</strong></h3><p>在 <code>~/.ssh/config</code> 中，使用 <code>Tunnel</code> 参数配置隧道设备：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host my-tunnel-host</span><br><span class=\"line\">  HostName remote-server.com</span><br><span class=\"line\">  User root</span><br><span class=\"line\">  <span class=\"comment\"># 隧道设备配置</span></span><br><span class=\"line\">  Tunnel 0:0             <span class=\"comment\"># 等价于命令行 -w 0:0</span></span><br><span class=\"line\">  TunnelDevice 0:0       <span class=\"comment\"># （可选）显式指定设备号</span></span><br><span class=\"line\">  <span class=\"comment\"># 其他必要参数</span></span><br><span class=\"line\">  IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">  PermitLocalCommand <span class=\"built_in\">yes</span></span><br><span class=\"line\">  <span class=\"comment\"># 保持连接活跃</span></span><br><span class=\"line\">  ServerAliveInterval 60</span><br><span class=\"line\">  ServerAliveCountMax 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关键参数说明：\"><a href=\"#关键参数说明：\" class=\"headerlink\" title=\"关键参数说明：\"></a><strong>关键参数说明</strong>：</h4><table>\n<thead>\n<tr>\n<th><strong>参数</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Tunnel</code></td>\n<td>指定本地和远程的 TUN 设备号，格式为 <code>&lt;local&gt;:&lt;remote&gt;</code>（如 <code>0:0</code>）。</td>\n</tr>\n<tr>\n<td><code>TunnelDevice</code></td>\n<td>（部分版本支持）显式绑定到具体设备号，与 <code>Tunnel</code> 类似。</td>\n</tr>\n<tr>\n<td><code>PermitTunnel</code></td>\n<td>需在服务端 <code>sshd_config</code> 中设置为 <code>yes</code>，否则隧道无法建立（见下文）。</td>\n</tr>\n<tr>\n<td><code>PermitLocalCommand</code></td>\n<td>允许在本地执行命令（如自动配置 IP 地址）。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"3-服务端配置（必需）\"><a href=\"#3-服务端配置（必需）\" class=\"headerlink\" title=\"3. 服务端配置（必需）\"></a><strong>3. 服务端配置（必需）</strong></h3><p>在远程服务器的 <code>/etc/ssh/sshd_config</code> 中启用隧道支持：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PermitTunnel <span class=\"built_in\">yes</span>    <span class=\"comment\"># 允许 TUN/TAP 隧道</span></span><br></pre></td></tr></table></figure>\n<p>重启 SSH 服务生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-使用步骤示例\"><a href=\"#4-使用步骤示例\" class=\"headerlink\" title=\"4. 使用步骤示例\"></a><strong>4. 使用步骤示例</strong></h3><h4 id=\"1-建立-SSH-隧道\"><a href=\"#1-建立-SSH-隧道\" class=\"headerlink\" title=\"(1) 建立 SSH 隧道\"></a><strong>(1) 建立 SSH 隧道</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -w 0:0 root@remote-server.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-配置虚拟接口-IP-地址\"><a href=\"#2-配置虚拟接口-IP-地址\" class=\"headerlink\" title=\"(2) 配置虚拟接口 IP 地址\"></a><strong>(2) 配置虚拟接口 IP 地址</strong></h4><ul>\n<li><strong>本地</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ip addr add 10.0.0.1/24 dev tun0</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br></pre></td></tr></table></figure></li>\n<li><strong>远程</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ip addr add 10.0.0.2/24 dev tun0</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-测试连通性\"><a href=\"#3-测试连通性\" class=\"headerlink\" title=\"(3) 测试连通性\"></a><strong>(3) 测试连通性</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 10.0.0.2  <span class=\"comment\"># 从本地 ping 远程隧道 IP</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5-高级用法：自动化配置\"><a href=\"#5-高级用法：自动化配置\" class=\"headerlink\" title=\"5. 高级用法：自动化配置\"></a><strong>5. 高级用法：自动化配置</strong></h3><p>在 SSH 配置文件中添加 <code>LocalCommand</code>，自动完成 IP 分配：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host my-tunnel-host</span><br><span class=\"line\">  HostName remote-server.com</span><br><span class=\"line\">  User root</span><br><span class=\"line\">  Tunnel 0:0</span><br><span class=\"line\">  PermitLocalCommand <span class=\"built_in\">yes</span></span><br><span class=\"line\">  LocalCommand <span class=\"built_in\">sudo</span> ip addr add 10.0.0.1/24 dev tun0 &amp;&amp; <span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"6-常见问题与注意事项\"><a href=\"#6-常见问题与注意事项\" class=\"headerlink\" title=\"6. 常见问题与注意事项\"></a><strong>6. 常见问题与注意事项</strong></h3><ol>\n<li><p><strong>权限问题</strong>：</p>\n<ul>\n<li>需要 <code>root</code> 权限创建 TUN&#x2F;TAP 设备，建议以 <code>sudo</code> 运行 SSH 命令。</li>\n<li>如果使用普通用户，需配置 <code>CAP_NET_ADMIN</code> 权限：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">setcap</span> cap_net_admin=ep /usr/bin/ssh</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>操作系统支持</strong>：</p>\n<ul>\n<li><strong>Linux</strong>：原生支持 TUN&#x2F;TAP。</li>\n<li><strong>macOS</strong>：需安装 <a href=\"https://tuntaposx.sourceforge.net/\">TUN&#x2F;TAP 驱动</a>。</li>\n<li><strong>Windows</strong>：需安装 OpenVPN 的 <code>tap-windows</code> 驱动。</li>\n</ul>\n</li>\n<li><p><strong>协议选择</strong>：</p>\n<ul>\n<li>TUN 模式（默认）：传输 IP 数据包（L3）。</li>\n<li>TAP 模式：传输以太网帧（L2），需显式指定：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -o Tunnel=ethernet -w 0:0 user@host</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"7-完整配置示例\"><a href=\"#7-完整配置示例\" class=\"headerlink\" title=\"7. 完整配置示例\"></a><strong>7. 完整配置示例</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.ssh/config</span></span><br><span class=\"line\">Host vpn-tunnel</span><br><span class=\"line\">  HostName vpn.example.com</span><br><span class=\"line\">  User root</span><br><span class=\"line\">  IdentityFile ~/.ssh/vpn_key</span><br><span class=\"line\">  Tunnel 0:0</span><br><span class=\"line\">  PermitLocalCommand <span class=\"built_in\">yes</span></span><br><span class=\"line\">  LocalCommand <span class=\"built_in\">sudo</span> ip addr add 10.0.0.1/24 dev tun0 &amp;&amp; <span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br><span class=\"line\">  RemoteCommand <span class=\"built_in\">sudo</span> ip addr add 10.0.0.2/24 dev tun0 &amp;&amp; <span class=\"built_in\">sudo</span> ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> tun0 up</span><br><span class=\"line\">  ServerAliveInterval 30</span><br><span class=\"line\">  RequestTTY <span class=\"built_in\">yes</span>    <span class=\"comment\"># 允许执行远程命令（RemoteCommand）</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><ul>\n<li><strong><code>-w</code> 参数</strong>：用于创建 TUN&#x2F;TAP 隧道，需在配置文件中使用 <code>Tunnel</code> 指令。</li>\n<li><strong>核心步骤</strong>：服务端启用 <code>PermitTunnel</code>，客户端配置隧道设备并分配 IP。</li>\n<li><strong>适用场景</strong>：构建 VPN、跨网络透明代理、支持 UDP 的全协议转发。</li>\n</ul>\n"},{"title":"sshuttle - 更智能的 SSH VPN 方案","date":"2024-02-23T16:00:00.000Z","_content":"\n# sshuttle\n\n## 更智能的方案（推荐使用 sshuttle）\n\n如果不需要精细控制 TUN 设备，推荐使用轻量级 SSH VPN 工具：\n\n```bash\n# 安装 sshuttle（Python 编写，无需内核驱动）\nbrew install sshuttle\n\n# 一键启动 VPN（自动处理路由和隧道）\nsshuttle -r root@10.0.1.90 --python $(which python3) 0.0.0.0/0\n```\n\n效果：\n\n- 所有流量自动通过 SSH 隧道\n- 无需手动配置 TUN 设备\n- 自动处理路由规则\n\n---\n\n### 两种方案对比\n\n| 特性               | 原生 SSH TUN 方案          | sshuttle 方案               |\n|--------------------|---------------------------|----------------------------|\n| 配置复杂度         | 高（需手动管理设备）       | 低（一键启动）             |\n| 跨平台兼容性       | 依赖 TUN 驱动             | 纯 Python 实现             |\n| 流量控制           | 需手动配置路由            | 自动路由所有流量           |\n| 系统权限需求       | 需要 root/sudo            | 普通用户权限               |\n| 适用场景           | 需要精细控制网络层        | 快速建立全流量 VPN         |\n\n---\n\n### 测试连接\n\n对于原生 SSH TUN 方案：\n\n```bash\n# 连接并创建隧道\nssh dev-2023-tunnel\n\n# 验证 macOS 端隧道\nifconfig utun0\n# 应看到 10.1.0.1 的 IP\n\n# 测试远程连通性\nping 10.1.0.2\n```\n\n---\n\n### 常见问题处理\n\n1. **出现 `utun0: Network is down` 错误**\n   - 确认已安装 TUN 驱动\n   - 检查 `sudo` 权限是否配置正确\n\n2. **sshuttle 无法启动**\n   - 指定 Python3 路径：`--python $(which python3)`\n   - 确保远程服务器允许 SSH 端口转发\n\n3. **部分应用不遵循系统路由**\n   - 配合使用 `--dns` 参数转发 DNS 请求\n\n   ```bash\n   sshuttle -r user@host --dns 0.0.0.0/0\n   ```\n","source":"_posts/materiel/ai/ssh/ssh vpn更智能的方案之sshuttle.md","raw":"---\ntitle: sshuttle - 更智能的 SSH VPN 方案\ndate: 2024-02-24\ncategories:\n  - materiel\n  - ai\n  - ssh\ntags:\n  - ssh\n  - vpn\n  - sshuttle\n---\n\n# sshuttle\n\n## 更智能的方案（推荐使用 sshuttle）\n\n如果不需要精细控制 TUN 设备，推荐使用轻量级 SSH VPN 工具：\n\n```bash\n# 安装 sshuttle（Python 编写，无需内核驱动）\nbrew install sshuttle\n\n# 一键启动 VPN（自动处理路由和隧道）\nsshuttle -r root@10.0.1.90 --python $(which python3) 0.0.0.0/0\n```\n\n效果：\n\n- 所有流量自动通过 SSH 隧道\n- 无需手动配置 TUN 设备\n- 自动处理路由规则\n\n---\n\n### 两种方案对比\n\n| 特性               | 原生 SSH TUN 方案          | sshuttle 方案               |\n|--------------------|---------------------------|----------------------------|\n| 配置复杂度         | 高（需手动管理设备）       | 低（一键启动）             |\n| 跨平台兼容性       | 依赖 TUN 驱动             | 纯 Python 实现             |\n| 流量控制           | 需手动配置路由            | 自动路由所有流量           |\n| 系统权限需求       | 需要 root/sudo            | 普通用户权限               |\n| 适用场景           | 需要精细控制网络层        | 快速建立全流量 VPN         |\n\n---\n\n### 测试连接\n\n对于原生 SSH TUN 方案：\n\n```bash\n# 连接并创建隧道\nssh dev-2023-tunnel\n\n# 验证 macOS 端隧道\nifconfig utun0\n# 应看到 10.1.0.1 的 IP\n\n# 测试远程连通性\nping 10.1.0.2\n```\n\n---\n\n### 常见问题处理\n\n1. **出现 `utun0: Network is down` 错误**\n   - 确认已安装 TUN 驱动\n   - 检查 `sudo` 权限是否配置正确\n\n2. **sshuttle 无法启动**\n   - 指定 Python3 路径：`--python $(which python3)`\n   - 确保远程服务器允许 SSH 端口转发\n\n3. **部分应用不遵循系统路由**\n   - 配合使用 `--dns` 参数转发 DNS 请求\n\n   ```bash\n   sshuttle -r user@host --dns 0.0.0.0/0\n   ```\n","slug":"materiel/ai/ssh/ssh vpn更智能的方案之sshuttle","published":1,"updated":"2025-02-24T11:57:51.360Z","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwaq0051msws0j2i2bn8","content":"<h1 id=\"sshuttle\"><a href=\"#sshuttle\" class=\"headerlink\" title=\"sshuttle\"></a>sshuttle</h1><h2 id=\"更智能的方案（推荐使用-sshuttle）\"><a href=\"#更智能的方案（推荐使用-sshuttle）\" class=\"headerlink\" title=\"更智能的方案（推荐使用 sshuttle）\"></a>更智能的方案（推荐使用 sshuttle）</h2><p>如果不需要精细控制 TUN 设备，推荐使用轻量级 SSH VPN 工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 sshuttle（Python 编写，无需内核驱动）</span></span><br><span class=\"line\">brew install sshuttle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一键启动 VPN（自动处理路由和隧道）</span></span><br><span class=\"line\">sshuttle -r root@10.0.1.90 --python $(<span class=\"built_in\">which</span> python3) 0.0.0.0/0</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<ul>\n<li>所有流量自动通过 SSH 隧道</li>\n<li>无需手动配置 TUN 设备</li>\n<li>自动处理路由规则</li>\n</ul>\n<hr>\n<h3 id=\"两种方案对比\"><a href=\"#两种方案对比\" class=\"headerlink\" title=\"两种方案对比\"></a>两种方案对比</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>原生 SSH TUN 方案</th>\n<th>sshuttle 方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>配置复杂度</td>\n<td>高（需手动管理设备）</td>\n<td>低（一键启动）</td>\n</tr>\n<tr>\n<td>跨平台兼容性</td>\n<td>依赖 TUN 驱动</td>\n<td>纯 Python 实现</td>\n</tr>\n<tr>\n<td>流量控制</td>\n<td>需手动配置路由</td>\n<td>自动路由所有流量</td>\n</tr>\n<tr>\n<td>系统权限需求</td>\n<td>需要 root&#x2F;sudo</td>\n<td>普通用户权限</td>\n</tr>\n<tr>\n<td>适用场景</td>\n<td>需要精细控制网络层</td>\n<td>快速建立全流量 VPN</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h3><p>对于原生 SSH TUN 方案：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接并创建隧道</span></span><br><span class=\"line\">ssh dev-2023-tunnel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 macOS 端隧道</span></span><br><span class=\"line\">ifconfig utun0</span><br><span class=\"line\"><span class=\"comment\"># 应看到 10.1.0.1 的 IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试远程连通性</span></span><br><span class=\"line\">ping 10.1.0.2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"常见问题处理\"><a href=\"#常见问题处理\" class=\"headerlink\" title=\"常见问题处理\"></a>常见问题处理</h3><ol>\n<li><p><strong>出现 <code>utun0: Network is down</code> 错误</strong></p>\n<ul>\n<li>确认已安装 TUN 驱动</li>\n<li>检查 <code>sudo</code> 权限是否配置正确</li>\n</ul>\n</li>\n<li><p><strong>sshuttle 无法启动</strong></p>\n<ul>\n<li>指定 Python3 路径：<code>--python $(which python3)</code></li>\n<li>确保远程服务器允许 SSH 端口转发</li>\n</ul>\n</li>\n<li><p><strong>部分应用不遵循系统路由</strong></p>\n<ul>\n<li>配合使用 <code>--dns</code> 参数转发 DNS 请求</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshuttle -r user@host --dns 0.0.0.0/0</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"sshuttle\"><a href=\"#sshuttle\" class=\"headerlink\" title=\"sshuttle\"></a>sshuttle</h1><h2 id=\"更智能的方案（推荐使用-sshuttle）\"><a href=\"#更智能的方案（推荐使用-sshuttle）\" class=\"headerlink\" title=\"更智能的方案（推荐使用 sshuttle）\"></a>更智能的方案（推荐使用 sshuttle）</h2><p>如果不需要精细控制 TUN 设备，推荐使用轻量级 SSH VPN 工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 sshuttle（Python 编写，无需内核驱动）</span></span><br><span class=\"line\">brew install sshuttle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一键启动 VPN（自动处理路由和隧道）</span></span><br><span class=\"line\">sshuttle -r root@10.0.1.90 --python $(<span class=\"built_in\">which</span> python3) 0.0.0.0/0</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<ul>\n<li>所有流量自动通过 SSH 隧道</li>\n<li>无需手动配置 TUN 设备</li>\n<li>自动处理路由规则</li>\n</ul>\n<hr>\n<h3 id=\"两种方案对比\"><a href=\"#两种方案对比\" class=\"headerlink\" title=\"两种方案对比\"></a>两种方案对比</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>原生 SSH TUN 方案</th>\n<th>sshuttle 方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>配置复杂度</td>\n<td>高（需手动管理设备）</td>\n<td>低（一键启动）</td>\n</tr>\n<tr>\n<td>跨平台兼容性</td>\n<td>依赖 TUN 驱动</td>\n<td>纯 Python 实现</td>\n</tr>\n<tr>\n<td>流量控制</td>\n<td>需手动配置路由</td>\n<td>自动路由所有流量</td>\n</tr>\n<tr>\n<td>系统权限需求</td>\n<td>需要 root&#x2F;sudo</td>\n<td>普通用户权限</td>\n</tr>\n<tr>\n<td>适用场景</td>\n<td>需要精细控制网络层</td>\n<td>快速建立全流量 VPN</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h3><p>对于原生 SSH TUN 方案：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接并创建隧道</span></span><br><span class=\"line\">ssh dev-2023-tunnel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 macOS 端隧道</span></span><br><span class=\"line\">ifconfig utun0</span><br><span class=\"line\"><span class=\"comment\"># 应看到 10.1.0.1 的 IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试远程连通性</span></span><br><span class=\"line\">ping 10.1.0.2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"常见问题处理\"><a href=\"#常见问题处理\" class=\"headerlink\" title=\"常见问题处理\"></a>常见问题处理</h3><ol>\n<li><p><strong>出现 <code>utun0: Network is down</code> 错误</strong></p>\n<ul>\n<li>确认已安装 TUN 驱动</li>\n<li>检查 <code>sudo</code> 权限是否配置正确</li>\n</ul>\n</li>\n<li><p><strong>sshuttle 无法启动</strong></p>\n<ul>\n<li>指定 Python3 路径：<code>--python $(which python3)</code></li>\n<li>确保远程服务器允许 SSH 端口转发</li>\n</ul>\n</li>\n<li><p><strong>部分应用不遵循系统路由</strong></p>\n<ul>\n<li>配合使用 <code>--dns</code> 参数转发 DNS 请求</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshuttle -r user@host --dns 0.0.0.0/0</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"layout":"default","title":"如何使用macos系统的沙箱环境呢?","nav_order":13,"description":"如何使用macos系统的沙箱环境呢?","parent":"Sandbox","has_children":false,"grand_parent":"Ai","_content":"\n# 如何使用macos系统的沙箱环境呢?\n\n使用macOS系统的沙箱环境可以通过以下步骤完成：\n\n1. 创建沙箱配置文件：\n   - 打开文本编辑器，创建一个新的文本文件。\n   - 在文件中编写沙箱配置规则，指定应用程序可以访问的资源和权限。例如，您可以指定应用程序可以读取和写入的文件、网络访问权限等。\n   - 保存文件并将其命名为sandbox.sb或其他您喜欢的名称。\n\n2. 启用沙箱环境：\n   - 打开终端应用程序。\n   - 使用以下命令启用沙箱环境并运行应用程序：\n  \n     ```shell\n     sandbox-exec -f /path/to/sandbox.sb /Applications/YourApp.app/Contents/MacOS/YourApp\n     ```\n\n     将`/path/to/sandbox.sb`替换为您保存沙箱配置文件的实际路径，将`/Applications/YourApp.app`替换为您要运行的应用程序的路径。\n\n3. 测试和调试：\n   - 运行应用程序并测试其功能。根据沙箱配置文件的规则，应用程序可能会受到一些限制。\n   - 如果应用程序无法正常运行或遇到问题，您可以检查沙箱配置文件中的规则并进行调整。\n\n请注意，沙箱环境的使用需要一些了解和技术知识。确保在创建沙箱配置文件时仔细阅读相关文档，并进行适当的测试和调试。\n\n---\nLearn more:\n\n1. [Configuring the macOS App Sandbox - Apple Developer](https://developer.apple.com/documentation/xcode/configuring-the-macos-app-sandbox)\n2. [macOS Sandbox - HackTricks](https://book.hacktricks.xyz/macos-hardening/macos-security-and-privilege-escalation/macos-security-protections/macos-sandbox)\n3. [macos - Is there a sandboxing program like Sandboxie for Mac? - Ask Different](https://apple.stackexchange.com/questions/258318/is-there-a-sandboxing-program-like-sandboxie-for-mac)\n","source":"_posts/materiel/ai/sandbox/如何使用macos系统的沙箱环境呢?.md","raw":"---\nlayout: default\ntitle: 如何使用macos系统的沙箱环境呢?\nnav_order: 13\ndescription: 如何使用macos系统的沙箱环境呢?\nparent: Sandbox\nhas_children: false\npermalink: \"/materiel/ai/sandbox/如何使用macos系统的沙箱环境呢?/\"\ngrand_parent: Ai\n---\n\n# 如何使用macos系统的沙箱环境呢?\n\n使用macOS系统的沙箱环境可以通过以下步骤完成：\n\n1. 创建沙箱配置文件：\n   - 打开文本编辑器，创建一个新的文本文件。\n   - 在文件中编写沙箱配置规则，指定应用程序可以访问的资源和权限。例如，您可以指定应用程序可以读取和写入的文件、网络访问权限等。\n   - 保存文件并将其命名为sandbox.sb或其他您喜欢的名称。\n\n2. 启用沙箱环境：\n   - 打开终端应用程序。\n   - 使用以下命令启用沙箱环境并运行应用程序：\n  \n     ```shell\n     sandbox-exec -f /path/to/sandbox.sb /Applications/YourApp.app/Contents/MacOS/YourApp\n     ```\n\n     将`/path/to/sandbox.sb`替换为您保存沙箱配置文件的实际路径，将`/Applications/YourApp.app`替换为您要运行的应用程序的路径。\n\n3. 测试和调试：\n   - 运行应用程序并测试其功能。根据沙箱配置文件的规则，应用程序可能会受到一些限制。\n   - 如果应用程序无法正常运行或遇到问题，您可以检查沙箱配置文件中的规则并进行调整。\n\n请注意，沙箱环境的使用需要一些了解和技术知识。确保在创建沙箱配置文件时仔细阅读相关文档，并进行适当的测试和调试。\n\n---\nLearn more:\n\n1. [Configuring the macOS App Sandbox - Apple Developer](https://developer.apple.com/documentation/xcode/configuring-the-macos-app-sandbox)\n2. [macOS Sandbox - HackTricks](https://book.hacktricks.xyz/macos-hardening/macos-security-and-privilege-escalation/macos-security-protections/macos-sandbox)\n3. [macos - Is there a sandboxing program like Sandboxie for Mac? - Ask Different](https://apple.stackexchange.com/questions/258318/is-there-a-sandboxing-program-like-sandboxie-for-mac)\n","slug":"materiel/ai/sandbox/如何使用macos系统的沙箱环境呢?","published":1,"date":"2025-02-23T07:43:31.729Z","updated":"2025-02-23T07:43:31.729Z","__permalink":"/materiel/ai/sandbox/如何使用macos系统的沙箱环境呢?/","comments":1,"photos":[],"_id":"cm7k5rwaq0054msws09sj3sc2","content":"<h1 id=\"如何使用macos系统的沙箱环境呢\"><a href=\"#如何使用macos系统的沙箱环境呢\" class=\"headerlink\" title=\"如何使用macos系统的沙箱环境呢?\"></a>如何使用macos系统的沙箱环境呢?</h1><p>使用macOS系统的沙箱环境可以通过以下步骤完成：</p>\n<ol>\n<li><p>创建沙箱配置文件：</p>\n<ul>\n<li>打开文本编辑器，创建一个新的文本文件。</li>\n<li>在文件中编写沙箱配置规则，指定应用程序可以访问的资源和权限。例如，您可以指定应用程序可以读取和写入的文件、网络访问权限等。</li>\n<li>保存文件并将其命名为sandbox.sb或其他您喜欢的名称。</li>\n</ul>\n</li>\n<li><p>启用沙箱环境：</p>\n<ul>\n<li><p>打开终端应用程序。</p>\n</li>\n<li><p>使用以下命令启用沙箱环境并运行应用程序：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sandbox-exec -f /path/to/sandbox.sb /Applications/YourApp.app/Contents/MacOS/YourApp</span><br></pre></td></tr></table></figure>\n\n<p>将<code>/path/to/sandbox.sb</code>替换为您保存沙箱配置文件的实际路径，将<code>/Applications/YourApp.app</code>替换为您要运行的应用程序的路径。</p>\n</li>\n</ul>\n</li>\n<li><p>测试和调试：</p>\n<ul>\n<li>运行应用程序并测试其功能。根据沙箱配置文件的规则，应用程序可能会受到一些限制。</li>\n<li>如果应用程序无法正常运行或遇到问题，您可以检查沙箱配置文件中的规则并进行调整。</li>\n</ul>\n</li>\n</ol>\n<p>请注意，沙箱环境的使用需要一些了解和技术知识。确保在创建沙箱配置文件时仔细阅读相关文档，并进行适当的测试和调试。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://developer.apple.com/documentation/xcode/configuring-the-macos-app-sandbox\">Configuring the macOS App Sandbox - Apple Developer</a></li>\n<li><a href=\"https://book.hacktricks.xyz/macos-hardening/macos-security-and-privilege-escalation/macos-security-protections/macos-sandbox\">macOS Sandbox - HackTricks</a></li>\n<li><a href=\"https://apple.stackexchange.com/questions/258318/is-there-a-sandboxing-program-like-sandboxie-for-mac\">macos - Is there a sandboxing program like Sandboxie for Mac? - Ask Different</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"如何使用macos系统的沙箱环境呢\"><a href=\"#如何使用macos系统的沙箱环境呢\" class=\"headerlink\" title=\"如何使用macos系统的沙箱环境呢?\"></a>如何使用macos系统的沙箱环境呢?</h1><p>使用macOS系统的沙箱环境可以通过以下步骤完成：</p>\n<ol>\n<li><p>创建沙箱配置文件：</p>\n<ul>\n<li>打开文本编辑器，创建一个新的文本文件。</li>\n<li>在文件中编写沙箱配置规则，指定应用程序可以访问的资源和权限。例如，您可以指定应用程序可以读取和写入的文件、网络访问权限等。</li>\n<li>保存文件并将其命名为sandbox.sb或其他您喜欢的名称。</li>\n</ul>\n</li>\n<li><p>启用沙箱环境：</p>\n<ul>\n<li><p>打开终端应用程序。</p>\n</li>\n<li><p>使用以下命令启用沙箱环境并运行应用程序：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sandbox-exec -f /path/to/sandbox.sb /Applications/YourApp.app/Contents/MacOS/YourApp</span><br></pre></td></tr></table></figure>\n\n<p>将<code>/path/to/sandbox.sb</code>替换为您保存沙箱配置文件的实际路径，将<code>/Applications/YourApp.app</code>替换为您要运行的应用程序的路径。</p>\n</li>\n</ul>\n</li>\n<li><p>测试和调试：</p>\n<ul>\n<li>运行应用程序并测试其功能。根据沙箱配置文件的规则，应用程序可能会受到一些限制。</li>\n<li>如果应用程序无法正常运行或遇到问题，您可以检查沙箱配置文件中的规则并进行调整。</li>\n</ul>\n</li>\n</ol>\n<p>请注意，沙箱环境的使用需要一些了解和技术知识。确保在创建沙箱配置文件时仔细阅读相关文档，并进行适当的测试和调试。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://developer.apple.com/documentation/xcode/configuring-the-macos-app-sandbox\">Configuring the macOS App Sandbox - Apple Developer</a></li>\n<li><a href=\"https://book.hacktricks.xyz/macos-hardening/macos-security-and-privilege-escalation/macos-security-protections/macos-sandbox\">macOS Sandbox - HackTricks</a></li>\n<li><a href=\"https://apple.stackexchange.com/questions/258318/is-there-a-sandboxing-program-like-sandboxie-for-mac\">macos - Is there a sandboxing program like Sandboxie for Mac? - Ask Different</a></li>\n</ol>\n"},{"title":"定制化 SSH VPN 专用服务器方案","date":"2024-02-23T16:00:00.000Z","_content":"\n# 定制化 SSH VPN 专用服务器方案\n\n> PS: 没啥用, 仅供参考\n\n---\n\n### 定制化 SSH VPN 专用服务器方案\n\n针对「服务器仅用于 SSH VPN」的场景，以下是优化后的安全实施方案，实现 **客户端零配置** + **服务器自动鉴权**：\n\n---\n\n### 一、服务器端配置（一次性操作）\n\n#### 1. 创建专用 VPN 用户\n```bash\nsudo useradd -r -s /usr/sbin/nologin vpn-tunnel  # 创建无登录权限的系统用户\nsudo mkdir -p /home/vpn-tunnel/.ssh\n```\n\n#### 2. 生成服务器专用密钥对\n```bash\n# 在服务器上生成密钥（仅需执行一次）\nsudo ssh-keygen -t ed25519 -f /etc/ssh/vpn-server-key -N \"\" -C \"vpn-server@company\"\n\n# 设置权限\nsudo chmod 600 /etc/ssh/vpn-server-key*\n```\n\n#### 3. 配置自动授权\n```bash\n# 将公钥设为 VPN 用户的唯一授权方式\nsudo cp /etc/ssh/vpn-server-key.pub /home/vpn-tunnel/.ssh/authorized_keys\nsudo chown -R vpn-tunnel:vpn-tunnel /home/vpn-tunnel/.ssh\n```\n\n#### 4. 加固 SSH 配置 (`/etc/ssh/sshd_config`)\n```bash\n# 限制 VPN 用户权限\nMatch User vpn-tunnel\n   AllowTcpForwarding no         # 禁用端口转发\n   PermitTunnel yes              # 允许创建隧道\n   ForceCommand /bin/false       # 禁止执行任何命令\n   AuthenticationMethods publickey\n   PermitRootLogin no\n   X11Forwarding no\n   AllowAgentForwarding no\n```\n\n#### 5. 应用配置\n```bash\nsudo systemctl restart sshd\n```\n\n---\n\n### 二、客户端零配置连接方案\n\n#### 方案 A：预共享密钥（适合内网可信环境）\n1. **获取服务器私钥**：  \n   将服务器生成的 `/etc/ssh/vpn-server-key` 私钥分发给客户端，保存为 `~/.ssh/vpn-default-key`\n\n2. **建立连接**：  \n   ```bash\n   sshuttle --ssh \"ssh -i ~/.ssh/vpn-default-key\" -r vpn-tunnel@10.0.1.90 0.0.0.0/0\n   ```\n\n#### 方案 B：证书认证（更安全，适合生产环境）\n```bash\n# 在服务器上生成 CA 证书\nsudo ssh-keygen -t ed25519 -f /etc/ssh/ca_key -N \"\"\n\n# 签署 VPN 用户证书（有效期 30 天）\nsudo ssh-keygen -s /etc/ssh/ca_key -I \"vpn-cert\" -n vpn-tunnel -V +30d /home/vpn-tunnel/.ssh/authorized_keys\n\n# 客户端只需信任 CA 公钥即可连接\n```\n\n---\n\n### 三、自动化连接脚本\n\n#### 创建一键连接脚本 `vpn-connect`\n```bash\n#!/bin/bash\nSERVER_IP=\"10.0.1.90\"\nTUN_KEY=\"vpn-default-key\"\n\n# 自动检测本地密钥\nif [ ! -f ~/.ssh/$TUN_KEY ]; then\n  echo \"下载默认 VPN 密钥...\"\n  curl -s https://internal.company.com/vpn-keys/$TUN_KEY > ~/.ssh/$TUN_KEY\n  chmod 600 ~/.ssh/$TUN_KEY\nfi\n\n# 静默启动 VPN\nsshuttle --ssh \"ssh -i ~/.ssh/$TUN_KEY -o StrictHostKeyChecking=no\" \\\n  -r vpn-tunnel@$SERVER_IP 0.0.0.0/0 \\\n  --daemon --pidfile /tmp/sshuttle.pid\n\necho \"VPN 已启动 (PID: $(cat /tmp/sshuttle.pid))\"\n```\n\n---\n\n### 四、安全增强措施\n\n| 安全层级          | 实施方法                                                                 |\n|-------------------|-------------------------------------------------------------------------|\n| **网络隔离**       | 服务器绑定 VPN 专用网卡，仅开放 SSH 端口                                 |\n| **密钥轮换**       | 通过 cron 每周自动更新服务器密钥，客户端脚本同步获取新密钥               |\n| **连接审计**       | 服务器记录所有 VPN 连接日志到 `/var/log/ssh-vpn.log`                    |\n| **流量限制**       | 使用 iptables 限制每个客户端的带宽和并发连接数                          |\n| **双因子认证**     | 集成 Google Authenticator 实现动态口令（需修改 SSH PAM 配置）           |\n\n---\n\n### 五、方案优势对比\n\n| 特性                | 预共享密钥方案       | 证书认证方案           |\n|---------------------|----------------------|------------------------|\n| 部署复杂度          | 低（适合小型团队）   | 中（需要 CA 管理）     |\n| 安全性              | 依赖密钥保管         | 自动过期 + 吊销列表    |\n| 客户端更新需求      | 密钥变更需重新分发   | 无需更新客户端         |\n| 适合场景            | 内部测试/临时使用    | 生产环境/长期运维      |\n\n---\n\n### 六、运维监控建议\n\n1. **状态检查脚本** (`check-vpn.sh`)\n```bash\n#!/bin/bash\n# 检查活跃连接\nnetstat -tn | grep ':22' | grep ESTABLISHED\n\n# 监控流量\nvnstat -i tun0 -tr 5\n\n# 自动重启（如果进程不存在）\npgrep sshuttle || /path/to/vpn-connect\n```\n\n2. **Prometheus 监控指标**\n```yaml\n# 暴露 SSH 隧道指标\n- job_name: 'ssh_vpn'\n  static_configs:\n    - targets: ['10.0.1.90:9100']\n  metrics_path: /probe\n  params:\n    module: [ssh_tunnel]\n```\n\n---\n\n### 七、应急预案\n\n1. **快速封锁用户**\n```bash\n# 实时移除授权\nsudo sed -i '/user-pubkey/d' /home/vpn-tunnel/.ssh/authorized_keys\n```\n\n2. **紧急切换端口**\n```bash\n# 使用 socat 临时重定向流量\nsocat TCP-LISTEN:2222,fork TCP:10.0.1.90:22\n```\n\n3. **全流量捕获分析**\n```bash\nsudo tcpdump -i tun0 -w vpn-traffic.pcap\n```\n\n---\n\n通过此方案，您将获得：\n- **客户端**：无需管理密钥，一键连接\n- **服务端**：自动化的密钥生命周期管理\n- **安全**：企业级防护与监控能力\n- **运维**：完善的应急和审计机制\n\n可根据实际需求选择预共享密钥或证书认证方案，平衡安全性与易用性。\n","source":"_posts/materiel/ai/ssh/定制化 SSH VPN 专用服务器方案.md","raw":"---\ntitle: 定制化 SSH VPN 专用服务器方案\ndate: 2024-02-24\ncategories:\n  - materiel\n  - ai\n  - ssh\ntags:\n  - ssh\n  - vpn\n  - security\n---\n\n# 定制化 SSH VPN 专用服务器方案\n\n> PS: 没啥用, 仅供参考\n\n---\n\n### 定制化 SSH VPN 专用服务器方案\n\n针对「服务器仅用于 SSH VPN」的场景，以下是优化后的安全实施方案，实现 **客户端零配置** + **服务器自动鉴权**：\n\n---\n\n### 一、服务器端配置（一次性操作）\n\n#### 1. 创建专用 VPN 用户\n```bash\nsudo useradd -r -s /usr/sbin/nologin vpn-tunnel  # 创建无登录权限的系统用户\nsudo mkdir -p /home/vpn-tunnel/.ssh\n```\n\n#### 2. 生成服务器专用密钥对\n```bash\n# 在服务器上生成密钥（仅需执行一次）\nsudo ssh-keygen -t ed25519 -f /etc/ssh/vpn-server-key -N \"\" -C \"vpn-server@company\"\n\n# 设置权限\nsudo chmod 600 /etc/ssh/vpn-server-key*\n```\n\n#### 3. 配置自动授权\n```bash\n# 将公钥设为 VPN 用户的唯一授权方式\nsudo cp /etc/ssh/vpn-server-key.pub /home/vpn-tunnel/.ssh/authorized_keys\nsudo chown -R vpn-tunnel:vpn-tunnel /home/vpn-tunnel/.ssh\n```\n\n#### 4. 加固 SSH 配置 (`/etc/ssh/sshd_config`)\n```bash\n# 限制 VPN 用户权限\nMatch User vpn-tunnel\n   AllowTcpForwarding no         # 禁用端口转发\n   PermitTunnel yes              # 允许创建隧道\n   ForceCommand /bin/false       # 禁止执行任何命令\n   AuthenticationMethods publickey\n   PermitRootLogin no\n   X11Forwarding no\n   AllowAgentForwarding no\n```\n\n#### 5. 应用配置\n```bash\nsudo systemctl restart sshd\n```\n\n---\n\n### 二、客户端零配置连接方案\n\n#### 方案 A：预共享密钥（适合内网可信环境）\n1. **获取服务器私钥**：  \n   将服务器生成的 `/etc/ssh/vpn-server-key` 私钥分发给客户端，保存为 `~/.ssh/vpn-default-key`\n\n2. **建立连接**：  \n   ```bash\n   sshuttle --ssh \"ssh -i ~/.ssh/vpn-default-key\" -r vpn-tunnel@10.0.1.90 0.0.0.0/0\n   ```\n\n#### 方案 B：证书认证（更安全，适合生产环境）\n```bash\n# 在服务器上生成 CA 证书\nsudo ssh-keygen -t ed25519 -f /etc/ssh/ca_key -N \"\"\n\n# 签署 VPN 用户证书（有效期 30 天）\nsudo ssh-keygen -s /etc/ssh/ca_key -I \"vpn-cert\" -n vpn-tunnel -V +30d /home/vpn-tunnel/.ssh/authorized_keys\n\n# 客户端只需信任 CA 公钥即可连接\n```\n\n---\n\n### 三、自动化连接脚本\n\n#### 创建一键连接脚本 `vpn-connect`\n```bash\n#!/bin/bash\nSERVER_IP=\"10.0.1.90\"\nTUN_KEY=\"vpn-default-key\"\n\n# 自动检测本地密钥\nif [ ! -f ~/.ssh/$TUN_KEY ]; then\n  echo \"下载默认 VPN 密钥...\"\n  curl -s https://internal.company.com/vpn-keys/$TUN_KEY > ~/.ssh/$TUN_KEY\n  chmod 600 ~/.ssh/$TUN_KEY\nfi\n\n# 静默启动 VPN\nsshuttle --ssh \"ssh -i ~/.ssh/$TUN_KEY -o StrictHostKeyChecking=no\" \\\n  -r vpn-tunnel@$SERVER_IP 0.0.0.0/0 \\\n  --daemon --pidfile /tmp/sshuttle.pid\n\necho \"VPN 已启动 (PID: $(cat /tmp/sshuttle.pid))\"\n```\n\n---\n\n### 四、安全增强措施\n\n| 安全层级          | 实施方法                                                                 |\n|-------------------|-------------------------------------------------------------------------|\n| **网络隔离**       | 服务器绑定 VPN 专用网卡，仅开放 SSH 端口                                 |\n| **密钥轮换**       | 通过 cron 每周自动更新服务器密钥，客户端脚本同步获取新密钥               |\n| **连接审计**       | 服务器记录所有 VPN 连接日志到 `/var/log/ssh-vpn.log`                    |\n| **流量限制**       | 使用 iptables 限制每个客户端的带宽和并发连接数                          |\n| **双因子认证**     | 集成 Google Authenticator 实现动态口令（需修改 SSH PAM 配置）           |\n\n---\n\n### 五、方案优势对比\n\n| 特性                | 预共享密钥方案       | 证书认证方案           |\n|---------------------|----------------------|------------------------|\n| 部署复杂度          | 低（适合小型团队）   | 中（需要 CA 管理）     |\n| 安全性              | 依赖密钥保管         | 自动过期 + 吊销列表    |\n| 客户端更新需求      | 密钥变更需重新分发   | 无需更新客户端         |\n| 适合场景            | 内部测试/临时使用    | 生产环境/长期运维      |\n\n---\n\n### 六、运维监控建议\n\n1. **状态检查脚本** (`check-vpn.sh`)\n```bash\n#!/bin/bash\n# 检查活跃连接\nnetstat -tn | grep ':22' | grep ESTABLISHED\n\n# 监控流量\nvnstat -i tun0 -tr 5\n\n# 自动重启（如果进程不存在）\npgrep sshuttle || /path/to/vpn-connect\n```\n\n2. **Prometheus 监控指标**\n```yaml\n# 暴露 SSH 隧道指标\n- job_name: 'ssh_vpn'\n  static_configs:\n    - targets: ['10.0.1.90:9100']\n  metrics_path: /probe\n  params:\n    module: [ssh_tunnel]\n```\n\n---\n\n### 七、应急预案\n\n1. **快速封锁用户**\n```bash\n# 实时移除授权\nsudo sed -i '/user-pubkey/d' /home/vpn-tunnel/.ssh/authorized_keys\n```\n\n2. **紧急切换端口**\n```bash\n# 使用 socat 临时重定向流量\nsocat TCP-LISTEN:2222,fork TCP:10.0.1.90:22\n```\n\n3. **全流量捕获分析**\n```bash\nsudo tcpdump -i tun0 -w vpn-traffic.pcap\n```\n\n---\n\n通过此方案，您将获得：\n- **客户端**：无需管理密钥，一键连接\n- **服务端**：自动化的密钥生命周期管理\n- **安全**：企业级防护与监控能力\n- **运维**：完善的应急和审计机制\n\n可根据实际需求选择预共享密钥或证书认证方案，平衡安全性与易用性。\n","slug":"materiel/ai/ssh/定制化 SSH VPN 专用服务器方案","published":1,"updated":"2025-02-24T11:57:51.358Z","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwaq0055msws2m682ynp","content":"<h1 id=\"定制化-SSH-VPN-专用服务器方案\"><a href=\"#定制化-SSH-VPN-专用服务器方案\" class=\"headerlink\" title=\"定制化 SSH VPN 专用服务器方案\"></a>定制化 SSH VPN 专用服务器方案</h1><blockquote>\n<p>PS: 没啥用, 仅供参考</p>\n</blockquote>\n<hr>\n<h3 id=\"定制化-SSH-VPN-专用服务器方案-1\"><a href=\"#定制化-SSH-VPN-专用服务器方案-1\" class=\"headerlink\" title=\"定制化 SSH VPN 专用服务器方案\"></a>定制化 SSH VPN 专用服务器方案</h3><p>针对「服务器仅用于 SSH VPN」的场景，以下是优化后的安全实施方案，实现 <strong>客户端零配置</strong> + <strong>服务器自动鉴权</strong>：</p>\n<hr>\n<h3 id=\"一、服务器端配置（一次性操作）\"><a href=\"#一、服务器端配置（一次性操作）\" class=\"headerlink\" title=\"一、服务器端配置（一次性操作）\"></a>一、服务器端配置（一次性操作）</h3><h4 id=\"1-创建专用-VPN-用户\"><a href=\"#1-创建专用-VPN-用户\" class=\"headerlink\" title=\"1. 创建专用 VPN 用户\"></a>1. 创建专用 VPN 用户</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> useradd -r -s /usr/sbin/nologin vpn-tunnel  <span class=\"comment\"># 创建无登录权限的系统用户</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> -p /home/vpn-tunnel/.ssh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-生成服务器专用密钥对\"><a href=\"#2-生成服务器专用密钥对\" class=\"headerlink\" title=\"2. 生成服务器专用密钥对\"></a>2. 生成服务器专用密钥对</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在服务器上生成密钥（仅需执行一次）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -t ed25519 -f /etc/ssh/vpn-server-key -N <span class=\"string\">&quot;&quot;</span> -C <span class=\"string\">&quot;vpn-server@company&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置权限</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> 600 /etc/ssh/vpn-server-key*</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-配置自动授权\"><a href=\"#3-配置自动授权\" class=\"headerlink\" title=\"3. 配置自动授权\"></a>3. 配置自动授权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将公钥设为 VPN 用户的唯一授权方式</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> /etc/ssh/vpn-server-key.pub /home/vpn-tunnel/.ssh/authorized_keys</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R vpn-tunnel:vpn-tunnel /home/vpn-tunnel/.ssh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-加固-SSH-配置-etc-ssh-sshd-config\"><a href=\"#4-加固-SSH-配置-etc-ssh-sshd-config\" class=\"headerlink\" title=\"4. 加固 SSH 配置 (/etc/ssh/sshd_config)\"></a>4. 加固 SSH 配置 (<code>/etc/ssh/sshd_config</code>)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 限制 VPN 用户权限</span></span><br><span class=\"line\">Match User vpn-tunnel</span><br><span class=\"line\">   AllowTcpForwarding no         <span class=\"comment\"># 禁用端口转发</span></span><br><span class=\"line\">   PermitTunnel <span class=\"built_in\">yes</span>              <span class=\"comment\"># 允许创建隧道</span></span><br><span class=\"line\">   ForceCommand /bin/false       <span class=\"comment\"># 禁止执行任何命令</span></span><br><span class=\"line\">   AuthenticationMethods publickey</span><br><span class=\"line\">   PermitRootLogin no</span><br><span class=\"line\">   X11Forwarding no</span><br><span class=\"line\">   AllowAgentForwarding no</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-应用配置\"><a href=\"#5-应用配置\" class=\"headerlink\" title=\"5. 应用配置\"></a>5. 应用配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"二、客户端零配置连接方案\"><a href=\"#二、客户端零配置连接方案\" class=\"headerlink\" title=\"二、客户端零配置连接方案\"></a>二、客户端零配置连接方案</h3><h4 id=\"方案-A：预共享密钥（适合内网可信环境）\"><a href=\"#方案-A：预共享密钥（适合内网可信环境）\" class=\"headerlink\" title=\"方案 A：预共享密钥（适合内网可信环境）\"></a>方案 A：预共享密钥（适合内网可信环境）</h4><ol>\n<li><p><strong>获取服务器私钥</strong>：<br>将服务器生成的 <code>/etc/ssh/vpn-server-key</code> 私钥分发给客户端，保存为 <code>~/.ssh/vpn-default-key</code></p>\n</li>\n<li><p><strong>建立连接</strong>：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshuttle --ssh <span class=\"string\">&quot;ssh -i ~/.ssh/vpn-default-key&quot;</span> -r vpn-tunnel@10.0.1.90 0.0.0.0/0</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"方案-B：证书认证（更安全，适合生产环境）\"><a href=\"#方案-B：证书认证（更安全，适合生产环境）\" class=\"headerlink\" title=\"方案 B：证书认证（更安全，适合生产环境）\"></a>方案 B：证书认证（更安全，适合生产环境）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在服务器上生成 CA 证书</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -t ed25519 -f /etc/ssh/ca_key -N <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 签署 VPN 用户证书（有效期 30 天）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -s /etc/ssh/ca_key -I <span class=\"string\">&quot;vpn-cert&quot;</span> -n vpn-tunnel -V +30d /home/vpn-tunnel/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端只需信任 CA 公钥即可连接</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"三、自动化连接脚本\"><a href=\"#三、自动化连接脚本\" class=\"headerlink\" title=\"三、自动化连接脚本\"></a>三、自动化连接脚本</h3><h4 id=\"创建一键连接脚本-vpn-connect\"><a href=\"#创建一键连接脚本-vpn-connect\" class=\"headerlink\" title=\"创建一键连接脚本 vpn-connect\"></a>创建一键连接脚本 <code>vpn-connect</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">SERVER_IP=<span class=\"string\">&quot;10.0.1.90&quot;</span></span><br><span class=\"line\">TUN_KEY=<span class=\"string\">&quot;vpn-default-key&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动检测本地密钥</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -f ~/.ssh/<span class=\"variable\">$TUN_KEY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;下载默认 VPN 密钥...&quot;</span></span><br><span class=\"line\">  curl -s https://internal.company.com/vpn-keys/<span class=\"variable\">$TUN_KEY</span> &gt; ~/.ssh/<span class=\"variable\">$TUN_KEY</span></span><br><span class=\"line\">  <span class=\"built_in\">chmod</span> 600 ~/.ssh/<span class=\"variable\">$TUN_KEY</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 静默启动 VPN</span></span><br><span class=\"line\">sshuttle --ssh <span class=\"string\">&quot;ssh -i ~/.ssh/<span class=\"variable\">$TUN_KEY</span> -o StrictHostKeyChecking=no&quot;</span> \\</span><br><span class=\"line\">  -r vpn-tunnel@<span class=\"variable\">$SERVER_IP</span> 0.0.0.0/0 \\</span><br><span class=\"line\">  --daemon --pidfile /tmp/sshuttle.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;VPN 已启动 (PID: <span class=\"subst\">$(cat /tmp/sshuttle.pid)</span>)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"四、安全增强措施\"><a href=\"#四、安全增强措施\" class=\"headerlink\" title=\"四、安全增强措施\"></a>四、安全增强措施</h3><table>\n<thead>\n<tr>\n<th>安全层级</th>\n<th>实施方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>网络隔离</strong></td>\n<td>服务器绑定 VPN 专用网卡，仅开放 SSH 端口</td>\n</tr>\n<tr>\n<td><strong>密钥轮换</strong></td>\n<td>通过 cron 每周自动更新服务器密钥，客户端脚本同步获取新密钥</td>\n</tr>\n<tr>\n<td><strong>连接审计</strong></td>\n<td>服务器记录所有 VPN 连接日志到 <code>/var/log/ssh-vpn.log</code></td>\n</tr>\n<tr>\n<td><strong>流量限制</strong></td>\n<td>使用 iptables 限制每个客户端的带宽和并发连接数</td>\n</tr>\n<tr>\n<td><strong>双因子认证</strong></td>\n<td>集成 Google Authenticator 实现动态口令（需修改 SSH PAM 配置）</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"五、方案优势对比\"><a href=\"#五、方案优势对比\" class=\"headerlink\" title=\"五、方案优势对比\"></a>五、方案优势对比</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>预共享密钥方案</th>\n<th>证书认证方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>部署复杂度</td>\n<td>低（适合小型团队）</td>\n<td>中（需要 CA 管理）</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>依赖密钥保管</td>\n<td>自动过期 + 吊销列表</td>\n</tr>\n<tr>\n<td>客户端更新需求</td>\n<td>密钥变更需重新分发</td>\n<td>无需更新客户端</td>\n</tr>\n<tr>\n<td>适合场景</td>\n<td>内部测试&#x2F;临时使用</td>\n<td>生产环境&#x2F;长期运维</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"六、运维监控建议\"><a href=\"#六、运维监控建议\" class=\"headerlink\" title=\"六、运维监控建议\"></a>六、运维监控建议</h3><ol>\n<li><p><strong>状态检查脚本</strong> (<code>check-vpn.sh</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 检查活跃连接</span></span><br><span class=\"line\">netstat -tn | grep <span class=\"string\">&#x27;:22&#x27;</span> | grep ESTABLISHED</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控流量</span></span><br><span class=\"line\">vnstat -i tun0 -<span class=\"built_in\">tr</span> 5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动重启（如果进程不存在）</span></span><br><span class=\"line\">pgrep sshuttle || /path/to/vpn-connect</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Prometheus 监控指标</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 暴露 SSH 隧道指标</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;ssh_vpn&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;10.0.1.90:9100&#x27;</span>]</span><br><span class=\"line\">  <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">  <span class=\"attr\">params:</span></span><br><span class=\"line\">    <span class=\"attr\">module:</span> [<span class=\"string\">ssh_tunnel</span>]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"七、应急预案\"><a href=\"#七、应急预案\" class=\"headerlink\" title=\"七、应急预案\"></a>七、应急预案</h3><ol>\n<li><p><strong>快速封锁用户</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实时移除授权</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> sed -i <span class=\"string\">&#x27;/user-pubkey/d&#x27;</span> /home/vpn-tunnel/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>紧急切换端口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 socat 临时重定向流量</span></span><br><span class=\"line\">socat TCP-LISTEN:2222,fork TCP:10.0.1.90:22</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>全流量捕获分析</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> tcpdump -i tun0 -w vpn-traffic.pcap</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>通过此方案，您将获得：</p>\n<ul>\n<li><strong>客户端</strong>：无需管理密钥，一键连接</li>\n<li><strong>服务端</strong>：自动化的密钥生命周期管理</li>\n<li><strong>安全</strong>：企业级防护与监控能力</li>\n<li><strong>运维</strong>：完善的应急和审计机制</li>\n</ul>\n<p>可根据实际需求选择预共享密钥或证书认证方案，平衡安全性与易用性。</p>\n","excerpt":"","more":"<h1 id=\"定制化-SSH-VPN-专用服务器方案\"><a href=\"#定制化-SSH-VPN-专用服务器方案\" class=\"headerlink\" title=\"定制化 SSH VPN 专用服务器方案\"></a>定制化 SSH VPN 专用服务器方案</h1><blockquote>\n<p>PS: 没啥用, 仅供参考</p>\n</blockquote>\n<hr>\n<h3 id=\"定制化-SSH-VPN-专用服务器方案-1\"><a href=\"#定制化-SSH-VPN-专用服务器方案-1\" class=\"headerlink\" title=\"定制化 SSH VPN 专用服务器方案\"></a>定制化 SSH VPN 专用服务器方案</h3><p>针对「服务器仅用于 SSH VPN」的场景，以下是优化后的安全实施方案，实现 <strong>客户端零配置</strong> + <strong>服务器自动鉴权</strong>：</p>\n<hr>\n<h3 id=\"一、服务器端配置（一次性操作）\"><a href=\"#一、服务器端配置（一次性操作）\" class=\"headerlink\" title=\"一、服务器端配置（一次性操作）\"></a>一、服务器端配置（一次性操作）</h3><h4 id=\"1-创建专用-VPN-用户\"><a href=\"#1-创建专用-VPN-用户\" class=\"headerlink\" title=\"1. 创建专用 VPN 用户\"></a>1. 创建专用 VPN 用户</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> useradd -r -s /usr/sbin/nologin vpn-tunnel  <span class=\"comment\"># 创建无登录权限的系统用户</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> -p /home/vpn-tunnel/.ssh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-生成服务器专用密钥对\"><a href=\"#2-生成服务器专用密钥对\" class=\"headerlink\" title=\"2. 生成服务器专用密钥对\"></a>2. 生成服务器专用密钥对</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在服务器上生成密钥（仅需执行一次）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -t ed25519 -f /etc/ssh/vpn-server-key -N <span class=\"string\">&quot;&quot;</span> -C <span class=\"string\">&quot;vpn-server@company&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置权限</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> 600 /etc/ssh/vpn-server-key*</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-配置自动授权\"><a href=\"#3-配置自动授权\" class=\"headerlink\" title=\"3. 配置自动授权\"></a>3. 配置自动授权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将公钥设为 VPN 用户的唯一授权方式</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> /etc/ssh/vpn-server-key.pub /home/vpn-tunnel/.ssh/authorized_keys</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R vpn-tunnel:vpn-tunnel /home/vpn-tunnel/.ssh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-加固-SSH-配置-etc-ssh-sshd-config\"><a href=\"#4-加固-SSH-配置-etc-ssh-sshd-config\" class=\"headerlink\" title=\"4. 加固 SSH 配置 (/etc/ssh/sshd_config)\"></a>4. 加固 SSH 配置 (<code>/etc/ssh/sshd_config</code>)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 限制 VPN 用户权限</span></span><br><span class=\"line\">Match User vpn-tunnel</span><br><span class=\"line\">   AllowTcpForwarding no         <span class=\"comment\"># 禁用端口转发</span></span><br><span class=\"line\">   PermitTunnel <span class=\"built_in\">yes</span>              <span class=\"comment\"># 允许创建隧道</span></span><br><span class=\"line\">   ForceCommand /bin/false       <span class=\"comment\"># 禁止执行任何命令</span></span><br><span class=\"line\">   AuthenticationMethods publickey</span><br><span class=\"line\">   PermitRootLogin no</span><br><span class=\"line\">   X11Forwarding no</span><br><span class=\"line\">   AllowAgentForwarding no</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-应用配置\"><a href=\"#5-应用配置\" class=\"headerlink\" title=\"5. 应用配置\"></a>5. 应用配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"二、客户端零配置连接方案\"><a href=\"#二、客户端零配置连接方案\" class=\"headerlink\" title=\"二、客户端零配置连接方案\"></a>二、客户端零配置连接方案</h3><h4 id=\"方案-A：预共享密钥（适合内网可信环境）\"><a href=\"#方案-A：预共享密钥（适合内网可信环境）\" class=\"headerlink\" title=\"方案 A：预共享密钥（适合内网可信环境）\"></a>方案 A：预共享密钥（适合内网可信环境）</h4><ol>\n<li><p><strong>获取服务器私钥</strong>：<br>将服务器生成的 <code>/etc/ssh/vpn-server-key</code> 私钥分发给客户端，保存为 <code>~/.ssh/vpn-default-key</code></p>\n</li>\n<li><p><strong>建立连接</strong>：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshuttle --ssh <span class=\"string\">&quot;ssh -i ~/.ssh/vpn-default-key&quot;</span> -r vpn-tunnel@10.0.1.90 0.0.0.0/0</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"方案-B：证书认证（更安全，适合生产环境）\"><a href=\"#方案-B：证书认证（更安全，适合生产环境）\" class=\"headerlink\" title=\"方案 B：证书认证（更安全，适合生产环境）\"></a>方案 B：证书认证（更安全，适合生产环境）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在服务器上生成 CA 证书</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -t ed25519 -f /etc/ssh/ca_key -N <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 签署 VPN 用户证书（有效期 30 天）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -s /etc/ssh/ca_key -I <span class=\"string\">&quot;vpn-cert&quot;</span> -n vpn-tunnel -V +30d /home/vpn-tunnel/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端只需信任 CA 公钥即可连接</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"三、自动化连接脚本\"><a href=\"#三、自动化连接脚本\" class=\"headerlink\" title=\"三、自动化连接脚本\"></a>三、自动化连接脚本</h3><h4 id=\"创建一键连接脚本-vpn-connect\"><a href=\"#创建一键连接脚本-vpn-connect\" class=\"headerlink\" title=\"创建一键连接脚本 vpn-connect\"></a>创建一键连接脚本 <code>vpn-connect</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">SERVER_IP=<span class=\"string\">&quot;10.0.1.90&quot;</span></span><br><span class=\"line\">TUN_KEY=<span class=\"string\">&quot;vpn-default-key&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动检测本地密钥</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -f ~/.ssh/<span class=\"variable\">$TUN_KEY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;下载默认 VPN 密钥...&quot;</span></span><br><span class=\"line\">  curl -s https://internal.company.com/vpn-keys/<span class=\"variable\">$TUN_KEY</span> &gt; ~/.ssh/<span class=\"variable\">$TUN_KEY</span></span><br><span class=\"line\">  <span class=\"built_in\">chmod</span> 600 ~/.ssh/<span class=\"variable\">$TUN_KEY</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 静默启动 VPN</span></span><br><span class=\"line\">sshuttle --ssh <span class=\"string\">&quot;ssh -i ~/.ssh/<span class=\"variable\">$TUN_KEY</span> -o StrictHostKeyChecking=no&quot;</span> \\</span><br><span class=\"line\">  -r vpn-tunnel@<span class=\"variable\">$SERVER_IP</span> 0.0.0.0/0 \\</span><br><span class=\"line\">  --daemon --pidfile /tmp/sshuttle.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;VPN 已启动 (PID: <span class=\"subst\">$(cat /tmp/sshuttle.pid)</span>)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"四、安全增强措施\"><a href=\"#四、安全增强措施\" class=\"headerlink\" title=\"四、安全增强措施\"></a>四、安全增强措施</h3><table>\n<thead>\n<tr>\n<th>安全层级</th>\n<th>实施方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>网络隔离</strong></td>\n<td>服务器绑定 VPN 专用网卡，仅开放 SSH 端口</td>\n</tr>\n<tr>\n<td><strong>密钥轮换</strong></td>\n<td>通过 cron 每周自动更新服务器密钥，客户端脚本同步获取新密钥</td>\n</tr>\n<tr>\n<td><strong>连接审计</strong></td>\n<td>服务器记录所有 VPN 连接日志到 <code>/var/log/ssh-vpn.log</code></td>\n</tr>\n<tr>\n<td><strong>流量限制</strong></td>\n<td>使用 iptables 限制每个客户端的带宽和并发连接数</td>\n</tr>\n<tr>\n<td><strong>双因子认证</strong></td>\n<td>集成 Google Authenticator 实现动态口令（需修改 SSH PAM 配置）</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"五、方案优势对比\"><a href=\"#五、方案优势对比\" class=\"headerlink\" title=\"五、方案优势对比\"></a>五、方案优势对比</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>预共享密钥方案</th>\n<th>证书认证方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>部署复杂度</td>\n<td>低（适合小型团队）</td>\n<td>中（需要 CA 管理）</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>依赖密钥保管</td>\n<td>自动过期 + 吊销列表</td>\n</tr>\n<tr>\n<td>客户端更新需求</td>\n<td>密钥变更需重新分发</td>\n<td>无需更新客户端</td>\n</tr>\n<tr>\n<td>适合场景</td>\n<td>内部测试&#x2F;临时使用</td>\n<td>生产环境&#x2F;长期运维</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"六、运维监控建议\"><a href=\"#六、运维监控建议\" class=\"headerlink\" title=\"六、运维监控建议\"></a>六、运维监控建议</h3><ol>\n<li><p><strong>状态检查脚本</strong> (<code>check-vpn.sh</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 检查活跃连接</span></span><br><span class=\"line\">netstat -tn | grep <span class=\"string\">&#x27;:22&#x27;</span> | grep ESTABLISHED</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控流量</span></span><br><span class=\"line\">vnstat -i tun0 -<span class=\"built_in\">tr</span> 5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动重启（如果进程不存在）</span></span><br><span class=\"line\">pgrep sshuttle || /path/to/vpn-connect</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Prometheus 监控指标</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 暴露 SSH 隧道指标</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;ssh_vpn&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;10.0.1.90:9100&#x27;</span>]</span><br><span class=\"line\">  <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">  <span class=\"attr\">params:</span></span><br><span class=\"line\">    <span class=\"attr\">module:</span> [<span class=\"string\">ssh_tunnel</span>]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"七、应急预案\"><a href=\"#七、应急预案\" class=\"headerlink\" title=\"七、应急预案\"></a>七、应急预案</h3><ol>\n<li><p><strong>快速封锁用户</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实时移除授权</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> sed -i <span class=\"string\">&#x27;/user-pubkey/d&#x27;</span> /home/vpn-tunnel/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>紧急切换端口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 socat 临时重定向流量</span></span><br><span class=\"line\">socat TCP-LISTEN:2222,fork TCP:10.0.1.90:22</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>全流量捕获分析</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> tcpdump -i tun0 -w vpn-traffic.pcap</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>通过此方案，您将获得：</p>\n<ul>\n<li><strong>客户端</strong>：无需管理密钥，一键连接</li>\n<li><strong>服务端</strong>：自动化的密钥生命周期管理</li>\n<li><strong>安全</strong>：企业级防护与监控能力</li>\n<li><strong>运维</strong>：完善的应急和审计机制</li>\n</ul>\n<p>可根据实际需求选择预共享密钥或证书认证方案，平衡安全性与易用性。</p>\n"},{"layout":"default","title":"doc","nav_order":14,"description":"clickhouse","parent":"Clickhouse","has_children":false,"grand_parent":"Data","_content":"\n# clickhouse\n\n## 安装指定版本\n\n[参考官网](https://clickhouse.com/docs/zh/getting-started/install#from-tgz-archives)\n\n```bash\n# 执行安装脚本(中途需要输入`default`用户的密码, 以及是否允许默认用户从任何地方访问)\n# 脚本中的`LATEST_VERSION`环境变量可以填写想要安装的版本号，默认为最新稳定版(可以在这里找版本[https://github.com/ClickHouse/ClickHouse/tags])\nbash ./clickhouse-install.sh\n# 启动\nsudo /etc/init.d/clickhouse-server start\n# 连接\nclickhouse-client\n# 示例\nSELECT 1\n```\n","source":"_posts/middleware/data/clickhouse/clickhouse.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: clickhouse\nparent: Clickhouse\nhas_children: false\npermalink: \"/middleware/data/clickhouse/clickhouse/\"\ngrand_parent: Data\n---\n\n# clickhouse\n\n## 安装指定版本\n\n[参考官网](https://clickhouse.com/docs/zh/getting-started/install#from-tgz-archives)\n\n```bash\n# 执行安装脚本(中途需要输入`default`用户的密码, 以及是否允许默认用户从任何地方访问)\n# 脚本中的`LATEST_VERSION`环境变量可以填写想要安装的版本号，默认为最新稳定版(可以在这里找版本[https://github.com/ClickHouse/ClickHouse/tags])\nbash ./clickhouse-install.sh\n# 启动\nsudo /etc/init.d/clickhouse-server start\n# 连接\nclickhouse-client\n# 示例\nSELECT 1\n```\n","slug":"middleware/data/clickhouse/clickhouse","published":1,"date":"2025-02-23T07:43:31.740Z","updated":"2025-02-23T07:43:31.740Z","__permalink":"/middleware/data/clickhouse/clickhouse/","comments":1,"photos":[],"_id":"cm7k5rwaq0056msws269n2yoa","content":"<h1 id=\"clickhouse\"><a href=\"#clickhouse\" class=\"headerlink\" title=\"clickhouse\"></a>clickhouse</h1><h2 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h2><p><a href=\"https://clickhouse.com/docs/zh/getting-started/install#from-tgz-archives\">参考官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行安装脚本(中途需要输入`default`用户的密码, 以及是否允许默认用户从任何地方访问)</span></span><br><span class=\"line\"><span class=\"comment\"># 脚本中的`LATEST_VERSION`环境变量可以填写想要安装的版本号，默认为最新稳定版(可以在这里找版本[https://github.com/ClickHouse/ClickHouse/tags])</span></span><br><span class=\"line\">bash ./clickhouse-install.sh</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> /etc/init.d/clickhouse-server start</span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">clickhouse-client</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">SELECT 1</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"clickhouse\"><a href=\"#clickhouse\" class=\"headerlink\" title=\"clickhouse\"></a>clickhouse</h1><h2 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h2><p><a href=\"https://clickhouse.com/docs/zh/getting-started/install#from-tgz-archives\">参考官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行安装脚本(中途需要输入`default`用户的密码, 以及是否允许默认用户从任何地方访问)</span></span><br><span class=\"line\"><span class=\"comment\"># 脚本中的`LATEST_VERSION`环境变量可以填写想要安装的版本号，默认为最新稳定版(可以在这里找版本[https://github.com/ClickHouse/ClickHouse/tags])</span></span><br><span class=\"line\">bash ./clickhouse-install.sh</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> /etc/init.d/clickhouse-server start</span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">clickhouse-client</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">SELECT 1</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":14,"description":"Redis相关记录","parent":"Redis","has_children":false,"grand_parent":"Data","_content":"\n# Redis相关记录\n\n## 导出Redis中的数据\n\n```shell\n# 连接redis\nredis-cli -h 127.0.0.1 -p 6379 -a foobared\n# 导出key数据到文件\nkeys \"*\" | xargs redis-cli get > /tmp/redis_data.txt\n# 导出指定key数据到文件中\nredis-cli get key > /tmp/redis_data.txt\n# 使用DUMP命令来导出指定key的数据\nredis-cli dump key > /tmp/redis_data.txt\n```\n\n- 相关链接\n  - [docker数据导出](../../../docker/app/devs/data/redis/doc.md#数据导出)\n","source":"_posts/middleware/data/redis/redis.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: Redis相关记录\nparent: Redis\nhas_children: false\npermalink: \"/middleware/data/redis/redis/\"\ngrand_parent: Data\n---\n\n# Redis相关记录\n\n## 导出Redis中的数据\n\n```shell\n# 连接redis\nredis-cli -h 127.0.0.1 -p 6379 -a foobared\n# 导出key数据到文件\nkeys \"*\" | xargs redis-cli get > /tmp/redis_data.txt\n# 导出指定key数据到文件中\nredis-cli get key > /tmp/redis_data.txt\n# 使用DUMP命令来导出指定key的数据\nredis-cli dump key > /tmp/redis_data.txt\n```\n\n- 相关链接\n  - [docker数据导出](../../../docker/app/devs/data/redis/doc.md#数据导出)\n","slug":"middleware/data/redis/redis","published":1,"date":"2025-02-23T07:43:31.742Z","updated":"2025-02-23T07:43:31.742Z","__permalink":"/middleware/data/redis/redis/","comments":1,"photos":[],"_id":"cm7k5rwar0059mswsfarmg8z9","content":"<h1 id=\"Redis相关记录\"><a href=\"#Redis相关记录\" class=\"headerlink\" title=\"Redis相关记录\"></a>Redis相关记录</h1><h2 id=\"导出Redis中的数据\"><a href=\"#导出Redis中的数据\" class=\"headerlink\" title=\"导出Redis中的数据\"></a>导出Redis中的数据</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">连接redis</span></span><br><span class=\"line\">redis-cli -h 127.0.0.1 -p 6379 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出key数据到文件</span></span><br><span class=\"line\">keys &quot;*&quot; | xargs redis-cli get &gt; /tmp/redis_data.txt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出指定key数据到文件中</span></span><br><span class=\"line\">redis-cli get key &gt; /tmp/redis_data.txt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用DUMP命令来导出指定key的数据</span></span><br><span class=\"line\">redis-cli dump key &gt; /tmp/redis_data.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>相关链接<ul>\n<li><a href=\"../../../docker/app/devs/data/redis/doc.md#%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA\">docker数据导出</a></li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Redis相关记录\"><a href=\"#Redis相关记录\" class=\"headerlink\" title=\"Redis相关记录\"></a>Redis相关记录</h1><h2 id=\"导出Redis中的数据\"><a href=\"#导出Redis中的数据\" class=\"headerlink\" title=\"导出Redis中的数据\"></a>导出Redis中的数据</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">连接redis</span></span><br><span class=\"line\">redis-cli -h 127.0.0.1 -p 6379 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出key数据到文件</span></span><br><span class=\"line\">keys &quot;*&quot; | xargs redis-cli get &gt; /tmp/redis_data.txt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出指定key数据到文件中</span></span><br><span class=\"line\">redis-cli get key &gt; /tmp/redis_data.txt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用DUMP命令来导出指定key的数据</span></span><br><span class=\"line\">redis-cli dump key &gt; /tmp/redis_data.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>相关链接<ul>\n<li><a href=\"../../../docker/app/devs/data/redis/doc.md#%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA\">docker数据导出</a></li>\n</ul>\n</li>\n</ul>\n"},{"layout":"default","title":"Clickhouse","nav_order":3,"has_children":true,"parent":"Clickhouse","_content":"\n# Clickhouse\n","source":"_posts/middleware/data/clickhouse/index.md","raw":"---\nlayout: default\ntitle: Clickhouse\nnav_order: 3\nhas_children: true\nparent: Clickhouse\npermalink: \"/middleware/data/clickhouse/\"\n---\n\n# Clickhouse\n","slug":"middleware/data/clickhouse/index","published":1,"date":"2025-02-23T07:43:31.740Z","updated":"2025-02-23T07:43:31.740Z","__permalink":"/middleware/data/clickhouse/","comments":1,"photos":[],"_id":"cm7k5rwas005amsws66va7mgo","content":"<h1 id=\"Clickhouse\"><a href=\"#Clickhouse\" class=\"headerlink\" title=\"Clickhouse\"></a>Clickhouse</h1>","excerpt":"","more":"<h1 id=\"Clickhouse\"><a href=\"#Clickhouse\" class=\"headerlink\" title=\"Clickhouse\"></a>Clickhouse</h1>"},{"_content":"# headscale使用记录\n\n[参考文章](https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#headscale-%E6%98%AF%E4%BB%80%E4%B9%88)\n\n## 安装\n\n[docker版](https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md)\n\n```bash\n# 安装\ncd ./headscale\n\ndocker run \\\n  --name headscale \\\n  --detach \\\n  --volume $(pwd)/config:/etc/headscale/ \\\n  --publish 127.0.0.1:8080:8080 \\\n  --publish 127.0.0.1:9090:9090 \\\n  headscale/headscale:<VERSION> \\\n  serve\n\n# 或者使用docker-compose\ndocker-compose up -d\n\n# 验证\ncurl http://127.0.0.1:9999/metrics\n\n# 创建apiKey\ndocker exec -it headscale headscale apikey create\n# 将 Headscale 公网域名和 API Key 填入 Headscale-Admin 的设置页面(http://localhost:880/web/settings.html)，同时取消勾选 Legacy API，然后点击「Save」：\n# 接入成功后，点击左边侧栏的「Users」，然后点击「Create」开始创建用户：\n\n# 安装客户端\n## Linux\ncurl -fsSL https://tailscale.com/install.sh | sh\n\n# Tailscale 接入 Headscale：\n# 将 <HEADSCALE_PUB_ENDPOINT> 换成上文提到的 Sealos 中的 Headscale 公网域名\n# tailscale up --accept-dns=false --accept-routes --login-server=https://3gmjh9nm-880.asse.devtunnels.ms --hostname=fa --accept-risk=true\ntailscale up --accept-dns=false --accept-routes --login-server=http://localhost:880 --hostname=fa\n# 会打印出注册key(mkey:xxx), 需要到Headscale-Admin的[Machines]页面[Add Device][Register Machine Key]，选择上面创建的用户并将注册key填入, 点击[Register]后, 客户端控制台会打印Success.\n# PS: 如果提示字符不够就用空格替代补足(这应该是个bug)\n\n# 回到 Tailscale 客户端所在的 Linux 主机，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则。路由表可通过以下命令查看：\nip route show table 52\n# 查看 iptables 规则：\niptables -S\niptables -S -t nat\n\n## macOS\n# 安装完 GUI 版应用后还需要做一些骚操作，才能让 Tailscale 使用 Headscale 作为控制服务器。当然，Headscale 已经给我们提供了详细的操作步骤，你只需要在浏览器中打开 URL：https://<HEADSCALE_PUB_ENDPOINT>/apple，便会出现如下的界面：\n\n# 长按「option」键，然后点击顶部菜单栏的 Tailscale 图标，然后将鼠标指针悬停在「Debug」菜单上。\n# 在「Custom Login Server」下方选择「Add Account…」。\n# 在打开的弹窗中填入 Headscale 的公网域名，然后点击「Add Account」。\n# 然后立马就会跳转到浏览器并打开一个页面\n# 接下来与之前 Linux 客户端相同，回到 Headscale 所在的机器执行浏览器中的命令即可，注册成功：\n\n# 回到 Headscale 所在主机，查看注册的节点：\nheadscale nodes list\n\n# 回到 macOS，测试是否能 ping 通对端节点：\nping -c 2 100.64.0.1\n# 在[sitting]中安装[CLl integration]后, 也可以使用 Tailscale CLI 来测试：\ntailscale ping 100.64.0.1\n\n```\n\n### 通过 Pre-Authkeys 接入\n\n```bash\n\n# 前面的接入方法都需要服务端同意，步骤比较烦琐，其实还有更简单的方法，可以直接接入，不需要服务端同意。\n# 首先在服务端生成 pre-authkey 的 token，有效期可以设置为 24 小时：\nheadscale preauthkeys create -e 24h --user default\n# 查看已经生成的 key：\nheadscale --user default preauthkeys list\n# 当然你也可以在 Headscale-Admin 中生成。点击客户端想加入的 User：\n# 在弹出的界面中点击「PreAuth Keys」右侧的 Create，设置一个过期时间（比如 100 年~），如果想重复利用这个 Key，可以勾选 Reusable，最后点击 ✅：\n# 创建成功后，点击红框区域便可复制该 PreAuth Key：\n# 现在新节点就可以无需服务端同意直接接入了：\ntailscale up --login-server=http://<HEADSCALE_PUB_ENDPOINT>:8080 --accept-routes=true --accept-dns=false --authkey $KEY\n\n```\n\n## 打通局域网\n\n[参考文档](https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#%E6%89%93%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91)\n\n```bash\n# 配置方法很简单，首先需要设置 IPv4 与 IPv6 路由转发：\necho 'net.ipv4.ip_forward = 1' | tee /etc/sysctl.d/ipforwarding.conf\necho 'net.ipv6.conf.all.forwarding = 1' | tee -a /etc/sysctl.d/ipforwarding.conf\nsysctl -p /etc/sysctl.d/ipforwarding.conf\n\n# 客户端修改注册节点的命令，在原来命令的基础上加上参数 --advertise-routes=192.168.100.0/24，告诉 Headscale 服务器“我这个节点可以转发这些地址的路由”。\ntailscale up --login-server=http://<HEADSCALE_PUB_ENDPOINT>:8080 --accept-routes=true --accept-dns=false --advertise-routes=192.168.100.0/24 --reset\n\n# 在 Headscale 端查看路由，可以看到相关路由是关闭的。\nheadscale nodes list|grep openwrt\nheadscale routes list -i 6\n# 开启路由：\nheadscale routes enable -i 6 -r \"192.168.100.0/24\"\n# 如果有多条路由需要用 , 隔开：\nheadscale routes enable -i 6 -r \"192.168.100.0/24,xxxx\"\n# 也可以通过参数 -a 开启所有路由：\nheadscale routes enable -i 6 -a\n# 其他节点查看路由结果：\nip route show table 52|grep \"192.168.100.0/24\"\n# 其他节点启动时需要增加 --accept-routes=true 选项来声明 “我接受外部其他节点发布的路由”。\n\n# 现在你在任何一个 Tailscale 客户端所在的节点都可以 ping 通家庭内网的机器了，你在公司或者星巴克也可以像在家里一样用同样的 IP 随意访问家中的任何一个设备，就问你香不香？\n```\n","source":"_posts/network/headscale/local/doc.md","raw":"# headscale使用记录\n\n[参考文章](https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#headscale-%E6%98%AF%E4%BB%80%E4%B9%88)\n\n## 安装\n\n[docker版](https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md)\n\n```bash\n# 安装\ncd ./headscale\n\ndocker run \\\n  --name headscale \\\n  --detach \\\n  --volume $(pwd)/config:/etc/headscale/ \\\n  --publish 127.0.0.1:8080:8080 \\\n  --publish 127.0.0.1:9090:9090 \\\n  headscale/headscale:<VERSION> \\\n  serve\n\n# 或者使用docker-compose\ndocker-compose up -d\n\n# 验证\ncurl http://127.0.0.1:9999/metrics\n\n# 创建apiKey\ndocker exec -it headscale headscale apikey create\n# 将 Headscale 公网域名和 API Key 填入 Headscale-Admin 的设置页面(http://localhost:880/web/settings.html)，同时取消勾选 Legacy API，然后点击「Save」：\n# 接入成功后，点击左边侧栏的「Users」，然后点击「Create」开始创建用户：\n\n# 安装客户端\n## Linux\ncurl -fsSL https://tailscale.com/install.sh | sh\n\n# Tailscale 接入 Headscale：\n# 将 <HEADSCALE_PUB_ENDPOINT> 换成上文提到的 Sealos 中的 Headscale 公网域名\n# tailscale up --accept-dns=false --accept-routes --login-server=https://3gmjh9nm-880.asse.devtunnels.ms --hostname=fa --accept-risk=true\ntailscale up --accept-dns=false --accept-routes --login-server=http://localhost:880 --hostname=fa\n# 会打印出注册key(mkey:xxx), 需要到Headscale-Admin的[Machines]页面[Add Device][Register Machine Key]，选择上面创建的用户并将注册key填入, 点击[Register]后, 客户端控制台会打印Success.\n# PS: 如果提示字符不够就用空格替代补足(这应该是个bug)\n\n# 回到 Tailscale 客户端所在的 Linux 主机，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则。路由表可通过以下命令查看：\nip route show table 52\n# 查看 iptables 规则：\niptables -S\niptables -S -t nat\n\n## macOS\n# 安装完 GUI 版应用后还需要做一些骚操作，才能让 Tailscale 使用 Headscale 作为控制服务器。当然，Headscale 已经给我们提供了详细的操作步骤，你只需要在浏览器中打开 URL：https://<HEADSCALE_PUB_ENDPOINT>/apple，便会出现如下的界面：\n\n# 长按「option」键，然后点击顶部菜单栏的 Tailscale 图标，然后将鼠标指针悬停在「Debug」菜单上。\n# 在「Custom Login Server」下方选择「Add Account…」。\n# 在打开的弹窗中填入 Headscale 的公网域名，然后点击「Add Account」。\n# 然后立马就会跳转到浏览器并打开一个页面\n# 接下来与之前 Linux 客户端相同，回到 Headscale 所在的机器执行浏览器中的命令即可，注册成功：\n\n# 回到 Headscale 所在主机，查看注册的节点：\nheadscale nodes list\n\n# 回到 macOS，测试是否能 ping 通对端节点：\nping -c 2 100.64.0.1\n# 在[sitting]中安装[CLl integration]后, 也可以使用 Tailscale CLI 来测试：\ntailscale ping 100.64.0.1\n\n```\n\n### 通过 Pre-Authkeys 接入\n\n```bash\n\n# 前面的接入方法都需要服务端同意，步骤比较烦琐，其实还有更简单的方法，可以直接接入，不需要服务端同意。\n# 首先在服务端生成 pre-authkey 的 token，有效期可以设置为 24 小时：\nheadscale preauthkeys create -e 24h --user default\n# 查看已经生成的 key：\nheadscale --user default preauthkeys list\n# 当然你也可以在 Headscale-Admin 中生成。点击客户端想加入的 User：\n# 在弹出的界面中点击「PreAuth Keys」右侧的 Create，设置一个过期时间（比如 100 年~），如果想重复利用这个 Key，可以勾选 Reusable，最后点击 ✅：\n# 创建成功后，点击红框区域便可复制该 PreAuth Key：\n# 现在新节点就可以无需服务端同意直接接入了：\ntailscale up --login-server=http://<HEADSCALE_PUB_ENDPOINT>:8080 --accept-routes=true --accept-dns=false --authkey $KEY\n\n```\n\n## 打通局域网\n\n[参考文档](https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#%E6%89%93%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91)\n\n```bash\n# 配置方法很简单，首先需要设置 IPv4 与 IPv6 路由转发：\necho 'net.ipv4.ip_forward = 1' | tee /etc/sysctl.d/ipforwarding.conf\necho 'net.ipv6.conf.all.forwarding = 1' | tee -a /etc/sysctl.d/ipforwarding.conf\nsysctl -p /etc/sysctl.d/ipforwarding.conf\n\n# 客户端修改注册节点的命令，在原来命令的基础上加上参数 --advertise-routes=192.168.100.0/24，告诉 Headscale 服务器“我这个节点可以转发这些地址的路由”。\ntailscale up --login-server=http://<HEADSCALE_PUB_ENDPOINT>:8080 --accept-routes=true --accept-dns=false --advertise-routes=192.168.100.0/24 --reset\n\n# 在 Headscale 端查看路由，可以看到相关路由是关闭的。\nheadscale nodes list|grep openwrt\nheadscale routes list -i 6\n# 开启路由：\nheadscale routes enable -i 6 -r \"192.168.100.0/24\"\n# 如果有多条路由需要用 , 隔开：\nheadscale routes enable -i 6 -r \"192.168.100.0/24,xxxx\"\n# 也可以通过参数 -a 开启所有路由：\nheadscale routes enable -i 6 -a\n# 其他节点查看路由结果：\nip route show table 52|grep \"192.168.100.0/24\"\n# 其他节点启动时需要增加 --accept-routes=true 选项来声明 “我接受外部其他节点发布的路由”。\n\n# 现在你在任何一个 Tailscale 客户端所在的节点都可以 ping 通家庭内网的机器了，你在公司或者星巴克也可以像在家里一样用同样的 IP 随意访问家中的任何一个设备，就问你香不香？\n```\n","slug":"network/headscale/local/doc","published":1,"date":"2025-02-23T07:43:31.747Z","updated":"2025-02-23T07:43:31.747Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwas005dmswsecv4868o","content":"<h1 id=\"headscale使用记录\"><a href=\"#headscale使用记录\" class=\"headerlink\" title=\"headscale使用记录\"></a>headscale使用记录</h1><p><a href=\"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#headscale-%E6%98%AF%E4%BB%80%E4%B9%88\">参考文章</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md\">docker版</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ./headscale</span><br><span class=\"line\"></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name headscale \\</span><br><span class=\"line\">  --detach \\</span><br><span class=\"line\">  --volume $(<span class=\"built_in\">pwd</span>)/config:/etc/headscale/ \\</span><br><span class=\"line\">  --publish 127.0.0.1:8080:8080 \\</span><br><span class=\"line\">  --publish 127.0.0.1:9090:9090 \\</span><br><span class=\"line\">  headscale/headscale:&lt;VERSION&gt; \\</span><br><span class=\"line\">  serve</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者使用docker-compose</span></span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">curl http://127.0.0.1:9999/metrics</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建apiKey</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it headscale headscale apikey create</span><br><span class=\"line\"><span class=\"comment\"># 将 Headscale 公网域名和 API Key 填入 Headscale-Admin 的设置页面(http://localhost:880/web/settings.html)，同时取消勾选 Legacy API，然后点击「Save」：</span></span><br><span class=\"line\"><span class=\"comment\"># 接入成功后，点击左边侧栏的「Users」，然后点击「Create」开始创建用户：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装客户端</span></span><br><span class=\"line\"><span class=\"comment\">## Linux</span></span><br><span class=\"line\">curl -fsSL https://tailscale.com/install.sh | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tailscale 接入 Headscale：</span></span><br><span class=\"line\"><span class=\"comment\"># 将 &lt;HEADSCALE_PUB_ENDPOINT&gt; 换成上文提到的 Sealos 中的 Headscale 公网域名</span></span><br><span class=\"line\"><span class=\"comment\"># tailscale up --accept-dns=false --accept-routes --login-server=https://3gmjh9nm-880.asse.devtunnels.ms --hostname=fa --accept-risk=true</span></span><br><span class=\"line\">tailscale up --accept-dns=<span class=\"literal\">false</span> --accept-routes --login-server=http://localhost:880 --hostname=fa</span><br><span class=\"line\"><span class=\"comment\"># 会打印出注册key(mkey:xxx), 需要到Headscale-Admin的[Machines]页面[Add Device][Register Machine Key]，选择上面创建的用户并将注册key填入, 点击[Register]后, 客户端控制台会打印Success.</span></span><br><span class=\"line\"><span class=\"comment\"># PS: 如果提示字符不够就用空格替代补足(这应该是个bug)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 Tailscale 客户端所在的 Linux 主机，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则。路由表可通过以下命令查看：</span></span><br><span class=\"line\">ip route show table 52</span><br><span class=\"line\"><span class=\"comment\"># 查看 iptables 规则：</span></span><br><span class=\"line\">iptables -S</span><br><span class=\"line\">iptables -S -t nat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## macOS</span></span><br><span class=\"line\"><span class=\"comment\"># 安装完 GUI 版应用后还需要做一些骚操作，才能让 Tailscale 使用 Headscale 作为控制服务器。当然，Headscale 已经给我们提供了详细的操作步骤，你只需要在浏览器中打开 URL：https://&lt;HEADSCALE_PUB_ENDPOINT&gt;/apple，便会出现如下的界面：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 长按「option」键，然后点击顶部菜单栏的 Tailscale 图标，然后将鼠标指针悬停在「Debug」菜单上。</span></span><br><span class=\"line\"><span class=\"comment\"># 在「Custom Login Server」下方选择「Add Account…」。</span></span><br><span class=\"line\"><span class=\"comment\"># 在打开的弹窗中填入 Headscale 的公网域名，然后点击「Add Account」。</span></span><br><span class=\"line\"><span class=\"comment\"># 然后立马就会跳转到浏览器并打开一个页面</span></span><br><span class=\"line\"><span class=\"comment\"># 接下来与之前 Linux 客户端相同，回到 Headscale 所在的机器执行浏览器中的命令即可，注册成功：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 Headscale 所在主机，查看注册的节点：</span></span><br><span class=\"line\">headscale nodes list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 macOS，测试是否能 ping 通对端节点：</span></span><br><span class=\"line\">ping -c 2 100.64.0.1</span><br><span class=\"line\"><span class=\"comment\"># 在[sitting]中安装[CLl integration]后, 也可以使用 Tailscale CLI 来测试：</span></span><br><span class=\"line\">tailscale ping 100.64.0.1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-Pre-Authkeys-接入\"><a href=\"#通过-Pre-Authkeys-接入\" class=\"headerlink\" title=\"通过 Pre-Authkeys 接入\"></a>通过 Pre-Authkeys 接入</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前面的接入方法都需要服务端同意，步骤比较烦琐，其实还有更简单的方法，可以直接接入，不需要服务端同意。</span></span><br><span class=\"line\"><span class=\"comment\"># 首先在服务端生成 pre-authkey 的 token，有效期可以设置为 24 小时：</span></span><br><span class=\"line\">headscale preauthkeys create -e 24h --user default</span><br><span class=\"line\"><span class=\"comment\"># 查看已经生成的 key：</span></span><br><span class=\"line\">headscale --user default preauthkeys list</span><br><span class=\"line\"><span class=\"comment\"># 当然你也可以在 Headscale-Admin 中生成。点击客户端想加入的 User：</span></span><br><span class=\"line\"><span class=\"comment\"># 在弹出的界面中点击「PreAuth Keys」右侧的 Create，设置一个过期时间（比如 100 年~），如果想重复利用这个 Key，可以勾选 Reusable，最后点击 ✅：</span></span><br><span class=\"line\"><span class=\"comment\"># 创建成功后，点击红框区域便可复制该 PreAuth Key：</span></span><br><span class=\"line\"><span class=\"comment\"># 现在新节点就可以无需服务端同意直接接入了：</span></span><br><span class=\"line\">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8080 --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span> --authkey <span class=\"variable\">$KEY</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打通局域网\"><a href=\"#打通局域网\" class=\"headerlink\" title=\"打通局域网\"></a>打通局域网</h2><p><a href=\"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#%E6%89%93%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91\">参考文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置方法很简单，首先需要设置 IPv4 与 IPv6 路由转发：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;net.ipv4.ip_forward = 1&#x27;</span> | <span class=\"built_in\">tee</span> /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;net.ipv6.conf.all.forwarding = 1&#x27;</span> | <span class=\"built_in\">tee</span> -a /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\">sysctl -p /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端修改注册节点的命令，在原来命令的基础上加上参数 --advertise-routes=192.168.100.0/24，告诉 Headscale 服务器“我这个节点可以转发这些地址的路由”。</span></span><br><span class=\"line\">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8080 --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span> --advertise-routes=192.168.100.0/24 --reset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Headscale 端查看路由，可以看到相关路由是关闭的。</span></span><br><span class=\"line\">headscale nodes list|grep openwrt</span><br><span class=\"line\">headscale routes list -i 6</span><br><span class=\"line\"><span class=\"comment\"># 开启路由：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -r <span class=\"string\">&quot;192.168.100.0/24&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果有多条路由需要用 , 隔开：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -r <span class=\"string\">&quot;192.168.100.0/24,xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过参数 -a 开启所有路由：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -a</span><br><span class=\"line\"><span class=\"comment\"># 其他节点查看路由结果：</span></span><br><span class=\"line\">ip route show table 52|grep <span class=\"string\">&quot;192.168.100.0/24&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 其他节点启动时需要增加 --accept-routes=true 选项来声明 “我接受外部其他节点发布的路由”。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 现在你在任何一个 Tailscale 客户端所在的节点都可以 ping 通家庭内网的机器了，你在公司或者星巴克也可以像在家里一样用同样的 IP 随意访问家中的任何一个设备，就问你香不香？</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"headscale使用记录\"><a href=\"#headscale使用记录\" class=\"headerlink\" title=\"headscale使用记录\"></a>headscale使用记录</h1><p><a href=\"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#headscale-%E6%98%AF%E4%BB%80%E4%B9%88\">参考文章</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://github.com/juanfont/headscale/blob/main/docs/setup/install/container.md\">docker版</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ./headscale</span><br><span class=\"line\"></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name headscale \\</span><br><span class=\"line\">  --detach \\</span><br><span class=\"line\">  --volume $(<span class=\"built_in\">pwd</span>)/config:/etc/headscale/ \\</span><br><span class=\"line\">  --publish 127.0.0.1:8080:8080 \\</span><br><span class=\"line\">  --publish 127.0.0.1:9090:9090 \\</span><br><span class=\"line\">  headscale/headscale:&lt;VERSION&gt; \\</span><br><span class=\"line\">  serve</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者使用docker-compose</span></span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">curl http://127.0.0.1:9999/metrics</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建apiKey</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it headscale headscale apikey create</span><br><span class=\"line\"><span class=\"comment\"># 将 Headscale 公网域名和 API Key 填入 Headscale-Admin 的设置页面(http://localhost:880/web/settings.html)，同时取消勾选 Legacy API，然后点击「Save」：</span></span><br><span class=\"line\"><span class=\"comment\"># 接入成功后，点击左边侧栏的「Users」，然后点击「Create」开始创建用户：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装客户端</span></span><br><span class=\"line\"><span class=\"comment\">## Linux</span></span><br><span class=\"line\">curl -fsSL https://tailscale.com/install.sh | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tailscale 接入 Headscale：</span></span><br><span class=\"line\"><span class=\"comment\"># 将 &lt;HEADSCALE_PUB_ENDPOINT&gt; 换成上文提到的 Sealos 中的 Headscale 公网域名</span></span><br><span class=\"line\"><span class=\"comment\"># tailscale up --accept-dns=false --accept-routes --login-server=https://3gmjh9nm-880.asse.devtunnels.ms --hostname=fa --accept-risk=true</span></span><br><span class=\"line\">tailscale up --accept-dns=<span class=\"literal\">false</span> --accept-routes --login-server=http://localhost:880 --hostname=fa</span><br><span class=\"line\"><span class=\"comment\"># 会打印出注册key(mkey:xxx), 需要到Headscale-Admin的[Machines]页面[Add Device][Register Machine Key]，选择上面创建的用户并将注册key填入, 点击[Register]后, 客户端控制台会打印Success.</span></span><br><span class=\"line\"><span class=\"comment\"># PS: 如果提示字符不够就用空格替代补足(这应该是个bug)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 Tailscale 客户端所在的 Linux 主机，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则。路由表可通过以下命令查看：</span></span><br><span class=\"line\">ip route show table 52</span><br><span class=\"line\"><span class=\"comment\"># 查看 iptables 规则：</span></span><br><span class=\"line\">iptables -S</span><br><span class=\"line\">iptables -S -t nat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## macOS</span></span><br><span class=\"line\"><span class=\"comment\"># 安装完 GUI 版应用后还需要做一些骚操作，才能让 Tailscale 使用 Headscale 作为控制服务器。当然，Headscale 已经给我们提供了详细的操作步骤，你只需要在浏览器中打开 URL：https://&lt;HEADSCALE_PUB_ENDPOINT&gt;/apple，便会出现如下的界面：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 长按「option」键，然后点击顶部菜单栏的 Tailscale 图标，然后将鼠标指针悬停在「Debug」菜单上。</span></span><br><span class=\"line\"><span class=\"comment\"># 在「Custom Login Server」下方选择「Add Account…」。</span></span><br><span class=\"line\"><span class=\"comment\"># 在打开的弹窗中填入 Headscale 的公网域名，然后点击「Add Account」。</span></span><br><span class=\"line\"><span class=\"comment\"># 然后立马就会跳转到浏览器并打开一个页面</span></span><br><span class=\"line\"><span class=\"comment\"># 接下来与之前 Linux 客户端相同，回到 Headscale 所在的机器执行浏览器中的命令即可，注册成功：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 Headscale 所在主机，查看注册的节点：</span></span><br><span class=\"line\">headscale nodes list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回到 macOS，测试是否能 ping 通对端节点：</span></span><br><span class=\"line\">ping -c 2 100.64.0.1</span><br><span class=\"line\"><span class=\"comment\"># 在[sitting]中安装[CLl integration]后, 也可以使用 Tailscale CLI 来测试：</span></span><br><span class=\"line\">tailscale ping 100.64.0.1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-Pre-Authkeys-接入\"><a href=\"#通过-Pre-Authkeys-接入\" class=\"headerlink\" title=\"通过 Pre-Authkeys 接入\"></a>通过 Pre-Authkeys 接入</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前面的接入方法都需要服务端同意，步骤比较烦琐，其实还有更简单的方法，可以直接接入，不需要服务端同意。</span></span><br><span class=\"line\"><span class=\"comment\"># 首先在服务端生成 pre-authkey 的 token，有效期可以设置为 24 小时：</span></span><br><span class=\"line\">headscale preauthkeys create -e 24h --user default</span><br><span class=\"line\"><span class=\"comment\"># 查看已经生成的 key：</span></span><br><span class=\"line\">headscale --user default preauthkeys list</span><br><span class=\"line\"><span class=\"comment\"># 当然你也可以在 Headscale-Admin 中生成。点击客户端想加入的 User：</span></span><br><span class=\"line\"><span class=\"comment\"># 在弹出的界面中点击「PreAuth Keys」右侧的 Create，设置一个过期时间（比如 100 年~），如果想重复利用这个 Key，可以勾选 Reusable，最后点击 ✅：</span></span><br><span class=\"line\"><span class=\"comment\"># 创建成功后，点击红框区域便可复制该 PreAuth Key：</span></span><br><span class=\"line\"><span class=\"comment\"># 现在新节点就可以无需服务端同意直接接入了：</span></span><br><span class=\"line\">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8080 --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span> --authkey <span class=\"variable\">$KEY</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打通局域网\"><a href=\"#打通局域网\" class=\"headerlink\" title=\"打通局域网\"></a>打通局域网</h2><p><a href=\"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#%E6%89%93%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91\">参考文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置方法很简单，首先需要设置 IPv4 与 IPv6 路由转发：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;net.ipv4.ip_forward = 1&#x27;</span> | <span class=\"built_in\">tee</span> /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;net.ipv6.conf.all.forwarding = 1&#x27;</span> | <span class=\"built_in\">tee</span> -a /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\">sysctl -p /etc/sysctl.d/ipforwarding.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端修改注册节点的命令，在原来命令的基础上加上参数 --advertise-routes=192.168.100.0/24，告诉 Headscale 服务器“我这个节点可以转发这些地址的路由”。</span></span><br><span class=\"line\">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8080 --accept-routes=<span class=\"literal\">true</span> --accept-dns=<span class=\"literal\">false</span> --advertise-routes=192.168.100.0/24 --reset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Headscale 端查看路由，可以看到相关路由是关闭的。</span></span><br><span class=\"line\">headscale nodes list|grep openwrt</span><br><span class=\"line\">headscale routes list -i 6</span><br><span class=\"line\"><span class=\"comment\"># 开启路由：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -r <span class=\"string\">&quot;192.168.100.0/24&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果有多条路由需要用 , 隔开：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -r <span class=\"string\">&quot;192.168.100.0/24,xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过参数 -a 开启所有路由：</span></span><br><span class=\"line\">headscale routes <span class=\"built_in\">enable</span> -i 6 -a</span><br><span class=\"line\"><span class=\"comment\"># 其他节点查看路由结果：</span></span><br><span class=\"line\">ip route show table 52|grep <span class=\"string\">&quot;192.168.100.0/24&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 其他节点启动时需要增加 --accept-routes=true 选项来声明 “我接受外部其他节点发布的路由”。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 现在你在任何一个 Tailscale 客户端所在的节点都可以 ping 通家庭内网的机器了，你在公司或者星巴克也可以像在家里一样用同样的 IP 随意访问家中的任何一个设备，就问你香不香？</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Redis","nav_order":3,"has_children":true,"parent":"Redis","_content":"\n# Redis\n","source":"_posts/middleware/data/redis/index.md","raw":"---\nlayout: default\ntitle: Redis\nnav_order: 3\nhas_children: true\nparent: Redis\npermalink: \"/middleware/data/redis/\"\n---\n\n# Redis\n","slug":"middleware/data/redis/index","published":1,"date":"2025-02-23T07:43:31.742Z","updated":"2025-02-23T07:43:31.742Z","__permalink":"/middleware/data/redis/","comments":1,"photos":[],"_id":"cm7k5rwas005emswsgxije8wu","content":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1>","excerpt":"","more":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1>"},{"_content":"\n\n---\n\n如何用 5 步实现本地 HTTPS 开发？mkcert + OpenResty 保姆级教程\n\n引言：告别「不安全」警告  \n在本地开发中，你是否遇到过这些困扰？浏览器频繁提示「不安全连接」，微信小程序强制要求 HTTPS 接口，甚至某些前端 API 只能在加密环境下调用。  \n本文将手把手教你用 mkcert 生成可信证书，结合 OpenResty 搭建本地 HTTPS 服务，5 步解决开发环境的安全焦虑！\n\n---\n\n一、工具准备：1 分钟搭建基础设施\n1. 安装 mkcert  \n   - Windows 用户可直接下载  ，Mac/Linux 用户通过包管理器安装：  \n     ```bash\n     brew install mkcert  # Mac\n     sudo apt install mkcert  # Ubuntu\n     ```\n   - 初始化本地 CA 根证书：  \n     ```bash\n     mkcert -install\n     ```\n     *（系统会自动将 CA 证书加入信任列表，从此告别红色警告）* \n\n2. 安装 OpenResty  \n   访问下载安装包，或通过命令安装：  \n   ```bash\n   # Ubuntu 示例\n   wget -q https://openresty.org/package/pubkey.gpg\n   sudo apt-key add pubkey.gpg\n   sudo apt-get install openresty\n   ```\n\n---\n\n二、证书生成：2 行命令搞定 HTTPS 密钥\n1. 生成域名证书  \n   在项目目录执行（支持多域名/IP）：  \n   ```bash\n   mkcert localhost 127.0.0.1 ::1 yourdomain.com\n   ```\n   *生成 `localhost+3.pem`（证书）和 `localhost+3-key.pem`（私钥）* \n\n2. 证书存放建议  \n   创建专属目录管理证书，例如：  \n   ```\n   /usr/local/openresty/nginx/conf/ssl/\n   ├── localhost+3.pem\n   └── localhost+3-key.pem\n   ```\n\n---\n\n三、OpenResty 配置：Nginx 的 HTTPS 魔法\n编辑 `nginx.conf`，添加 HTTPS 服务块：  \n```nginx\nserver {\n    listen 443 ssl;\n    server_name localhost;\n\n    ssl_certificate     /usr/local/openresty/nginx/conf/ssl/localhost+3.pem;\n    ssl_certificate_key /usr/local/openresty/nginx/conf/ssl/localhost+3-key.pem;\n\n    ssl_protocols       TLSv1.2 TLSv1.3;\n    ssl_ciphers         HIGH:!aNULL:!MD5;\n\n    location / {\n        proxy_pass http://127.0.0.1:8080; # 转发到本地服务\n        proxy_set_header Host $host;\n    }\n}\n\nHTTP 强制跳转 HTTPS（可选）\nserver {\n    listen 80;\n    server_name localhost;\n    return 301 https://$host$request_uri;\n}\n```\n-关键配置解读：*  \n- `ssl_certificate` 指向 mkcert 生成的证书  \n- `proxy_pass` 将 HTTPS 请求转发到本地 HTTP 服务 \n\n---\n\n四、服务验证：3 种方式测试 HTTPS\n1. 浏览器访问  \n   打开 `https://localhost`，地址栏显示 🔒安全 标识即成功（不再有警告！）\n\n2. 命令行校验  \n   ```bash\n   curl -vIk https://localhost\n   # 查看输出中的 SSL 握手信息\n   ```\n\n3. 证书详情检查  \n   Chrome 浏览器 → 点击锁图标 → 查看证书 → 颁发者显示 「mkcert」 即正确 \n\n---\n\n五、进阶技巧：开发效率翻倍的秘诀\n1. 多域名/端口支持  \n   生成证书时追加域名：  \n   ```bash\n   mkcert \"*.test.com\" app.test.com 192.168.1.100\n   ```\n   Nginx 配置中通过 `server_name` 区分不同服务 \n\n2. 局域网 HTTPS 测试  \n   生成含内网 IP 的证书：  \n   ```bash\n   mkcert 192.168.1.100\n   ```\n   手机扫码安装 CA 证书后，即可用 HTTPS 访问开发机 \n\n3. 证书自动更新（高阶）  \n   结合 `lua-resty-auto-ssl` 实现证书自动签发：  \n   ```lua\n   lua_shared_dict auto_ssl 1m;\n   init_by_lua_block {\n       auto_ssl = require \"resty.auto-ssl\"\n       auto_ssl.setup({ storage_dir = \"/path/to/storage\" })\n   }\n   ```\n   *适合需要动态管理数百个域名的场景* \n\n---\n\n常见问题排查表\n| 现象                | 解决方案                     |\n|---------------------|----------------------------|\n| 浏览器提示证书无效   | 检查是否执行 `mkcert -install` |\n| Nginx 启动报错       | 确认证书路径权限为 755       |\n| 无法访问 443 端口    | 关闭防火墙或放行端口         |\n\n---\n\n结语：让本地开发更专业  \n通过 mkcert + OpenResty 的组合，我们不仅解决了 HTTPS 的配置难题，更为团队协作、接口调试提供了标准化环境。现在，你可以自信地说：“我的本地服务，和线上一样安全！”\n\n-本文部分方案参考自，更多技术细节可访问原文链接。*  \n👉 转发给正在为 HTTPS 头疼的伙伴，一起告别「不安全」！ ","source":"_posts/network/mkcert_freemyip_nginx/test/doc.md","raw":"\n\n---\n\n如何用 5 步实现本地 HTTPS 开发？mkcert + OpenResty 保姆级教程\n\n引言：告别「不安全」警告  \n在本地开发中，你是否遇到过这些困扰？浏览器频繁提示「不安全连接」，微信小程序强制要求 HTTPS 接口，甚至某些前端 API 只能在加密环境下调用。  \n本文将手把手教你用 mkcert 生成可信证书，结合 OpenResty 搭建本地 HTTPS 服务，5 步解决开发环境的安全焦虑！\n\n---\n\n一、工具准备：1 分钟搭建基础设施\n1. 安装 mkcert  \n   - Windows 用户可直接下载  ，Mac/Linux 用户通过包管理器安装：  \n     ```bash\n     brew install mkcert  # Mac\n     sudo apt install mkcert  # Ubuntu\n     ```\n   - 初始化本地 CA 根证书：  \n     ```bash\n     mkcert -install\n     ```\n     *（系统会自动将 CA 证书加入信任列表，从此告别红色警告）* \n\n2. 安装 OpenResty  \n   访问下载安装包，或通过命令安装：  \n   ```bash\n   # Ubuntu 示例\n   wget -q https://openresty.org/package/pubkey.gpg\n   sudo apt-key add pubkey.gpg\n   sudo apt-get install openresty\n   ```\n\n---\n\n二、证书生成：2 行命令搞定 HTTPS 密钥\n1. 生成域名证书  \n   在项目目录执行（支持多域名/IP）：  \n   ```bash\n   mkcert localhost 127.0.0.1 ::1 yourdomain.com\n   ```\n   *生成 `localhost+3.pem`（证书）和 `localhost+3-key.pem`（私钥）* \n\n2. 证书存放建议  \n   创建专属目录管理证书，例如：  \n   ```\n   /usr/local/openresty/nginx/conf/ssl/\n   ├── localhost+3.pem\n   └── localhost+3-key.pem\n   ```\n\n---\n\n三、OpenResty 配置：Nginx 的 HTTPS 魔法\n编辑 `nginx.conf`，添加 HTTPS 服务块：  \n```nginx\nserver {\n    listen 443 ssl;\n    server_name localhost;\n\n    ssl_certificate     /usr/local/openresty/nginx/conf/ssl/localhost+3.pem;\n    ssl_certificate_key /usr/local/openresty/nginx/conf/ssl/localhost+3-key.pem;\n\n    ssl_protocols       TLSv1.2 TLSv1.3;\n    ssl_ciphers         HIGH:!aNULL:!MD5;\n\n    location / {\n        proxy_pass http://127.0.0.1:8080; # 转发到本地服务\n        proxy_set_header Host $host;\n    }\n}\n\nHTTP 强制跳转 HTTPS（可选）\nserver {\n    listen 80;\n    server_name localhost;\n    return 301 https://$host$request_uri;\n}\n```\n-关键配置解读：*  \n- `ssl_certificate` 指向 mkcert 生成的证书  \n- `proxy_pass` 将 HTTPS 请求转发到本地 HTTP 服务 \n\n---\n\n四、服务验证：3 种方式测试 HTTPS\n1. 浏览器访问  \n   打开 `https://localhost`，地址栏显示 🔒安全 标识即成功（不再有警告！）\n\n2. 命令行校验  \n   ```bash\n   curl -vIk https://localhost\n   # 查看输出中的 SSL 握手信息\n   ```\n\n3. 证书详情检查  \n   Chrome 浏览器 → 点击锁图标 → 查看证书 → 颁发者显示 「mkcert」 即正确 \n\n---\n\n五、进阶技巧：开发效率翻倍的秘诀\n1. 多域名/端口支持  \n   生成证书时追加域名：  \n   ```bash\n   mkcert \"*.test.com\" app.test.com 192.168.1.100\n   ```\n   Nginx 配置中通过 `server_name` 区分不同服务 \n\n2. 局域网 HTTPS 测试  \n   生成含内网 IP 的证书：  \n   ```bash\n   mkcert 192.168.1.100\n   ```\n   手机扫码安装 CA 证书后，即可用 HTTPS 访问开发机 \n\n3. 证书自动更新（高阶）  \n   结合 `lua-resty-auto-ssl` 实现证书自动签发：  \n   ```lua\n   lua_shared_dict auto_ssl 1m;\n   init_by_lua_block {\n       auto_ssl = require \"resty.auto-ssl\"\n       auto_ssl.setup({ storage_dir = \"/path/to/storage\" })\n   }\n   ```\n   *适合需要动态管理数百个域名的场景* \n\n---\n\n常见问题排查表\n| 现象                | 解决方案                     |\n|---------------------|----------------------------|\n| 浏览器提示证书无效   | 检查是否执行 `mkcert -install` |\n| Nginx 启动报错       | 确认证书路径权限为 755       |\n| 无法访问 443 端口    | 关闭防火墙或放行端口         |\n\n---\n\n结语：让本地开发更专业  \n通过 mkcert + OpenResty 的组合，我们不仅解决了 HTTPS 的配置难题，更为团队协作、接口调试提供了标准化环境。现在，你可以自信地说：“我的本地服务，和线上一样安全！”\n\n-本文部分方案参考自，更多技术细节可访问原文链接。*  \n👉 转发给正在为 HTTPS 头疼的伙伴，一起告别「不安全」！ ","slug":"network/mkcert_freemyip_nginx/test/doc","published":1,"date":"2025-02-23T07:43:31.744Z","updated":"2025-02-23T07:43:31.744Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwat005hmswsdzvf6m7m","content":"<hr>\n<p>如何用 5 步实现本地 HTTPS 开发？mkcert + OpenResty 保姆级教程</p>\n<p>引言：告别「不安全」警告<br>在本地开发中，你是否遇到过这些困扰？浏览器频繁提示「不安全连接」，微信小程序强制要求 HTTPS 接口，甚至某些前端 API 只能在加密环境下调用。<br>本文将手把手教你用 mkcert 生成可信证书，结合 OpenResty 搭建本地 HTTPS 服务，5 步解决开发环境的安全焦虑！</p>\n<hr>\n<p>一、工具准备：1 分钟搭建基础设施</p>\n<ol>\n<li><p>安装 mkcert  </p>\n<ul>\n<li>Windows 用户可直接下载  ，Mac&#x2F;Linux 用户通过包管理器安装：  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mkcert  <span class=\"comment\"># Mac</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install mkcert  <span class=\"comment\"># Ubuntu</span></span><br></pre></td></tr></table></figure></li>\n<li>初始化本地 CA 根证书：  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n<em>（系统会自动将 CA 证书加入信任列表，从此告别红色警告）</em></li>\n</ul>\n</li>\n<li><p>安装 OpenResty<br>访问下载安装包，或通过命令安装：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu 示例</span></span><br><span class=\"line\">wget -q https://openresty.org/package/pubkey.gpg</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-key add pubkey.gpg</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install openresty</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>二、证书生成：2 行命令搞定 HTTPS 密钥</p>\n<ol>\n<li><p>生成域名证书<br>在项目目录执行（支持多域名&#x2F;IP）：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert localhost 127.0.0.1 ::1 yourdomain.com</span><br></pre></td></tr></table></figure>\n<p><em>生成 <code>localhost+3.pem</code>（证书）和 <code>localhost+3-key.pem</code>（私钥）</em> </p>\n</li>\n<li><p>证书存放建议<br>创建专属目录管理证书，例如：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/openresty/nginx/conf/ssl/</span><br><span class=\"line\">├── localhost+3.pem</span><br><span class=\"line\">└── localhost+3-key.pem</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>三、OpenResty 配置：Nginx 的 HTTPS 魔法<br>编辑 <code>nginx.conf</code>，添加 HTTPS 服务块：  </p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span>     /usr/local/openresty/nginx/conf/ssl/localhost+<span class=\"number\">3</span>.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /usr/local/openresty/nginx/conf/ssl/localhost+<span class=\"number\">3</span>-key.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span>       TLSv1.<span class=\"number\">2</span> TLSv1.<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span>         HIGH:!aNULL:!MD5;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080; <span class=\"comment\"># 转发到本地服务</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">HTTP</span> 强制跳转 HTTPS（可选）</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>-关键配置解读：*  </p>\n<ul>\n<li><code>ssl_certificate</code> 指向 mkcert 生成的证书  </li>\n<li><code>proxy_pass</code> 将 HTTPS 请求转发到本地 HTTP 服务</li>\n</ul>\n<hr>\n<p>四、服务验证：3 种方式测试 HTTPS</p>\n<ol>\n<li><p>浏览器访问<br>打开 <code>https://localhost</code>，地址栏显示 🔒安全 标识即成功（不再有警告！）</p>\n</li>\n<li><p>命令行校验  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -vIk https://localhost</span><br><span class=\"line\"><span class=\"comment\"># 查看输出中的 SSL 握手信息</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>证书详情检查<br>Chrome 浏览器 → 点击锁图标 → 查看证书 → 颁发者显示 「mkcert」 即正确</p>\n</li>\n</ol>\n<hr>\n<p>五、进阶技巧：开发效率翻倍的秘诀</p>\n<ol>\n<li><p>多域名&#x2F;端口支持<br>生成证书时追加域名：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert <span class=\"string\">&quot;*.test.com&quot;</span> app.test.com 192.168.1.100</span><br></pre></td></tr></table></figure>\n<p>Nginx 配置中通过 <code>server_name</code> 区分不同服务 </p>\n</li>\n<li><p>局域网 HTTPS 测试<br>生成含内网 IP 的证书：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert 192.168.1.100</span><br></pre></td></tr></table></figure>\n<p>手机扫码安装 CA 证书后，即可用 HTTPS 访问开发机 </p>\n</li>\n<li><p>证书自动更新（高阶）<br>结合 <code>lua-resty-auto-ssl</code> 实现证书自动签发：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lua_shared_dict auto_ssl <span class=\"number\">1</span>m;</span><br><span class=\"line\">init_by_lua_block &#123;</span><br><span class=\"line\">    auto_ssl = <span class=\"built_in\">require</span> <span class=\"string\">&quot;resty.auto-ssl&quot;</span></span><br><span class=\"line\">    auto_ssl.setup(&#123; storage_dir = <span class=\"string\">&quot;/path/to/storage&quot;</span> &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>适合需要动态管理数百个域名的场景</em></p>\n</li>\n</ol>\n<hr>\n<p>常见问题排查表</p>\n<table>\n<thead>\n<tr>\n<th>现象</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>浏览器提示证书无效</td>\n<td>检查是否执行 <code>mkcert -install</code></td>\n</tr>\n<tr>\n<td>Nginx 启动报错</td>\n<td>确认证书路径权限为 755</td>\n</tr>\n<tr>\n<td>无法访问 443 端口</td>\n<td>关闭防火墙或放行端口</td>\n</tr>\n</tbody></table>\n<hr>\n<p>结语：让本地开发更专业<br>通过 mkcert + OpenResty 的组合，我们不仅解决了 HTTPS 的配置难题，更为团队协作、接口调试提供了标准化环境。现在，你可以自信地说：“我的本地服务，和线上一样安全！”</p>\n<p>-本文部分方案参考自，更多技术细节可访问原文链接。*<br>👉 转发给正在为 HTTPS 头疼的伙伴，一起告别「不安全」！ </p>\n","excerpt":"","more":"<hr>\n<p>如何用 5 步实现本地 HTTPS 开发？mkcert + OpenResty 保姆级教程</p>\n<p>引言：告别「不安全」警告<br>在本地开发中，你是否遇到过这些困扰？浏览器频繁提示「不安全连接」，微信小程序强制要求 HTTPS 接口，甚至某些前端 API 只能在加密环境下调用。<br>本文将手把手教你用 mkcert 生成可信证书，结合 OpenResty 搭建本地 HTTPS 服务，5 步解决开发环境的安全焦虑！</p>\n<hr>\n<p>一、工具准备：1 分钟搭建基础设施</p>\n<ol>\n<li><p>安装 mkcert  </p>\n<ul>\n<li>Windows 用户可直接下载  ，Mac&#x2F;Linux 用户通过包管理器安装：  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mkcert  <span class=\"comment\"># Mac</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install mkcert  <span class=\"comment\"># Ubuntu</span></span><br></pre></td></tr></table></figure></li>\n<li>初始化本地 CA 根证书：  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n<em>（系统会自动将 CA 证书加入信任列表，从此告别红色警告）</em></li>\n</ul>\n</li>\n<li><p>安装 OpenResty<br>访问下载安装包，或通过命令安装：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu 示例</span></span><br><span class=\"line\">wget -q https://openresty.org/package/pubkey.gpg</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-key add pubkey.gpg</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install openresty</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>二、证书生成：2 行命令搞定 HTTPS 密钥</p>\n<ol>\n<li><p>生成域名证书<br>在项目目录执行（支持多域名&#x2F;IP）：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert localhost 127.0.0.1 ::1 yourdomain.com</span><br></pre></td></tr></table></figure>\n<p><em>生成 <code>localhost+3.pem</code>（证书）和 <code>localhost+3-key.pem</code>（私钥）</em> </p>\n</li>\n<li><p>证书存放建议<br>创建专属目录管理证书，例如：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/openresty/nginx/conf/ssl/</span><br><span class=\"line\">├── localhost+3.pem</span><br><span class=\"line\">└── localhost+3-key.pem</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>三、OpenResty 配置：Nginx 的 HTTPS 魔法<br>编辑 <code>nginx.conf</code>，添加 HTTPS 服务块：  </p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span>     /usr/local/openresty/nginx/conf/ssl/localhost+<span class=\"number\">3</span>.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /usr/local/openresty/nginx/conf/ssl/localhost+<span class=\"number\">3</span>-key.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span>       TLSv1.<span class=\"number\">2</span> TLSv1.<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span>         HIGH:!aNULL:!MD5;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080; <span class=\"comment\"># 转发到本地服务</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">HTTP</span> 强制跳转 HTTPS（可选）</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>-关键配置解读：*  </p>\n<ul>\n<li><code>ssl_certificate</code> 指向 mkcert 生成的证书  </li>\n<li><code>proxy_pass</code> 将 HTTPS 请求转发到本地 HTTP 服务</li>\n</ul>\n<hr>\n<p>四、服务验证：3 种方式测试 HTTPS</p>\n<ol>\n<li><p>浏览器访问<br>打开 <code>https://localhost</code>，地址栏显示 🔒安全 标识即成功（不再有警告！）</p>\n</li>\n<li><p>命令行校验  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -vIk https://localhost</span><br><span class=\"line\"><span class=\"comment\"># 查看输出中的 SSL 握手信息</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>证书详情检查<br>Chrome 浏览器 → 点击锁图标 → 查看证书 → 颁发者显示 「mkcert」 即正确</p>\n</li>\n</ol>\n<hr>\n<p>五、进阶技巧：开发效率翻倍的秘诀</p>\n<ol>\n<li><p>多域名&#x2F;端口支持<br>生成证书时追加域名：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert <span class=\"string\">&quot;*.test.com&quot;</span> app.test.com 192.168.1.100</span><br></pre></td></tr></table></figure>\n<p>Nginx 配置中通过 <code>server_name</code> 区分不同服务 </p>\n</li>\n<li><p>局域网 HTTPS 测试<br>生成含内网 IP 的证书：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert 192.168.1.100</span><br></pre></td></tr></table></figure>\n<p>手机扫码安装 CA 证书后，即可用 HTTPS 访问开发机 </p>\n</li>\n<li><p>证书自动更新（高阶）<br>结合 <code>lua-resty-auto-ssl</code> 实现证书自动签发：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lua_shared_dict auto_ssl <span class=\"number\">1</span>m;</span><br><span class=\"line\">init_by_lua_block &#123;</span><br><span class=\"line\">    auto_ssl = <span class=\"built_in\">require</span> <span class=\"string\">&quot;resty.auto-ssl&quot;</span></span><br><span class=\"line\">    auto_ssl.setup(&#123; storage_dir = <span class=\"string\">&quot;/path/to/storage&quot;</span> &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>适合需要动态管理数百个域名的场景</em></p>\n</li>\n</ol>\n<hr>\n<p>常见问题排查表</p>\n<table>\n<thead>\n<tr>\n<th>现象</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>浏览器提示证书无效</td>\n<td>检查是否执行 <code>mkcert -install</code></td>\n</tr>\n<tr>\n<td>Nginx 启动报错</td>\n<td>确认证书路径权限为 755</td>\n</tr>\n<tr>\n<td>无法访问 443 端口</td>\n<td>关闭防火墙或放行端口</td>\n</tr>\n</tbody></table>\n<hr>\n<p>结语：让本地开发更专业<br>通过 mkcert + OpenResty 的组合，我们不仅解决了 HTTPS 的配置难题，更为团队协作、接口调试提供了标准化环境。现在，你可以自信地说：“我的本地服务，和线上一样安全！”</p>\n<p>-本文部分方案参考自，更多技术细节可访问原文链接。*<br>👉 转发给正在为 HTTPS 头疼的伙伴，一起告别「不安全」！ </p>\n"},{"layout":"default","title":"Problems","nav_order":3,"has_children":true,"parent":"Problems","_content":"\n# Problems\n","source":"_posts/os/linux/problems/index.md","raw":"---\nlayout: default\ntitle: Problems\nnav_order: 3\nhas_children: true\nparent: Problems\npermalink: \"/os/linux/problems/\"\n---\n\n# Problems\n","slug":"os/linux/problems/index","published":1,"date":"2025-02-23T07:43:31.754Z","updated":"2025-02-23T07:43:31.754Z","__permalink":"/os/linux/problems/","comments":1,"photos":[],"_id":"cm7k5rwat005imsws8qb9180s","content":"<h1 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h1>","excerpt":"","more":"<h1 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h1>"},{"layout":"default","title":"Linux问题记录","nav_order":13,"description":"问题记录","parent":"Problems","has_children":false,"grand_parent":"Linux","_content":"\n# 问题记录\n\n## yum\n\n报错内容:\n\n```text\nThis system is not registered with an entitlement server. You can use subscription-manager to register.\n```\n\n```bash\nvim /etc/yum/pluginconf.d/subscription-manager.conf\n# enabled=0\n```\n\n报错内容:\n\n```text\nhttp://mirrors.aliyun.com/centos/7/os/x86_64/repodata/repomd.xml: [Errno 12] Timeout on http://mirrors.aliyun.com/centos/7/os/x86_64/repodata/repomd.xml: (28, 'Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds')\n```\n\n[参考文章](https://juejin.cn/post/7161690775980507166)\n    阿里yum源出问题了\n\n[参考文章](https://cloud.tencent.com/document/product/213/52559#dab668ec-1b0e-4112-a147-5071fdb19a9e)\n    切换为使用腾讯yum源\n\n```bash\n# 切换使用腾讯的yum源\ncurl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.tencent.com/repo/centos7_base.repo\n```\n","source":"_posts/os/linux/problems/problems.md","raw":"---\nlayout: default\ntitle: Linux问题记录\nnav_order: 13\ndescription: 问题记录\nparent: Problems\nhas_children: false\npermalink: \"/os/linux/problems/problems/\"\ngrand_parent: Linux\n---\n\n# 问题记录\n\n## yum\n\n报错内容:\n\n```text\nThis system is not registered with an entitlement server. You can use subscription-manager to register.\n```\n\n```bash\nvim /etc/yum/pluginconf.d/subscription-manager.conf\n# enabled=0\n```\n\n报错内容:\n\n```text\nhttp://mirrors.aliyun.com/centos/7/os/x86_64/repodata/repomd.xml: [Errno 12] Timeout on http://mirrors.aliyun.com/centos/7/os/x86_64/repodata/repomd.xml: (28, 'Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds')\n```\n\n[参考文章](https://juejin.cn/post/7161690775980507166)\n    阿里yum源出问题了\n\n[参考文章](https://cloud.tencent.com/document/product/213/52559#dab668ec-1b0e-4112-a147-5071fdb19a9e)\n    切换为使用腾讯yum源\n\n```bash\n# 切换使用腾讯的yum源\ncurl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.tencent.com/repo/centos7_base.repo\n```\n","slug":"os/linux/problems/problems","published":1,"date":"2025-02-23T07:43:31.754Z","updated":"2025-02-23T07:43:31.754Z","__permalink":"/os/linux/problems/problems/","comments":1,"photos":[],"_id":"cm7k5rwat005lmswsd9n5bbpw","content":"<h1 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h1><h2 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h2><p>报错内容:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This system is not registered with an entitlement server. You can use subscription-manager to register.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum/pluginconf.d/subscription-manager.conf</span><br><span class=\"line\"><span class=\"comment\"># enabled=0</span></span><br></pre></td></tr></table></figure>\n\n<p>报错内容:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mirrors.aliyun.com/centos/7/os/x86_64/repodata/repomd.xml: [Errno 12] Timeout on http://mirrors.aliyun.com/centos/7/os/x86_64/repodata/repomd.xml: (28, &#x27;Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://juejin.cn/post/7161690775980507166\">参考文章</a><br>    阿里yum源出问题了</p>\n<p><a href=\"https://cloud.tencent.com/document/product/213/52559#dab668ec-1b0e-4112-a147-5071fdb19a9e\">参考文章</a><br>    切换为使用腾讯yum源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换使用腾讯的yum源</span></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.tencent.com/repo/centos7_base.repo</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h1><h2 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h2><p>报错内容:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This system is not registered with an entitlement server. You can use subscription-manager to register.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum/pluginconf.d/subscription-manager.conf</span><br><span class=\"line\"><span class=\"comment\"># enabled=0</span></span><br></pre></td></tr></table></figure>\n\n<p>报错内容:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mirrors.aliyun.com/centos/7/os/x86_64/repodata/repomd.xml: [Errno 12] Timeout on http://mirrors.aliyun.com/centos/7/os/x86_64/repodata/repomd.xml: (28, &#x27;Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://juejin.cn/post/7161690775980507166\">参考文章</a><br>    阿里yum源出问题了</p>\n<p><a href=\"https://cloud.tencent.com/document/product/213/52559#dab668ec-1b0e-4112-a147-5071fdb19a9e\">参考文章</a><br>    切换为使用腾讯yum源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换使用腾讯的yum源</span></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.tencent.com/repo/centos7_base.repo</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":13,"description":"进程","parent":"Process","has_children":false,"grand_parent":"Linux","_content":"\n# 进程\n\n## 没有足够的资源创建本地线程\n\n### java.lang.OutOfMemoryError: unable to create new native thread\n\n- 确认资源是否够\n\n```bash\n# 查看资源不够的应用是由哪个用户启动的(这里示例为www用户启动)\nsu www\n\n# 查看用户最大进程数(PS: 不同用户查看到的最大用户进程数不一样)\nulimit -a\n# max user processes              (-u) 4096\n\n# 当前用户占用的总线程数\ntop -H \n\n```\n\n- 修改用户最大进程数\n\n[参考文章](https://www.cnblogs.com/operationhome/p/11966041.html)\n\n```bash\n# 查看资源不够的应用是由哪个用户启动的(这里示例为www用户启动)\nsu www\n\n# centos7版本的配置\nvim /etc/security/limits.d/20-nproc.conf\n# 写入以下内容\n# www        soft    nproc     40960\n\n# 检查是否生效\nulimit -a\n# max user processes              (-u) 40960\n\n```\n","source":"_posts/os/linux/process/process.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 13\ndescription: 进程\nparent: Process\nhas_children: false\npermalink: \"/os/linux/process/process/\"\ngrand_parent: Linux\n---\n\n# 进程\n\n## 没有足够的资源创建本地线程\n\n### java.lang.OutOfMemoryError: unable to create new native thread\n\n- 确认资源是否够\n\n```bash\n# 查看资源不够的应用是由哪个用户启动的(这里示例为www用户启动)\nsu www\n\n# 查看用户最大进程数(PS: 不同用户查看到的最大用户进程数不一样)\nulimit -a\n# max user processes              (-u) 4096\n\n# 当前用户占用的总线程数\ntop -H \n\n```\n\n- 修改用户最大进程数\n\n[参考文章](https://www.cnblogs.com/operationhome/p/11966041.html)\n\n```bash\n# 查看资源不够的应用是由哪个用户启动的(这里示例为www用户启动)\nsu www\n\n# centos7版本的配置\nvim /etc/security/limits.d/20-nproc.conf\n# 写入以下内容\n# www        soft    nproc     40960\n\n# 检查是否生效\nulimit -a\n# max user processes              (-u) 40960\n\n```\n","slug":"os/linux/process/process","published":1,"date":"2025-02-23T07:43:31.755Z","updated":"2025-02-23T07:43:31.755Z","__permalink":"/os/linux/process/process/","comments":1,"photos":[],"_id":"cm7k5rwat005nmswsdl2kbuab","content":"<h1 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h1><h2 id=\"没有足够的资源创建本地线程\"><a href=\"#没有足够的资源创建本地线程\" class=\"headerlink\" title=\"没有足够的资源创建本地线程\"></a>没有足够的资源创建本地线程</h2><h3 id=\"java-lang-OutOfMemoryError-unable-to-create-new-native-thread\"><a href=\"#java-lang-OutOfMemoryError-unable-to-create-new-native-thread\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: unable to create new native thread\"></a>java.lang.OutOfMemoryError: unable to create new native thread</h3><ul>\n<li>确认资源是否够</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看资源不够的应用是由哪个用户启动的(这里示例为www用户启动)</span></span><br><span class=\"line\">su www</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看用户最大进程数(PS: 不同用户查看到的最大用户进程数不一样)</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -a</span><br><span class=\"line\"><span class=\"comment\"># max user processes              (-u) 4096</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前用户占用的总线程数</span></span><br><span class=\"line\">top -H </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改用户最大进程数</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/operationhome/p/11966041.html\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看资源不够的应用是由哪个用户启动的(这里示例为www用户启动)</span></span><br><span class=\"line\">su www</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># centos7版本的配置</span></span><br><span class=\"line\">vim /etc/security/limits.d/20-nproc.conf</span><br><span class=\"line\"><span class=\"comment\"># 写入以下内容</span></span><br><span class=\"line\"><span class=\"comment\"># www        soft    nproc     40960</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否生效</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -a</span><br><span class=\"line\"><span class=\"comment\"># max user processes              (-u) 40960</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h1><h2 id=\"没有足够的资源创建本地线程\"><a href=\"#没有足够的资源创建本地线程\" class=\"headerlink\" title=\"没有足够的资源创建本地线程\"></a>没有足够的资源创建本地线程</h2><h3 id=\"java-lang-OutOfMemoryError-unable-to-create-new-native-thread\"><a href=\"#java-lang-OutOfMemoryError-unable-to-create-new-native-thread\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: unable to create new native thread\"></a>java.lang.OutOfMemoryError: unable to create new native thread</h3><ul>\n<li>确认资源是否够</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看资源不够的应用是由哪个用户启动的(这里示例为www用户启动)</span></span><br><span class=\"line\">su www</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看用户最大进程数(PS: 不同用户查看到的最大用户进程数不一样)</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -a</span><br><span class=\"line\"><span class=\"comment\"># max user processes              (-u) 4096</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前用户占用的总线程数</span></span><br><span class=\"line\">top -H </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改用户最大进程数</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/operationhome/p/11966041.html\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看资源不够的应用是由哪个用户启动的(这里示例为www用户启动)</span></span><br><span class=\"line\">su www</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># centos7版本的配置</span></span><br><span class=\"line\">vim /etc/security/limits.d/20-nproc.conf</span><br><span class=\"line\"><span class=\"comment\"># 写入以下内容</span></span><br><span class=\"line\"><span class=\"comment\"># www        soft    nproc     40960</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否生效</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -a</span><br><span class=\"line\"><span class=\"comment\"># max user processes              (-u) 40960</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"ComfyUI","nav_order":1,"description":"ComfyUI","parent":"Comfyui","has_children":false,"grand_parent":"Softs","_content":"\n# ComfyUI\n\n## 安装\n\n[参考地址](https://docs.comfy.org/get_started/manual_install#mac-arm-silicon)\n\n```bash\n# 安装miniconda\ncurl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh | bash\n# Create an environment with Conda.\nconda create -n comfyenv\nconda activate comfyenv\n# Install GPU Dependencies\nconda install pytorch-nightly::pytorch torchvision torchaudio -c pytorch-nightly\ncd ComfyUI\npip install -r requirements.txt\ncd ComfyUI\npython main.py\n\n```\n\n> 最后, 我直接拉代码下来在IDE中启动了\n","source":"_posts/tools/softs/ComfyUI/ComfyUI.md","raw":"---\nlayout: default\ntitle: ComfyUI\nnav_order: 1\ndescription: ComfyUI\nparent: Comfyui\nhas_children: false\npermalink: \"/tools/softs/comfyui/comfyui/\"\ngrand_parent: Softs\n---\n\n# ComfyUI\n\n## 安装\n\n[参考地址](https://docs.comfy.org/get_started/manual_install#mac-arm-silicon)\n\n```bash\n# 安装miniconda\ncurl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh | bash\n# Create an environment with Conda.\nconda create -n comfyenv\nconda activate comfyenv\n# Install GPU Dependencies\nconda install pytorch-nightly::pytorch torchvision torchaudio -c pytorch-nightly\ncd ComfyUI\npip install -r requirements.txt\ncd ComfyUI\npython main.py\n\n```\n\n> 最后, 我直接拉代码下来在IDE中启动了\n","slug":"tools/softs/ComfyUI/ComfyUI","published":1,"date":"2025-02-23T07:43:31.756Z","updated":"2025-02-23T07:43:31.756Z","__permalink":"/tools/softs/comfyui/comfyui/","comments":1,"photos":[],"_id":"cm7k5rwau005rmsws0ron0u0i","content":"<h1 id=\"ComfyUI\"><a href=\"#ComfyUI\" class=\"headerlink\" title=\"ComfyUI\"></a>ComfyUI</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://docs.comfy.org/get_started/manual_install#mac-arm-silicon\">参考地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装miniconda</span></span><br><span class=\"line\">curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh | bash</span><br><span class=\"line\"><span class=\"comment\"># Create an environment with Conda.</span></span><br><span class=\"line\">conda create -n comfyenv</span><br><span class=\"line\">conda activate comfyenv</span><br><span class=\"line\"><span class=\"comment\"># Install GPU Dependencies</span></span><br><span class=\"line\">conda install pytorch-nightly::pytorch torchvision torchaudio -c pytorch-nightly</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ComfyUI</span><br><span class=\"line\">pip install -r requirements.txt</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ComfyUI</span><br><span class=\"line\">python main.py</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最后, 我直接拉代码下来在IDE中启动了</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"ComfyUI\"><a href=\"#ComfyUI\" class=\"headerlink\" title=\"ComfyUI\"></a>ComfyUI</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://docs.comfy.org/get_started/manual_install#mac-arm-silicon\">参考地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装miniconda</span></span><br><span class=\"line\">curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh | bash</span><br><span class=\"line\"><span class=\"comment\"># Create an environment with Conda.</span></span><br><span class=\"line\">conda create -n comfyenv</span><br><span class=\"line\">conda activate comfyenv</span><br><span class=\"line\"><span class=\"comment\"># Install GPU Dependencies</span></span><br><span class=\"line\">conda install pytorch-nightly::pytorch torchvision torchaudio -c pytorch-nightly</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ComfyUI</span><br><span class=\"line\">pip install -r requirements.txt</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ComfyUI</span><br><span class=\"line\">python main.py</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最后, 我直接拉代码下来在IDE中启动了</p>\n</blockquote>\n"},{"layout":"default","title":"Process","nav_order":3,"has_children":true,"parent":"Process","_content":"\n# Process\n","source":"_posts/os/linux/process/index.md","raw":"---\nlayout: default\ntitle: Process\nnav_order: 3\nhas_children: true\nparent: Process\npermalink: \"/os/linux/process/\"\n---\n\n# Process\n","slug":"os/linux/process/index","published":1,"date":"2025-02-23T07:43:31.755Z","updated":"2025-02-23T07:43:31.755Z","__permalink":"/os/linux/process/","comments":1,"photos":[],"_id":"cm7k5rwau005tmsws6wjefesi","content":"<h1 id=\"Process\"><a href=\"#Process\" class=\"headerlink\" title=\"Process\"></a>Process</h1>","excerpt":"","more":"<h1 id=\"Process\"><a href=\"#Process\" class=\"headerlink\" title=\"Process\"></a>Process</h1>"},{"layout":"default","title":"Comfyui","nav_order":3,"has_children":true,"parent":"Comfyui","_content":"\n# Comfyui\n","source":"_posts/tools/softs/ComfyUI/index.md","raw":"---\nlayout: default\ntitle: Comfyui\nnav_order: 3\nhas_children: true\nparent: Comfyui\npermalink: \"/tools/softs/comfyui/\"\n---\n\n# Comfyui\n","slug":"tools/softs/ComfyUI/index","published":1,"date":"2025-02-23T07:43:31.756Z","updated":"2025-02-23T07:43:31.756Z","__permalink":"/tools/softs/comfyui/","comments":1,"photos":[],"_id":"cm7k5rwau005xmsws43c971gp","content":"<h1 id=\"Comfyui\"><a href=\"#Comfyui\" class=\"headerlink\" title=\"Comfyui\"></a>Comfyui</h1>","excerpt":"","more":"<h1 id=\"Comfyui\"><a href=\"#Comfyui\" class=\"headerlink\" title=\"Comfyui\"></a>Comfyui</h1>"},{"layout":"default","title":"Clash","nav_order":2,"description":"linux中使用clash记录","parent":"Clash","has_children":false,"grand_parent":"Softs","_content":"\n# linux中使用clash记录\n\n## 安装clash-for-linux\n\n- clash文件目录[内网服务器路径备忘](/root/vpn)\n  - [本地备份文件](clash-linux-amd64-v1.18.0.gz)，解压命令`gzip -d clash-linux-amd64-v1.18.0.gz`\n- 补充参考链接(以前的链接不知道哪去了，新找了些补充下)\n  - [clash-for-linux](https://github.com/ghostxu97/clash-for-linux)\n  - [clash-for-linux](https://blog.iswiftai.com/posts/clash-linux/)\n\n## 添加config.yaml配置文件\n\n在clash同级目录中添加config.yaml文件\n\n文件来源:\n    - 本地客户端\n      - 设置 -> 配置 -> 打开配置文件夹 - 有效的config.yaml(找到后放到服务器中的clash所在目录即可)\n\n## 启动命令\n\n```shell\n# 重命名\nmv clash-linux-amd64-v1.18.0 clash\n# vim start.sh\ncd /root/vpn\nnohup ./clash -d . &\n```\n\n- 环境变量配置(用于开启系统代理)\n\n```shell\n# vim .env\n# 设置系统代理\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n# 取消系统代理\nunset  http_proxy  https_proxy  all_proxy\n```\n\n> 到这已经已经能访问外网了\n\n## DashBoard 外部控制（可视化界面远程管理服务器中的clash配置）\n\n> 前提条件: 本地电脑中有安装可视化界面的clash客户端\n\nPS：只使用默认配置的话，这步不需要操作\n\n```bash\n# 修改 /etc/clash/config.yaml 文件部分配置：\nmixed-port: 12345\nauthentication:\n  - \"用户名1:密码1\"\n  - \"用户名2:密码2\"\nallow-lan: true\nmode: Rule\nlog-level: info\nexternal-controller: :9090\n\n# 对应开启系统代理的方式调整\nexport https_proxy=http://用户名1:密码1@127.0.0.1:12345 http_proxy=http://用户名1:密码1@127.0.0.1:12345 all_proxy=socks5://用户名1:密码1@127.0.0.1:12345\n\n# config.yaml中的这个配置为DashBoard的外部控制端口\nexternal-controller: :9090\n# 自己本地电脑中安装的clash可在设置中的配置界面找到远程控制器管理界面，在其中添加对应的api url（http://ip:9090）进行远程控制\n","source":"_posts/tools/softs/clash/clash.md","raw":"---\nlayout: default\ntitle: Clash\nnav_order: 2\ndescription: linux中使用clash记录\nparent: Clash\nhas_children: false\npermalink: \"/tools/softs/clash/clash/\"\ngrand_parent: Softs\n---\n\n# linux中使用clash记录\n\n## 安装clash-for-linux\n\n- clash文件目录[内网服务器路径备忘](/root/vpn)\n  - [本地备份文件](clash-linux-amd64-v1.18.0.gz)，解压命令`gzip -d clash-linux-amd64-v1.18.0.gz`\n- 补充参考链接(以前的链接不知道哪去了，新找了些补充下)\n  - [clash-for-linux](https://github.com/ghostxu97/clash-for-linux)\n  - [clash-for-linux](https://blog.iswiftai.com/posts/clash-linux/)\n\n## 添加config.yaml配置文件\n\n在clash同级目录中添加config.yaml文件\n\n文件来源:\n    - 本地客户端\n      - 设置 -> 配置 -> 打开配置文件夹 - 有效的config.yaml(找到后放到服务器中的clash所在目录即可)\n\n## 启动命令\n\n```shell\n# 重命名\nmv clash-linux-amd64-v1.18.0 clash\n# vim start.sh\ncd /root/vpn\nnohup ./clash -d . &\n```\n\n- 环境变量配置(用于开启系统代理)\n\n```shell\n# vim .env\n# 设置系统代理\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n# 取消系统代理\nunset  http_proxy  https_proxy  all_proxy\n```\n\n> 到这已经已经能访问外网了\n\n## DashBoard 外部控制（可视化界面远程管理服务器中的clash配置）\n\n> 前提条件: 本地电脑中有安装可视化界面的clash客户端\n\nPS：只使用默认配置的话，这步不需要操作\n\n```bash\n# 修改 /etc/clash/config.yaml 文件部分配置：\nmixed-port: 12345\nauthentication:\n  - \"用户名1:密码1\"\n  - \"用户名2:密码2\"\nallow-lan: true\nmode: Rule\nlog-level: info\nexternal-controller: :9090\n\n# 对应开启系统代理的方式调整\nexport https_proxy=http://用户名1:密码1@127.0.0.1:12345 http_proxy=http://用户名1:密码1@127.0.0.1:12345 all_proxy=socks5://用户名1:密码1@127.0.0.1:12345\n\n# config.yaml中的这个配置为DashBoard的外部控制端口\nexternal-controller: :9090\n# 自己本地电脑中安装的clash可在设置中的配置界面找到远程控制器管理界面，在其中添加对应的api url（http://ip:9090）进行远程控制\n","slug":"tools/softs/clash/clash","published":1,"date":"2025-02-23T07:43:31.761Z","updated":"2025-02-23T07:43:31.762Z","__permalink":"/tools/softs/clash/clash/","comments":1,"photos":[],"_id":"cm7k5rwau005ymswsg9h30nbp","content":"<h1 id=\"linux中使用clash记录\"><a href=\"#linux中使用clash记录\" class=\"headerlink\" title=\"linux中使用clash记录\"></a>linux中使用clash记录</h1><h2 id=\"安装clash-for-linux\"><a href=\"#安装clash-for-linux\" class=\"headerlink\" title=\"安装clash-for-linux\"></a>安装clash-for-linux</h2><ul>\n<li>clash文件目录<a href=\"/root/vpn\">内网服务器路径备忘</a><ul>\n<li><a href=\"clash-linux-amd64-v1.18.0.gz\">本地备份文件</a>，解压命令<code>gzip -d clash-linux-amd64-v1.18.0.gz</code></li>\n</ul>\n</li>\n<li>补充参考链接(以前的链接不知道哪去了，新找了些补充下)<ul>\n<li><a href=\"https://github.com/ghostxu97/clash-for-linux\">clash-for-linux</a></li>\n<li><a href=\"https://blog.iswiftai.com/posts/clash-linux/\">clash-for-linux</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"添加config-yaml配置文件\"><a href=\"#添加config-yaml配置文件\" class=\"headerlink\" title=\"添加config.yaml配置文件\"></a>添加config.yaml配置文件</h2><p>在clash同级目录中添加config.yaml文件</p>\n<p>文件来源:<br>    - 本地客户端<br>      - 设置 -&gt; 配置 -&gt; 打开配置文件夹 - 有效的config.yaml(找到后放到服务器中的clash所在目录即可)</p>\n<h2 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重命名</span></span><br><span class=\"line\">mv clash-linux-amd64-v1.18.0 clash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">vim start.sh</span></span><br><span class=\"line\">cd /root/vpn</span><br><span class=\"line\">nohup ./clash -d . &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>环境变量配置(用于开启系统代理)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">vim .<span class=\"built_in\">env</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置系统代理</span></span><br><span class=\"line\">export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">取消系统代理</span></span><br><span class=\"line\">unset  http_proxy  https_proxy  all_proxy</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>到这已经已经能访问外网了</p>\n</blockquote>\n<h2 id=\"DashBoard-外部控制（可视化界面远程管理服务器中的clash配置）\"><a href=\"#DashBoard-外部控制（可视化界面远程管理服务器中的clash配置）\" class=\"headerlink\" title=\"DashBoard 外部控制（可视化界面远程管理服务器中的clash配置）\"></a>DashBoard 外部控制（可视化界面远程管理服务器中的clash配置）</h2><blockquote>\n<p>前提条件: 本地电脑中有安装可视化界面的clash客户端</p>\n</blockquote>\n<p>PS：只使用默认配置的话，这步不需要操作</p>\n<pre><code class=\"bash\"># 修改 /etc/clash/config.yaml 文件部分配置：\nmixed-port: 12345\nauthentication:\n  - &quot;用户名1:密码1&quot;\n  - &quot;用户名2:密码2&quot;\nallow-lan: true\nmode: Rule\nlog-level: info\nexternal-controller: :9090\n\n# 对应开启系统代理的方式调整\nexport https_proxy=http://用户名1:密码1@127.0.0.1:12345 http_proxy=http://用户名1:密码1@127.0.0.1:12345 all_proxy=socks5://用户名1:密码1@127.0.0.1:12345\n\n# config.yaml中的这个配置为DashBoard的外部控制端口\nexternal-controller: :9090\n# 自己本地电脑中安装的clash可在设置中的配置界面找到远程控制器管理界面，在其中添加对应的api url（http://ip:9090）进行远程控制\n</code></pre>\n","excerpt":"","more":"<h1 id=\"linux中使用clash记录\"><a href=\"#linux中使用clash记录\" class=\"headerlink\" title=\"linux中使用clash记录\"></a>linux中使用clash记录</h1><h2 id=\"安装clash-for-linux\"><a href=\"#安装clash-for-linux\" class=\"headerlink\" title=\"安装clash-for-linux\"></a>安装clash-for-linux</h2><ul>\n<li>clash文件目录<a href=\"/root/vpn\">内网服务器路径备忘</a><ul>\n<li><a href=\"clash-linux-amd64-v1.18.0.gz\">本地备份文件</a>，解压命令<code>gzip -d clash-linux-amd64-v1.18.0.gz</code></li>\n</ul>\n</li>\n<li>补充参考链接(以前的链接不知道哪去了，新找了些补充下)<ul>\n<li><a href=\"https://github.com/ghostxu97/clash-for-linux\">clash-for-linux</a></li>\n<li><a href=\"https://blog.iswiftai.com/posts/clash-linux/\">clash-for-linux</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"添加config-yaml配置文件\"><a href=\"#添加config-yaml配置文件\" class=\"headerlink\" title=\"添加config.yaml配置文件\"></a>添加config.yaml配置文件</h2><p>在clash同级目录中添加config.yaml文件</p>\n<p>文件来源:<br>    - 本地客户端<br>      - 设置 -&gt; 配置 -&gt; 打开配置文件夹 - 有效的config.yaml(找到后放到服务器中的clash所在目录即可)</p>\n<h2 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重命名</span></span><br><span class=\"line\">mv clash-linux-amd64-v1.18.0 clash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">vim start.sh</span></span><br><span class=\"line\">cd /root/vpn</span><br><span class=\"line\">nohup ./clash -d . &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>环境变量配置(用于开启系统代理)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">vim .<span class=\"built_in\">env</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置系统代理</span></span><br><span class=\"line\">export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">取消系统代理</span></span><br><span class=\"line\">unset  http_proxy  https_proxy  all_proxy</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>到这已经已经能访问外网了</p>\n</blockquote>\n<h2 id=\"DashBoard-外部控制（可视化界面远程管理服务器中的clash配置）\"><a href=\"#DashBoard-外部控制（可视化界面远程管理服务器中的clash配置）\" class=\"headerlink\" title=\"DashBoard 外部控制（可视化界面远程管理服务器中的clash配置）\"></a>DashBoard 外部控制（可视化界面远程管理服务器中的clash配置）</h2><blockquote>\n<p>前提条件: 本地电脑中有安装可视化界面的clash客户端</p>\n</blockquote>\n<p>PS：只使用默认配置的话，这步不需要操作</p>\n<pre><code class=\"bash\"># 修改 /etc/clash/config.yaml 文件部分配置：\nmixed-port: 12345\nauthentication:\n  - &quot;用户名1:密码1&quot;\n  - &quot;用户名2:密码2&quot;\nallow-lan: true\nmode: Rule\nlog-level: info\nexternal-controller: :9090\n\n# 对应开启系统代理的方式调整\nexport https_proxy=http://用户名1:密码1@127.0.0.1:12345 http_proxy=http://用户名1:密码1@127.0.0.1:12345 all_proxy=socks5://用户名1:密码1@127.0.0.1:12345\n\n# config.yaml中的这个配置为DashBoard的外部控制端口\nexternal-controller: :9090\n# 自己本地电脑中安装的clash可在设置中的配置界面找到远程控制器管理界面，在其中添加对应的api url（http://ip:9090）进行远程控制\n</code></pre>\n"},{"layout":"default","title":"Cursor","nav_order":3,"description":"cursor","parent":"Cursor","has_children":false,"grand_parent":"Softs","_content":"\n# cursor\n\n## 修改机器码实现无限续杯(Cursor Free Trial Reset Tool)\n\n[GitHub地址](https://github.com/yuaotian/go-cursor-help)\n\n```bash\n# 一键修改(mac)\ncurl -fsSL https://raw.githubusercontent.com/yuaotian/go-cursor-help/refs/heads/master/scripts/run/cursor_mac_id_modifier.sh | sudo bash \n```\n","source":"_posts/tools/softs/cursor/cursor.md","raw":"---\nlayout: default\ntitle: Cursor\nnav_order: 3\ndescription: cursor\nparent: Cursor\nhas_children: false\npermalink: \"/tools/softs/cursor/cursor/\"\ngrand_parent: Softs\n---\n\n# cursor\n\n## 修改机器码实现无限续杯(Cursor Free Trial Reset Tool)\n\n[GitHub地址](https://github.com/yuaotian/go-cursor-help)\n\n```bash\n# 一键修改(mac)\ncurl -fsSL https://raw.githubusercontent.com/yuaotian/go-cursor-help/refs/heads/master/scripts/run/cursor_mac_id_modifier.sh | sudo bash \n```\n","slug":"tools/softs/cursor/cursor","published":1,"date":"2025-02-23T07:43:31.757Z","updated":"2025-02-23T07:43:31.757Z","__permalink":"/tools/softs/cursor/cursor/","comments":1,"photos":[],"_id":"cm7k5rwav0061mswsfmu7313a","content":"<h1 id=\"cursor\"><a href=\"#cursor\" class=\"headerlink\" title=\"cursor\"></a>cursor</h1><h2 id=\"修改机器码实现无限续杯-Cursor-Free-Trial-Reset-Tool\"><a href=\"#修改机器码实现无限续杯-Cursor-Free-Trial-Reset-Tool\" class=\"headerlink\" title=\"修改机器码实现无限续杯(Cursor Free Trial Reset Tool)\"></a>修改机器码实现无限续杯(Cursor Free Trial Reset Tool)</h2><p><a href=\"https://github.com/yuaotian/go-cursor-help\">GitHub地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一键修改(mac)</span></span><br><span class=\"line\">curl -fsSL https://raw.githubusercontent.com/yuaotian/go-cursor-help/refs/heads/master/scripts/run/cursor_mac_id_modifier.sh | <span class=\"built_in\">sudo</span> bash </span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"cursor\"><a href=\"#cursor\" class=\"headerlink\" title=\"cursor\"></a>cursor</h1><h2 id=\"修改机器码实现无限续杯-Cursor-Free-Trial-Reset-Tool\"><a href=\"#修改机器码实现无限续杯-Cursor-Free-Trial-Reset-Tool\" class=\"headerlink\" title=\"修改机器码实现无限续杯(Cursor Free Trial Reset Tool)\"></a>修改机器码实现无限续杯(Cursor Free Trial Reset Tool)</h2><p><a href=\"https://github.com/yuaotian/go-cursor-help\">GitHub地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一键修改(mac)</span></span><br><span class=\"line\">curl -fsSL https://raw.githubusercontent.com/yuaotian/go-cursor-help/refs/heads/master/scripts/run/cursor_mac_id_modifier.sh | <span class=\"built_in\">sudo</span> bash </span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Clash","nav_order":3,"has_children":true,"parent":"Clash","_content":"\n# Clash\n","source":"_posts/tools/softs/clash/index.md","raw":"---\nlayout: default\ntitle: Clash\nnav_order: 3\nhas_children: true\nparent: Clash\npermalink: \"/tools/softs/clash/\"\n---\n\n# Clash\n","slug":"tools/softs/clash/index","published":1,"date":"2025-02-23T07:43:31.761Z","updated":"2025-02-23T07:43:31.761Z","__permalink":"/tools/softs/clash/","comments":1,"photos":[],"_id":"cm7k5rwav0065mswsb2y915np","content":"<h1 id=\"Clash\"><a href=\"#Clash\" class=\"headerlink\" title=\"Clash\"></a>Clash</h1>","excerpt":"","more":"<h1 id=\"Clash\"><a href=\"#Clash\" class=\"headerlink\" title=\"Clash\"></a>Clash</h1>"},{"layout":"default","title":"IDEA","nav_order":4,"description":"idea使用记录","parent":"Idea","has_children":false,"grand_parent":"Softs","_content":"\n# idea使用记录\n\n## plugins\n\n- `CamelCase` : 驼峰转下划线\n- `Code Iris` : This plugin visualizes the modules, packages and classes of your project.\n- `Call Graph` : A plugin to visualize function call graph of any codebase for IDEs based on the IntelliJ platform.\n- `GenerateAllSetter` : 一键调用一个对象的所有的set方法,get方法等, 在方法上生成两个对象的转换\n- `Generate020` : This plugin can generate an Object to another Object transfer methods.\n- `GenerateSerialVersionUID` : Adds a new action 'SerialVersionUID' in the generate menu (alt + ins).\n- `Git Commit Template` : Create a commit message with the following template.\n- `GitTooIBox` : Extends Git Integration with additional features Free features\n- `Gradle Dependencies Helper` : library is searched in Smart Code Completion by Maven repository\n- `idea-sourcetrail` : Sourcetrail plugin for idea IDEs like Intellij or CLion. Provides synchronization with Sourcetrail.\n- `Java Method Reference Diagram` : Java Method Reference Diagram\n- `Gradle/Maven Navigation`: Open our customized popup dialog and choose from a variety of context-sensitive destinations, including tree nodes, goals, and tasks. For each destination choose from context-sensitive actions such as go, open, run, and debug.\n- `JDK VisualGC` : A realtime Visual Garbage Collection Monitoring Tool for local or remote running Hotspot JVM, supports G1 and ZGC\n- `Java Visualizer` : A tool to visualize the call stack and objects on the heap (as a box and pointer diagram) while debugging Java applications.\n- `POJO to JSON` : A simple plugin for converting POJO to JSON in IntelliJ IDEA\n- `RestfulTool` : A set of auxiliary tools for Restful service development\n- `Statistic` : Shows project statistic.\n- `VisualvM Launcher` : VisualVM integration.\n- about DDD\n  - `Axon Framework` : Supports developers while writing applications using Axon Framework version 4.x.\n  - `VisualDDD` : Development Cloud - VisualDDD (Visual Development Platform for Domain-Driven Design)\n","source":"_posts/tools/softs/idea/idea.md","raw":"---\nlayout: default\ntitle: IDEA\nnav_order: 4\ndescription: idea使用记录\nparent: Idea\nhas_children: false\npermalink: \"/tools/softs/idea/idea/\"\ngrand_parent: Softs\n---\n\n# idea使用记录\n\n## plugins\n\n- `CamelCase` : 驼峰转下划线\n- `Code Iris` : This plugin visualizes the modules, packages and classes of your project.\n- `Call Graph` : A plugin to visualize function call graph of any codebase for IDEs based on the IntelliJ platform.\n- `GenerateAllSetter` : 一键调用一个对象的所有的set方法,get方法等, 在方法上生成两个对象的转换\n- `Generate020` : This plugin can generate an Object to another Object transfer methods.\n- `GenerateSerialVersionUID` : Adds a new action 'SerialVersionUID' in the generate menu (alt + ins).\n- `Git Commit Template` : Create a commit message with the following template.\n- `GitTooIBox` : Extends Git Integration with additional features Free features\n- `Gradle Dependencies Helper` : library is searched in Smart Code Completion by Maven repository\n- `idea-sourcetrail` : Sourcetrail plugin for idea IDEs like Intellij or CLion. Provides synchronization with Sourcetrail.\n- `Java Method Reference Diagram` : Java Method Reference Diagram\n- `Gradle/Maven Navigation`: Open our customized popup dialog and choose from a variety of context-sensitive destinations, including tree nodes, goals, and tasks. For each destination choose from context-sensitive actions such as go, open, run, and debug.\n- `JDK VisualGC` : A realtime Visual Garbage Collection Monitoring Tool for local or remote running Hotspot JVM, supports G1 and ZGC\n- `Java Visualizer` : A tool to visualize the call stack and objects on the heap (as a box and pointer diagram) while debugging Java applications.\n- `POJO to JSON` : A simple plugin for converting POJO to JSON in IntelliJ IDEA\n- `RestfulTool` : A set of auxiliary tools for Restful service development\n- `Statistic` : Shows project statistic.\n- `VisualvM Launcher` : VisualVM integration.\n- about DDD\n  - `Axon Framework` : Supports developers while writing applications using Axon Framework version 4.x.\n  - `VisualDDD` : Development Cloud - VisualDDD (Visual Development Platform for Domain-Driven Design)\n","slug":"tools/softs/idea/idea","published":1,"date":"2025-02-23T07:43:31.759Z","updated":"2025-02-23T07:43:31.759Z","__permalink":"/tools/softs/idea/idea/","comments":1,"photos":[],"_id":"cm7k5rwav0068mswsast18ozj","content":"<h1 id=\"idea使用记录\"><a href=\"#idea使用记录\" class=\"headerlink\" title=\"idea使用记录\"></a>idea使用记录</h1><h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><ul>\n<li><code>CamelCase</code> : 驼峰转下划线</li>\n<li><code>Code Iris</code> : This plugin visualizes the modules, packages and classes of your project.</li>\n<li><code>Call Graph</code> : A plugin to visualize function call graph of any codebase for IDEs based on the IntelliJ platform.</li>\n<li><code>GenerateAllSetter</code> : 一键调用一个对象的所有的set方法,get方法等, 在方法上生成两个对象的转换</li>\n<li><code>Generate020</code> : This plugin can generate an Object to another Object transfer methods.</li>\n<li><code>GenerateSerialVersionUID</code> : Adds a new action ‘SerialVersionUID’ in the generate menu (alt + ins).</li>\n<li><code>Git Commit Template</code> : Create a commit message with the following template.</li>\n<li><code>GitTooIBox</code> : Extends Git Integration with additional features Free features</li>\n<li><code>Gradle Dependencies Helper</code> : library is searched in Smart Code Completion by Maven repository</li>\n<li><code>idea-sourcetrail</code> : Sourcetrail plugin for idea IDEs like Intellij or CLion. Provides synchronization with Sourcetrail.</li>\n<li><code>Java Method Reference Diagram</code> : Java Method Reference Diagram</li>\n<li><code>Gradle/Maven Navigation</code>: Open our customized popup dialog and choose from a variety of context-sensitive destinations, including tree nodes, goals, and tasks. For each destination choose from context-sensitive actions such as go, open, run, and debug.</li>\n<li><code>JDK VisualGC</code> : A realtime Visual Garbage Collection Monitoring Tool for local or remote running Hotspot JVM, supports G1 and ZGC</li>\n<li><code>Java Visualizer</code> : A tool to visualize the call stack and objects on the heap (as a box and pointer diagram) while debugging Java applications.</li>\n<li><code>POJO to JSON</code> : A simple plugin for converting POJO to JSON in IntelliJ IDEA</li>\n<li><code>RestfulTool</code> : A set of auxiliary tools for Restful service development</li>\n<li><code>Statistic</code> : Shows project statistic.</li>\n<li><code>VisualvM Launcher</code> : VisualVM integration.</li>\n<li>about DDD<ul>\n<li><code>Axon Framework</code> : Supports developers while writing applications using Axon Framework version 4.x.</li>\n<li><code>VisualDDD</code> : Development Cloud - VisualDDD (Visual Development Platform for Domain-Driven Design)</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"idea使用记录\"><a href=\"#idea使用记录\" class=\"headerlink\" title=\"idea使用记录\"></a>idea使用记录</h1><h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><ul>\n<li><code>CamelCase</code> : 驼峰转下划线</li>\n<li><code>Code Iris</code> : This plugin visualizes the modules, packages and classes of your project.</li>\n<li><code>Call Graph</code> : A plugin to visualize function call graph of any codebase for IDEs based on the IntelliJ platform.</li>\n<li><code>GenerateAllSetter</code> : 一键调用一个对象的所有的set方法,get方法等, 在方法上生成两个对象的转换</li>\n<li><code>Generate020</code> : This plugin can generate an Object to another Object transfer methods.</li>\n<li><code>GenerateSerialVersionUID</code> : Adds a new action ‘SerialVersionUID’ in the generate menu (alt + ins).</li>\n<li><code>Git Commit Template</code> : Create a commit message with the following template.</li>\n<li><code>GitTooIBox</code> : Extends Git Integration with additional features Free features</li>\n<li><code>Gradle Dependencies Helper</code> : library is searched in Smart Code Completion by Maven repository</li>\n<li><code>idea-sourcetrail</code> : Sourcetrail plugin for idea IDEs like Intellij or CLion. Provides synchronization with Sourcetrail.</li>\n<li><code>Java Method Reference Diagram</code> : Java Method Reference Diagram</li>\n<li><code>Gradle/Maven Navigation</code>: Open our customized popup dialog and choose from a variety of context-sensitive destinations, including tree nodes, goals, and tasks. For each destination choose from context-sensitive actions such as go, open, run, and debug.</li>\n<li><code>JDK VisualGC</code> : A realtime Visual Garbage Collection Monitoring Tool for local or remote running Hotspot JVM, supports G1 and ZGC</li>\n<li><code>Java Visualizer</code> : A tool to visualize the call stack and objects on the heap (as a box and pointer diagram) while debugging Java applications.</li>\n<li><code>POJO to JSON</code> : A simple plugin for converting POJO to JSON in IntelliJ IDEA</li>\n<li><code>RestfulTool</code> : A set of auxiliary tools for Restful service development</li>\n<li><code>Statistic</code> : Shows project statistic.</li>\n<li><code>VisualvM Launcher</code> : VisualVM integration.</li>\n<li>about DDD<ul>\n<li><code>Axon Framework</code> : Supports developers while writing applications using Axon Framework version 4.x.</li>\n<li><code>VisualDDD</code> : Development Cloud - VisualDDD (Visual Development Platform for Domain-Driven Design)</li>\n</ul>\n</li>\n</ul>\n"},{"layout":"default","title":"Cursor","nav_order":3,"has_children":true,"parent":"Cursor","_content":"\n# Cursor\n","source":"_posts/tools/softs/cursor/index.md","raw":"---\nlayout: default\ntitle: Cursor\nnav_order: 3\nhas_children: true\nparent: Cursor\npermalink: \"/tools/softs/cursor/\"\n---\n\n# Cursor\n","slug":"tools/softs/cursor/index","published":1,"date":"2025-02-23T07:43:31.758Z","updated":"2025-02-23T07:43:31.758Z","__permalink":"/tools/softs/cursor/","comments":1,"photos":[],"_id":"cm7k5rwav006cmswsb7wkaa27","content":"<h1 id=\"Cursor\"><a href=\"#Cursor\" class=\"headerlink\" title=\"Cursor\"></a>Cursor</h1>","excerpt":"","more":"<h1 id=\"Cursor\"><a href=\"#Cursor\" class=\"headerlink\" title=\"Cursor\"></a>Cursor</h1>"},{"layout":"default","title":"Windsurf","nav_order":3,"has_children":true,"parent":"Windsurf","_content":"\n# Windsurf\n","source":"_posts/tools/softs/windsurf/index.md","raw":"---\nlayout: default\ntitle: Windsurf\nnav_order: 3\nhas_children: true\nparent: Windsurf\npermalink: \"/tools/softs/windsurf/\"\n---\n\n# Windsurf\n","slug":"tools/softs/windsurf/index","published":1,"date":"2025-02-23T07:43:31.760Z","updated":"2025-02-23T07:43:31.761Z","__permalink":"/tools/softs/windsurf/","comments":1,"photos":[],"_id":"cm7k5rwav006emswsbv9k33p4","content":"<h1 id=\"Windsurf\"><a href=\"#Windsurf\" class=\"headerlink\" title=\"Windsurf\"></a>Windsurf</h1>","excerpt":"","more":"<h1 id=\"Windsurf\"><a href=\"#Windsurf\" class=\"headerlink\" title=\"Windsurf\"></a>Windsurf</h1>"},{"layout":"default","title":"Windsurf","nav_order":5,"description":"windsurf","parent":"Windsurf","has_children":false,"grand_parent":"Softs","_content":"\n# windsurf\n","source":"_posts/tools/softs/windsurf/windsurf.md","raw":"---\nlayout: default\ntitle: Windsurf\nnav_order: 5\ndescription: windsurf\nparent: Windsurf\nhas_children: false\npermalink: \"/tools/softs/windsurf/windsurf/\"\ngrand_parent: Softs\n---\n\n# windsurf\n","slug":"tools/softs/windsurf/windsurf","published":1,"date":"2025-02-23T07:43:31.760Z","updated":"2025-02-23T07:43:31.760Z","__permalink":"/tools/softs/windsurf/windsurf/","comments":1,"photos":[],"_id":"cm7k5rwav006gmsws5d5c8d16","content":"<h1 id=\"windsurf\"><a href=\"#windsurf\" class=\"headerlink\" title=\"windsurf\"></a>windsurf</h1>","excerpt":"","more":"<h1 id=\"windsurf\"><a href=\"#windsurf\" class=\"headerlink\" title=\"windsurf\"></a>windsurf</h1>"},{"layout":"default","title":"Idea","nav_order":3,"has_children":true,"parent":"Idea","_content":"\n# Idea\n","source":"_posts/tools/softs/idea/index.md","raw":"---\nlayout: default\ntitle: Idea\nnav_order: 3\nhas_children: true\nparent: Idea\npermalink: \"/tools/softs/idea/\"\n---\n\n# Idea\n","slug":"tools/softs/idea/index","published":1,"date":"2025-02-23T07:43:31.759Z","updated":"2025-02-23T07:43:31.759Z","__permalink":"/tools/softs/idea/","comments":1,"photos":[],"_id":"cm7k5rwaw006jmsws9upvck0e","content":"<h1 id=\"Idea\"><a href=\"#Idea\" class=\"headerlink\" title=\"Idea\"></a>Idea</h1>","excerpt":"","more":"<h1 id=\"Idea\"><a href=\"#Idea\" class=\"headerlink\" title=\"Idea\"></a>Idea</h1>"},{"layout":"default","title":"Arthas","nav_order":1,"description":"arthas使用记录","parent":"Arthas","has_children":false,"grand_parent":"Terminal","_content":"\n# arthas使用记录\n\n## 热部署\n\n[参考文章](https://arthas.aliyun.com/doc/retransform.html#%E7%BB%93%E5%90%88-jad-mc-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8)\n\n```bash\n# 反编译类到磁盘中\njad --source-only com.mall.domain.enums.ShowFrequencyTypeEnum > /temp/ShowFrequencyTypeEnum.java\n# 查看对应的类加载器\nsc -d com.mall.domain.enums.ShowFrequencyTypeEnum | grep classLoaderHash\n# 编译类(使用-d指定目录[ -d /tmp])\nmc -c 344561e0 /temp/ShowFrequencyTypeEnum.java\n# 加载类(复制控制台中打印的类全路径加载类)(PS: 使用jad的话, 重新加载的内容会被还原)\nredefine /com/mall/domain/enums/ShowFrequencyTypeEnum.class xxx.class\n# 或者使用retransform加载类(PS: 这个命令可以使用jad看到重新加载的内容)\nretransform /com/mall/domain/enums/ShowFrequencyTypeEnum.class xxx.class\n\n# PS: 无法直接上传文件的服务器, 可以使用base64编码上传, 然后使用mc命令进行加载\nbase64 < Test.class > result.txt\nbase64 -d < result.txt > Test.class\n```\n","source":"_posts/tools/terminal/arthas/arthas.md","raw":"---\nlayout: default\ntitle: Arthas\nnav_order: 1\ndescription: arthas使用记录\nparent: Arthas\nhas_children: false\npermalink: \"/tools/terminal/arthas/arthas/\"\ngrand_parent: Terminal\n---\n\n# arthas使用记录\n\n## 热部署\n\n[参考文章](https://arthas.aliyun.com/doc/retransform.html#%E7%BB%93%E5%90%88-jad-mc-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8)\n\n```bash\n# 反编译类到磁盘中\njad --source-only com.mall.domain.enums.ShowFrequencyTypeEnum > /temp/ShowFrequencyTypeEnum.java\n# 查看对应的类加载器\nsc -d com.mall.domain.enums.ShowFrequencyTypeEnum | grep classLoaderHash\n# 编译类(使用-d指定目录[ -d /tmp])\nmc -c 344561e0 /temp/ShowFrequencyTypeEnum.java\n# 加载类(复制控制台中打印的类全路径加载类)(PS: 使用jad的话, 重新加载的内容会被还原)\nredefine /com/mall/domain/enums/ShowFrequencyTypeEnum.class xxx.class\n# 或者使用retransform加载类(PS: 这个命令可以使用jad看到重新加载的内容)\nretransform /com/mall/domain/enums/ShowFrequencyTypeEnum.class xxx.class\n\n# PS: 无法直接上传文件的服务器, 可以使用base64编码上传, 然后使用mc命令进行加载\nbase64 < Test.class > result.txt\nbase64 -d < result.txt > Test.class\n```\n","slug":"tools/terminal/arthas/arthas","published":1,"date":"2025-02-23T07:43:31.767Z","updated":"2025-02-23T07:43:31.767Z","__permalink":"/tools/terminal/arthas/arthas/","comments":1,"photos":[],"_id":"cm7k5rwaw006mmsws8dm91m0e","content":"<h1 id=\"arthas使用记录\"><a href=\"#arthas使用记录\" class=\"headerlink\" title=\"arthas使用记录\"></a>arthas使用记录</h1><h2 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h2><p><a href=\"https://arthas.aliyun.com/doc/retransform.html#%E7%BB%93%E5%90%88-jad-mc-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 反编译类到磁盘中</span></span><br><span class=\"line\">jad --source-only com.mall.domain.enums.ShowFrequencyTypeEnum &gt; /temp/ShowFrequencyTypeEnum.java</span><br><span class=\"line\"><span class=\"comment\"># 查看对应的类加载器</span></span><br><span class=\"line\">sc -d com.mall.domain.enums.ShowFrequencyTypeEnum | grep classLoaderHash</span><br><span class=\"line\"><span class=\"comment\"># 编译类(使用-d指定目录[ -d /tmp])</span></span><br><span class=\"line\">mc -c 344561e0 /temp/ShowFrequencyTypeEnum.java</span><br><span class=\"line\"><span class=\"comment\"># 加载类(复制控制台中打印的类全路径加载类)(PS: 使用jad的话, 重新加载的内容会被还原)</span></span><br><span class=\"line\">redefine /com/mall/domain/enums/ShowFrequencyTypeEnum.class xxx.class</span><br><span class=\"line\"><span class=\"comment\"># 或者使用retransform加载类(PS: 这个命令可以使用jad看到重新加载的内容)</span></span><br><span class=\"line\">retransform /com/mall/domain/enums/ShowFrequencyTypeEnum.class xxx.class</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PS: 无法直接上传文件的服务器, 可以使用base64编码上传, 然后使用mc命令进行加载</span></span><br><span class=\"line\"><span class=\"built_in\">base64</span> &lt; Test.class &gt; result.txt</span><br><span class=\"line\"><span class=\"built_in\">base64</span> -d &lt; result.txt &gt; Test.class</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"arthas使用记录\"><a href=\"#arthas使用记录\" class=\"headerlink\" title=\"arthas使用记录\"></a>arthas使用记录</h1><h2 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h2><p><a href=\"https://arthas.aliyun.com/doc/retransform.html#%E7%BB%93%E5%90%88-jad-mc-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8\">参考文章</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 反编译类到磁盘中</span></span><br><span class=\"line\">jad --source-only com.mall.domain.enums.ShowFrequencyTypeEnum &gt; /temp/ShowFrequencyTypeEnum.java</span><br><span class=\"line\"><span class=\"comment\"># 查看对应的类加载器</span></span><br><span class=\"line\">sc -d com.mall.domain.enums.ShowFrequencyTypeEnum | grep classLoaderHash</span><br><span class=\"line\"><span class=\"comment\"># 编译类(使用-d指定目录[ -d /tmp])</span></span><br><span class=\"line\">mc -c 344561e0 /temp/ShowFrequencyTypeEnum.java</span><br><span class=\"line\"><span class=\"comment\"># 加载类(复制控制台中打印的类全路径加载类)(PS: 使用jad的话, 重新加载的内容会被还原)</span></span><br><span class=\"line\">redefine /com/mall/domain/enums/ShowFrequencyTypeEnum.class xxx.class</span><br><span class=\"line\"><span class=\"comment\"># 或者使用retransform加载类(PS: 这个命令可以使用jad看到重新加载的内容)</span></span><br><span class=\"line\">retransform /com/mall/domain/enums/ShowFrequencyTypeEnum.class xxx.class</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PS: 无法直接上传文件的服务器, 可以使用base64编码上传, 然后使用mc命令进行加载</span></span><br><span class=\"line\"><span class=\"built_in\">base64</span> &lt; Test.class &gt; result.txt</span><br><span class=\"line\"><span class=\"built_in\">base64</span> -d &lt; result.txt &gt; Test.class</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Arthas","nav_order":3,"has_children":true,"parent":"Arthas","_content":"\n# Arthas\n","source":"_posts/tools/terminal/arthas/index.md","raw":"---\nlayout: default\ntitle: Arthas\nnav_order: 3\nhas_children: true\nparent: Arthas\npermalink: \"/tools/terminal/arthas/\"\n---\n\n# Arthas\n","slug":"tools/terminal/arthas/index","published":1,"date":"2025-02-23T07:43:31.766Z","updated":"2025-02-23T07:43:31.766Z","__permalink":"/tools/terminal/arthas/","comments":1,"photos":[],"_id":"cm7k5rwaw006pmswsbhvx5dec","content":"<h1 id=\"Arthas\"><a href=\"#Arthas\" class=\"headerlink\" title=\"Arthas\"></a>Arthas</h1>","excerpt":"","more":"<h1 id=\"Arthas\"><a href=\"#Arthas\" class=\"headerlink\" title=\"Arthas\"></a>Arthas</h1>"},{"layout":"default","title":"Docker","nav_order":3,"has_children":true,"parent":"Docker","_content":"\n# Docker\n","source":"_posts/tools/terminal/docker/index.md","raw":"---\nlayout: default\ntitle: Docker\nnav_order: 3\nhas_children: true\nparent: Docker\npermalink: \"/tools/terminal/docker/\"\n---\n\n# Docker\n","slug":"tools/terminal/docker/index","published":1,"date":"2025-02-23T07:43:31.767Z","updated":"2025-02-23T07:43:31.767Z","__permalink":"/tools/terminal/docker/","comments":1,"photos":[],"_id":"cm7k5rwaw006qmsws0jex3nmd","content":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1>","excerpt":"","more":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1>"},{"layout":"default","title":"Git","nav_order":3,"has_children":true,"parent":"Git","_content":"\n# Git\n","source":"_posts/tools/terminal/git/index.md","raw":"---\nlayout: default\ntitle: Git\nnav_order: 3\nhas_children: true\nparent: Git\npermalink: \"/tools/terminal/git/\"\n---\n\n# Git\n","slug":"tools/terminal/git/index","published":1,"date":"2025-02-23T07:43:31.772Z","updated":"2025-02-23T07:43:31.773Z","__permalink":"/tools/terminal/git/","comments":1,"photos":[],"_id":"cm7k5rwaw006rmsws4wif7z2n","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1>","excerpt":"","more":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1>"},{"layout":"default","title":"Gradle","nav_order":2,"description":"gradle使用","parent":"Gradle","has_children":false,"grand_parent":"Terminal","_content":"\n# gradle使用\n\n- 文章\n  - [如何使注解处理器在自定义库中是可传递的？](https://www.volcengine.com/theme/5197725-R-7-1)\n","source":"_posts/tools/terminal/gradle/gradle.md","raw":"---\nlayout: default\ntitle: Gradle\nnav_order: 2\ndescription: gradle使用\nparent: Gradle\nhas_children: false\npermalink: \"/tools/terminal/gradle/gradle/\"\ngrand_parent: Terminal\n---\n\n# gradle使用\n\n- 文章\n  - [如何使注解处理器在自定义库中是可传递的？](https://www.volcengine.com/theme/5197725-R-7-1)\n","slug":"tools/terminal/gradle/gradle","published":1,"date":"2025-02-23T07:43:31.769Z","updated":"2025-02-23T07:43:31.769Z","__permalink":"/tools/terminal/gradle/gradle/","comments":1,"photos":[],"_id":"cm7k5rwaw006smsws4v1o9it2","content":"<h1 id=\"gradle使用\"><a href=\"#gradle使用\" class=\"headerlink\" title=\"gradle使用\"></a>gradle使用</h1><ul>\n<li>文章<ul>\n<li><a href=\"https://www.volcengine.com/theme/5197725-R-7-1\">如何使注解处理器在自定义库中是可传递的？</a></li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"gradle使用\"><a href=\"#gradle使用\" class=\"headerlink\" title=\"gradle使用\"></a>gradle使用</h1><ul>\n<li>文章<ul>\n<li><a href=\"https://www.volcengine.com/theme/5197725-R-7-1\">如何使注解处理器在自定义库中是可传递的？</a></li>\n</ul>\n</li>\n</ul>\n"},{"layout":"default","title":"Gradle","nav_order":3,"has_children":true,"parent":"Gradle","_content":"\n# Gradle\n","source":"_posts/tools/terminal/gradle/index.md","raw":"---\nlayout: default\ntitle: Gradle\nnav_order: 3\nhas_children: true\nparent: Gradle\npermalink: \"/tools/terminal/gradle/\"\n---\n\n# Gradle\n","slug":"tools/terminal/gradle/index","published":1,"date":"2025-02-23T07:43:31.769Z","updated":"2025-02-23T07:43:31.769Z","__permalink":"/tools/terminal/gradle/","comments":1,"photos":[],"_id":"cm7k5rwaw006tmsws6l1id5aj","content":"<h1 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h1>","excerpt":"","more":"<h1 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h1>"},{"layout":"default","title":"Git","nav_order":13,"description":"git使用记录","parent":"Git","has_children":false,"grand_parent":"Terminal","_content":"\n# git使用记录\n\n## git-lfs使用\n\n[install](https://packagecloud.io/github/git-lfs/install)\n[如何使用 Git LFS](https://help.aliyun.com/document_detail/206889.html)\n\n```shell\n# quick install\ncurl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nsudo apt-get install git-lfs\n# 让仓库支持LFS\ngit lfs install\n# 为了将以示例.bigfile后缀结尾的文件使用Git LFS进行存储，需要执行track命令建立追踪：\ngit lfs track \"*.bigfile\"\n# 将普通提交中的大文件迁移到lfs中去(非必须)\ngit lfs migrate import --include=\"*.bigfile\"\n# 你可以取消继续跟踪某类文件，并将其从cache中清理：\ngit lfs untrack \"*.bigfile\"\ngit rm --cached \"*.bigfile\"\n\n```\n","source":"_posts/tools/terminal/git/git.md","raw":"---\nlayout: default\ntitle: Git\nnav_order: 13\ndescription: git使用记录\nparent: Git\nhas_children: false\npermalink: \"/tools/terminal/git/git/\"\ngrand_parent: Terminal\n---\n\n# git使用记录\n\n## git-lfs使用\n\n[install](https://packagecloud.io/github/git-lfs/install)\n[如何使用 Git LFS](https://help.aliyun.com/document_detail/206889.html)\n\n```shell\n# quick install\ncurl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nsudo apt-get install git-lfs\n# 让仓库支持LFS\ngit lfs install\n# 为了将以示例.bigfile后缀结尾的文件使用Git LFS进行存储，需要执行track命令建立追踪：\ngit lfs track \"*.bigfile\"\n# 将普通提交中的大文件迁移到lfs中去(非必须)\ngit lfs migrate import --include=\"*.bigfile\"\n# 你可以取消继续跟踪某类文件，并将其从cache中清理：\ngit lfs untrack \"*.bigfile\"\ngit rm --cached \"*.bigfile\"\n\n```\n","slug":"tools/terminal/git/git","published":1,"date":"2025-02-23T07:43:31.773Z","updated":"2025-02-23T07:43:31.773Z","__permalink":"/tools/terminal/git/git/","comments":1,"photos":[],"_id":"cm7k5rwaw006umswsfmwu6pbn","content":"<h1 id=\"git使用记录\"><a href=\"#git使用记录\" class=\"headerlink\" title=\"git使用记录\"></a>git使用记录</h1><h2 id=\"git-lfs使用\"><a href=\"#git-lfs使用\" class=\"headerlink\" title=\"git-lfs使用\"></a>git-lfs使用</h2><p><a href=\"https://packagecloud.io/github/git-lfs/install\">install</a><br><a href=\"https://help.aliyun.com/document_detail/206889.html\">如何使用 Git LFS</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">quick install</span></span><br><span class=\"line\">curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash</span><br><span class=\"line\">sudo apt-get install git-lfs</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">让仓库支持LFS</span></span><br><span class=\"line\">git lfs install</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为了将以示例.bigfile后缀结尾的文件使用Git LFS进行存储，需要执行track命令建立追踪：</span></span><br><span class=\"line\">git lfs track &quot;*.bigfile&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将普通提交中的大文件迁移到lfs中去(非必须)</span></span><br><span class=\"line\">git lfs migrate import --include=&quot;*.bigfile&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">你可以取消继续跟踪某类文件，并将其从cache中清理：</span></span><br><span class=\"line\">git lfs untrack &quot;*.bigfile&quot;</span><br><span class=\"line\">git rm --cached &quot;*.bigfile&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"git使用记录\"><a href=\"#git使用记录\" class=\"headerlink\" title=\"git使用记录\"></a>git使用记录</h1><h2 id=\"git-lfs使用\"><a href=\"#git-lfs使用\" class=\"headerlink\" title=\"git-lfs使用\"></a>git-lfs使用</h2><p><a href=\"https://packagecloud.io/github/git-lfs/install\">install</a><br><a href=\"https://help.aliyun.com/document_detail/206889.html\">如何使用 Git LFS</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">quick install</span></span><br><span class=\"line\">curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash</span><br><span class=\"line\">sudo apt-get install git-lfs</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">让仓库支持LFS</span></span><br><span class=\"line\">git lfs install</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为了将以示例.bigfile后缀结尾的文件使用Git LFS进行存储，需要执行track命令建立追踪：</span></span><br><span class=\"line\">git lfs track &quot;*.bigfile&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将普通提交中的大文件迁移到lfs中去(非必须)</span></span><br><span class=\"line\">git lfs migrate import --include=&quot;*.bigfile&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">你可以取消继续跟踪某类文件，并将其从cache中清理：</span></span><br><span class=\"line\">git lfs untrack &quot;*.bigfile&quot;</span><br><span class=\"line\">git rm --cached &quot;*.bigfile&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Interpreter","nav_order":3,"has_children":true,"parent":"Interpreter","_content":"\n# Interpreter\n","source":"_posts/tools/terminal/interpreter/index.md","raw":"---\nlayout: default\ntitle: Interpreter\nnav_order: 3\nhas_children: true\nparent: Interpreter\npermalink: \"/tools/terminal/interpreter/\"\n---\n\n# Interpreter\n","slug":"tools/terminal/interpreter/index","published":1,"date":"2025-02-23T07:43:31.766Z","updated":"2025-02-23T07:43:31.766Z","__permalink":"/tools/terminal/interpreter/","comments":1,"photos":[],"_id":"cm7k5rwaw006vmsws9ysw9g2t","content":"<h1 id=\"Interpreter\"><a href=\"#Interpreter\" class=\"headerlink\" title=\"Interpreter\"></a>Interpreter</h1>","excerpt":"","more":"<h1 id=\"Interpreter\"><a href=\"#Interpreter\" class=\"headerlink\" title=\"Interpreter\"></a>Interpreter</h1>"},{"layout":"default","title":"Jmap","nav_order":3,"has_children":true,"parent":"Jmap","_content":"\n# Jmap\n","source":"_posts/tools/terminal/jmap/index.md","raw":"---\nlayout: default\ntitle: Jmap\nnav_order: 3\nhas_children: true\nparent: Jmap\npermalink: \"/tools/terminal/jmap/\"\n---\n\n# Jmap\n","slug":"tools/terminal/jmap/index","published":1,"date":"2025-02-23T07:43:31.771Z","updated":"2025-02-23T07:43:31.771Z","__permalink":"/tools/terminal/jmap/","comments":1,"photos":[],"_id":"cm7k5rwax006wmswsflzt4rxp","content":"<h1 id=\"Jmap\"><a href=\"#Jmap\" class=\"headerlink\" title=\"Jmap\"></a>Jmap</h1>","excerpt":"","more":"<h1 id=\"Jmap\"><a href=\"#Jmap\" class=\"headerlink\" title=\"Jmap\"></a>Jmap</h1>"},{"layout":"default","title":"JMap","nav_order":4,"description":"jmap的使用","parent":"Jmap","has_children":false,"grand_parent":"Terminal","slug":"tools/terminal/jmap/jmap","_content":"\n# jmap的使用\n\n- 方式一\n\n[java hprof文件如何导出](https://github.com/183461750/doc-record/blob/9ebb07355231f4ae916fdfec741c7e0d044c35ab/materiel/ai/java/java%E4%B8%ADhprof%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BA.md)\n\n```shell\n# 找pid\nps -ef | grep xxl-job-admin\n\n# [root@10-0-1-94 data]# jmap -dump:format=b,file=/data/temp/xxl-job-admin.hprof 24663\n# 24663: Unable to open socket file: target process not responding or HotSpot VM not loaded\n# The -F option can be used when the target process is not responding\n\n# 示例(PS: AI提供的命令执行失败的话, 加上-F参数)\njmap -F -dump:format=b,file=/data/temp/xxl-job-admin.hprof 24663\n```\n\n- 方式二\n\n在启动jar包时候添加参数\n\n[参考文章](https://mp.weixin.qq.com/s/3xCxRxfrz_Y41z7PO-d82g)\n\n```bash\n\n-Xms128M -Xmx128M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=../xfg-dev-tech-dump/docs/dump\n\n# HeapDumpPath 为你的工程完成路径，到出到 dump 文件夹下。\n# 运行方法后，就可以在 docs/dump 就可以看到产生的日志了。\n","source":"_posts/tools/terminal/jmap/jmap.md","raw":"---\nlayout: default\ntitle: JMap\nnav_order: 4\ndescription: jmap的使用\nparent: Jmap\nhas_children: false\npermalink: \"/tools/terminal/jmap/jmap/\"\ngrand_parent: Terminal\nslug: jmap\n---\n\n# jmap的使用\n\n- 方式一\n\n[java hprof文件如何导出](https://github.com/183461750/doc-record/blob/9ebb07355231f4ae916fdfec741c7e0d044c35ab/materiel/ai/java/java%E4%B8%ADhprof%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BA.md)\n\n```shell\n# 找pid\nps -ef | grep xxl-job-admin\n\n# [root@10-0-1-94 data]# jmap -dump:format=b,file=/data/temp/xxl-job-admin.hprof 24663\n# 24663: Unable to open socket file: target process not responding or HotSpot VM not loaded\n# The -F option can be used when the target process is not responding\n\n# 示例(PS: AI提供的命令执行失败的话, 加上-F参数)\njmap -F -dump:format=b,file=/data/temp/xxl-job-admin.hprof 24663\n```\n\n- 方式二\n\n在启动jar包时候添加参数\n\n[参考文章](https://mp.weixin.qq.com/s/3xCxRxfrz_Y41z7PO-d82g)\n\n```bash\n\n-Xms128M -Xmx128M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=../xfg-dev-tech-dump/docs/dump\n\n# HeapDumpPath 为你的工程完成路径，到出到 dump 文件夹下。\n# 运行方法后，就可以在 docs/dump 就可以看到产生的日志了。\n","published":1,"date":"2025-02-23T07:43:31.770Z","updated":"2025-02-23T07:43:31.771Z","__permalink":"/tools/terminal/jmap/jmap/","comments":1,"photos":[],"_id":"cm7k5rwax006xmswsbxwn3qxx","content":"<h1 id=\"jmap的使用\"><a href=\"#jmap的使用\" class=\"headerlink\" title=\"jmap的使用\"></a>jmap的使用</h1><ul>\n<li>方式一</li>\n</ul>\n<p><a href=\"https://github.com/183461750/doc-record/blob/9ebb07355231f4ae916fdfec741c7e0d044c35ab/materiel/ai/java/java%E4%B8%ADhprof%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BA.md\">java hprof文件如何导出</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">找pid</span></span><br><span class=\"line\">ps -ef | grep xxl-job-admin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-0-1-94 data]# jmap -dump:format=b,file=/data/temp/xxl-job-admin.hprof 24663</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">24663: Unable to open socket file: target process not responding or HotSpot VM not loaded</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">The -F option can be used when the target process is not responding</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">示例(PS: AI提供的命令执行失败的话, 加上-F参数)</span></span><br><span class=\"line\">jmap -F -dump:format=b,file=/data/temp/xxl-job-admin.hprof 24663</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式二</li>\n</ul>\n<p>在启动jar包时候添加参数</p>\n<p><a href=\"https://mp.weixin.qq.com/s/3xCxRxfrz_Y41z7PO-d82g\">参考文章</a></p>\n<pre><code class=\"bash\">\n-Xms128M -Xmx128M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=../xfg-dev-tech-dump/docs/dump\n\n# HeapDumpPath 为你的工程完成路径，到出到 dump 文件夹下。\n# 运行方法后，就可以在 docs/dump 就可以看到产生的日志了。\n</code></pre>\n","excerpt":"","more":"<h1 id=\"jmap的使用\"><a href=\"#jmap的使用\" class=\"headerlink\" title=\"jmap的使用\"></a>jmap的使用</h1><ul>\n<li>方式一</li>\n</ul>\n<p><a href=\"https://github.com/183461750/doc-record/blob/9ebb07355231f4ae916fdfec741c7e0d044c35ab/materiel/ai/java/java%E4%B8%ADhprof%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BA.md\">java hprof文件如何导出</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">找pid</span></span><br><span class=\"line\">ps -ef | grep xxl-job-admin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-0-1-94 data]# jmap -dump:format=b,file=/data/temp/xxl-job-admin.hprof 24663</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">24663: Unable to open socket file: target process not responding or HotSpot VM not loaded</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">The -F option can be used when the target process is not responding</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">示例(PS: AI提供的命令执行失败的话, 加上-F参数)</span></span><br><span class=\"line\">jmap -F -dump:format=b,file=/data/temp/xxl-job-admin.hprof 24663</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式二</li>\n</ul>\n<p>在启动jar包时候添加参数</p>\n<p><a href=\"https://mp.weixin.qq.com/s/3xCxRxfrz_Y41z7PO-d82g\">参考文章</a></p>\n<pre><code class=\"bash\">\n-Xms128M -Xmx128M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=../xfg-dev-tech-dump/docs/dump\n\n# HeapDumpPath 为你的工程完成路径，到出到 dump 文件夹下。\n# 运行方法后，就可以在 docs/dump 就可以看到产生的日志了。\n</code></pre>\n"},{"_content":"# sshuttle\n\n[github地址](https://github.com/sshuttle/sshuttle)\n\n```bash\n# 本地安装\nbrew install sshuttle\n\n# 本地执行命令, 将10.0.1.0/24流量代理到服务器中去\nsshuttle --sudoers-user fa -r jump.local.container2222-sshuttle.fa.intranet.company 10.0.1.0/24\n```\n","source":"_posts/tools/terminal/sshuttle/doc.md","raw":"# sshuttle\n\n[github地址](https://github.com/sshuttle/sshuttle)\n\n```bash\n# 本地安装\nbrew install sshuttle\n\n# 本地执行命令, 将10.0.1.0/24流量代理到服务器中去\nsshuttle --sudoers-user fa -r jump.local.container2222-sshuttle.fa.intranet.company 10.0.1.0/24\n```\n","slug":"tools/terminal/sshuttle/doc","published":1,"date":"2025-02-23T07:43:31.771Z","updated":"2025-02-23T07:43:31.772Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwax006ymswsdcat02cc","content":"<h1 id=\"sshuttle\"><a href=\"#sshuttle\" class=\"headerlink\" title=\"sshuttle\"></a>sshuttle</h1><p><a href=\"https://github.com/sshuttle/sshuttle\">github地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地安装</span></span><br><span class=\"line\">brew install sshuttle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地执行命令, 将10.0.1.0/24流量代理到服务器中去</span></span><br><span class=\"line\">sshuttle --sudoers-user fa -r jump.local.container2222-sshuttle.fa.intranet.company 10.0.1.0/24</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"sshuttle\"><a href=\"#sshuttle\" class=\"headerlink\" title=\"sshuttle\"></a>sshuttle</h1><p><a href=\"https://github.com/sshuttle/sshuttle\">github地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地安装</span></span><br><span class=\"line\">brew install sshuttle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地执行命令, 将10.0.1.0/24流量代理到服务器中去</span></span><br><span class=\"line\">sshuttle --sudoers-user fa -r jump.local.container2222-sshuttle.fa.intranet.company 10.0.1.0/24</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":14,"description":"camunda使用记录","parent":"Camunda","has_children":false,"grand_parent":"Devs","_content":"\n# camunda使用记录\n\n## 使用docker运行camunda\n\n```bash\n# 拉取代码\ngit clone https://github.com/camunda/camunda-platform\n# 进入指定目录\ncd docker-compose/camunda-8.6\n# 启动容器\ndocker compose --profile modeling up -d\n# 打开web页面[localhost:8070](localhost:8070)\n```\n","source":"_posts/docker/app/devs/camunda/camunda.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: camunda使用记录\nparent: Camunda\nhas_children: false\npermalink: \"/docker/app/devs/camunda/camunda/\"\ngrand_parent: Devs\n---\n\n# camunda使用记录\n\n## 使用docker运行camunda\n\n```bash\n# 拉取代码\ngit clone https://github.com/camunda/camunda-platform\n# 进入指定目录\ncd docker-compose/camunda-8.6\n# 启动容器\ndocker compose --profile modeling up -d\n# 打开web页面[localhost:8070](localhost:8070)\n```\n","slug":"docker/app/devs/camunda/camunda","published":1,"date":"2025-02-23T07:43:30.485Z","updated":"2025-02-23T07:43:30.485Z","__permalink":"/docker/app/devs/camunda/camunda/","comments":1,"photos":[],"_id":"cm7k5rwax006zmswsdkucfls3","content":"<h1 id=\"camunda使用记录\"><a href=\"#camunda使用记录\" class=\"headerlink\" title=\"camunda使用记录\"></a>camunda使用记录</h1><h2 id=\"使用docker运行camunda\"><a href=\"#使用docker运行camunda\" class=\"headerlink\" title=\"使用docker运行camunda\"></a>使用docker运行camunda</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取代码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/camunda/camunda-platform</span><br><span class=\"line\"><span class=\"comment\"># 进入指定目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> docker-compose/camunda-8.6</span><br><span class=\"line\"><span class=\"comment\"># 启动容器</span></span><br><span class=\"line\">docker compose --profile modeling up -d</span><br><span class=\"line\"><span class=\"comment\"># 打开web页面[localhost:8070](localhost:8070)</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"camunda使用记录\"><a href=\"#camunda使用记录\" class=\"headerlink\" title=\"camunda使用记录\"></a>camunda使用记录</h1><h2 id=\"使用docker运行camunda\"><a href=\"#使用docker运行camunda\" class=\"headerlink\" title=\"使用docker运行camunda\"></a>使用docker运行camunda</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取代码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/camunda/camunda-platform</span><br><span class=\"line\"><span class=\"comment\"># 进入指定目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> docker-compose/camunda-8.6</span><br><span class=\"line\"><span class=\"comment\"># 启动容器</span></span><br><span class=\"line\">docker compose --profile modeling up -d</span><br><span class=\"line\"><span class=\"comment\"># 打开web页面[localhost:8070](localhost:8070)</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Camunda","nav_order":4,"has_children":true,"parent":"Camunda","_content":"\n# Camunda\n","source":"_posts/docker/app/devs/camunda/index.md","raw":"---\nlayout: default\ntitle: Camunda\nnav_order: 4\nhas_children: true\nparent: Camunda\npermalink: \"/docker/app/devs/camunda/\"\n---\n\n# Camunda\n","slug":"docker/app/devs/camunda/index","published":1,"date":"2025-02-23T07:43:30.515Z","updated":"2025-02-23T07:43:30.523Z","__permalink":"/docker/app/devs/camunda/","comments":1,"photos":[],"_id":"cm7k5rwax0070mswscatb10yw","content":"<h1 id=\"Camunda\"><a href=\"#Camunda\" class=\"headerlink\" title=\"Camunda\"></a>Camunda</h1>","excerpt":"","more":"<h1 id=\"Camunda\"><a href=\"#Camunda\" class=\"headerlink\" title=\"Camunda\"></a>Camunda</h1>"},{"layout":"default","title":"Data","nav_order":4,"has_children":true,"parent":"Data","_content":"\n# Data\n","source":"_posts/docker/app/devs/data/index.md","raw":"---\nlayout: default\ntitle: Data\nnav_order: 4\nhas_children: true\nparent: Data\npermalink: \"/docker/app/devs/data/\"\n---\n\n# Data\n","slug":"docker/app/devs/data/index","published":1,"date":"2025-02-23T07:43:31.045Z","updated":"2025-02-23T07:43:31.045Z","__permalink":"/docker/app/devs/data/","comments":1,"photos":[],"_id":"cm7k5rwax0071mswse5xpdc1z","content":"<h1 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"Data\"></a>Data</h1>","excerpt":"","more":"<h1 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"Data\"></a>Data</h1>"},{"layout":"default","title":"Interpreter","nav_order":3,"description":"interpreter","parent":"Interpreter","has_children":false,"grand_parent":"Terminal","_content":"\n# interpreter\n\n[官方文档](https://docs.openinterpreter.com/getting-started/introduction)\n\n## 安装\n\n```bash\npip install open-interpreter\n```\n\n## 使用\n\n```bash\ninterpreter\n# 使用本地模型\ninterpreter --model ollama/<model-name>\n# 示例\ninterpreter --model ollama/qwen2.5-coder\n```\n","source":"_posts/tools/terminal/interpreter/interpreter.md","raw":"---\nlayout: default\ntitle: Interpreter\nnav_order: 3\ndescription: interpreter\nparent: Interpreter\nhas_children: false\npermalink: \"/tools/terminal/interpreter/interpreter/\"\ngrand_parent: Terminal\n---\n\n# interpreter\n\n[官方文档](https://docs.openinterpreter.com/getting-started/introduction)\n\n## 安装\n\n```bash\npip install open-interpreter\n```\n\n## 使用\n\n```bash\ninterpreter\n# 使用本地模型\ninterpreter --model ollama/<model-name>\n# 示例\ninterpreter --model ollama/qwen2.5-coder\n```\n","slug":"tools/terminal/interpreter/interpreter","published":1,"date":"2025-02-23T07:43:31.765Z","updated":"2025-02-23T07:43:31.766Z","__permalink":"/tools/terminal/interpreter/interpreter/","comments":1,"photos":[],"_id":"cm7k5rwax0072msws6jnxcfh4","content":"<h1 id=\"interpreter\"><a href=\"#interpreter\" class=\"headerlink\" title=\"interpreter\"></a>interpreter</h1><p><a href=\"https://docs.openinterpreter.com/getting-started/introduction\">官方文档</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install open-interpreter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interpreter</span><br><span class=\"line\"><span class=\"comment\"># 使用本地模型</span></span><br><span class=\"line\">interpreter --model ollama/&lt;model-name&gt;</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">interpreter --model ollama/qwen2.5-coder</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"interpreter\"><a href=\"#interpreter\" class=\"headerlink\" title=\"interpreter\"></a>interpreter</h1><p><a href=\"https://docs.openinterpreter.com/getting-started/introduction\">官方文档</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install open-interpreter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interpreter</span><br><span class=\"line\"><span class=\"comment\"># 使用本地模型</span></span><br><span class=\"line\">interpreter --model ollama/&lt;model-name&gt;</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">interpreter --model ollama/qwen2.5-coder</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":14,"description":"openHands使用记录","parent":"Openhands","has_children":false,"grand_parent":"Devs","_content":"\n# openHands使用记录\n\n[github仓库](https://github.com/All-Hands-AI/OpenHands)\n\n## 安装\n\n```bash\nWORKSPACE_BASE=$(pwd)/workspace\ndocker run -it \\\n    --pull=always \\\n    -e SANDBOX_USER_ID=$(id -u) \\\n    -e WORKSPACE_MOUNT_PATH=$WORKSPACE_BASE \\\n    -v $WORKSPACE_BASE:/opt/workspace_base \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -p 3000:3000 \\\n    --add-host host.docker.internal:host-gateway \\\n    --name openhands-app-$(date +%Y%m%d%H%M%S) \\\n    ghcr.io/all-hands-ai/openhands:main\n```\n\n- 使用本地llama模型\n\n```bash\nexport WORKSPACE_BASE=$(pwd)/workspace\n\ndocker run \\\n    -it \\\n    --pull=always \\\n    --add-host host.docker.internal:host-gateway \\\n    -e SANDBOX_USER_ID=$(id -u) \\\n    -e LLM_API_KEY=\"ollama\" \\\n    -e LLM_BASE_URL=\"http://host.docker.internal:11434\" \\\n    -e WORKSPACE_MOUNT_PATH=$WORKSPACE_BASE \\\n    -v $WORKSPACE_BASE:/opt/workspace_base \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -p 3000:3000 \\\n    ghcr.io/all-hands-ai/openhands:main\n```\n\n- 使用cloudflare llama模型\n\n```bash\nexport WORKSPACE_BASE=$(pwd)/workspace\n\n\n    # -e LLM_API_KEY=\"ollama\" \\\n    \ndocker run \\\n    -it \\\n    --pull=always \\\n    --add-host host.docker.internal:host-gateway \\\n    -e SANDBOX_USER_ID=$(id -u) \\\n    -e LLM_BASE_URL=\"https://meta-llama-3-8b-instruct.183461750.workers.dev\" \\\n    -e WORKSPACE_MOUNT_PATH=$WORKSPACE_BASE \\\n    -v $WORKSPACE_BASE:/opt/workspace_base \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -p 3000:3000 \\\n    ghcr.io/all-hands-ai/openhands:main\n```\n\n- 使用通义千问模型\n\n```bash\nexport WORKSPACE_BASE=$(pwd)/workspace\n\ndocker run \\\n    -it \\\n    --pull=always \\\n    --add-host host.docker.internal:host-gateway \\\n    -e SANDBOX_USER_ID=$(id -u) \\\n    -e LLM_API_KEY=\"sk-2fa37a46be454b349c8bab1e89eea58a\" \\\n    -e LLM_BASE_URL=\"https://dashscope.aliyuncs.com/api/v1/apps/f41f5b2eb89b49519d3458024a89257c/completion\" \\\n    -e WORKSPACE_MOUNT_PATH=$WORKSPACE_BASE \\\n    -v $WORKSPACE_BASE:/opt/workspace_base \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -p 3000:3000 \\\n    ghcr.io/all-hands-ai/openhands:main\n```\n","source":"_posts/docker/app/devs/openHands/openHands.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: openHands使用记录\nparent: Openhands\nhas_children: false\npermalink: \"/docker/app/devs/openhands/openhands/\"\ngrand_parent: Devs\n---\n\n# openHands使用记录\n\n[github仓库](https://github.com/All-Hands-AI/OpenHands)\n\n## 安装\n\n```bash\nWORKSPACE_BASE=$(pwd)/workspace\ndocker run -it \\\n    --pull=always \\\n    -e SANDBOX_USER_ID=$(id -u) \\\n    -e WORKSPACE_MOUNT_PATH=$WORKSPACE_BASE \\\n    -v $WORKSPACE_BASE:/opt/workspace_base \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -p 3000:3000 \\\n    --add-host host.docker.internal:host-gateway \\\n    --name openhands-app-$(date +%Y%m%d%H%M%S) \\\n    ghcr.io/all-hands-ai/openhands:main\n```\n\n- 使用本地llama模型\n\n```bash\nexport WORKSPACE_BASE=$(pwd)/workspace\n\ndocker run \\\n    -it \\\n    --pull=always \\\n    --add-host host.docker.internal:host-gateway \\\n    -e SANDBOX_USER_ID=$(id -u) \\\n    -e LLM_API_KEY=\"ollama\" \\\n    -e LLM_BASE_URL=\"http://host.docker.internal:11434\" \\\n    -e WORKSPACE_MOUNT_PATH=$WORKSPACE_BASE \\\n    -v $WORKSPACE_BASE:/opt/workspace_base \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -p 3000:3000 \\\n    ghcr.io/all-hands-ai/openhands:main\n```\n\n- 使用cloudflare llama模型\n\n```bash\nexport WORKSPACE_BASE=$(pwd)/workspace\n\n\n    # -e LLM_API_KEY=\"ollama\" \\\n    \ndocker run \\\n    -it \\\n    --pull=always \\\n    --add-host host.docker.internal:host-gateway \\\n    -e SANDBOX_USER_ID=$(id -u) \\\n    -e LLM_BASE_URL=\"https://meta-llama-3-8b-instruct.183461750.workers.dev\" \\\n    -e WORKSPACE_MOUNT_PATH=$WORKSPACE_BASE \\\n    -v $WORKSPACE_BASE:/opt/workspace_base \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -p 3000:3000 \\\n    ghcr.io/all-hands-ai/openhands:main\n```\n\n- 使用通义千问模型\n\n```bash\nexport WORKSPACE_BASE=$(pwd)/workspace\n\ndocker run \\\n    -it \\\n    --pull=always \\\n    --add-host host.docker.internal:host-gateway \\\n    -e SANDBOX_USER_ID=$(id -u) \\\n    -e LLM_API_KEY=\"sk-2fa37a46be454b349c8bab1e89eea58a\" \\\n    -e LLM_BASE_URL=\"https://dashscope.aliyuncs.com/api/v1/apps/f41f5b2eb89b49519d3458024a89257c/completion\" \\\n    -e WORKSPACE_MOUNT_PATH=$WORKSPACE_BASE \\\n    -v $WORKSPACE_BASE:/opt/workspace_base \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -p 3000:3000 \\\n    ghcr.io/all-hands-ai/openhands:main\n```\n","slug":"docker/app/devs/openHands/openHands","published":1,"date":"2025-02-23T07:43:30.525Z","updated":"2025-02-23T07:43:30.526Z","__permalink":"/docker/app/devs/openhands/openhands/","comments":1,"photos":[],"_id":"cm7k5rwax0073mswsez1hfqt2","content":"<h1 id=\"openHands使用记录\"><a href=\"#openHands使用记录\" class=\"headerlink\" title=\"openHands使用记录\"></a>openHands使用记录</h1><p><a href=\"https://github.com/All-Hands-AI/OpenHands\">github仓库</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKSPACE_BASE=$(<span class=\"built_in\">pwd</span>)/workspace</span><br><span class=\"line\">docker run -it \\</span><br><span class=\"line\">    --pull=always \\</span><br><span class=\"line\">    -e SANDBOX_USER_ID=$(<span class=\"built_in\">id</span> -u) \\</span><br><span class=\"line\">    -e WORKSPACE_MOUNT_PATH=<span class=\"variable\">$WORKSPACE_BASE</span> \\</span><br><span class=\"line\">    -v <span class=\"variable\">$WORKSPACE_BASE</span>:/opt/workspace_base \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -p 3000:3000 \\</span><br><span class=\"line\">    --add-host host.docker.internal:host-gateway \\</span><br><span class=\"line\">    --name openhands-app-$(<span class=\"built_in\">date</span> +%Y%m%d%H%M%S) \\</span><br><span class=\"line\">    ghcr.io/all-hands-ai/openhands:main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用本地llama模型</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> WORKSPACE_BASE=$(<span class=\"built_in\">pwd</span>)/workspace</span><br><span class=\"line\"></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    -it \\</span><br><span class=\"line\">    --pull=always \\</span><br><span class=\"line\">    --add-host host.docker.internal:host-gateway \\</span><br><span class=\"line\">    -e SANDBOX_USER_ID=$(<span class=\"built_in\">id</span> -u) \\</span><br><span class=\"line\">    -e LLM_API_KEY=<span class=\"string\">&quot;ollama&quot;</span> \\</span><br><span class=\"line\">    -e LLM_BASE_URL=<span class=\"string\">&quot;http://host.docker.internal:11434&quot;</span> \\</span><br><span class=\"line\">    -e WORKSPACE_MOUNT_PATH=<span class=\"variable\">$WORKSPACE_BASE</span> \\</span><br><span class=\"line\">    -v <span class=\"variable\">$WORKSPACE_BASE</span>:/opt/workspace_base \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -p 3000:3000 \\</span><br><span class=\"line\">    ghcr.io/all-hands-ai/openhands:main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用cloudflare llama模型</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> WORKSPACE_BASE=$(<span class=\"built_in\">pwd</span>)/workspace</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># -e LLM_API_KEY=&quot;ollama&quot; \\</span></span><br><span class=\"line\">    </span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    -it \\</span><br><span class=\"line\">    --pull=always \\</span><br><span class=\"line\">    --add-host host.docker.internal:host-gateway \\</span><br><span class=\"line\">    -e SANDBOX_USER_ID=$(<span class=\"built_in\">id</span> -u) \\</span><br><span class=\"line\">    -e LLM_BASE_URL=<span class=\"string\">&quot;https://meta-llama-3-8b-instruct.183461750.workers.dev&quot;</span> \\</span><br><span class=\"line\">    -e WORKSPACE_MOUNT_PATH=<span class=\"variable\">$WORKSPACE_BASE</span> \\</span><br><span class=\"line\">    -v <span class=\"variable\">$WORKSPACE_BASE</span>:/opt/workspace_base \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -p 3000:3000 \\</span><br><span class=\"line\">    ghcr.io/all-hands-ai/openhands:main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用通义千问模型</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> WORKSPACE_BASE=$(<span class=\"built_in\">pwd</span>)/workspace</span><br><span class=\"line\"></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    -it \\</span><br><span class=\"line\">    --pull=always \\</span><br><span class=\"line\">    --add-host host.docker.internal:host-gateway \\</span><br><span class=\"line\">    -e SANDBOX_USER_ID=$(<span class=\"built_in\">id</span> -u) \\</span><br><span class=\"line\">    -e LLM_API_KEY=<span class=\"string\">&quot;sk-2fa37a46be454b349c8bab1e89eea58a&quot;</span> \\</span><br><span class=\"line\">    -e LLM_BASE_URL=<span class=\"string\">&quot;https://dashscope.aliyuncs.com/api/v1/apps/f41f5b2eb89b49519d3458024a89257c/completion&quot;</span> \\</span><br><span class=\"line\">    -e WORKSPACE_MOUNT_PATH=<span class=\"variable\">$WORKSPACE_BASE</span> \\</span><br><span class=\"line\">    -v <span class=\"variable\">$WORKSPACE_BASE</span>:/opt/workspace_base \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -p 3000:3000 \\</span><br><span class=\"line\">    ghcr.io/all-hands-ai/openhands:main</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"openHands使用记录\"><a href=\"#openHands使用记录\" class=\"headerlink\" title=\"openHands使用记录\"></a>openHands使用记录</h1><p><a href=\"https://github.com/All-Hands-AI/OpenHands\">github仓库</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKSPACE_BASE=$(<span class=\"built_in\">pwd</span>)/workspace</span><br><span class=\"line\">docker run -it \\</span><br><span class=\"line\">    --pull=always \\</span><br><span class=\"line\">    -e SANDBOX_USER_ID=$(<span class=\"built_in\">id</span> -u) \\</span><br><span class=\"line\">    -e WORKSPACE_MOUNT_PATH=<span class=\"variable\">$WORKSPACE_BASE</span> \\</span><br><span class=\"line\">    -v <span class=\"variable\">$WORKSPACE_BASE</span>:/opt/workspace_base \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -p 3000:3000 \\</span><br><span class=\"line\">    --add-host host.docker.internal:host-gateway \\</span><br><span class=\"line\">    --name openhands-app-$(<span class=\"built_in\">date</span> +%Y%m%d%H%M%S) \\</span><br><span class=\"line\">    ghcr.io/all-hands-ai/openhands:main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用本地llama模型</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> WORKSPACE_BASE=$(<span class=\"built_in\">pwd</span>)/workspace</span><br><span class=\"line\"></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    -it \\</span><br><span class=\"line\">    --pull=always \\</span><br><span class=\"line\">    --add-host host.docker.internal:host-gateway \\</span><br><span class=\"line\">    -e SANDBOX_USER_ID=$(<span class=\"built_in\">id</span> -u) \\</span><br><span class=\"line\">    -e LLM_API_KEY=<span class=\"string\">&quot;ollama&quot;</span> \\</span><br><span class=\"line\">    -e LLM_BASE_URL=<span class=\"string\">&quot;http://host.docker.internal:11434&quot;</span> \\</span><br><span class=\"line\">    -e WORKSPACE_MOUNT_PATH=<span class=\"variable\">$WORKSPACE_BASE</span> \\</span><br><span class=\"line\">    -v <span class=\"variable\">$WORKSPACE_BASE</span>:/opt/workspace_base \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -p 3000:3000 \\</span><br><span class=\"line\">    ghcr.io/all-hands-ai/openhands:main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用cloudflare llama模型</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> WORKSPACE_BASE=$(<span class=\"built_in\">pwd</span>)/workspace</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># -e LLM_API_KEY=&quot;ollama&quot; \\</span></span><br><span class=\"line\">    </span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    -it \\</span><br><span class=\"line\">    --pull=always \\</span><br><span class=\"line\">    --add-host host.docker.internal:host-gateway \\</span><br><span class=\"line\">    -e SANDBOX_USER_ID=$(<span class=\"built_in\">id</span> -u) \\</span><br><span class=\"line\">    -e LLM_BASE_URL=<span class=\"string\">&quot;https://meta-llama-3-8b-instruct.183461750.workers.dev&quot;</span> \\</span><br><span class=\"line\">    -e WORKSPACE_MOUNT_PATH=<span class=\"variable\">$WORKSPACE_BASE</span> \\</span><br><span class=\"line\">    -v <span class=\"variable\">$WORKSPACE_BASE</span>:/opt/workspace_base \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -p 3000:3000 \\</span><br><span class=\"line\">    ghcr.io/all-hands-ai/openhands:main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用通义千问模型</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> WORKSPACE_BASE=$(<span class=\"built_in\">pwd</span>)/workspace</span><br><span class=\"line\"></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    -it \\</span><br><span class=\"line\">    --pull=always \\</span><br><span class=\"line\">    --add-host host.docker.internal:host-gateway \\</span><br><span class=\"line\">    -e SANDBOX_USER_ID=$(<span class=\"built_in\">id</span> -u) \\</span><br><span class=\"line\">    -e LLM_API_KEY=<span class=\"string\">&quot;sk-2fa37a46be454b349c8bab1e89eea58a&quot;</span> \\</span><br><span class=\"line\">    -e LLM_BASE_URL=<span class=\"string\">&quot;https://dashscope.aliyuncs.com/api/v1/apps/f41f5b2eb89b49519d3458024a89257c/completion&quot;</span> \\</span><br><span class=\"line\">    -e WORKSPACE_MOUNT_PATH=<span class=\"variable\">$WORKSPACE_BASE</span> \\</span><br><span class=\"line\">    -v <span class=\"variable\">$WORKSPACE_BASE</span>:/opt/workspace_base \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -p 3000:3000 \\</span><br><span class=\"line\">    ghcr.io/all-hands-ai/openhands:main</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Jenkins","nav_order":4,"has_children":true,"parent":"Jenkins","_content":"\n# Jenkins\n","source":"_posts/docker/app/devs/jenkins/index.md","raw":"---\nlayout: default\ntitle: Jenkins\nnav_order: 4\nhas_children: true\nparent: Jenkins\npermalink: \"/docker/app/devs/jenkins/\"\n---\n\n# Jenkins\n","slug":"docker/app/devs/jenkins/index","published":1,"date":"2025-02-23T07:43:31.003Z","updated":"2025-02-23T07:43:31.003Z","__permalink":"/docker/app/devs/jenkins/","comments":1,"photos":[],"_id":"cm7k5rwax0074mswscsrafie5","content":"<h1 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h1>","excerpt":"","more":"<h1 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h1>"},{"layout":"default","title":"Maven","nav_order":4,"has_children":true,"parent":"Maven","_content":"\n# Maven\n","source":"_posts/docker/app/devs/maven/index.md","raw":"---\nlayout: default\ntitle: Maven\nnav_order: 4\nhas_children: true\nparent: Maven\npermalink: \"/docker/app/devs/maven/\"\n---\n\n# Maven\n","slug":"docker/app/devs/maven/index","published":1,"date":"2025-02-23T07:43:30.461Z","updated":"2025-02-23T07:43:30.478Z","__permalink":"/docker/app/devs/maven/","comments":1,"photos":[],"_id":"cm7k5rwax0075msws6jovaq6h","content":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1>","excerpt":"","more":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1>"},{"layout":"default","title":"Openhands","nav_order":4,"has_children":true,"parent":"Openhands","_content":"\n# Openhands\n","source":"_posts/docker/app/devs/openHands/index.md","raw":"---\nlayout: default\ntitle: Openhands\nnav_order: 4\nhas_children: true\nparent: Openhands\npermalink: \"/docker/app/devs/openhands/\"\n---\n\n# Openhands\n","slug":"docker/app/devs/openHands/index","published":1,"date":"2025-02-23T07:43:30.527Z","updated":"2025-02-23T07:43:30.527Z","__permalink":"/docker/app/devs/openhands/","comments":1,"photos":[],"_id":"cm7k5rway0076mswsh1jp3vo9","content":"<h1 id=\"Openhands\"><a href=\"#Openhands\" class=\"headerlink\" title=\"Openhands\"></a>Openhands</h1>","excerpt":"","more":"<h1 id=\"Openhands\"><a href=\"#Openhands\" class=\"headerlink\" title=\"Openhands\"></a>Openhands</h1>"},{"layout":"default","title":"Watch","nav_order":4,"has_children":true,"parent":"Watch","_content":"\n# Watch\n","source":"_posts/docker/app/devs/watch/index.md","raw":"---\nlayout: default\ntitle: Watch\nnav_order: 4\nhas_children: true\nparent: Watch\npermalink: \"/docker/app/devs/watch/\"\n---\n\n# Watch\n","slug":"docker/app/devs/watch/index","published":1,"date":"2025-02-23T07:43:30.832Z","updated":"2025-02-23T07:43:30.833Z","__permalink":"/docker/app/devs/watch/","comments":1,"photos":[],"_id":"cm7k5rway0077msws1gaga30l","content":"<h1 id=\"Watch\"><a href=\"#Watch\" class=\"headerlink\" title=\"Watch\"></a>Watch</h1>","excerpt":"","more":"<h1 id=\"Watch\"><a href=\"#Watch\" class=\"headerlink\" title=\"Watch\"></a>Watch</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"安装node_exporter```shell1、wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz2、tar -zxf node_exporter-1.1.2.linux-amd64.tar.gz -C /usr/local/3、cd /usr/local/4、mv /usr/local/node_exporter-1.1.2.linux-amd64/ /usr/local/node_exporter5、vim config.yml(配置访问的用户名密码，可根据需要跳过这一步)```- 使用htpasswd加密密码，加密方式为htpasswd -nBC 12 '' | tr -d ':\n'- config.yml```shellbasic_auth_users:   当前设置的用户名为 prometheus ， 可以设置多个   密码加密方式 htpasswd -nBC 12 '' | tr -d ':\n'  username: password``````shell6、nohup /usr/local/node_exporter/node_exporter --web.config=./config.yml &nohup ./node_exporter --web.config=./config.yml &```","parent":"Watch","has_children":false,"grand_parent":"Devs","_content":"\n## 安装node_exporter\n```shell\n1、wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz\n2、tar -zxf node_exporter-1.1.2.linux-amd64.tar.gz -C /usr/local/\n3、cd /usr/local/\n4、mv /usr/local/node_exporter-1.1.2.linux-amd64/ /usr/local/node_exporter\n5、vim config.yml(配置访问的用户名密码，可根据需要跳过这一步)\n```\n- 使用htpasswd加密密码，加密方式为htpasswd -nBC 12 '' | tr -d ':\\n'\n- config.yml\n```shell\nbasic_auth_users:\n  # 当前设置的用户名为 prometheus ， 可以设置多个\n  # 密码加密方式 htpasswd -nBC 12 '' | tr -d ':\\n'\n  username: password\n```\n```shell\n6、nohup /usr/local/node_exporter/node_exporter --web.config=./config.yml &\nnohup ./node_exporter --web.config=./config.yml &\n```\n\n## influxdb配置\n```shell\n# 可通过此方式创建库\ndocker exec -it 容器名 ./run-basic.sh\n```\n\n## alertmanager配置\n```shell\n参数说明：\n\nresolve_timeout: 当告警的状态由firing变为resolve后需要等待多长时间，才宣布告警解除\n\nreceivers：定义谁接收告警。\n\nname： 代称，方便后面使用\n\nroute：告警内容从这里进入，寻找相应的策略发送出去\n\nreceiver：一级的receiver，也就是默认的receiver，当告警进来后没有找到任何子节点和自己匹配，就用这个receiver\n\ngroup_by：告警应该根据那些标签进行分组\n\ngroup_wait：同一组的告警发出前要等待多久后才能再次发出去\n\ngroup_interval：同一组的多批次告警间隔多少秒后，才能发出\n\nrepeat_interval：重复的告警要等待多久后才能再次发出去\n\ninhibit_rules：这个叫做抑制项，通过匹配源告警来抑制目的告警。比如说当我们的主机挂了，可能引起主机上的服务，数据库，中间件等一些告警，假如说后续的这些告警相对来说没有意义，我们可以用抑制项这个功能，让Prometheus只发出主机挂了的告警\n\nsource_match：根据label匹配源告警\n\ntarget_match：根据label匹配目的告警\n\nequal：此处的集合的label，在源和目的的值必须相等。如果该集合内的值在源和目的里都没有，那么目的告警也会被抑制\n```\n","source":"_posts/docker/app/devs/watch/watch.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: |-\n  安装node_exporter```shell1、wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz2、tar -zxf node_exporter-1.1.2.linux-amd64.tar.gz -C /usr/local/3、cd /usr/local/4、mv /usr/local/node_exporter-1.1.2.linux-amd64/ /usr/local/node_exporter5、vim config.yml(配置访问的用户名密码，可根据需要跳过这一步)```- 使用htpasswd加密密码，加密方式为htpasswd -nBC 12 '' | tr -d ':\n  '- config.yml```shellbasic_auth_users:   当前设置的用户名为 prometheus ， 可以设置多个   密码加密方式 htpasswd -nBC 12 '' | tr -d ':\n  '  username: password``````shell6、nohup /usr/local/node_exporter/node_exporter --web.config=./config.yml &nohup ./node_exporter --web.config=./config.yml &```\nparent: Watch\nhas_children: false\npermalink: \"/docker/app/devs/watch/watch/\"\ngrand_parent: Devs\n---\n\n## 安装node_exporter\n```shell\n1、wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz\n2、tar -zxf node_exporter-1.1.2.linux-amd64.tar.gz -C /usr/local/\n3、cd /usr/local/\n4、mv /usr/local/node_exporter-1.1.2.linux-amd64/ /usr/local/node_exporter\n5、vim config.yml(配置访问的用户名密码，可根据需要跳过这一步)\n```\n- 使用htpasswd加密密码，加密方式为htpasswd -nBC 12 '' | tr -d ':\\n'\n- config.yml\n```shell\nbasic_auth_users:\n  # 当前设置的用户名为 prometheus ， 可以设置多个\n  # 密码加密方式 htpasswd -nBC 12 '' | tr -d ':\\n'\n  username: password\n```\n```shell\n6、nohup /usr/local/node_exporter/node_exporter --web.config=./config.yml &\nnohup ./node_exporter --web.config=./config.yml &\n```\n\n## influxdb配置\n```shell\n# 可通过此方式创建库\ndocker exec -it 容器名 ./run-basic.sh\n```\n\n## alertmanager配置\n```shell\n参数说明：\n\nresolve_timeout: 当告警的状态由firing变为resolve后需要等待多长时间，才宣布告警解除\n\nreceivers：定义谁接收告警。\n\nname： 代称，方便后面使用\n\nroute：告警内容从这里进入，寻找相应的策略发送出去\n\nreceiver：一级的receiver，也就是默认的receiver，当告警进来后没有找到任何子节点和自己匹配，就用这个receiver\n\ngroup_by：告警应该根据那些标签进行分组\n\ngroup_wait：同一组的告警发出前要等待多久后才能再次发出去\n\ngroup_interval：同一组的多批次告警间隔多少秒后，才能发出\n\nrepeat_interval：重复的告警要等待多久后才能再次发出去\n\ninhibit_rules：这个叫做抑制项，通过匹配源告警来抑制目的告警。比如说当我们的主机挂了，可能引起主机上的服务，数据库，中间件等一些告警，假如说后续的这些告警相对来说没有意义，我们可以用抑制项这个功能，让Prometheus只发出主机挂了的告警\n\nsource_match：根据label匹配源告警\n\ntarget_match：根据label匹配目的告警\n\nequal：此处的集合的label，在源和目的的值必须相等。如果该集合内的值在源和目的里都没有，那么目的告警也会被抑制\n```\n","slug":"docker/app/devs/watch/watch","published":1,"date":"2025-02-23T07:43:30.686Z","updated":"2025-02-23T07:43:30.709Z","__permalink":"/docker/app/devs/watch/watch/","comments":1,"photos":[],"_id":"cm7k5rway0078msws4lhvbeaa","content":"<h2 id=\"安装node-exporter\"><a href=\"#安装node-exporter\" class=\"headerlink\" title=\"安装node_exporter\"></a>安装node_exporter</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz</span><br><span class=\"line\">2、tar -zxf node_exporter-1.1.2.linux-amd64.tar.gz -C /usr/local/</span><br><span class=\"line\">3、cd /usr/local/</span><br><span class=\"line\">4、mv /usr/local/node_exporter-1.1.2.linux-amd64/ /usr/local/node_exporter</span><br><span class=\"line\">5、vim config.yml(配置访问的用户名密码，可根据需要跳过这一步)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用htpasswd加密密码，加密方式为htpasswd -nBC 12 ‘’ | tr -d ‘:\\n’</li>\n<li>config.yml<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basic_auth_users:</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">当前设置的用户名为 prometheus ， 可以设置多个</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">密码加密方式 htpasswd -nBC 12 <span class=\"string\">&#x27;&#x27;</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;:\\n&#x27;</span></span></span><br><span class=\"line\">  username: password</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6、nohup /usr/local/node_exporter/node_exporter --web.config=./config.yml &amp;</span><br><span class=\"line\">nohup ./node_exporter --web.config=./config.yml &amp;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"influxdb配置\"><a href=\"#influxdb配置\" class=\"headerlink\" title=\"influxdb配置\"></a>influxdb配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可通过此方式创建库</span></span><br><span class=\"line\">docker exec -it 容器名 ./run-basic.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"alertmanager配置\"><a href=\"#alertmanager配置\" class=\"headerlink\" title=\"alertmanager配置\"></a>alertmanager配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数说明：</span><br><span class=\"line\"></span><br><span class=\"line\">resolve_timeout: 当告警的状态由firing变为resolve后需要等待多长时间，才宣布告警解除</span><br><span class=\"line\"></span><br><span class=\"line\">receivers：定义谁接收告警。</span><br><span class=\"line\"></span><br><span class=\"line\">name： 代称，方便后面使用</span><br><span class=\"line\"></span><br><span class=\"line\">route：告警内容从这里进入，寻找相应的策略发送出去</span><br><span class=\"line\"></span><br><span class=\"line\">receiver：一级的receiver，也就是默认的receiver，当告警进来后没有找到任何子节点和自己匹配，就用这个receiver</span><br><span class=\"line\"></span><br><span class=\"line\">group_by：告警应该根据那些标签进行分组</span><br><span class=\"line\"></span><br><span class=\"line\">group_wait：同一组的告警发出前要等待多久后才能再次发出去</span><br><span class=\"line\"></span><br><span class=\"line\">group_interval：同一组的多批次告警间隔多少秒后，才能发出</span><br><span class=\"line\"></span><br><span class=\"line\">repeat_interval：重复的告警要等待多久后才能再次发出去</span><br><span class=\"line\"></span><br><span class=\"line\">inhibit_rules：这个叫做抑制项，通过匹配源告警来抑制目的告警。比如说当我们的主机挂了，可能引起主机上的服务，数据库，中间件等一些告警，假如说后续的这些告警相对来说没有意义，我们可以用抑制项这个功能，让Prometheus只发出主机挂了的告警</span><br><span class=\"line\"></span><br><span class=\"line\">source_match：根据label匹配源告警</span><br><span class=\"line\"></span><br><span class=\"line\">target_match：根据label匹配目的告警</span><br><span class=\"line\"></span><br><span class=\"line\">equal：此处的集合的label，在源和目的的值必须相等。如果该集合内的值在源和目的里都没有，那么目的告警也会被抑制</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"安装node-exporter\"><a href=\"#安装node-exporter\" class=\"headerlink\" title=\"安装node_exporter\"></a>安装node_exporter</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz</span><br><span class=\"line\">2、tar -zxf node_exporter-1.1.2.linux-amd64.tar.gz -C /usr/local/</span><br><span class=\"line\">3、cd /usr/local/</span><br><span class=\"line\">4、mv /usr/local/node_exporter-1.1.2.linux-amd64/ /usr/local/node_exporter</span><br><span class=\"line\">5、vim config.yml(配置访问的用户名密码，可根据需要跳过这一步)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用htpasswd加密密码，加密方式为htpasswd -nBC 12 ‘’ | tr -d ‘:\\n’</li>\n<li>config.yml<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basic_auth_users:</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">当前设置的用户名为 prometheus ， 可以设置多个</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">密码加密方式 htpasswd -nBC 12 <span class=\"string\">&#x27;&#x27;</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;:\\n&#x27;</span></span></span><br><span class=\"line\">  username: password</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6、nohup /usr/local/node_exporter/node_exporter --web.config=./config.yml &amp;</span><br><span class=\"line\">nohup ./node_exporter --web.config=./config.yml &amp;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"influxdb配置\"><a href=\"#influxdb配置\" class=\"headerlink\" title=\"influxdb配置\"></a>influxdb配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可通过此方式创建库</span></span><br><span class=\"line\">docker exec -it 容器名 ./run-basic.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"alertmanager配置\"><a href=\"#alertmanager配置\" class=\"headerlink\" title=\"alertmanager配置\"></a>alertmanager配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数说明：</span><br><span class=\"line\"></span><br><span class=\"line\">resolve_timeout: 当告警的状态由firing变为resolve后需要等待多长时间，才宣布告警解除</span><br><span class=\"line\"></span><br><span class=\"line\">receivers：定义谁接收告警。</span><br><span class=\"line\"></span><br><span class=\"line\">name： 代称，方便后面使用</span><br><span class=\"line\"></span><br><span class=\"line\">route：告警内容从这里进入，寻找相应的策略发送出去</span><br><span class=\"line\"></span><br><span class=\"line\">receiver：一级的receiver，也就是默认的receiver，当告警进来后没有找到任何子节点和自己匹配，就用这个receiver</span><br><span class=\"line\"></span><br><span class=\"line\">group_by：告警应该根据那些标签进行分组</span><br><span class=\"line\"></span><br><span class=\"line\">group_wait：同一组的告警发出前要等待多久后才能再次发出去</span><br><span class=\"line\"></span><br><span class=\"line\">group_interval：同一组的多批次告警间隔多少秒后，才能发出</span><br><span class=\"line\"></span><br><span class=\"line\">repeat_interval：重复的告警要等待多久后才能再次发出去</span><br><span class=\"line\"></span><br><span class=\"line\">inhibit_rules：这个叫做抑制项，通过匹配源告警来抑制目的告警。比如说当我们的主机挂了，可能引起主机上的服务，数据库，中间件等一些告警，假如说后续的这些告警相对来说没有意义，我们可以用抑制项这个功能，让Prometheus只发出主机挂了的告警</span><br><span class=\"line\"></span><br><span class=\"line\">source_match：根据label匹配源告警</span><br><span class=\"line\"></span><br><span class=\"line\">target_match：根据label匹配目的告警</span><br><span class=\"line\"></span><br><span class=\"line\">equal：此处的集合的label，在源和目的的值必须相等。如果该集合内的值在源和目的里都没有，那么目的告警也会被抑制</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc-test","nav_order":14,"description":"Jenkins配置```shell","parent":"Yapi","has_children":false,"grand_parent":"Devs","_content":"\n## Jenkins配置\n```shell\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n\n# 创建docker mongo.yml文件(执行一次就好了)\ntee mongo.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  mongo:\n    image: mongo\n    environment:\n      - MONGO_INITDB_DATABASE=yapi\n      - MONGO_INITDB_ROOT_USERNAME=root\n      - MONGO_INITDB_ROOT_PASSWORD=root\n    ports:\n      - target: 27017\n        published: 27017\n        mode: host\n    volumes:\n      - mongo_data_db:/data/db\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  mongo_data_db:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c mongo.yml data\n\n\n# 自定义配置文件 config.json\n# 其中管理员账号在下面配置，密码默认为ymfe.org\ntee config.json <<-'EOF'\n\n{\n  \"port\": \"3000\",\n  \"adminAccount\": \"admin\",\n  \"timeout\":120000,\n  \"db\": {\n    \"servername\": \"_MONGO_SERVER_NAME\",\n    \"DATABASE\": \"yapi\",\n    \"port\": 27017,\n    \"user\": \"root\",\n    \"pass\": \"root\",\n    \"authSource\": \"admin\"\n  }\n}\n\nEOF\n\n# 自定义配置文件 docker-entrypoint.sh\ntee docker-entrypoint.sh <<-'EOF'\n#!/bin/bash\n\n# set -eo pipefail\n\ndeclare -A PAGE_PARAMS=(\n\n  [\"_MONGO_SERVER_NAME\"]=\"mongo\"\n\n)\n\nfor index in \"${!PAGE_PARAMS[@]}\";\n\ndo\n\n  ENV_VAL=`eval echo '$'${index}`\n\n  [ -z \"${ENV_VAL}\" ] && ENV_VAL=${PAGE_PARAMS[$index]}\n\n  echo \"text repeat: ${index}-->${ENV_VAL}\"\n  echo \"$(/bin/sed \"s!${index}!${ENV_VAL}!g\" /yapi/config.json)\" > /yapi/config.json;\n\ndone\n\nexec \"$@\"\n\nEOF\n\n# 创建Dockerfile文件\ntee Dockerfile <<-'EOF'\n\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python3 make\nENV VERSION=1.9.3\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd vendors && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 183461750@qq.com\nENV TZ=\"Asia/Shanghai\"\nENV MONGO_SERVER_NAME=mongo\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nCOPY config.json ../config.json\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\nRUN echo -e http://mirrors.ustc.edu.cn/alpine/v3.15/main/ > /etc/apk/repositories\nRUN apk add --no-cache bash\nEXPOSE 3000\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"node\", \"server/app.js\"]\n\nEOF\n\n# app构建版本号\nexport app_version='1.0'\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 创建docker yapi.yml文件\ntee $JOB_NAME.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 3000\n        published: 3000\n        mode: host\n    environment:\n      MONGO_SERVER_NAME: mongo\n    depends_on:\n      - mongo\n    volumes:\n      - yapi_log:/home/vendors/log\n      - ./config.json:/yapi/config.json\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  yapi_log:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c $JOB_NAME.yml open_app\n\n```\n","source":"_posts/docker/app/devs/yapi/doc-test.md","raw":"---\nlayout: default\ntitle: doc-test\nnav_order: 14\ndescription: Jenkins配置```shell\nparent: Yapi\nhas_children: false\npermalink: \"/docker/app/devs/yapi/doc-test/\"\ngrand_parent: Devs\n---\n\n## Jenkins配置\n```shell\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n\n# 创建docker mongo.yml文件(执行一次就好了)\ntee mongo.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  mongo:\n    image: mongo\n    environment:\n      - MONGO_INITDB_DATABASE=yapi\n      - MONGO_INITDB_ROOT_USERNAME=root\n      - MONGO_INITDB_ROOT_PASSWORD=root\n    ports:\n      - target: 27017\n        published: 27017\n        mode: host\n    volumes:\n      - mongo_data_db:/data/db\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  mongo_data_db:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c mongo.yml data\n\n\n# 自定义配置文件 config.json\n# 其中管理员账号在下面配置，密码默认为ymfe.org\ntee config.json <<-'EOF'\n\n{\n  \"port\": \"3000\",\n  \"adminAccount\": \"admin\",\n  \"timeout\":120000,\n  \"db\": {\n    \"servername\": \"_MONGO_SERVER_NAME\",\n    \"DATABASE\": \"yapi\",\n    \"port\": 27017,\n    \"user\": \"root\",\n    \"pass\": \"root\",\n    \"authSource\": \"admin\"\n  }\n}\n\nEOF\n\n# 自定义配置文件 docker-entrypoint.sh\ntee docker-entrypoint.sh <<-'EOF'\n#!/bin/bash\n\n# set -eo pipefail\n\ndeclare -A PAGE_PARAMS=(\n\n  [\"_MONGO_SERVER_NAME\"]=\"mongo\"\n\n)\n\nfor index in \"${!PAGE_PARAMS[@]}\";\n\ndo\n\n  ENV_VAL=`eval echo '$'${index}`\n\n  [ -z \"${ENV_VAL}\" ] && ENV_VAL=${PAGE_PARAMS[$index]}\n\n  echo \"text repeat: ${index}-->${ENV_VAL}\"\n  echo \"$(/bin/sed \"s!${index}!${ENV_VAL}!g\" /yapi/config.json)\" > /yapi/config.json;\n\ndone\n\nexec \"$@\"\n\nEOF\n\n# 创建Dockerfile文件\ntee Dockerfile <<-'EOF'\n\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python3 make\nENV VERSION=1.9.3\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd vendors && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 183461750@qq.com\nENV TZ=\"Asia/Shanghai\"\nENV MONGO_SERVER_NAME=mongo\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nCOPY config.json ../config.json\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\nRUN echo -e http://mirrors.ustc.edu.cn/alpine/v3.15/main/ > /etc/apk/repositories\nRUN apk add --no-cache bash\nEXPOSE 3000\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"node\", \"server/app.js\"]\n\nEOF\n\n# app构建版本号\nexport app_version='1.0'\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 创建docker yapi.yml文件\ntee $JOB_NAME.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 3000\n        published: 3000\n        mode: host\n    environment:\n      MONGO_SERVER_NAME: mongo\n    depends_on:\n      - mongo\n    volumes:\n      - yapi_log:/home/vendors/log\n      - ./config.json:/yapi/config.json\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  yapi_log:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c $JOB_NAME.yml open_app\n\n```\n","slug":"docker/app/devs/yapi/doc-test","published":1,"date":"2025-02-23T07:43:30.538Z","updated":"2025-02-23T07:43:30.543Z","__permalink":"/docker/app/devs/yapi/doc-test/","comments":1,"photos":[],"_id":"cm7k5rway0079msws5t7b50wv","content":"<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker mongo.yml文件(执行一次就好了)</span></span><br><span class=\"line\">tee mongo.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\">  mongo:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - MONGO_INITDB_DATABASE=yapi</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_USERNAME=root</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_PASSWORD=root</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 27017</span><br><span class=\"line\">        published: 27017</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - mongo_data_db:/data/db</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  mongo_data_db:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c mongo.yml data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 config.json</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中管理员账号在下面配置，密码默认为ymfe.org</span></span><br><span class=\"line\">tee config.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;port&quot;: &quot;3000&quot;,</span><br><span class=\"line\">  &quot;adminAccount&quot;: &quot;admin&quot;,</span><br><span class=\"line\">  &quot;timeout&quot;:120000,</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;servername&quot;: &quot;_MONGO_SERVER_NAME&quot;,</span><br><span class=\"line\">    &quot;DATABASE&quot;: &quot;yapi&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;user&quot;: &quot;root&quot;,</span><br><span class=\"line\">    &quot;pass&quot;: &quot;root&quot;,</span><br><span class=\"line\">    &quot;authSource&quot;: &quot;admin&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 docker-entrypoint.sh</span></span><br><span class=\"line\">tee docker-entrypoint.sh &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">set</span> -eo pipefail</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare -A PAGE_PARAMS=(</span><br><span class=\"line\"></span><br><span class=\"line\">  [&quot;_MONGO_SERVER_NAME&quot;]=&quot;mongo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">for index in &quot;$&#123;!PAGE_PARAMS[@]&#125;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">do</span><br><span class=\"line\"></span><br><span class=\"line\">  ENV_VAL=`eval echo &#x27;$&#x27;$&#123;index&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">  [ -z &quot;$&#123;ENV_VAL&#125;&quot; ] &amp;&amp; ENV_VAL=$&#123;PAGE_PARAMS[$index]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  echo &quot;text repeat: $&#123;index&#125;--&gt;$&#123;ENV_VAL&#125;&quot;</span><br><span class=\"line\">  echo &quot;$(/bin/sed &quot;s!$&#123;index&#125;!$&#123;ENV_VAL&#125;!g&quot; /yapi/config.json)&quot; &gt; /yapi/config.json;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">exec &quot;$@&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python3 make</span><br><span class=\"line\">ENV VERSION=1.9.3</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd vendors &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 183461750@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">ENV MONGO_SERVER_NAME=mongo</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">COPY config.json ../config.json</span><br><span class=\"line\">COPY docker-entrypoint.sh /docker-entrypoint.sh</span><br><span class=\"line\">RUN chmod +x /docker-entrypoint.sh</span><br><span class=\"line\">RUN echo -e http://mirrors.ustc.edu.cn/alpine/v3.15/main/ &gt; /etc/apk/repositories</span><br><span class=\"line\">RUN apk add --no-cache bash</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</span><br><span class=\"line\">CMD [&quot;node&quot;, &quot;server/app.js&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">app构建版本号</span></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker yapi.yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 3000</span><br><span class=\"line\">        published: 3000</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MONGO_SERVER_NAME: mongo</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mongo</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - yapi_log:/home/vendors/log</span><br><span class=\"line\">      - ./config.json:/yapi/config.json</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  yapi_log:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml open_app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker mongo.yml文件(执行一次就好了)</span></span><br><span class=\"line\">tee mongo.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\">  mongo:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - MONGO_INITDB_DATABASE=yapi</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_USERNAME=root</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_PASSWORD=root</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 27017</span><br><span class=\"line\">        published: 27017</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - mongo_data_db:/data/db</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  mongo_data_db:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c mongo.yml data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 config.json</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中管理员账号在下面配置，密码默认为ymfe.org</span></span><br><span class=\"line\">tee config.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;port&quot;: &quot;3000&quot;,</span><br><span class=\"line\">  &quot;adminAccount&quot;: &quot;admin&quot;,</span><br><span class=\"line\">  &quot;timeout&quot;:120000,</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;servername&quot;: &quot;_MONGO_SERVER_NAME&quot;,</span><br><span class=\"line\">    &quot;DATABASE&quot;: &quot;yapi&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;user&quot;: &quot;root&quot;,</span><br><span class=\"line\">    &quot;pass&quot;: &quot;root&quot;,</span><br><span class=\"line\">    &quot;authSource&quot;: &quot;admin&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 docker-entrypoint.sh</span></span><br><span class=\"line\">tee docker-entrypoint.sh &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">set</span> -eo pipefail</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare -A PAGE_PARAMS=(</span><br><span class=\"line\"></span><br><span class=\"line\">  [&quot;_MONGO_SERVER_NAME&quot;]=&quot;mongo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">for index in &quot;$&#123;!PAGE_PARAMS[@]&#125;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">do</span><br><span class=\"line\"></span><br><span class=\"line\">  ENV_VAL=`eval echo &#x27;$&#x27;$&#123;index&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">  [ -z &quot;$&#123;ENV_VAL&#125;&quot; ] &amp;&amp; ENV_VAL=$&#123;PAGE_PARAMS[$index]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  echo &quot;text repeat: $&#123;index&#125;--&gt;$&#123;ENV_VAL&#125;&quot;</span><br><span class=\"line\">  echo &quot;$(/bin/sed &quot;s!$&#123;index&#125;!$&#123;ENV_VAL&#125;!g&quot; /yapi/config.json)&quot; &gt; /yapi/config.json;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">exec &quot;$@&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python3 make</span><br><span class=\"line\">ENV VERSION=1.9.3</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd vendors &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 183461750@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">ENV MONGO_SERVER_NAME=mongo</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">COPY config.json ../config.json</span><br><span class=\"line\">COPY docker-entrypoint.sh /docker-entrypoint.sh</span><br><span class=\"line\">RUN chmod +x /docker-entrypoint.sh</span><br><span class=\"line\">RUN echo -e http://mirrors.ustc.edu.cn/alpine/v3.15/main/ &gt; /etc/apk/repositories</span><br><span class=\"line\">RUN apk add --no-cache bash</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</span><br><span class=\"line\">CMD [&quot;node&quot;, &quot;server/app.js&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">app构建版本号</span></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker yapi.yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 3000</span><br><span class=\"line\">        published: 3000</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MONGO_SERVER_NAME: mongo</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mongo</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - yapi_log:/home/vendors/log</span><br><span class=\"line\">      - ./config.json:/yapi/config.json</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  yapi_log:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml open_app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Zentao","nav_order":4,"has_children":true,"parent":"Zentao","_content":"\n# Zentao\n","source":"_posts/docker/app/devs/zentao/index.md","raw":"---\nlayout: default\ntitle: Zentao\nnav_order: 4\nhas_children: true\nparent: Zentao\npermalink: \"/docker/app/devs/zentao/\"\n---\n\n# Zentao\n","slug":"docker/app/devs/zentao/index","published":1,"date":"2025-02-23T07:43:30.413Z","updated":"2025-02-23T07:43:30.419Z","__permalink":"/docker/app/devs/zentao/","comments":1,"photos":[],"_id":"cm7k5rway007amsws6020cir4","content":"<h1 id=\"Zentao\"><a href=\"#Zentao\" class=\"headerlink\" title=\"Zentao\"></a>Zentao</h1>","excerpt":"","more":"<h1 id=\"Zentao\"><a href=\"#Zentao\" class=\"headerlink\" title=\"Zentao\"></a>Zentao</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"Dockerfile```shellFROM node:12-alpine as builderWORKDIR /yapiRUN apk add --no-cache wget python makeENV VERSION=1.9.2RUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zipRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendorsRUN cd /yapi/vendors && cp config_example.json ../config.json && npm install --production --registry https://registry.npm.taobao.org","parent":"Yapi","has_children":false,"grand_parent":"Devs","_content":"\n## Dockerfile\n```shell\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python make\nENV VERSION=1.9.2\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd /yapi/vendors && cp config_example.json ../config.json && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 545544032@qq.com\nENV TZ=\"Asia/Shanghai\"\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nEXPOSE 3000\nENTRYPOINT [\"node\"]\n```\n```shell\ntee Dockerfile <<-'EOF'\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python make\nENV VERSION=1.9.3\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd /yapi/vendors && cp config_example.json ../config.json && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 183461750@qq.com\nENV TZ=\"Asia/Shanghai\"\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nEXPOSE 3000\nENTRYPOINT [\"node\"]\nEOF\n\n```\n## 构建镜像\n```shell\ndocker build -t yapi .\n```\n## yapi升级\n```shell\n\n# 1、停止并删除旧版容器\ndocker rm -f yapi\n\n# 2、获取最新镜像\ndocker pull registry.cn-hangzhou.aliyuncs.com/anoyi/yapi\n\n# 3、启动新容器\ndocker run -d \\\n  --name yapi \\\n  --link mongo-yapi:mongo \\\n  --workdir /yapi \\\n  -p 3000:3000 \\\n  -v $PWD/config.json:/config.json \\\n  registry.cn-hangzhou.aliyuncs.com/anoyi/yapi \\\n  server/app.js\n```\n## Jenkins配置\n```shell\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 创建Dockerfile文件\ntee Dockerfile <<-'EOF'\n\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python3 make\nENV VERSION=1.9.2\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd /yapi/vendors && cp config_example.json ../config.json && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 183461750@qq.com\nENV TZ=\"Asia/Shanghai\"\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nEXPOSE 3000\n# ENTRYPOINT [\"node\"]\nENTRYPOINT [\"node\", \"./server/app.js\"]\n\nEOF\n\n# app构建版本号\nexport app_version='1.0'\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 自定义配置文件 config.json\ntee config.json <<-'EOF'\n\n{\n  \"port\": \"3000\",\n  \"adminAccount\": \"183461750@qq.com\",\n  \"timeout\":120000,\n  \"db\": {\n    \"servername\": \"mongo\",\n    \"DATABASE\": \"yapi\",\n    \"port\": 27017,\n    \"user\": \"anoyi\",\n    \"pass\": \"anoyi.com\",\n    \"authSource\": \"admin\"\n  }\n}\n\nEOF\n\n# 创建docker yapi.yml文件\ntee $JOB_NAME.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    environment:\n      - VERSION=1.5.6\n      - LOG_PATH=/tmp/yapi.log\n      - HOME=/home\n      - PORT=3000\n      - ADMIN_EMAIL=test@test.com\n      - DB_SERVER=mongo\n      - DB_NAME=yapi\n      - DB_PORT=27017\n    ports:\n      - target: 3000\n        published: 3000\n        mode: host\n    volumes:\n      - yapi_log:/home/vendors/log\n      - ./config.json:/yapi/config.json\n    depends_on:\n      - mongo\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\n  mongo:\n    image: mongo\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=anoyi\n      - MONGO_INITDB_ROOT_PASSWORD=anoyi.com\n    volumes:\n      - mongo_data_db:/data/db\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  yapi_log:\n  mongo_data_db:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c $JOB_NAME.yml open_app\n\n```\n","source":"_posts/docker/app/devs/yapi/yapi.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: Dockerfile```shellFROM node:12-alpine as builderWORKDIR /yapiRUN apk\n  add --no-cache wget python makeENV VERSION=1.9.2RUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zipRUN\n  unzip v${VERSION}.zip && mv yapi-${VERSION} vendorsRUN cd /yapi/vendors && cp config_example.json\n  ../config.json && npm install --production --registry https://registry.npm.taobao.org\nparent: Yapi\nhas_children: false\npermalink: \"/docker/app/devs/yapi/yapi/\"\ngrand_parent: Devs\n---\n\n## Dockerfile\n```shell\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python make\nENV VERSION=1.9.2\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd /yapi/vendors && cp config_example.json ../config.json && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 545544032@qq.com\nENV TZ=\"Asia/Shanghai\"\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nEXPOSE 3000\nENTRYPOINT [\"node\"]\n```\n```shell\ntee Dockerfile <<-'EOF'\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python make\nENV VERSION=1.9.3\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd /yapi/vendors && cp config_example.json ../config.json && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 183461750@qq.com\nENV TZ=\"Asia/Shanghai\"\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nEXPOSE 3000\nENTRYPOINT [\"node\"]\nEOF\n\n```\n## 构建镜像\n```shell\ndocker build -t yapi .\n```\n## yapi升级\n```shell\n\n# 1、停止并删除旧版容器\ndocker rm -f yapi\n\n# 2、获取最新镜像\ndocker pull registry.cn-hangzhou.aliyuncs.com/anoyi/yapi\n\n# 3、启动新容器\ndocker run -d \\\n  --name yapi \\\n  --link mongo-yapi:mongo \\\n  --workdir /yapi \\\n  -p 3000:3000 \\\n  -v $PWD/config.json:/config.json \\\n  registry.cn-hangzhou.aliyuncs.com/anoyi/yapi \\\n  server/app.js\n```\n## Jenkins配置\n```shell\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 创建Dockerfile文件\ntee Dockerfile <<-'EOF'\n\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python3 make\nENV VERSION=1.9.2\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd /yapi/vendors && cp config_example.json ../config.json && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 183461750@qq.com\nENV TZ=\"Asia/Shanghai\"\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nEXPOSE 3000\n# ENTRYPOINT [\"node\"]\nENTRYPOINT [\"node\", \"./server/app.js\"]\n\nEOF\n\n# app构建版本号\nexport app_version='1.0'\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 自定义配置文件 config.json\ntee config.json <<-'EOF'\n\n{\n  \"port\": \"3000\",\n  \"adminAccount\": \"183461750@qq.com\",\n  \"timeout\":120000,\n  \"db\": {\n    \"servername\": \"mongo\",\n    \"DATABASE\": \"yapi\",\n    \"port\": 27017,\n    \"user\": \"anoyi\",\n    \"pass\": \"anoyi.com\",\n    \"authSource\": \"admin\"\n  }\n}\n\nEOF\n\n# 创建docker yapi.yml文件\ntee $JOB_NAME.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    environment:\n      - VERSION=1.5.6\n      - LOG_PATH=/tmp/yapi.log\n      - HOME=/home\n      - PORT=3000\n      - ADMIN_EMAIL=test@test.com\n      - DB_SERVER=mongo\n      - DB_NAME=yapi\n      - DB_PORT=27017\n    ports:\n      - target: 3000\n        published: 3000\n        mode: host\n    volumes:\n      - yapi_log:/home/vendors/log\n      - ./config.json:/yapi/config.json\n    depends_on:\n      - mongo\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\n  mongo:\n    image: mongo\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=anoyi\n      - MONGO_INITDB_ROOT_PASSWORD=anoyi.com\n    volumes:\n      - mongo_data_db:/data/db\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  yapi_log:\n  mongo_data_db:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c $JOB_NAME.yml open_app\n\n```\n","slug":"docker/app/devs/yapi/yapi","published":1,"date":"2025-02-23T07:43:30.571Z","updated":"2025-02-23T07:43:30.572Z","__permalink":"/docker/app/devs/yapi/yapi/","comments":1,"photos":[],"_id":"cm7k5rway007bmswsauz54gt6","content":"<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python make</span><br><span class=\"line\">ENV VERSION=1.9.2</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd /yapi/vendors &amp;&amp; cp config_example.json ../config.json &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 545544032@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">ENTRYPOINT [&quot;node&quot;]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python make</span><br><span class=\"line\">ENV VERSION=1.9.3</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd /yapi/vendors &amp;&amp; cp config_example.json ../config.json &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 183461750@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">ENTRYPOINT [&quot;node&quot;]</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t yapi .</span><br></pre></td></tr></table></figure>\n<h2 id=\"yapi升级\"><a href=\"#yapi升级\" class=\"headerlink\" title=\"yapi升级\"></a>yapi升级</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、停止并删除旧版容器</span></span><br><span class=\"line\">docker rm -f yapi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、获取最新镜像</span></span><br><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/anoyi/yapi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3、启动新容器</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name yapi \\</span><br><span class=\"line\">  --link mongo-yapi:mongo \\</span><br><span class=\"line\">  --workdir /yapi \\</span><br><span class=\"line\">  -p 3000:3000 \\</span><br><span class=\"line\">  -v $PWD/config.json:/config.json \\</span><br><span class=\"line\">  registry.cn-hangzhou.aliyuncs.com/anoyi/yapi \\</span><br><span class=\"line\">  server/app.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python3 make</span><br><span class=\"line\">ENV VERSION=1.9.2</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd /yapi/vendors &amp;&amp; cp config_example.json ../config.json &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 183461750@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ENTRYPOINT [<span class=\"string\">&quot;node&quot;</span>]</span></span><br><span class=\"line\">ENTRYPOINT [&quot;node&quot;, &quot;./server/app.js&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">app构建版本号</span></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 config.json</span></span><br><span class=\"line\">tee config.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;port&quot;: &quot;3000&quot;,</span><br><span class=\"line\">  &quot;adminAccount&quot;: &quot;183461750@qq.com&quot;,</span><br><span class=\"line\">  &quot;timeout&quot;:120000,</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;servername&quot;: &quot;mongo&quot;,</span><br><span class=\"line\">    &quot;DATABASE&quot;: &quot;yapi&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;user&quot;: &quot;anoyi&quot;,</span><br><span class=\"line\">    &quot;pass&quot;: &quot;anoyi.com&quot;,</span><br><span class=\"line\">    &quot;authSource&quot;: &quot;admin&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker yapi.yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - VERSION=1.5.6</span><br><span class=\"line\">      - LOG_PATH=/tmp/yapi.log</span><br><span class=\"line\">      - HOME=/home</span><br><span class=\"line\">      - PORT=3000</span><br><span class=\"line\">      - ADMIN_EMAIL=test@test.com</span><br><span class=\"line\">      - DB_SERVER=mongo</span><br><span class=\"line\">      - DB_NAME=yapi</span><br><span class=\"line\">      - DB_PORT=27017</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 3000</span><br><span class=\"line\">        published: 3000</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - yapi_log:/home/vendors/log</span><br><span class=\"line\">      - ./config.json:/yapi/config.json</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mongo</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">  mongo:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_USERNAME=anoyi</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_PASSWORD=anoyi.com</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - mongo_data_db:/data/db</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  yapi_log:</span><br><span class=\"line\">  mongo_data_db:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml open_app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python make</span><br><span class=\"line\">ENV VERSION=1.9.2</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd /yapi/vendors &amp;&amp; cp config_example.json ../config.json &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 545544032@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">ENTRYPOINT [&quot;node&quot;]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python make</span><br><span class=\"line\">ENV VERSION=1.9.3</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd /yapi/vendors &amp;&amp; cp config_example.json ../config.json &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 183461750@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">ENTRYPOINT [&quot;node&quot;]</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t yapi .</span><br></pre></td></tr></table></figure>\n<h2 id=\"yapi升级\"><a href=\"#yapi升级\" class=\"headerlink\" title=\"yapi升级\"></a>yapi升级</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、停止并删除旧版容器</span></span><br><span class=\"line\">docker rm -f yapi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、获取最新镜像</span></span><br><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/anoyi/yapi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3、启动新容器</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name yapi \\</span><br><span class=\"line\">  --link mongo-yapi:mongo \\</span><br><span class=\"line\">  --workdir /yapi \\</span><br><span class=\"line\">  -p 3000:3000 \\</span><br><span class=\"line\">  -v $PWD/config.json:/config.json \\</span><br><span class=\"line\">  registry.cn-hangzhou.aliyuncs.com/anoyi/yapi \\</span><br><span class=\"line\">  server/app.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python3 make</span><br><span class=\"line\">ENV VERSION=1.9.2</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd /yapi/vendors &amp;&amp; cp config_example.json ../config.json &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 183461750@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ENTRYPOINT [<span class=\"string\">&quot;node&quot;</span>]</span></span><br><span class=\"line\">ENTRYPOINT [&quot;node&quot;, &quot;./server/app.js&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">app构建版本号</span></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 config.json</span></span><br><span class=\"line\">tee config.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;port&quot;: &quot;3000&quot;,</span><br><span class=\"line\">  &quot;adminAccount&quot;: &quot;183461750@qq.com&quot;,</span><br><span class=\"line\">  &quot;timeout&quot;:120000,</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;servername&quot;: &quot;mongo&quot;,</span><br><span class=\"line\">    &quot;DATABASE&quot;: &quot;yapi&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;user&quot;: &quot;anoyi&quot;,</span><br><span class=\"line\">    &quot;pass&quot;: &quot;anoyi.com&quot;,</span><br><span class=\"line\">    &quot;authSource&quot;: &quot;admin&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker yapi.yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - VERSION=1.5.6</span><br><span class=\"line\">      - LOG_PATH=/tmp/yapi.log</span><br><span class=\"line\">      - HOME=/home</span><br><span class=\"line\">      - PORT=3000</span><br><span class=\"line\">      - ADMIN_EMAIL=test@test.com</span><br><span class=\"line\">      - DB_SERVER=mongo</span><br><span class=\"line\">      - DB_NAME=yapi</span><br><span class=\"line\">      - DB_PORT=27017</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 3000</span><br><span class=\"line\">        published: 3000</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - yapi_log:/home/vendors/log</span><br><span class=\"line\">      - ./config.json:/yapi/config.json</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mongo</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">  mongo:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_USERNAME=anoyi</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_PASSWORD=anoyi.com</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - mongo_data_db:/data/db</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  yapi_log:</span><br><span class=\"line\">  mongo_data_db:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml open_app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Yapi","nav_order":4,"has_children":true,"parent":"Yapi","_content":"\n# Yapi\n","source":"_posts/docker/app/devs/yapi/index.md","raw":"---\nlayout: default\ntitle: Yapi\nnav_order: 4\nhas_children: true\nparent: Yapi\npermalink: \"/docker/app/devs/yapi/\"\n---\n\n# Yapi\n","slug":"docker/app/devs/yapi/index","published":1,"date":"2025-02-23T07:43:30.564Z","updated":"2025-02-23T07:43:30.565Z","__permalink":"/docker/app/devs/yapi/","comments":1,"photos":[],"_id":"cm7k5rway007cmsws725mhutz","content":"<h1 id=\"Yapi\"><a href=\"#Yapi\" class=\"headerlink\" title=\"Yapi\"></a>Yapi</h1>","excerpt":"","more":"<h1 id=\"Yapi\"><a href=\"#Yapi\" class=\"headerlink\" title=\"Yapi\"></a>Yapi</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"禅道","parent":"Zentao","has_children":false,"grand_parent":"Devs","_content":"\n# 禅道\n\n## 执行命令\n\n```shell\n\ndocker run --name zentao -p 8888:80 --mac-address 02:42:ac:11:00:00 -v /home/data/docker/zentao/www/zentaopms:/www/zentaopms -v /home/data/docker/zentao/www/mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d easysoft/zentao\n\n```\n","source":"_posts/docker/app/devs/zentao/zentao.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: 禅道\nparent: Zentao\nhas_children: false\npermalink: \"/docker/app/devs/zentao/zentao/\"\ngrand_parent: Devs\n---\n\n# 禅道\n\n## 执行命令\n\n```shell\n\ndocker run --name zentao -p 8888:80 --mac-address 02:42:ac:11:00:00 -v /home/data/docker/zentao/www/zentaopms:/www/zentaopms -v /home/data/docker/zentao/www/mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d easysoft/zentao\n\n```\n","slug":"docker/app/devs/zentao/zentao","published":1,"date":"2025-02-23T07:43:30.340Z","updated":"2025-02-23T07:43:30.411Z","__permalink":"/docker/app/devs/zentao/zentao/","comments":1,"photos":[],"_id":"cm7k5rway007dmswsh3lt3hgo","content":"<h1 id=\"禅道\"><a href=\"#禅道\" class=\"headerlink\" title=\"禅道\"></a>禅道</h1><h2 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker run --name zentao -p 8888:80 --mac-address 02:42:ac:11:00:00 -v /home/data/docker/zentao/www/zentaopms:/www/zentaopms -v /home/data/docker/zentao/www/mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d easysoft/zentao</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"禅道\"><a href=\"#禅道\" class=\"headerlink\" title=\"禅道\"></a>禅道</h1><h2 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker run --name zentao -p 8888:80 --mac-address 02:42:ac:11:00:00 -v /home/data/docker/zentao/www/zentaopms:/www/zentaopms -v /home/data/docker/zentao/www/mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d easysoft/zentao</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":14,"description":"DoH和DoT配置- 使用Let’s Encrypt申请免费证书- 註冊了一個 abc.com 的域名，請先去 DNS 管理後台新增一條 A 記錄- 安装certbot","parent":"Adguard","has_children":false,"grand_parent":"Networks","_content":"\n## DoH和DoT配置\n- 使用Let’s Encrypt申请免费证书\n- 註冊了一個 abc.com 的域名，請先去 DNS 管理後台新增一條 A 記錄\n- 安装certbot\n\n``` shell\n# 切換 root 身份\n$ sudo su\n# 先更新系統\n$ apt update && apt full-upgrade -y\n# 安裝 certbot\n$ apt install certbot\n# 開始簽名，下面電子郵件跟域名請換成自己的\n$ certbot certonly --standalone -n --agree-tos --email webmaster@abc.com --preferred-challenges http -d dns.abc.com\n```\n- 证书自动续约\n``` shell\n# 先測試看看自動更新證書有無問題，下面這一條指令會測試去更新，並不會實際去更新\n$ certbot renew --dry-run\n# 如無問題的話，接著我們要把兩個月簽名一次的工作加入排程\n$ crontab -e\n\n# 選擇 nano 文字編輯器，打開文件後，複製以下到裡面，然後保存退出\n0 0 15 */2 * /usr/bin/certbot renew --quiet\n# 如此每隔兩個月十五號他就會自動執行一次續簽證書\n\n\n```\n- 在 iOS 上使用 DNSCloak 設定 On demand 自動切換\n\n    [参考文章](https://www.jkg.tw/p2660/)\n\n## 封锁清单\n- https://easylist-downloads.adblockplus.org/easylistchina.txt\n- https://anti-ad.net/easylist.txt\n- [参考文章](https://www.isharepc.com/27230.html)\n\n## DNS服务器\n\n```text\n223.5.5.5\n119.29.29.29\n114.114.114.114\n223.6.6.6\n2400:3200::1\n2400:3200:baba::1\nhttps://dns.alidns.com/dns-query\ntls://dns.alidns.com\n```\n","source":"_posts/docker/app/networks/adguard/adguard.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: DoH和DoT配置- 使用Let’s Encrypt申请免费证书- 註冊了一個 abc.com 的域名，請先去 DNS 管理後台新增一條\n  A 記錄- 安装certbot\nparent: Adguard\nhas_children: false\npermalink: \"/docker/app/networks/adguard/adguard/\"\ngrand_parent: Networks\n---\n\n## DoH和DoT配置\n- 使用Let’s Encrypt申请免费证书\n- 註冊了一個 abc.com 的域名，請先去 DNS 管理後台新增一條 A 記錄\n- 安装certbot\n\n``` shell\n# 切換 root 身份\n$ sudo su\n# 先更新系統\n$ apt update && apt full-upgrade -y\n# 安裝 certbot\n$ apt install certbot\n# 開始簽名，下面電子郵件跟域名請換成自己的\n$ certbot certonly --standalone -n --agree-tos --email webmaster@abc.com --preferred-challenges http -d dns.abc.com\n```\n- 证书自动续约\n``` shell\n# 先測試看看自動更新證書有無問題，下面這一條指令會測試去更新，並不會實際去更新\n$ certbot renew --dry-run\n# 如無問題的話，接著我們要把兩個月簽名一次的工作加入排程\n$ crontab -e\n\n# 選擇 nano 文字編輯器，打開文件後，複製以下到裡面，然後保存退出\n0 0 15 */2 * /usr/bin/certbot renew --quiet\n# 如此每隔兩個月十五號他就會自動執行一次續簽證書\n\n\n```\n- 在 iOS 上使用 DNSCloak 設定 On demand 自動切換\n\n    [参考文章](https://www.jkg.tw/p2660/)\n\n## 封锁清单\n- https://easylist-downloads.adblockplus.org/easylistchina.txt\n- https://anti-ad.net/easylist.txt\n- [参考文章](https://www.isharepc.com/27230.html)\n\n## DNS服务器\n\n```text\n223.5.5.5\n119.29.29.29\n114.114.114.114\n223.6.6.6\n2400:3200::1\n2400:3200:baba::1\nhttps://dns.alidns.com/dns-query\ntls://dns.alidns.com\n```\n","slug":"docker/app/networks/adguard/adguard","published":1,"date":"2025-02-23T07:43:31.071Z","updated":"2025-02-23T07:43:31.071Z","__permalink":"/docker/app/networks/adguard/adguard/","comments":1,"photos":[],"_id":"cm7k5rway007emsws3vikci61","content":"<h2 id=\"DoH和DoT配置\"><a href=\"#DoH和DoT配置\" class=\"headerlink\" title=\"DoH和DoT配置\"></a>DoH和DoT配置</h2><ul>\n<li>使用Let’s Encrypt申请免费证书</li>\n<li>註冊了一個 abc.com 的域名，請先去 DNS 管理後台新增一條 A 記錄</li>\n<li>安装certbot</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切換 root 身份</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">sudo</span> su</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先更新系統</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">apt update &amp;&amp; apt full-upgrade -y</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安裝 certbot</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">apt install certbot</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">開始簽名，下面電子郵件跟域名請換成自己的</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">certbot certonly --standalone -n --agree-tos --email webmaster@abc.com --preferred-challenges http -d dns.abc.com</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>证书自动续约</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先測試看看自動更新證書有無問題，下面這一條指令會測試去更新，並不會實際去更新</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">certbot renew --dry-run</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如無問題的話，接著我們要把兩個月簽名一次的工作加入排程</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">crontab -e</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">選擇 nano 文字編輯器，打開文件後，複製以下到裡面，然後保存退出</span></span><br><span class=\"line\">0 0 15 */2 * /usr/bin/certbot renew --quiet</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如此每隔兩個月十五號他就會自動執行一次續簽證書</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>在 iOS 上使用 DNSCloak 設定 On demand 自動切換</p>\n<p>  <a href=\"https://www.jkg.tw/p2660/\">参考文章</a></p>\n</li>\n</ul>\n<h2 id=\"封锁清单\"><a href=\"#封锁清单\" class=\"headerlink\" title=\"封锁清单\"></a>封锁清单</h2><ul>\n<li><a href=\"https://easylist-downloads.adblockplus.org/easylistchina.txt\">https://easylist-downloads.adblockplus.org/easylistchina.txt</a></li>\n<li><a href=\"https://anti-ad.net/easylist.txt\">https://anti-ad.net/easylist.txt</a></li>\n<li><a href=\"https://www.isharepc.com/27230.html\">参考文章</a></li>\n</ul>\n<h2 id=\"DNS服务器\"><a href=\"#DNS服务器\" class=\"headerlink\" title=\"DNS服务器\"></a>DNS服务器</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">223.5.5.5</span><br><span class=\"line\">119.29.29.29</span><br><span class=\"line\">114.114.114.114</span><br><span class=\"line\">223.6.6.6</span><br><span class=\"line\">2400:3200::1</span><br><span class=\"line\">2400:3200:baba::1</span><br><span class=\"line\">https://dns.alidns.com/dns-query</span><br><span class=\"line\">tls://dns.alidns.com</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"DoH和DoT配置\"><a href=\"#DoH和DoT配置\" class=\"headerlink\" title=\"DoH和DoT配置\"></a>DoH和DoT配置</h2><ul>\n<li>使用Let’s Encrypt申请免费证书</li>\n<li>註冊了一個 abc.com 的域名，請先去 DNS 管理後台新增一條 A 記錄</li>\n<li>安装certbot</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切換 root 身份</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">sudo</span> su</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先更新系統</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">apt update &amp;&amp; apt full-upgrade -y</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安裝 certbot</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">apt install certbot</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">開始簽名，下面電子郵件跟域名請換成自己的</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">certbot certonly --standalone -n --agree-tos --email webmaster@abc.com --preferred-challenges http -d dns.abc.com</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>证书自动续约</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先測試看看自動更新證書有無問題，下面這一條指令會測試去更新，並不會實際去更新</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">certbot renew --dry-run</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如無問題的話，接著我們要把兩個月簽名一次的工作加入排程</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">crontab -e</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">選擇 nano 文字編輯器，打開文件後，複製以下到裡面，然後保存退出</span></span><br><span class=\"line\">0 0 15 */2 * /usr/bin/certbot renew --quiet</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如此每隔兩個月十五號他就會自動執行一次續簽證書</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>在 iOS 上使用 DNSCloak 設定 On demand 自動切換</p>\n<p>  <a href=\"https://www.jkg.tw/p2660/\">参考文章</a></p>\n</li>\n</ul>\n<h2 id=\"封锁清单\"><a href=\"#封锁清单\" class=\"headerlink\" title=\"封锁清单\"></a>封锁清单</h2><ul>\n<li><a href=\"https://easylist-downloads.adblockplus.org/easylistchina.txt\">https://easylist-downloads.adblockplus.org/easylistchina.txt</a></li>\n<li><a href=\"https://anti-ad.net/easylist.txt\">https://anti-ad.net/easylist.txt</a></li>\n<li><a href=\"https://www.isharepc.com/27230.html\">参考文章</a></li>\n</ul>\n<h2 id=\"DNS服务器\"><a href=\"#DNS服务器\" class=\"headerlink\" title=\"DNS服务器\"></a>DNS服务器</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">223.5.5.5</span><br><span class=\"line\">119.29.29.29</span><br><span class=\"line\">114.114.114.114</span><br><span class=\"line\">223.6.6.6</span><br><span class=\"line\">2400:3200::1</span><br><span class=\"line\">2400:3200:baba::1</span><br><span class=\"line\">https://dns.alidns.com/dns-query</span><br><span class=\"line\">tls://dns.alidns.com</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Adguard","nav_order":4,"has_children":true,"parent":"Adguard","_content":"\n# Adguard\n","source":"_posts/docker/app/networks/adguard/index.md","raw":"---\nlayout: default\ntitle: Adguard\nnav_order: 4\nhas_children: true\nparent: Adguard\npermalink: \"/docker/app/networks/adguard/\"\n---\n\n# Adguard\n","slug":"docker/app/networks/adguard/index","published":1,"date":"2025-02-23T07:43:31.071Z","updated":"2025-02-23T07:43:31.072Z","__permalink":"/docker/app/networks/adguard/","comments":1,"photos":[],"_id":"cm7k5rway007fmsws2cqkdetm","content":"<h1 id=\"Adguard\"><a href=\"#Adguard\" class=\"headerlink\" title=\"Adguard\"></a>Adguard</h1>","excerpt":"","more":"<h1 id=\"Adguard\"><a href=\"#Adguard\" class=\"headerlink\" title=\"Adguard\"></a>Adguard</h1>"},{"layout":"default","title":"Netbird","nav_order":4,"has_children":true,"parent":"Netbird","_content":"\n# Netbird\n","source":"_posts/docker/app/networks/netbird/index.md","raw":"---\nlayout: default\ntitle: Netbird\nnav_order: 4\nhas_children: true\nparent: Netbird\npermalink: \"/docker/app/networks/netbird/\"\n---\n\n# Netbird\n","slug":"docker/app/networks/netbird/index","published":1,"date":"2025-02-23T07:43:31.075Z","updated":"2025-02-23T07:43:31.075Z","__permalink":"/docker/app/networks/netbird/","comments":1,"photos":[],"_id":"cm7k5rwaz007gmsws16i74a3c","content":"<h1 id=\"Netbird\"><a href=\"#Netbird\" class=\"headerlink\" title=\"Netbird\"></a>Netbird</h1>","excerpt":"","more":"<h1 id=\"Netbird\"><a href=\"#Netbird\" class=\"headerlink\" title=\"Netbird\"></a>Netbird</h1>"},{"layout":"default","title":"Rtorrent","nav_order":4,"has_children":true,"parent":"Rtorrent","_content":"\n# Rtorrent\n","source":"_posts/docker/app/networks/rTorrent/index.md","raw":"---\nlayout: default\ntitle: Rtorrent\nnav_order: 4\nhas_children: true\nparent: Rtorrent\npermalink: \"/docker/app/networks/rtorrent/\"\n---\n\n# Rtorrent\n","slug":"docker/app/networks/rTorrent/index","published":1,"date":"2025-02-23T07:43:31.076Z","updated":"2025-02-23T07:43:31.076Z","__permalink":"/docker/app/networks/rtorrent/","comments":1,"photos":[],"_id":"cm7k5rwaz007hmsws0my95c51","content":"<h1 id=\"Rtorrent\"><a href=\"#Rtorrent\" class=\"headerlink\" title=\"Rtorrent\"></a>Rtorrent</h1>","excerpt":"","more":"<h1 id=\"Rtorrent\"><a href=\"#Rtorrent\" class=\"headerlink\" title=\"Rtorrent\"></a>Rtorrent</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"BT种子下载","parent":"Rtorrent","has_children":false,"grand_parent":"Networks","_content":"\n# BT种子下载\n\n- 暂时没有使用的需求，就暂时不折腾了\n- [参考文章](https://www.aiwanba.net/post/8560.html)\n- wonderfall/rtorrent-flood(在dockerhub中搜索`rtorrent`即可)\n  \n","source":"_posts/docker/app/networks/rTorrent/rTorrent.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: BT种子下载\nparent: Rtorrent\nhas_children: false\npermalink: \"/docker/app/networks/rtorrent/rtorrent/\"\ngrand_parent: Networks\n---\n\n# BT种子下载\n\n- 暂时没有使用的需求，就暂时不折腾了\n- [参考文章](https://www.aiwanba.net/post/8560.html)\n- wonderfall/rtorrent-flood(在dockerhub中搜索`rtorrent`即可)\n  \n","slug":"docker/app/networks/rTorrent/rTorrent","published":1,"date":"2025-02-23T07:43:31.076Z","updated":"2025-02-23T07:43:31.076Z","__permalink":"/docker/app/networks/rtorrent/rtorrent/","comments":1,"photos":[],"_id":"cm7k5rwaz007imswsghif8n15","content":"<h1 id=\"BT种子下载\"><a href=\"#BT种子下载\" class=\"headerlink\" title=\"BT种子下载\"></a>BT种子下载</h1><ul>\n<li>暂时没有使用的需求，就暂时不折腾了</li>\n<li><a href=\"https://www.aiwanba.net/post/8560.html\">参考文章</a></li>\n<li>wonderfall&#x2F;rtorrent-flood(在dockerhub中搜索<code>rtorrent</code>即可)</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"BT种子下载\"><a href=\"#BT种子下载\" class=\"headerlink\" title=\"BT种子下载\"></a>BT种子下载</h1><ul>\n<li>暂时没有使用的需求，就暂时不折腾了</li>\n<li><a href=\"https://www.aiwanba.net/post/8560.html\">参考文章</a></li>\n<li>wonderfall&#x2F;rtorrent-flood(在dockerhub中搜索<code>rtorrent</code>即可)</li>\n</ul>\n"},{"layout":"default","title":"Sub-web","nav_order":4,"has_children":true,"parent":"Sub-web","_content":"\n# Sub-web\n","source":"_posts/docker/app/networks/sub-web/index.md","raw":"---\nlayout: default\ntitle: Sub-web\nnav_order: 4\nhas_children: true\nparent: Sub-web\npermalink: \"/docker/app/networks/sub-web/\"\n---\n\n# Sub-web\n","slug":"docker/app/networks/sub-web/index","published":1,"date":"2025-02-23T07:43:31.077Z","updated":"2025-02-23T07:43:31.077Z","__permalink":"/docker/app/networks/sub-web/","comments":1,"photos":[],"_id":"cm7k5rwaz007jmsws5t4q9aoy","content":"<h1 id=\"Sub-web\"><a href=\"#Sub-web\" class=\"headerlink\" title=\"Sub-web\"></a>Sub-web</h1>","excerpt":"","more":"<h1 id=\"Sub-web\"><a href=\"#Sub-web\" class=\"headerlink\" title=\"Sub-web\"></a>Sub-web</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"sub-web","parent":"Sub-web","has_children":false,"grand_parent":"Networks","_content":"\n# sub-web\n\n订阅转换\n\n[前端仓库地址](https://github.com/CareyWang/sub-web?tab=readme-ov-file#install)\n[后端仓库地址](https://github.com/tindy2013/subconverter)\n\n```bash\n# 前端部署\ndocker run -d -p 58080:80 --restart always --name subweb careywong/subweb:latest\n# 后端部署\ndocker run -d --restart=always -p 25500:25500 tindy2013/subconverter:latest\n```\n","source":"_posts/docker/app/networks/sub-web/sub-web.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: sub-web\nparent: Sub-web\nhas_children: false\npermalink: \"/docker/app/networks/sub-web/sub-web/\"\ngrand_parent: Networks\n---\n\n# sub-web\n\n订阅转换\n\n[前端仓库地址](https://github.com/CareyWang/sub-web?tab=readme-ov-file#install)\n[后端仓库地址](https://github.com/tindy2013/subconverter)\n\n```bash\n# 前端部署\ndocker run -d -p 58080:80 --restart always --name subweb careywong/subweb:latest\n# 后端部署\ndocker run -d --restart=always -p 25500:25500 tindy2013/subconverter:latest\n```\n","slug":"docker/app/networks/sub-web/sub-web","published":1,"date":"2025-02-23T07:43:31.077Z","updated":"2025-02-23T07:43:31.077Z","__permalink":"/docker/app/networks/sub-web/sub-web/","comments":1,"photos":[],"_id":"cm7k5rwaz007kmsws4odtcgt6","content":"<h1 id=\"sub-web\"><a href=\"#sub-web\" class=\"headerlink\" title=\"sub-web\"></a>sub-web</h1><p>订阅转换</p>\n<p><a href=\"https://github.com/CareyWang/sub-web?tab=readme-ov-file#install\">前端仓库地址</a><br><a href=\"https://github.com/tindy2013/subconverter\">后端仓库地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前端部署</span></span><br><span class=\"line\">docker run -d -p 58080:80 --restart always --name subweb careywong/subweb:latest</span><br><span class=\"line\"><span class=\"comment\"># 后端部署</span></span><br><span class=\"line\">docker run -d --restart=always -p 25500:25500 tindy2013/subconverter:latest</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"sub-web\"><a href=\"#sub-web\" class=\"headerlink\" title=\"sub-web\"></a>sub-web</h1><p>订阅转换</p>\n<p><a href=\"https://github.com/CareyWang/sub-web?tab=readme-ov-file#install\">前端仓库地址</a><br><a href=\"https://github.com/tindy2013/subconverter\">后端仓库地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前端部署</span></span><br><span class=\"line\">docker run -d -p 58080:80 --restart always --name subweb careywong/subweb:latest</span><br><span class=\"line\"><span class=\"comment\"># 后端部署</span></span><br><span class=\"line\">docker run -d --restart=always -p 25500:25500 tindy2013/subconverter:latest</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":14,"description":"netbird使用","parent":"Netbird","has_children":false,"grand_parent":"Networks","_content":"\n# netbird使用\n\n- 使用docker安装\n\n```bash\ndocker run --rm -d \\\n   --cap-add=NET_ADMIN \\\n   -e NB_SETUP_KEY=SETUP_KEY \\\n   -v netbird-client:/etc/netbird \\\n   netbirdio/netbird:latest\n# https://docs.netbird.io/how-to/getting-started#running-net-bird-in-docker\n```\n\n- 参考链接\n  - [官方地址](https://app.netbird.io)\n  - [B站视频](https://www.bilibili.com/video/BV1hm4y1G7P4/?buvid=XX830E687E1A6043634FE5BA62D04AE61B60C&is_story_h5=false&mid=KVrRvQIgah%2BvjvHS%2FHBsSQ%3D%3D&p=1&plat_id=106&share_from=ugc&share_medium=android&share_plat=android&share_session_id=05eed0e5-fa80-4055-b974-b0626f52d8a0&share_source=WEIXIN&share_tag=s_i&spmid=main.space-contribution.0.0&timestamp=1700946217&unique_k=I33DBjq&up_id=1323796788)\n","source":"_posts/docker/app/networks/netbird/netbird.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: netbird使用\nparent: Netbird\nhas_children: false\npermalink: \"/docker/app/networks/netbird/netbird/\"\ngrand_parent: Networks\n---\n\n# netbird使用\n\n- 使用docker安装\n\n```bash\ndocker run --rm -d \\\n   --cap-add=NET_ADMIN \\\n   -e NB_SETUP_KEY=SETUP_KEY \\\n   -v netbird-client:/etc/netbird \\\n   netbirdio/netbird:latest\n# https://docs.netbird.io/how-to/getting-started#running-net-bird-in-docker\n```\n\n- 参考链接\n  - [官方地址](https://app.netbird.io)\n  - [B站视频](https://www.bilibili.com/video/BV1hm4y1G7P4/?buvid=XX830E687E1A6043634FE5BA62D04AE61B60C&is_story_h5=false&mid=KVrRvQIgah%2BvjvHS%2FHBsSQ%3D%3D&p=1&plat_id=106&share_from=ugc&share_medium=android&share_plat=android&share_session_id=05eed0e5-fa80-4055-b974-b0626f52d8a0&share_source=WEIXIN&share_tag=s_i&spmid=main.space-contribution.0.0&timestamp=1700946217&unique_k=I33DBjq&up_id=1323796788)\n","slug":"docker/app/networks/netbird/netbird","published":1,"date":"2025-02-23T07:43:31.076Z","updated":"2025-02-23T07:43:31.076Z","__permalink":"/docker/app/networks/netbird/netbird/","comments":1,"photos":[],"_id":"cm7k5rwaz007lmsws33b49qmc","content":"<h1 id=\"netbird使用\"><a href=\"#netbird使用\" class=\"headerlink\" title=\"netbird使用\"></a>netbird使用</h1><ul>\n<li>使用docker安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -d \\</span><br><span class=\"line\">   --cap-add=NET_ADMIN \\</span><br><span class=\"line\">   -e NB_SETUP_KEY=SETUP_KEY \\</span><br><span class=\"line\">   -v netbird-client:/etc/netbird \\</span><br><span class=\"line\">   netbirdio/netbird:latest</span><br><span class=\"line\"><span class=\"comment\"># https://docs.netbird.io/how-to/getting-started#running-net-bird-in-docker</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参考链接<ul>\n<li><a href=\"https://app.netbird.io/\">官方地址</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1hm4y1G7P4/?buvid=XX830E687E1A6043634FE5BA62D04AE61B60C&is_story_h5=false&mid=KVrRvQIgah+vjvHS/HBsSQ==&p=1&plat_id=106&share_from=ugc&share_medium=android&share_plat=android&share_session_id=05eed0e5-fa80-4055-b974-b0626f52d8a0&share_source=WEIXIN&share_tag=s_i&spmid=main.space-contribution.0.0&timestamp=1700946217&unique_k=I33DBjq&up_id=1323796788\">B站视频</a></li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"netbird使用\"><a href=\"#netbird使用\" class=\"headerlink\" title=\"netbird使用\"></a>netbird使用</h1><ul>\n<li>使用docker安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -d \\</span><br><span class=\"line\">   --cap-add=NET_ADMIN \\</span><br><span class=\"line\">   -e NB_SETUP_KEY=SETUP_KEY \\</span><br><span class=\"line\">   -v netbird-client:/etc/netbird \\</span><br><span class=\"line\">   netbirdio/netbird:latest</span><br><span class=\"line\"><span class=\"comment\"># https://docs.netbird.io/how-to/getting-started#running-net-bird-in-docker</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参考链接<ul>\n<li><a href=\"https://app.netbird.io/\">官方地址</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1hm4y1G7P4/?buvid=XX830E687E1A6043634FE5BA62D04AE61B60C&is_story_h5=false&mid=KVrRvQIgah+vjvHS/HBsSQ==&p=1&plat_id=106&share_from=ugc&share_medium=android&share_plat=android&share_session_id=05eed0e5-fa80-4055-b974-b0626f52d8a0&share_source=WEIXIN&share_tag=s_i&spmid=main.space-contribution.0.0&timestamp=1700946217&unique_k=I33DBjq&up_id=1323796788\">B站视频</a></li>\n</ul>\n</li>\n</ul>\n"},{"layout":"default","title":"Vpn","nav_order":4,"has_children":true,"parent":"Vpn","_content":"\n# Vpn\n","source":"_posts/docker/app/networks/vpn/index.md","raw":"---\nlayout: default\ntitle: Vpn\nnav_order: 4\nhas_children: true\nparent: Vpn\npermalink: \"/docker/app/networks/vpn/\"\n---\n\n# Vpn\n","slug":"docker/app/networks/vpn/index","published":1,"date":"2025-02-23T07:43:31.074Z","updated":"2025-02-23T07:43:31.074Z","__permalink":"/docker/app/networks/vpn/","comments":1,"photos":[],"_id":"cm7k5rwaz007mmsws525c81qt","content":"<h1 id=\"Vpn\"><a href=\"#Vpn\" class=\"headerlink\" title=\"Vpn\"></a>Vpn</h1>","excerpt":"","more":"<h1 id=\"Vpn\"><a href=\"#Vpn\" class=\"headerlink\" title=\"Vpn\"></a>Vpn</h1>"},{"layout":"default","title":"Wren","nav_order":4,"has_children":true,"parent":"Wren","_content":"\n# Wren\n","source":"_posts/docker/dev_utls/ai/wren/index.md","raw":"---\nlayout: default\ntitle: Wren\nnav_order: 4\nhas_children: true\nparent: Wren\npermalink: \"/docker/dev_utls/ai/wren/\"\n---\n\n# Wren\n","slug":"docker/dev_utls/ai/wren/index","published":1,"date":"2025-02-23T07:43:31.171Z","updated":"2025-02-23T07:43:31.171Z","__permalink":"/docker/dev_utls/ai/wren/","comments":1,"photos":[],"_id":"cm7k5rwaz007nmswsa58o44tg","content":"<h1 id=\"Wren\"><a href=\"#Wren\" class=\"headerlink\" title=\"Wren\"></a>Wren</h1>","excerpt":"","more":"<h1 id=\"Wren\"><a href=\"#Wren\" class=\"headerlink\" title=\"Wren\"></a>Wren</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"wren ai","parent":"Wren","has_children":false,"grand_parent":"Ai","_content":"\n# wren ai\n\n[github地址](https://github.com/Canner/WrenAI)\n\n## 安装\n\n```bash\n# macos\ncurl -L https://github.com/Canner/WrenAI/releases/latest/download/wren-launcher-darwin.tar.gz | tar -xz && ./wren-launcher-darwin\n# config.yaml\nwget -O config.example.yaml https://raw.githubusercontent.com/canner/WrenAI/0.13.2/docker/config.example.yaml && \\\nmkdir -p ~/.wrenai && cp config.example.yaml ~/.wrenai/config.yaml\n# .env\nwget -O .env.example https://raw.githubusercontent.com/canner/WrenAI/0.13.2/docker/.env.example && \\\nmkdir -p ~/.wrenai && cp .env.example ~/.wrenai/.env\n```\n\n[自定义llm文档](https://docs.getwren.ai/oss/installation/custom_llm#running-wren-ai-with-your-custom-llm-embedder-or-document-store)\n\n> 先记录, 暂时不搞了, 配置太麻烦了\n","source":"_posts/docker/dev_utls/ai/wren/wren.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: wren ai\nparent: Wren\nhas_children: false\npermalink: \"/docker/dev_utls/ai/wren/wren/\"\ngrand_parent: Ai\n---\n\n# wren ai\n\n[github地址](https://github.com/Canner/WrenAI)\n\n## 安装\n\n```bash\n# macos\ncurl -L https://github.com/Canner/WrenAI/releases/latest/download/wren-launcher-darwin.tar.gz | tar -xz && ./wren-launcher-darwin\n# config.yaml\nwget -O config.example.yaml https://raw.githubusercontent.com/canner/WrenAI/0.13.2/docker/config.example.yaml && \\\nmkdir -p ~/.wrenai && cp config.example.yaml ~/.wrenai/config.yaml\n# .env\nwget -O .env.example https://raw.githubusercontent.com/canner/WrenAI/0.13.2/docker/.env.example && \\\nmkdir -p ~/.wrenai && cp .env.example ~/.wrenai/.env\n```\n\n[自定义llm文档](https://docs.getwren.ai/oss/installation/custom_llm#running-wren-ai-with-your-custom-llm-embedder-or-document-store)\n\n> 先记录, 暂时不搞了, 配置太麻烦了\n","slug":"docker/dev_utls/ai/wren/wren","published":1,"date":"2025-02-23T07:43:31.171Z","updated":"2025-02-23T07:43:31.171Z","__permalink":"/docker/dev_utls/ai/wren/wren/","comments":1,"photos":[],"_id":"cm7k5rwaz007omsws8tcs0oqq","content":"<h1 id=\"wren-ai\"><a href=\"#wren-ai\" class=\"headerlink\" title=\"wren ai\"></a>wren ai</h1><p><a href=\"https://github.com/Canner/WrenAI\">github地址</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># macos</span></span><br><span class=\"line\">curl -L https://github.com/Canner/WrenAI/releases/latest/download/wren-launcher-darwin.tar.gz | tar -xz &amp;&amp; ./wren-launcher-darwin</span><br><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\">wget -O config.example.yaml https://raw.githubusercontent.com/canner/WrenAI/0.13.2/docker/config.example.yaml &amp;&amp; \\</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.wrenai &amp;&amp; <span class=\"built_in\">cp</span> config.example.yaml ~/.wrenai/config.yaml</span><br><span class=\"line\"><span class=\"comment\"># .env</span></span><br><span class=\"line\">wget -O .env.example https://raw.githubusercontent.com/canner/WrenAI/0.13.2/docker/.env.example &amp;&amp; \\</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.wrenai &amp;&amp; <span class=\"built_in\">cp</span> .env.example ~/.wrenai/.env</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.getwren.ai/oss/installation/custom_llm#running-wren-ai-with-your-custom-llm-embedder-or-document-store\">自定义llm文档</a></p>\n<blockquote>\n<p>先记录, 暂时不搞了, 配置太麻烦了</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"wren-ai\"><a href=\"#wren-ai\" class=\"headerlink\" title=\"wren ai\"></a>wren ai</h1><p><a href=\"https://github.com/Canner/WrenAI\">github地址</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># macos</span></span><br><span class=\"line\">curl -L https://github.com/Canner/WrenAI/releases/latest/download/wren-launcher-darwin.tar.gz | tar -xz &amp;&amp; ./wren-launcher-darwin</span><br><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\">wget -O config.example.yaml https://raw.githubusercontent.com/canner/WrenAI/0.13.2/docker/config.example.yaml &amp;&amp; \\</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.wrenai &amp;&amp; <span class=\"built_in\">cp</span> config.example.yaml ~/.wrenai/config.yaml</span><br><span class=\"line\"><span class=\"comment\"># .env</span></span><br><span class=\"line\">wget -O .env.example https://raw.githubusercontent.com/canner/WrenAI/0.13.2/docker/.env.example &amp;&amp; \\</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.wrenai &amp;&amp; <span class=\"built_in\">cp</span> .env.example ~/.wrenai/.env</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.getwren.ai/oss/installation/custom_llm#running-wren-ai-with-your-custom-llm-embedder-or-document-store\">自定义llm文档</a></p>\n<blockquote>\n<p>先记录, 暂时不搞了, 配置太麻烦了</p>\n</blockquote>\n"},{"layout":"default","title":"Local-dev-deploy","nav_order":4,"has_children":true,"parent":"Local-dev-deploy","_content":"\n# Local-dev-deploy\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/index.md","raw":"---\nlayout: default\ntitle: Local-dev-deploy\nnav_order: 4\nhas_children: true\nparent: Local-dev-deploy\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/\"\n---\n\n# Local-dev-deploy\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/index","published":1,"date":"2025-02-23T07:43:31.155Z","updated":"2025-02-23T07:43:31.155Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/","comments":1,"photos":[],"_id":"cm7k5rwaz007pmsws648u8lef","content":"<h1 id=\"Local-dev-deploy\"><a href=\"#Local-dev-deploy\" class=\"headerlink\" title=\"Local-dev-deploy\"></a>Local-dev-deploy</h1>","excerpt":"","more":"<h1 id=\"Local-dev-deploy\"><a href=\"#Local-dev-deploy\" class=\"headerlink\" title=\"Local-dev-deploy\"></a>Local-dev-deploy</h1>"},{"layout":"default","title":"Nocobase","nav_order":4,"has_children":true,"parent":"Nocobase","_content":"\n# Nocobase\n","source":"_posts/docker/dev_utls/serverless/nocobase/index.md","raw":"---\nlayout: default\ntitle: Nocobase\nnav_order: 4\nhas_children: true\nparent: Nocobase\npermalink: \"/docker/dev_utls/serverless/nocobase/\"\n---\n\n# Nocobase\n","slug":"docker/dev_utls/serverless/nocobase/index","published":1,"date":"2025-02-23T07:43:31.138Z","updated":"2025-02-23T07:43:31.138Z","__permalink":"/docker/dev_utls/serverless/nocobase/","comments":1,"photos":[],"_id":"cm7k5rwaz007qmsws8y5bcnuz","content":"<h1 id=\"Nocobase\"><a href=\"#Nocobase\" class=\"headerlink\" title=\"Nocobase\"></a>Nocobase</h1>","excerpt":"","more":"<h1 id=\"Nocobase\"><a href=\"#Nocobase\" class=\"headerlink\" title=\"Nocobase\"></a>Nocobase</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"记录","parent":"Nocobase","has_children":false,"grand_parent":"Serverless","_content":"\n# 记录\n\n## 开始使用\n\n```shell\nbash exec.sh\n```\n","source":"_posts/docker/dev_utls/serverless/nocobase/nocobase.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: 记录\nparent: Nocobase\nhas_children: false\npermalink: \"/docker/dev_utls/serverless/nocobase/nocobase/\"\ngrand_parent: Serverless\n---\n\n# 记录\n\n## 开始使用\n\n```shell\nbash exec.sh\n```\n","slug":"docker/dev_utls/serverless/nocobase/nocobase","published":1,"date":"2025-02-23T07:43:31.132Z","updated":"2025-02-23T07:43:31.133Z","__permalink":"/docker/dev_utls/serverless/nocobase/nocobase/","comments":1,"photos":[],"_id":"cm7k5rwaz007rmsws0tjl449n","content":"<h1 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h1><h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash exec.sh</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h1><h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash exec.sh</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Doc","nav_order":4,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/mid/RabbitMQ/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 4\nhas_children: true\nparent: Doc\npermalink: \"/docker/mid/rabbitmq/doc/\"\n---\n\n# Doc\n","slug":"docker/mid/RabbitMQ/doc/index","published":1,"date":"2025-02-23T07:43:31.087Z","updated":"2025-02-23T07:43:31.088Z","__permalink":"/docker/mid/rabbitmq/doc/","comments":1,"photos":[],"_id":"cm7k5rwb0007smsws1q9i4f44","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"配置说明``` shell rabbitmq:3.8.6-management:后面带management是带web管理界面的 RABBITMQ_DEFAULT_USER:默认账号和密码是:guest RABBITMQ_DEFAULT_PASS:设置密码```","parent":"Doc","has_children":false,"grand_parent":"Rabbitmq","_content":"\n## 配置说明\n``` shell\n# rabbitmq:3.8.6-management:后面带management是带web管理界面的\n# RABBITMQ_DEFAULT_USER:默认账号和密码是:guest\n# RABBITMQ_DEFAULT_PASS:设置密码\n```\n","source":"_posts/docker/mid/RabbitMQ/doc/doc.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: 配置说明``` shell rabbitmq:3.8.6-management:后面带management是带web管理界面的 RABBITMQ_DEFAULT_USER:默认账号和密码是:guest\n  RABBITMQ_DEFAULT_PASS:设置密码```\nparent: Doc\nhas_children: false\npermalink: \"/docker/mid/rabbitmq/doc/doc/\"\ngrand_parent: Rabbitmq\n---\n\n## 配置说明\n``` shell\n# rabbitmq:3.8.6-management:后面带management是带web管理界面的\n# RABBITMQ_DEFAULT_USER:默认账号和密码是:guest\n# RABBITMQ_DEFAULT_PASS:设置密码\n```\n","slug":"docker/mid/RabbitMQ/doc/doc","published":1,"date":"2025-02-23T07:43:31.087Z","updated":"2025-02-23T07:43:31.087Z","__permalink":"/docker/mid/rabbitmq/doc/doc/","comments":1,"photos":[],"_id":"cm7k5rwb0007tmsws673sfozl","content":"<h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rabbitmq:3.8.6-management:后面带management是带web管理界面的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">RABBITMQ_DEFAULT_USER:默认账号和密码是:guest</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">RABBITMQ_DEFAULT_PASS:设置密码</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rabbitmq:3.8.6-management:后面带management是带web管理界面的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">RABBITMQ_DEFAULT_USER:默认账号和密码是:guest</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">RABBITMQ_DEFAULT_PASS:设置密码</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":14,"description":"参考- https://github.com/Gleans/SpringCloudPro","parent":"Doc","has_children":false,"grand_parent":"Nacos","_content":"\n## 参考\n- https://github.com/Gleans/SpringCloudPro\n","source":"_posts/docker/mid/nacos/doc/doc.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: 参考- https://github.com/Gleans/SpringCloudPro\nparent: Doc\nhas_children: false\npermalink: \"/docker/mid/nacos/doc/doc/\"\ngrand_parent: Nacos\n---\n\n## 参考\n- https://github.com/Gleans/SpringCloudPro\n","slug":"docker/mid/nacos/doc/doc","published":1,"date":"2025-02-23T07:43:31.083Z","updated":"2025-02-23T07:43:31.083Z","__permalink":"/docker/mid/nacos/doc/doc/","comments":1,"photos":[],"_id":"cm7k5rwb0007umsws6nbb9zb9","content":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/Gleans/SpringCloudPro\">https://github.com/Gleans/SpringCloudPro</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/Gleans/SpringCloudPro\">https://github.com/Gleans/SpringCloudPro</a></li>\n</ul>\n"},{"layout":"default","title":"Doc","nav_order":4,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/mid/nacos/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 4\nhas_children: true\nparent: Doc\npermalink: \"/docker/mid/nacos/doc/\"\n---\n\n# Doc\n","slug":"docker/mid/nacos/doc/index","published":1,"date":"2025-02-23T07:43:31.083Z","updated":"2025-02-23T07:43:31.083Z","__permalink":"/docker/mid/nacos/doc/","comments":1,"photos":[],"_id":"cm7k5rwb0007vmswsgzhx2l1r","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"actions-runner","parent":"Actions-runner","has_children":false,"grand_parent":"Github","_content":"\n# actions-runner\n\n## linux arm64版\n\n[GitHub设置路径](https://github.com/183461750/doc-record/settings/actions/runners/new?arch=arm64&os=linux)\n\nDownload\n\n```bash\n# Create a folder\n$ mkdir actions-runner && cd actions-runner\n# Download the latest runner package\n$ curl -o actions-runner-linux-arm64-2.320.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.320.0/actions-runner-linux-arm64-2.320.0.tar.gz\n# Optional: Validate the hash\n$ echo \"bec1832fe6d2ed75acf4b7d8f2ce1169239a913b84ab1ded028076c9fa5091b8  actions-runner-linux-arm64-2.320.0.tar.gz\" | shasum -a 256 -c\n# Extract the installer\n$ tar xzf ./actions-runner-linux-arm64-2.320.0.tar.gz\n```\n\nConfigure\n\n```bash\n# Create the runner and start the configuration experience\n$ ./config.sh --url https://github.com/183461750/doc-record --token AJCNPVIBLPPE3QLBOZQHPALHCPCYW\n# Last step, run it!\n$ ./run.sh\n```\n\nUsing your self-hosted runner\n\n```bash\n# Use this YAML in your workflow file for each job\nruns-on: self-hosted\n```\n","source":"_posts/docker/mid/github/actions-runner/actions-runner.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: actions-runner\nparent: Actions-runner\nhas_children: false\npermalink: \"/docker/mid/github/actions-runner/actions-runner/\"\ngrand_parent: Github\n---\n\n# actions-runner\n\n## linux arm64版\n\n[GitHub设置路径](https://github.com/183461750/doc-record/settings/actions/runners/new?arch=arm64&os=linux)\n\nDownload\n\n```bash\n# Create a folder\n$ mkdir actions-runner && cd actions-runner\n# Download the latest runner package\n$ curl -o actions-runner-linux-arm64-2.320.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.320.0/actions-runner-linux-arm64-2.320.0.tar.gz\n# Optional: Validate the hash\n$ echo \"bec1832fe6d2ed75acf4b7d8f2ce1169239a913b84ab1ded028076c9fa5091b8  actions-runner-linux-arm64-2.320.0.tar.gz\" | shasum -a 256 -c\n# Extract the installer\n$ tar xzf ./actions-runner-linux-arm64-2.320.0.tar.gz\n```\n\nConfigure\n\n```bash\n# Create the runner and start the configuration experience\n$ ./config.sh --url https://github.com/183461750/doc-record --token AJCNPVIBLPPE3QLBOZQHPALHCPCYW\n# Last step, run it!\n$ ./run.sh\n```\n\nUsing your self-hosted runner\n\n```bash\n# Use this YAML in your workflow file for each job\nruns-on: self-hosted\n```\n","slug":"docker/mid/github/actions-runner/actions-runner","published":1,"date":"2025-02-23T07:43:31.089Z","updated":"2025-02-23T07:43:31.089Z","__permalink":"/docker/mid/github/actions-runner/actions-runner/","comments":1,"photos":[],"_id":"cm7k5rwb0007wmsws57ne2jr8","content":"<h1 id=\"actions-runner\"><a href=\"#actions-runner\" class=\"headerlink\" title=\"actions-runner\"></a>actions-runner</h1><h2 id=\"linux-arm64版\"><a href=\"#linux-arm64版\" class=\"headerlink\" title=\"linux arm64版\"></a>linux arm64版</h2><p><a href=\"https://github.com/183461750/doc-record/settings/actions/runners/new?arch=arm64&os=linux\">GitHub设置路径</a></p>\n<p>Download</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create a folder</span></span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> actions-runner &amp;&amp; <span class=\"built_in\">cd</span> actions-runner</span><br><span class=\"line\"><span class=\"comment\"># Download the latest runner package</span></span><br><span class=\"line\">$ curl -o actions-runner-linux-arm64-2.320.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.320.0/actions-runner-linux-arm64-2.320.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Optional: Validate the hash</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;bec1832fe6d2ed75acf4b7d8f2ce1169239a913b84ab1ded028076c9fa5091b8  actions-runner-linux-arm64-2.320.0.tar.gz&quot;</span> | shasum -a 256 -c</span><br><span class=\"line\"><span class=\"comment\"># Extract the installer</span></span><br><span class=\"line\">$ tar xzf ./actions-runner-linux-arm64-2.320.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>Configure</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create the runner and start the configuration experience</span></span><br><span class=\"line\">$ ./config.sh --url https://github.com/183461750/doc-record --token AJCNPVIBLPPE3QLBOZQHPALHCPCYW</span><br><span class=\"line\"><span class=\"comment\"># Last step, run it!</span></span><br><span class=\"line\">$ ./run.sh</span><br></pre></td></tr></table></figure>\n\n<p>Using your self-hosted runner</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use this YAML in your workflow file for each job</span></span><br><span class=\"line\">runs-on: self-hosted</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"actions-runner\"><a href=\"#actions-runner\" class=\"headerlink\" title=\"actions-runner\"></a>actions-runner</h1><h2 id=\"linux-arm64版\"><a href=\"#linux-arm64版\" class=\"headerlink\" title=\"linux arm64版\"></a>linux arm64版</h2><p><a href=\"https://github.com/183461750/doc-record/settings/actions/runners/new?arch=arm64&os=linux\">GitHub设置路径</a></p>\n<p>Download</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create a folder</span></span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> actions-runner &amp;&amp; <span class=\"built_in\">cd</span> actions-runner</span><br><span class=\"line\"><span class=\"comment\"># Download the latest runner package</span></span><br><span class=\"line\">$ curl -o actions-runner-linux-arm64-2.320.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.320.0/actions-runner-linux-arm64-2.320.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Optional: Validate the hash</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;bec1832fe6d2ed75acf4b7d8f2ce1169239a913b84ab1ded028076c9fa5091b8  actions-runner-linux-arm64-2.320.0.tar.gz&quot;</span> | shasum -a 256 -c</span><br><span class=\"line\"><span class=\"comment\"># Extract the installer</span></span><br><span class=\"line\">$ tar xzf ./actions-runner-linux-arm64-2.320.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>Configure</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create the runner and start the configuration experience</span></span><br><span class=\"line\">$ ./config.sh --url https://github.com/183461750/doc-record --token AJCNPVIBLPPE3QLBOZQHPALHCPCYW</span><br><span class=\"line\"><span class=\"comment\"># Last step, run it!</span></span><br><span class=\"line\">$ ./run.sh</span><br></pre></td></tr></table></figure>\n\n<p>Using your self-hosted runner</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use this YAML in your workflow file for each job</span></span><br><span class=\"line\">runs-on: self-hosted</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Actions-runner","nav_order":4,"has_children":true,"parent":"Actions-runner","_content":"\n# Actions-runner\n","source":"_posts/docker/mid/github/actions-runner/index.md","raw":"---\nlayout: default\ntitle: Actions-runner\nnav_order: 4\nhas_children: true\nparent: Actions-runner\npermalink: \"/docker/mid/github/actions-runner/\"\n---\n\n# Actions-runner\n","slug":"docker/mid/github/actions-runner/index","published":1,"date":"2025-02-23T07:43:31.090Z","updated":"2025-02-23T07:43:31.090Z","__permalink":"/docker/mid/github/actions-runner/","comments":1,"photos":[],"_id":"cm7k5rwb0007xmsws3nwo1c5l","content":"<h1 id=\"Actions-runner\"><a href=\"#Actions-runner\" class=\"headerlink\" title=\"Actions-runner\"></a>Actions-runner</h1>","excerpt":"","more":"<h1 id=\"Actions-runner\"><a href=\"#Actions-runner\" class=\"headerlink\" title=\"Actions-runner\"></a>Actions-runner</h1>"},{"layout":"default","title":"Simple","nav_order":4,"has_children":true,"parent":"Simple","_content":"\n# Simple\n","source":"_posts/docker/mid/nacos/simple/index.md","raw":"---\nlayout: default\ntitle: Simple\nnav_order: 4\nhas_children: true\nparent: Simple\npermalink: \"/docker/mid/nacos/simple/\"\n---\n\n# Simple\n","slug":"docker/mid/nacos/simple/index","published":1,"date":"2025-02-23T07:43:31.082Z","updated":"2025-02-23T07:43:31.082Z","__permalink":"/docker/mid/nacos/simple/","comments":1,"photos":[],"_id":"cm7k5rwb0007ymsws37vfgdqb","content":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>","excerpt":"","more":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"nacos","parent":"Simple","has_children":false,"grand_parent":"Nacos","_content":"\n# nacos\n\n## 快速开始\n\n打开命令窗口执行：\n\n* Clone project\n\n  ```powershell\n  git clone --depth 1 https://github.com/nacos-group/nacos-docker.git\n  cd nacos-docker\n  ```\n\n* Standalone Derby\n\n  ```powershell\n  docker-compose -f example/standalone-derby.yaml up\n  ```\n","source":"_posts/docker/mid/nacos/simple/simple.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: nacos\nparent: Simple\nhas_children: false\npermalink: \"/docker/mid/nacos/simple/simple/\"\ngrand_parent: Nacos\n---\n\n# nacos\n\n## 快速开始\n\n打开命令窗口执行：\n\n* Clone project\n\n  ```powershell\n  git clone --depth 1 https://github.com/nacos-group/nacos-docker.git\n  cd nacos-docker\n  ```\n\n* Standalone Derby\n\n  ```powershell\n  docker-compose -f example/standalone-derby.yaml up\n  ```\n","slug":"docker/mid/nacos/simple/simple","published":1,"date":"2025-02-23T07:43:31.082Z","updated":"2025-02-23T07:43:31.082Z","__permalink":"/docker/mid/nacos/simple/simple/","comments":1,"photos":[],"_id":"cm7k5rwb1007zmsws6ft70469","content":"<h1 id=\"nacos\"><a href=\"#nacos\" class=\"headerlink\" title=\"nacos\"></a>nacos</h1><h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><p>打开命令窗口执行：</p>\n<ul>\n<li><p>Clone project</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone <span class=\"literal\">--depth</span> <span class=\"number\">1</span> https://github.com/nacos<span class=\"literal\">-group</span>/nacos<span class=\"literal\">-docker</span>.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nacos<span class=\"literal\">-docker</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Standalone Derby</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker<span class=\"literal\">-compose</span> <span class=\"operator\">-f</span> example/standalone<span class=\"literal\">-derby</span>.yaml up</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"nacos\"><a href=\"#nacos\" class=\"headerlink\" title=\"nacos\"></a>nacos</h1><h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><p>打开命令窗口执行：</p>\n<ul>\n<li><p>Clone project</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone <span class=\"literal\">--depth</span> <span class=\"number\">1</span> https://github.com/nacos<span class=\"literal\">-group</span>/nacos<span class=\"literal\">-docker</span>.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nacos<span class=\"literal\">-docker</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Standalone Derby</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker<span class=\"literal\">-compose</span> <span class=\"operator\">-f</span> example/standalone<span class=\"literal\">-derby</span>.yaml up</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"layout":"default","title":"deploy","nav_order":14,"description":"启动集群docker stack deploy -c kafka-compose.yml kafka 启动集群（two）docker stack deploy --compose-file=kafka-docker-compose.yml tools","parent":"Doc","has_children":false,"grand_parent":"Kafka","_content":"\n# 启动集群\ndocker stack deploy -c kafka-compose.yml kafka\n# 启动集群（two）\ndocker stack deploy --compose-file=kafka-docker-compose.yml tools\n","source":"_posts/docker/mid/kafka/doc/deploy.md","raw":"---\nlayout: default\ntitle: deploy\nnav_order: 14\ndescription: 启动集群docker stack deploy -c kafka-compose.yml kafka 启动集群（two）docker stack\n  deploy --compose-file=kafka-docker-compose.yml tools\nparent: Doc\nhas_children: false\npermalink: \"/docker/mid/kafka/doc/deploy/\"\ngrand_parent: Kafka\n---\n\n# 启动集群\ndocker stack deploy -c kafka-compose.yml kafka\n# 启动集群（two）\ndocker stack deploy --compose-file=kafka-docker-compose.yml tools\n","slug":"docker/mid/kafka/doc/deploy","published":1,"date":"2025-02-23T07:43:31.120Z","updated":"2025-02-23T07:43:31.121Z","__permalink":"/docker/mid/kafka/doc/deploy/","comments":1,"photos":[],"_id":"cm7k5rwb10080msws4nph037d","content":"<h1 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h1><p>docker stack deploy -c kafka-compose.yml kafka</p>\n<h1 id=\"启动集群（two）\"><a href=\"#启动集群（two）\" class=\"headerlink\" title=\"启动集群（two）\"></a>启动集群（two）</h1><p>docker stack deploy –compose-file&#x3D;kafka-docker-compose.yml tools</p>\n","excerpt":"","more":"<h1 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h1><p>docker stack deploy -c kafka-compose.yml kafka</p>\n<h1 id=\"启动集群（two）\"><a href=\"#启动集群（two）\" class=\"headerlink\" title=\"启动集群（two）\"></a>启动集群（two）</h1><p>docker stack deploy –compose-file&#x3D;kafka-docker-compose.yml tools</p>\n"},{"layout":"default","title":"Doc","nav_order":4,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/mid/kafka/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 4\nhas_children: true\nparent: Doc\npermalink: \"/docker/mid/kafka/doc/\"\n---\n\n# Doc\n","slug":"docker/mid/kafka/doc/index","published":1,"date":"2025-02-23T07:43:31.121Z","updated":"2025-02-23T07:43:31.121Z","__permalink":"/docker/mid/kafka/doc/","comments":1,"photos":[],"_id":"cm7k5rwb10081msws3zhz42ii","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"Simple-swarm","nav_order":4,"has_children":true,"parent":"Simple-swarm","_content":"\n# Simple-swarm\n","source":"_posts/docker/mid/nacos/simple-swarm/index.md","raw":"---\nlayout: default\ntitle: Simple-swarm\nnav_order: 4\nhas_children: true\nparent: Simple-swarm\npermalink: \"/docker/mid/nacos/simple-swarm/\"\n---\n\n# Simple-swarm\n","slug":"docker/mid/nacos/simple-swarm/index","published":1,"date":"2025-02-23T07:43:31.085Z","updated":"2025-02-23T07:43:31.085Z","__permalink":"/docker/mid/nacos/simple-swarm/","comments":1,"photos":[],"_id":"cm7k5rwb10082msws985rh0ht","content":"<h1 id=\"Simple-swarm\"><a href=\"#Simple-swarm\" class=\"headerlink\" title=\"Simple-swarm\"></a>Simple-swarm</h1>","excerpt":"","more":"<h1 id=\"Simple-swarm\"><a href=\"#Simple-swarm\" class=\"headerlink\" title=\"Simple-swarm\"></a>Simple-swarm</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"docker swarm版nacos","parent":"Simple-swarm","has_children":false,"grand_parent":"Nacos","_content":"\n# docker swarm版nacos\n\n## 部署\n\n```shell\n\n```\n","source":"_posts/docker/mid/nacos/simple-swarm/simple-swarm.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: docker swarm版nacos\nparent: Simple-swarm\nhas_children: false\npermalink: \"/docker/mid/nacos/simple-swarm/simple-swarm/\"\ngrand_parent: Nacos\n---\n\n# docker swarm版nacos\n\n## 部署\n\n```shell\n\n```\n","slug":"docker/mid/nacos/simple-swarm/simple-swarm","published":1,"date":"2025-02-23T07:43:31.085Z","updated":"2025-02-23T07:43:31.085Z","__permalink":"/docker/mid/nacos/simple-swarm/simple-swarm/","comments":1,"photos":[],"_id":"cm7k5rwb10083msws75r28isf","content":"<h1 id=\"docker-swarm版nacos\"><a href=\"#docker-swarm版nacos\" class=\"headerlink\" title=\"docker swarm版nacos\"></a>docker swarm版nacos</h1><h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker-swarm版nacos\"><a href=\"#docker-swarm版nacos\" class=\"headerlink\" title=\"docker swarm版nacos\"></a>docker swarm版nacos</h1><h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"zk","nav_order":14,"description":"zk集群 配置文件中配置含义```shellvim zoo.cfg加上以下三行配置server.1=10.88.0.19:2888:3888;2181server.2=10.88.0.20:2888:3888;2181server.3=10.88.0.21:2888:3888;2181这里10.88.0.X表示的是三台zookeeper容器对应的ip地址；2888是zookeeper容器间通信的端口，3888是zookeeper选举投票的端口，一般来说都是固定的","parent":"Doc","has_children":false,"grand_parent":"Kafka","_content":"\n## zk集群 配置文件中配置含义\n```shell\nvim zoo.cfg\n加上以下三行配置\nserver.1=10.88.0.19:2888:3888;2181\nserver.2=10.88.0.20:2888:3888;2181\nserver.3=10.88.0.21:2888:3888;2181\n这里10.88.0.X表示的是三台zookeeper容器对应的ip地址；2888是zookeeper容器间通信的端口，3888是zookeeper选举投票的端口，一般来说都是固定的\n\n```\n","source":"_posts/docker/mid/kafka/doc/zk.md","raw":"---\nlayout: default\ntitle: zk\nnav_order: 14\ndescription: zk集群 配置文件中配置含义```shellvim zoo.cfg加上以下三行配置server.1=10.88.0.19:2888:3888;2181server.2=10.88.0.20:2888:3888;2181server.3=10.88.0.21:2888:3888;2181这里10.88.0.X表示的是三台zookeeper容器对应的ip地址；2888是zookeeper容器间通信的端口，3888是zookeeper选举投票的端口，一般来说都是固定的\nparent: Doc\nhas_children: false\npermalink: \"/docker/mid/kafka/doc/zk/\"\ngrand_parent: Kafka\n---\n\n## zk集群 配置文件中配置含义\n```shell\nvim zoo.cfg\n加上以下三行配置\nserver.1=10.88.0.19:2888:3888;2181\nserver.2=10.88.0.20:2888:3888;2181\nserver.3=10.88.0.21:2888:3888;2181\n这里10.88.0.X表示的是三台zookeeper容器对应的ip地址；2888是zookeeper容器间通信的端口，3888是zookeeper选举投票的端口，一般来说都是固定的\n\n```\n","slug":"docker/mid/kafka/doc/zk","published":1,"date":"2025-02-23T07:43:31.121Z","updated":"2025-02-23T07:43:31.121Z","__permalink":"/docker/mid/kafka/doc/zk/","comments":1,"photos":[],"_id":"cm7k5rwb10084msws16mk2r4s","content":"<h2 id=\"zk集群-配置文件中配置含义\"><a href=\"#zk集群-配置文件中配置含义\" class=\"headerlink\" title=\"zk集群 配置文件中配置含义\"></a>zk集群 配置文件中配置含义</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim zoo.cfg</span><br><span class=\"line\">加上以下三行配置</span><br><span class=\"line\">server.1=10.88.0.19:2888:3888;2181</span><br><span class=\"line\">server.2=10.88.0.20:2888:3888;2181</span><br><span class=\"line\">server.3=10.88.0.21:2888:3888;2181</span><br><span class=\"line\">这里10.88.0.X表示的是三台zookeeper容器对应的ip地址；2888是zookeeper容器间通信的端口，3888是zookeeper选举投票的端口，一般来说都是固定的</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"zk集群-配置文件中配置含义\"><a href=\"#zk集群-配置文件中配置含义\" class=\"headerlink\" title=\"zk集群 配置文件中配置含义\"></a>zk集群 配置文件中配置含义</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim zoo.cfg</span><br><span class=\"line\">加上以下三行配置</span><br><span class=\"line\">server.1=10.88.0.19:2888:3888;2181</span><br><span class=\"line\">server.2=10.88.0.20:2888:3888;2181</span><br><span class=\"line\">server.3=10.88.0.21:2888:3888;2181</span><br><span class=\"line\">这里10.88.0.X表示的是三台zookeeper容器对应的ip地址；2888是zookeeper容器间通信的端口，3888是zookeeper选举投票的端口，一般来说都是固定的</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":14,"description":"Nginx","parent":"Doc","has_children":false,"grand_parent":"Nginx","_content":"\n# Nginx\n\n## 构建nginx镜像\n\n```shell\ndocker build -t nginx:1.0 .\n```\n\n## nginx默认nginx.conf配置路径\n\n```shell\ncat etc/nginx/nginx.conf\ncat etc/nginx/conf.d/default.conf\n```\n\n## 代理Jenkins\n\n- [参考文章](http://t.csdn.cn/CUODV)\n\n## 配置ssl证书\n\n- nginx查看是否安装http_ssl_module模块\n\n```shell\n#打开nginx的sbin文件夹\ncd /usr/local/nginx/sbin/nginx\n#查看是否安装\nnginx -V\n\n# 如果出现 configure arguments: --with-http_ssl_module, 则已安装（下面的步骤可以跳过，进入 nginx.conf 配置）\n\n```\n","source":"_posts/docker/mid/nginx/doc/doc.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: Nginx\nparent: Doc\nhas_children: false\npermalink: \"/docker/mid/nginx/doc/doc/\"\ngrand_parent: Nginx\n---\n\n# Nginx\n\n## 构建nginx镜像\n\n```shell\ndocker build -t nginx:1.0 .\n```\n\n## nginx默认nginx.conf配置路径\n\n```shell\ncat etc/nginx/nginx.conf\ncat etc/nginx/conf.d/default.conf\n```\n\n## 代理Jenkins\n\n- [参考文章](http://t.csdn.cn/CUODV)\n\n## 配置ssl证书\n\n- nginx查看是否安装http_ssl_module模块\n\n```shell\n#打开nginx的sbin文件夹\ncd /usr/local/nginx/sbin/nginx\n#查看是否安装\nnginx -V\n\n# 如果出现 configure arguments: --with-http_ssl_module, 则已安装（下面的步骤可以跳过，进入 nginx.conf 配置）\n\n```\n","slug":"docker/mid/nginx/doc/doc","published":1,"date":"2025-02-23T07:43:31.114Z","updated":"2025-02-23T07:43:31.114Z","__permalink":"/docker/mid/nginx/doc/doc/","comments":1,"photos":[],"_id":"cm7k5rwb10085msws50xp6anj","content":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1><h2 id=\"构建nginx镜像\"><a href=\"#构建nginx镜像\" class=\"headerlink\" title=\"构建nginx镜像\"></a>构建nginx镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t nginx:1.0 .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx默认nginx-conf配置路径\"><a href=\"#nginx默认nginx-conf配置路径\" class=\"headerlink\" title=\"nginx默认nginx.conf配置路径\"></a>nginx默认nginx.conf配置路径</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat etc/nginx/nginx.conf</span><br><span class=\"line\">cat etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代理Jenkins\"><a href=\"#代理Jenkins\" class=\"headerlink\" title=\"代理Jenkins\"></a>代理Jenkins</h2><ul>\n<li><a href=\"http://t.csdn.cn/CUODV\">参考文章</a></li>\n</ul>\n<h2 id=\"配置ssl证书\"><a href=\"#配置ssl证书\" class=\"headerlink\" title=\"配置ssl证书\"></a>配置ssl证书</h2><ul>\n<li>nginx查看是否安装http_ssl_module模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">打开nginx的sbin文件夹</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin/nginx</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看是否安装</span></span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果出现 configure arguments: --with-http_ssl_module, 则已安装（下面的步骤可以跳过，进入 nginx.conf 配置）</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1><h2 id=\"构建nginx镜像\"><a href=\"#构建nginx镜像\" class=\"headerlink\" title=\"构建nginx镜像\"></a>构建nginx镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t nginx:1.0 .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx默认nginx-conf配置路径\"><a href=\"#nginx默认nginx-conf配置路径\" class=\"headerlink\" title=\"nginx默认nginx.conf配置路径\"></a>nginx默认nginx.conf配置路径</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat etc/nginx/nginx.conf</span><br><span class=\"line\">cat etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代理Jenkins\"><a href=\"#代理Jenkins\" class=\"headerlink\" title=\"代理Jenkins\"></a>代理Jenkins</h2><ul>\n<li><a href=\"http://t.csdn.cn/CUODV\">参考文章</a></li>\n</ul>\n<h2 id=\"配置ssl证书\"><a href=\"#配置ssl证书\" class=\"headerlink\" title=\"配置ssl证书\"></a>配置ssl证书</h2><ul>\n<li>nginx查看是否安装http_ssl_module模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">打开nginx的sbin文件夹</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin/nginx</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看是否安装</span></span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果出现 configure arguments: --with-http_ssl_module, 则已安装（下面的步骤可以跳过，进入 nginx.conf 配置）</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"docker-registry-doc-test","nav_order":14,"description":"部署docker-registry相关文档","parent":"Doc","has_children":false,"grand_parent":"Nginx","_content":"\n# 部署docker-registry相关文档\n\n## 使用Nginx代理\n\n- [参考文章](http://t.csdn.cn/36AL2)\n\n```shell\n\nupstream docker-registry {\n    server registry:5000;\n}\n\n## Set a variable to help us decide if we need to add the\n## 'Docker-Distribution-Api-Version' header.\n## The registry always sets this header.\n## In the case of nginx performing auth, the header is unset\n## since nginx is auth-ing before proxying.\nmap $upstream_http_docker_distribution_api_version $docker_distribution_api_version {\n'' 'registry/2.0';\n}\n\nserver {\n    listen 443 ssl;\n    server_name hub.vic.com;\n\n    # SSL\n    ssl_certificate /etc/nginx/conf.d/ca.crt;\n    ssl_certificate_key /etc/nginx/conf.d/ca.key;\n\n    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html\n    ssl_protocols TLSv1.1 TLSv1.2;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n\n    # disable any limits to avoid HTTP 413 for large image uploads\n    client_max_body_size 0;\n\n    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)\n    chunked_transfer_encoding on;\n\n    location /v2/ {\n        # Do not allow connections from docker 1.5 and earlier\n        # docker pre-1.6.0 did not properly set the user agent on ping, catch \"Go *\" user agents\n        if ($http_user_agent ~ \"^(docker\\/1\\.(3|4|5(?!\\.[0-9]-dev))|Go ).*$\" ) {\n            return 404;\n        }\n\n        # To add basic authentication to v2 use auth_basic setting.\n\n        ## If $docker_distribution_api_version is empty, the header is not added.\n        ## See the map directive above where this variable is defined.\n        add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;\n\n        proxy_pass                          http://docker-registry;\n        proxy_set_header  Host              $http_host;   # required for docker client's sake\n        proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP\n        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;\n        proxy_set_header  X-Forwarded-Proto $scheme;\n        proxy_read_timeout                  900;\n    }\n}\n```\n\n- 生成自签名证书\n\n```shell\n# 将签名生成到conf.d目录中给Nginx使用，在conf.d目录的上级目录执行以下命令即可\n\n# 创建自签名证书key文件\nopenssl genrsa -out conf.d/ca.key 2048\n# 创建自签名证书crt文件 注意 /CN=docker-registry.iuin.xyz 字段中 docker-registry.iuin.xyz 修改为仓库名\nopenssl req -x509 -new -nodes -key conf.d/ca.key -subj \"/CN=docker-registry.iuin.xyz\" -days 5000 -out conf.d/ca.crt\n# 给docker 设置自签名证书\nmkdir -p /etc/docker/certs.d/docker-registry.iuin.xyz\ncp conf.d/ca.crt  /etc/docker/certs.d/docker-registry.iuin.xyz\n\n```\n\n- 测试\n\n```shell\ndocker push busybox\ndocker tag busybox:latest docker-registry.iuin.xyz/busybox:1.0\ndocker push docker-registry.iuin.xyz/busybox:1.0\n\n```\n","source":"_posts/docker/mid/nginx/doc/docker-registry-doc-test.md","raw":"---\nlayout: default\ntitle: docker-registry-doc-test\nnav_order: 14\ndescription: 部署docker-registry相关文档\nparent: Doc\nhas_children: false\npermalink: \"/docker/mid/nginx/doc/docker-registry-doc-test/\"\ngrand_parent: Nginx\n---\n\n# 部署docker-registry相关文档\n\n## 使用Nginx代理\n\n- [参考文章](http://t.csdn.cn/36AL2)\n\n```shell\n\nupstream docker-registry {\n    server registry:5000;\n}\n\n## Set a variable to help us decide if we need to add the\n## 'Docker-Distribution-Api-Version' header.\n## The registry always sets this header.\n## In the case of nginx performing auth, the header is unset\n## since nginx is auth-ing before proxying.\nmap $upstream_http_docker_distribution_api_version $docker_distribution_api_version {\n'' 'registry/2.0';\n}\n\nserver {\n    listen 443 ssl;\n    server_name hub.vic.com;\n\n    # SSL\n    ssl_certificate /etc/nginx/conf.d/ca.crt;\n    ssl_certificate_key /etc/nginx/conf.d/ca.key;\n\n    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html\n    ssl_protocols TLSv1.1 TLSv1.2;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n\n    # disable any limits to avoid HTTP 413 for large image uploads\n    client_max_body_size 0;\n\n    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)\n    chunked_transfer_encoding on;\n\n    location /v2/ {\n        # Do not allow connections from docker 1.5 and earlier\n        # docker pre-1.6.0 did not properly set the user agent on ping, catch \"Go *\" user agents\n        if ($http_user_agent ~ \"^(docker\\/1\\.(3|4|5(?!\\.[0-9]-dev))|Go ).*$\" ) {\n            return 404;\n        }\n\n        # To add basic authentication to v2 use auth_basic setting.\n\n        ## If $docker_distribution_api_version is empty, the header is not added.\n        ## See the map directive above where this variable is defined.\n        add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;\n\n        proxy_pass                          http://docker-registry;\n        proxy_set_header  Host              $http_host;   # required for docker client's sake\n        proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP\n        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;\n        proxy_set_header  X-Forwarded-Proto $scheme;\n        proxy_read_timeout                  900;\n    }\n}\n```\n\n- 生成自签名证书\n\n```shell\n# 将签名生成到conf.d目录中给Nginx使用，在conf.d目录的上级目录执行以下命令即可\n\n# 创建自签名证书key文件\nopenssl genrsa -out conf.d/ca.key 2048\n# 创建自签名证书crt文件 注意 /CN=docker-registry.iuin.xyz 字段中 docker-registry.iuin.xyz 修改为仓库名\nopenssl req -x509 -new -nodes -key conf.d/ca.key -subj \"/CN=docker-registry.iuin.xyz\" -days 5000 -out conf.d/ca.crt\n# 给docker 设置自签名证书\nmkdir -p /etc/docker/certs.d/docker-registry.iuin.xyz\ncp conf.d/ca.crt  /etc/docker/certs.d/docker-registry.iuin.xyz\n\n```\n\n- 测试\n\n```shell\ndocker push busybox\ndocker tag busybox:latest docker-registry.iuin.xyz/busybox:1.0\ndocker push docker-registry.iuin.xyz/busybox:1.0\n\n```\n","slug":"docker/mid/nginx/doc/docker-registry-doc-test","published":1,"date":"2025-02-23T07:43:31.114Z","updated":"2025-02-23T07:43:31.114Z","__permalink":"/docker/mid/nginx/doc/docker-registry-doc-test/","comments":1,"photos":[],"_id":"cm7k5rwb10086mswsav45etb6","content":"<h1 id=\"部署docker-registry相关文档\"><a href=\"#部署docker-registry相关文档\" class=\"headerlink\" title=\"部署docker-registry相关文档\"></a>部署docker-registry相关文档</h1><h2 id=\"使用Nginx代理\"><a href=\"#使用Nginx代理\" class=\"headerlink\" title=\"使用Nginx代理\"></a>使用Nginx代理</h2><ul>\n<li><a href=\"http://t.csdn.cn/36AL2\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">upstream docker-registry &#123;</span><br><span class=\"line\">    server registry:5000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># Set a variable to help us decide if we need to add the</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># &#x27;Docker-Distribution-Api-Version&#x27; header.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># The registry always sets this header.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># In the case of nginx performing auth, the header is unset</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># since nginx is auth-ing before proxying.</span></span></span><br><span class=\"line\">map $upstream_http_docker_distribution_api_version $docker_distribution_api_version &#123;</span><br><span class=\"line\">&#x27;&#x27; &#x27;registry/2.0&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name hub.vic.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL</span><br><span class=\"line\">    ssl_certificate /etc/nginx/conf.d/ca.crt;</span><br><span class=\"line\">    ssl_certificate_key /etc/nginx/conf.d/ca.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers &#x27;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&#x27;;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\"></span><br><span class=\"line\">    # disable any limits to avoid HTTP 413 for large image uploads</span><br><span class=\"line\">    client_max_body_size 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)</span><br><span class=\"line\">    chunked_transfer_encoding on;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /v2/ &#123;</span><br><span class=\"line\">        # Do not allow connections from docker 1.5 and earlier</span><br><span class=\"line\">        # docker pre-1.6.0 did not properly set the user agent on ping, catch &quot;Go *&quot; user agents</span><br><span class=\"line\">        if ($http_user_agent ~ &quot;^(docker\\/1\\.(3|4|5(?!\\.[0-9]-dev))|Go ).*$&quot; ) &#123;</span><br><span class=\"line\">            return 404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # To add basic authentication to v2 use auth_basic setting.</span><br><span class=\"line\"></span><br><span class=\"line\">        ## If $docker_distribution_api_version is empty, the header is not added.</span><br><span class=\"line\">        ## See the map directive above where this variable is defined.</span><br><span class=\"line\">        add_header &#x27;Docker-Distribution-Api-Version&#x27; $docker_distribution_api_version always;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass                          http://docker-registry;</span><br><span class=\"line\">        proxy_set_header  Host              $http_host;   # required for docker client&#x27;s sake</span><br><span class=\"line\">        proxy_set_header  X-Real-IP         $remote_addr; # pass on real client&#x27;s IP</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-Proto $scheme;</span><br><span class=\"line\">        proxy_read_timeout                  900;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成自签名证书</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将签名生成到conf.d目录中给Nginx使用，在conf.d目录的上级目录执行以下命令即可</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建自签名证书key文件</span></span><br><span class=\"line\">openssl genrsa -out conf.d/ca.key 2048</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建自签名证书crt文件 注意 /CN=docker-registry.iuin.xyz 字段中 docker-registry.iuin.xyz 修改为仓库名</span></span><br><span class=\"line\">openssl req -x509 -new -nodes -key conf.d/ca.key -subj &quot;/CN=docker-registry.iuin.xyz&quot; -days 5000 -out conf.d/ca.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">给docker 设置自签名证书</span></span><br><span class=\"line\">mkdir -p /etc/docker/certs.d/docker-registry.iuin.xyz</span><br><span class=\"line\">cp conf.d/ca.crt  /etc/docker/certs.d/docker-registry.iuin.xyz</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push busybox</span><br><span class=\"line\">docker tag busybox:latest docker-registry.iuin.xyz/busybox:1.0</span><br><span class=\"line\">docker push docker-registry.iuin.xyz/busybox:1.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"部署docker-registry相关文档\"><a href=\"#部署docker-registry相关文档\" class=\"headerlink\" title=\"部署docker-registry相关文档\"></a>部署docker-registry相关文档</h1><h2 id=\"使用Nginx代理\"><a href=\"#使用Nginx代理\" class=\"headerlink\" title=\"使用Nginx代理\"></a>使用Nginx代理</h2><ul>\n<li><a href=\"http://t.csdn.cn/36AL2\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">upstream docker-registry &#123;</span><br><span class=\"line\">    server registry:5000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># Set a variable to help us decide if we need to add the</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># &#x27;Docker-Distribution-Api-Version&#x27; header.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># The registry always sets this header.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># In the case of nginx performing auth, the header is unset</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># since nginx is auth-ing before proxying.</span></span></span><br><span class=\"line\">map $upstream_http_docker_distribution_api_version $docker_distribution_api_version &#123;</span><br><span class=\"line\">&#x27;&#x27; &#x27;registry/2.0&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name hub.vic.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL</span><br><span class=\"line\">    ssl_certificate /etc/nginx/conf.d/ca.crt;</span><br><span class=\"line\">    ssl_certificate_key /etc/nginx/conf.d/ca.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers &#x27;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&#x27;;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\"></span><br><span class=\"line\">    # disable any limits to avoid HTTP 413 for large image uploads</span><br><span class=\"line\">    client_max_body_size 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)</span><br><span class=\"line\">    chunked_transfer_encoding on;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /v2/ &#123;</span><br><span class=\"line\">        # Do not allow connections from docker 1.5 and earlier</span><br><span class=\"line\">        # docker pre-1.6.0 did not properly set the user agent on ping, catch &quot;Go *&quot; user agents</span><br><span class=\"line\">        if ($http_user_agent ~ &quot;^(docker\\/1\\.(3|4|5(?!\\.[0-9]-dev))|Go ).*$&quot; ) &#123;</span><br><span class=\"line\">            return 404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # To add basic authentication to v2 use auth_basic setting.</span><br><span class=\"line\"></span><br><span class=\"line\">        ## If $docker_distribution_api_version is empty, the header is not added.</span><br><span class=\"line\">        ## See the map directive above where this variable is defined.</span><br><span class=\"line\">        add_header &#x27;Docker-Distribution-Api-Version&#x27; $docker_distribution_api_version always;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass                          http://docker-registry;</span><br><span class=\"line\">        proxy_set_header  Host              $http_host;   # required for docker client&#x27;s sake</span><br><span class=\"line\">        proxy_set_header  X-Real-IP         $remote_addr; # pass on real client&#x27;s IP</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-Proto $scheme;</span><br><span class=\"line\">        proxy_read_timeout                  900;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成自签名证书</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将签名生成到conf.d目录中给Nginx使用，在conf.d目录的上级目录执行以下命令即可</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建自签名证书key文件</span></span><br><span class=\"line\">openssl genrsa -out conf.d/ca.key 2048</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建自签名证书crt文件 注意 /CN=docker-registry.iuin.xyz 字段中 docker-registry.iuin.xyz 修改为仓库名</span></span><br><span class=\"line\">openssl req -x509 -new -nodes -key conf.d/ca.key -subj &quot;/CN=docker-registry.iuin.xyz&quot; -days 5000 -out conf.d/ca.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">给docker 设置自签名证书</span></span><br><span class=\"line\">mkdir -p /etc/docker/certs.d/docker-registry.iuin.xyz</span><br><span class=\"line\">cp conf.d/ca.crt  /etc/docker/certs.d/docker-registry.iuin.xyz</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push busybox</span><br><span class=\"line\">docker tag busybox:latest docker-registry.iuin.xyz/busybox:1.0</span><br><span class=\"line\">docker push docker-registry.iuin.xyz/busybox:1.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Doc","nav_order":4,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/mid/nginx/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 4\nhas_children: true\nparent: Doc\npermalink: \"/docker/mid/nginx/doc/\"\n---\n\n# Doc\n","slug":"docker/mid/nginx/doc/index","published":1,"date":"2025-02-23T07:43:31.114Z","updated":"2025-02-23T07:43:31.115Z","__permalink":"/docker/mid/nginx/doc/","comments":1,"photos":[],"_id":"cm7k5rwb20087msws3ivc9t7f","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"problem","nav_order":14,"description":"nginx相关问题","parent":"Doc","has_children":false,"grand_parent":"Nginx","_content":"\n# nginx相关问题\n\n## 图片访问路径问题\n\n```shell\n# 访问路径：\n www.images.mbox58.com/images/aaa/1.jpg\n# 使用root(/www/wwwroot/images/images/~~~)\nlocation /images {\n    root /www/wwwroot/images/;\n    autoindex on;\n}\n# 使用alias(/www/wwwroot/images/~~~)\nlocation /images {\n    alias /www/wwwroot/images/; # 后面的(/)需要带上\n    autoindex on;\n}\n```\n\n## 431 请求头太大问题\n\n- 431 Request Header Fields Too Large\n\n```shell\nhttp {\n    client_header_buffer_size 10240k;\n    large_client_header_buffers 6 10240k;\n}\n```\n\n## nginx导致中文字符乱码问题\n\n```shell\n# 该配置，如果url路径上有中文会导致中文字符乱码问题\n# http://10.0.0.73:10000/apidomain/down/download/report/2022/4/22/参与人积分统计_20220422151521309.csv\n    location ~ ^/apidomain(.*) {\n        include cors.conf;\n        proxy_set_header Host $host;\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://web-api:8080$1?$args;\n    }\n\n# 解决方法: 使用以下方式替换即可\n    location /apidomain/ {\n        include cors.conf;\n        proxy_set_header Host $host;\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://web-api:8080/;\n    }\n\n```\n","source":"_posts/docker/mid/nginx/doc/problem.md","raw":"---\nlayout: default\ntitle: problem\nnav_order: 14\ndescription: nginx相关问题\nparent: Doc\nhas_children: false\npermalink: \"/docker/mid/nginx/doc/problem/\"\ngrand_parent: Nginx\n---\n\n# nginx相关问题\n\n## 图片访问路径问题\n\n```shell\n# 访问路径：\n www.images.mbox58.com/images/aaa/1.jpg\n# 使用root(/www/wwwroot/images/images/~~~)\nlocation /images {\n    root /www/wwwroot/images/;\n    autoindex on;\n}\n# 使用alias(/www/wwwroot/images/~~~)\nlocation /images {\n    alias /www/wwwroot/images/; # 后面的(/)需要带上\n    autoindex on;\n}\n```\n\n## 431 请求头太大问题\n\n- 431 Request Header Fields Too Large\n\n```shell\nhttp {\n    client_header_buffer_size 10240k;\n    large_client_header_buffers 6 10240k;\n}\n```\n\n## nginx导致中文字符乱码问题\n\n```shell\n# 该配置，如果url路径上有中文会导致中文字符乱码问题\n# http://10.0.0.73:10000/apidomain/down/download/report/2022/4/22/参与人积分统计_20220422151521309.csv\n    location ~ ^/apidomain(.*) {\n        include cors.conf;\n        proxy_set_header Host $host;\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://web-api:8080$1?$args;\n    }\n\n# 解决方法: 使用以下方式替换即可\n    location /apidomain/ {\n        include cors.conf;\n        proxy_set_header Host $host;\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://web-api:8080/;\n    }\n\n```\n","slug":"docker/mid/nginx/doc/problem","published":1,"date":"2025-02-23T07:43:31.114Z","updated":"2025-02-23T07:43:31.114Z","__permalink":"/docker/mid/nginx/doc/problem/","comments":1,"photos":[],"_id":"cm7k5rwb20088msws5qwoamvu","content":"<h1 id=\"nginx相关问题\"><a href=\"#nginx相关问题\" class=\"headerlink\" title=\"nginx相关问题\"></a>nginx相关问题</h1><h2 id=\"图片访问路径问题\"><a href=\"#图片访问路径问题\" class=\"headerlink\" title=\"图片访问路径问题\"></a>图片访问路径问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">访问路径：</span></span><br><span class=\"line\"> www.images.mbox58.com/images/aaa/1.jpg</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用root(/www/wwwroot/images/images/~~~)</span></span><br><span class=\"line\">location /images &#123;</span><br><span class=\"line\">    root /www/wwwroot/images/;</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用<span class=\"built_in\">alias</span>(/www/wwwroot/images/~~~)</span></span><br><span class=\"line\">location /images &#123;</span><br><span class=\"line\">    alias /www/wwwroot/images/; # 后面的(/)需要带上</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"431-请求头太大问题\"><a href=\"#431-请求头太大问题\" class=\"headerlink\" title=\"431 请求头太大问题\"></a>431 请求头太大问题</h2><ul>\n<li>431 Request Header Fields Too Large</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    client_header_buffer_size 10240k;</span><br><span class=\"line\">    large_client_header_buffers 6 10240k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx导致中文字符乱码问题\"><a href=\"#nginx导致中文字符乱码问题\" class=\"headerlink\" title=\"nginx导致中文字符乱码问题\"></a>nginx导致中文字符乱码问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">该配置，如果url路径上有中文会导致中文字符乱码问题</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">http://10.0.0.73:10000/apidomain/down/download/report/2022/4/22/参与人积分统计_20220422151521309.csv</span></span><br><span class=\"line\">    location ~ ^/apidomain(.*) &#123;</span><br><span class=\"line\">        include cors.conf;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://web-api:8080$1?$args;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解决方法: 使用以下方式替换即可</span></span><br><span class=\"line\">    location /apidomain/ &#123;</span><br><span class=\"line\">        include cors.conf;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://web-api:8080/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"nginx相关问题\"><a href=\"#nginx相关问题\" class=\"headerlink\" title=\"nginx相关问题\"></a>nginx相关问题</h1><h2 id=\"图片访问路径问题\"><a href=\"#图片访问路径问题\" class=\"headerlink\" title=\"图片访问路径问题\"></a>图片访问路径问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">访问路径：</span></span><br><span class=\"line\"> www.images.mbox58.com/images/aaa/1.jpg</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用root(/www/wwwroot/images/images/~~~)</span></span><br><span class=\"line\">location /images &#123;</span><br><span class=\"line\">    root /www/wwwroot/images/;</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用<span class=\"built_in\">alias</span>(/www/wwwroot/images/~~~)</span></span><br><span class=\"line\">location /images &#123;</span><br><span class=\"line\">    alias /www/wwwroot/images/; # 后面的(/)需要带上</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"431-请求头太大问题\"><a href=\"#431-请求头太大问题\" class=\"headerlink\" title=\"431 请求头太大问题\"></a>431 请求头太大问题</h2><ul>\n<li>431 Request Header Fields Too Large</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    client_header_buffer_size 10240k;</span><br><span class=\"line\">    large_client_header_buffers 6 10240k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx导致中文字符乱码问题\"><a href=\"#nginx导致中文字符乱码问题\" class=\"headerlink\" title=\"nginx导致中文字符乱码问题\"></a>nginx导致中文字符乱码问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">该配置，如果url路径上有中文会导致中文字符乱码问题</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">http://10.0.0.73:10000/apidomain/down/download/report/2022/4/22/参与人积分统计_20220422151521309.csv</span></span><br><span class=\"line\">    location ~ ^/apidomain(.*) &#123;</span><br><span class=\"line\">        include cors.conf;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://web-api:8080$1?$args;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解决方法: 使用以下方式替换即可</span></span><br><span class=\"line\">    location /apidomain/ &#123;</span><br><span class=\"line\">        include cors.conf;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://web-api:8080/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":14,"description":"nginx-ui","parent":"Nginx-ui","has_children":false,"grand_parent":"Nginx","_content":"\n# nginx-ui\n\n[参考文章](https://mp.weixin.qq.com/s/sTsrkRqakj6X_iJAU2Nn3w)\n\n## 安装\n\n```bash\ndocker-compose up -d\n\n# When your docker container is running, Log in to nginx-ui panel with http://<your_server_ip>:8080/install.\n```\n","source":"_posts/docker/mid/nginx/nginx-ui/nginx-ui.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: nginx-ui\nparent: Nginx-ui\nhas_children: false\npermalink: \"/docker/mid/nginx/nginx-ui/nginx-ui/\"\ngrand_parent: Nginx\n---\n\n# nginx-ui\n\n[参考文章](https://mp.weixin.qq.com/s/sTsrkRqakj6X_iJAU2Nn3w)\n\n## 安装\n\n```bash\ndocker-compose up -d\n\n# When your docker container is running, Log in to nginx-ui panel with http://<your_server_ip>:8080/install.\n```\n","slug":"docker/mid/nginx/nginx-ui/nginx-ui","published":1,"date":"2025-02-23T07:43:31.115Z","updated":"2025-02-23T07:43:31.115Z","__permalink":"/docker/mid/nginx/nginx-ui/nginx-ui/","comments":1,"photos":[],"_id":"cm7k5rwb20089msws1lvb66k5","content":"<h1 id=\"nginx-ui\"><a href=\"#nginx-ui\" class=\"headerlink\" title=\"nginx-ui\"></a>nginx-ui</h1><p><a href=\"https://mp.weixin.qq.com/s/sTsrkRqakj6X_iJAU2Nn3w\">参考文章</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When your docker container is running, Log in to nginx-ui panel with http://&lt;your_server_ip&gt;:8080/install.</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"nginx-ui\"><a href=\"#nginx-ui\" class=\"headerlink\" title=\"nginx-ui\"></a>nginx-ui</h1><p><a href=\"https://mp.weixin.qq.com/s/sTsrkRqakj6X_iJAU2Nn3w\">参考文章</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When your docker container is running, Log in to nginx-ui panel with http://&lt;your_server_ip&gt;:8080/install.</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Simple-common","nav_order":4,"has_children":true,"parent":"Simple-common","_content":"\n# Simple-common\n","source":"_posts/docker/mid/nginx/simple-common/index.md","raw":"---\nlayout: default\ntitle: Simple-common\nnav_order: 4\nhas_children: true\nparent: Simple-common\npermalink: \"/docker/mid/nginx/simple-common/\"\n---\n\n# Simple-common\n","slug":"docker/mid/nginx/simple-common/index","published":1,"date":"2025-02-23T07:43:31.098Z","updated":"2025-02-23T07:43:31.098Z","__permalink":"/docker/mid/nginx/simple-common/","comments":1,"photos":[],"_id":"cm7k5rwb2008amsws9lbe0zhc","content":"<h1 id=\"Simple-common\"><a href=\"#Simple-common\" class=\"headerlink\" title=\"Simple-common\"></a>Simple-common</h1>","excerpt":"","more":"<h1 id=\"Simple-common\"><a href=\"#Simple-common\" class=\"headerlink\" title=\"Simple-common\"></a>Simple-common</h1>"},{"layout":"default","title":"template-doc","nav_order":14,"description":"nginx模板配置  - [参考文章](https://hub.docker.com/_/nginx)","parent":"Simple-common","has_children":false,"grand_parent":"Nginx","_content":"\n# nginx模板配置\n  \n- [参考文章](https://hub.docker.com/_/nginx)\n","source":"_posts/docker/mid/nginx/simple-common/template-doc.md","raw":"---\nlayout: default\ntitle: template-doc\nnav_order: 14\ndescription: nginx模板配置  - [参考文章](https://hub.docker.com/_/nginx)\nparent: Simple-common\nhas_children: false\npermalink: \"/docker/mid/nginx/simple-common/template-doc/\"\ngrand_parent: Nginx\n---\n\n# nginx模板配置\n  \n- [参考文章](https://hub.docker.com/_/nginx)\n","slug":"docker/mid/nginx/simple-common/template-doc","published":1,"date":"2025-02-23T07:43:31.093Z","updated":"2025-02-23T07:43:31.093Z","__permalink":"/docker/mid/nginx/simple-common/template-doc/","comments":1,"photos":[],"_id":"cm7k5rwb2008bmsws4kvsc9dd","content":"<h1 id=\"nginx模板配置\"><a href=\"#nginx模板配置\" class=\"headerlink\" title=\"nginx模板配置\"></a>nginx模板配置</h1><ul>\n<li><a href=\"https://hub.docker.com/_/nginx\">参考文章</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"nginx模板配置\"><a href=\"#nginx模板配置\" class=\"headerlink\" title=\"nginx模板配置\"></a>nginx模板配置</h1><ul>\n<li><a href=\"https://hub.docker.com/_/nginx\">参考文章</a></li>\n</ul>\n"},{"layout":"default","title":"deploy","nav_order":14,"description":"broker.conf``` 设置宿主机ipbrokerIP1=manager``` 查看节点名称```shell scriptdocker node ls``` 节点打标```shell scriptdocker node update --label-add role=标签名称  宿主机A节点名称```","parent":"Doc","has_children":false,"grand_parent":"Rocketmq","_content":"\n## broker.conf\n```\n# 设置宿主机ip\nbrokerIP1=manager\n```\n## 查看节点名称\n```shell script\ndocker node ls\n```\n## 节点打标\n```shell script\ndocker node update --label-add role=标签名称  宿主机A节点名称\n```\n","source":"_posts/docker/mid/rocketMq/doc/deploy.md","raw":"---\nlayout: default\ntitle: deploy\nnav_order: 14\ndescription: broker.conf``` 设置宿主机ipbrokerIP1=manager``` 查看节点名称```shell scriptdocker\n  node ls``` 节点打标```shell scriptdocker node update --label-add role=标签名称  宿主机A节点名称```\nparent: Doc\nhas_children: false\npermalink: \"/docker/mid/rocketmq/doc/deploy/\"\ngrand_parent: Rocketmq\n---\n\n## broker.conf\n```\n# 设置宿主机ip\nbrokerIP1=manager\n```\n## 查看节点名称\n```shell script\ndocker node ls\n```\n## 节点打标\n```shell script\ndocker node update --label-add role=标签名称  宿主机A节点名称\n```\n","slug":"docker/mid/rocketMq/doc/deploy","published":1,"date":"2025-02-23T07:43:31.127Z","updated":"2025-02-23T07:43:31.127Z","__permalink":"/docker/mid/rocketmq/doc/deploy/","comments":1,"photos":[],"_id":"cm7k5rwb2008cmswsbbx053rc","content":"<h2 id=\"broker-conf\"><a href=\"#broker-conf\" class=\"headerlink\" title=\"broker.conf\"></a>broker.conf</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置宿主机ip</span><br><span class=\"line\">brokerIP1=manager</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看节点名称\"><a href=\"#查看节点名称\" class=\"headerlink\" title=\"查看节点名称\"></a>查看节点名称</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node ls</span><br></pre></td></tr></table></figure>\n<h2 id=\"节点打标\"><a href=\"#节点打标\" class=\"headerlink\" title=\"节点打标\"></a>节点打标</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-add role=标签名称  宿主机A节点名称</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"broker-conf\"><a href=\"#broker-conf\" class=\"headerlink\" title=\"broker.conf\"></a>broker.conf</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置宿主机ip</span><br><span class=\"line\">brokerIP1=manager</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看节点名称\"><a href=\"#查看节点名称\" class=\"headerlink\" title=\"查看节点名称\"></a>查看节点名称</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node ls</span><br></pre></td></tr></table></figure>\n<h2 id=\"节点打标\"><a href=\"#节点打标\" class=\"headerlink\" title=\"节点打标\"></a>节点打标</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-add role=标签名称  宿主机A节点名称</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Nginx-ui","nav_order":4,"has_children":true,"parent":"Nginx-ui","_content":"\n# Nginx-ui\n","source":"_posts/docker/mid/nginx/nginx-ui/index.md","raw":"---\nlayout: default\ntitle: Nginx-ui\nnav_order: 4\nhas_children: true\nparent: Nginx-ui\npermalink: \"/docker/mid/nginx/nginx-ui/\"\n---\n\n# Nginx-ui\n","slug":"docker/mid/nginx/nginx-ui/index","published":1,"date":"2025-02-23T07:43:31.115Z","updated":"2025-02-23T07:43:31.115Z","__permalink":"/docker/mid/nginx/nginx-ui/","comments":1,"photos":[],"_id":"cm7k5rwb2008dmswsggy0d8b8","content":"<h1 id=\"Nginx-ui\"><a href=\"#Nginx-ui\" class=\"headerlink\" title=\"Nginx-ui\"></a>Nginx-ui</h1>","excerpt":"","more":"<h1 id=\"Nginx-ui\"><a href=\"#Nginx-ui\" class=\"headerlink\" title=\"Nginx-ui\"></a>Nginx-ui</h1>"},{"layout":"default","title":"Test","nav_order":4,"has_children":true,"parent":"Test","_content":"\n# Test\n","source":"_posts/docker/doc/docker-context/test/index.md","raw":"---\nlayout: default\ntitle: Test\nnav_order: 4\nhas_children: true\nparent: Test\npermalink: \"/docker/doc/docker-context/test/\"\n---\n\n# Test\n","slug":"docker/doc/docker-context/test/index","published":1,"date":"2025-02-23T07:43:31.181Z","updated":"2025-02-23T07:43:31.181Z","__permalink":"/docker/doc/docker-context/test/","comments":1,"photos":[],"_id":"cm7k5rwb2008emswsd1ah0flq","content":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>","excerpt":"","more":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>"},{"layout":"default","title":"Doc","nav_order":4,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/mid/rocketMq/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 4\nhas_children: true\nparent: Doc\npermalink: \"/docker/mid/rocketmq/doc/\"\n---\n\n# Doc\n","slug":"docker/mid/rocketMq/doc/index","published":1,"date":"2025-02-23T07:43:31.127Z","updated":"2025-02-23T07:43:31.127Z","__permalink":"/docker/mid/rocketmq/doc/","comments":1,"photos":[],"_id":"cm7k5rwb2008fmsws0a4c8xbm","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"Ai","nav_order":4,"has_children":true,"parent":"Ai","_content":"\n# Ai\n","source":"_posts/docker/doc/material/ai/index.md","raw":"---\nlayout: default\ntitle: Ai\nnav_order: 4\nhas_children: true\nparent: Ai\npermalink: \"/docker/doc/material/ai/\"\n---\n\n# Ai\n","slug":"docker/doc/material/ai/index","published":1,"date":"2025-02-23T07:43:31.260Z","updated":"2025-02-23T07:43:31.260Z","__permalink":"/docker/doc/material/ai/","comments":1,"photos":[],"_id":"cm7k5rwb2008gmsws6uso28dv","content":"<h1 id=\"Ai\"><a href=\"#Ai\" class=\"headerlink\" title=\"Ai\"></a>Ai</h1>","excerpt":"","more":"<h1 id=\"Ai\"><a href=\"#Ai\" class=\"headerlink\" title=\"Ai\"></a>Ai</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"测试","parent":"Test","has_children":false,"grand_parent":"Docker-context","_content":"\n# 测试\n\n```bash\ndocker context create k8s-test \\\n  --default-stack-orchestrator=kubernetes \\\n  --kubernetes config-file=~/.kube/config \\\n  --docker host=ssh://root@23.internet.company\n```\n","source":"_posts/docker/doc/docker-context/test/test.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: 测试\nparent: Test\nhas_children: false\npermalink: \"/docker/doc/docker-context/test/test/\"\ngrand_parent: Docker-context\n---\n\n# 测试\n\n```bash\ndocker context create k8s-test \\\n  --default-stack-orchestrator=kubernetes \\\n  --kubernetes config-file=~/.kube/config \\\n  --docker host=ssh://root@23.internet.company\n```\n","slug":"docker/doc/docker-context/test/test","published":1,"date":"2025-02-23T07:43:31.181Z","updated":"2025-02-23T07:43:31.182Z","__permalink":"/docker/doc/docker-context/test/test/","comments":1,"photos":[],"_id":"cm7k5rwb3008hmswsbc6gbum1","content":"<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker context create k8s-test \\</span><br><span class=\"line\">  --default-stack-orchestrator=kubernetes \\</span><br><span class=\"line\">  --kubernetes config-file=~/.kube/config \\</span><br><span class=\"line\">  --docker host=ssh://root@23.internet.company</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker context create k8s-test \\</span><br><span class=\"line\">  --default-stack-orchestrator=kubernetes \\</span><br><span class=\"line\">  --kubernetes config-file=~/.kube/config \\</span><br><span class=\"line\">  --docker host=ssh://root@23.internet.company</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Manual","nav_order":4,"has_children":true,"parent":"Manual","_content":"\n# Manual\n","source":"_posts/docker/doc/material/manual/index.md","raw":"---\nlayout: default\ntitle: Manual\nnav_order: 4\nhas_children: true\nparent: Manual\npermalink: \"/docker/doc/material/manual/\"\n---\n\n# Manual\n","slug":"docker/doc/material/manual/index","published":1,"date":"2025-02-23T07:43:31.243Z","updated":"2025-02-23T07:43:31.243Z","__permalink":"/docker/doc/material/manual/","comments":1,"photos":[],"_id":"cm7k5rwb3008imsws45o25vee","content":"<h1 id=\"Manual\"><a href=\"#Manual\" class=\"headerlink\" title=\"Manual\"></a>Manual</h1>","excerpt":"","more":"<h1 id=\"Manual\"><a href=\"#Manual\" class=\"headerlink\" title=\"Manual\"></a>Manual</h1>"},{"layout":"default","title":"ssh动态代理","nav_order":14,"description":"以下是对命令 `ssh -o GatewayPorts=yes -D 2000 test-2023.intranet.company -NTfCg` 的逐项解析和完整说明：","parent":"Ai","has_children":false,"grand_parent":"Material","_content":"\n以下是对命令 `ssh -o GatewayPorts=yes -D 2000 test-2023.intranet.company -NTfCg` 的逐项解析和完整说明：\n\n---\n\n### **命令功能总结**\n此命令通过 SSH 建立一个 **后台运行的动态端口转发隧道**（SOCKS5 代理），绑定到本地所有网络接口，允许远程主机通过该代理访问目标网络资源。具体用途包括：\n- 将本地 `2000` 端口作为代理入口，流量通过 `test-2023.intranet.company` 服务器转发。\n- 支持远程主机（非本机）连接本地 `2000` 端口（通过 `-g` 和 `GatewayPorts=yes` 实现）。\n- 后台静默运行，无终端交互，适合长期稳定的代理需求。\n\n---\n\n### **参数逐项解析**\n\n#### **1. `-o GatewayPorts=yes`**\n- **作用**：允许远程主机连接到本地转发的端口。\n- **默认行为**：SSH 默认将本地端口绑定到 `127.0.0.1`（仅限本机访问）。\n- **启用后**：绑定到 `0.0.0.0`（所有网络接口），使其他主机可通过本地 IP 访问 `2000` 端口。\n- **典型场景**：需要将本地代理共享给局域网内其他设备时（如手机、平板）。\n\n---\n\n#### **2. `-D 2000`**\n- **作用**：启用动态端口转发（SOCKS5 代理），监听本地 `2000` 端口。\n- **流量规则**：所有发送到 `2000` 端口的流量将通过 SSH 隧道加密并转发到目标网络。\n- **端口选择**：\n  - `<1024` 的端口需要 `root` 权限（如 `-D 80`）。\n  - `2000` 是用户级端口，无需特权。\n\n---\n\n#### **3. `test-2023.intranet.company`**\n- **作用**：指定 SSH 连接的目标服务器。\n- **补充说明**：\n  - 确保该域名能被正确解析（如通过 DNS 或 `/etc/hosts` 配置）。\n  - 如果使用密钥认证，需提前配置 `~/.ssh/config` 或通过 `-i` 指定私钥。\n\n---\n\n#### **4. `-N`**\n- **作用**：不执行远程命令，仅建立隧道。\n- **用途**：适用于纯端口转发场景，无需启动远程 Shell。\n\n---\n\n#### **5. `-T`**\n- **作用**：禁用伪终端（PTY）分配。\n- **用途**：进一步减少资源占用，确保连接仅用于转发。\n\n---\n\n#### **6. `-f`**\n- **作用**：将 SSH 进程转入后台运行。\n- **操作提示**：\n  - 若需终止后台进程，可使用 `ps aux | grep ssh` 查找 PID 后执行 `kill <PID>`。\n  - 结合 `-f` 时，输入密码需在命令中提前处理（如使用密钥或无密码登录）。\n\n---\n\n#### **7. `-C`**\n- **作用**：启用数据压缩（基于 gzip 算法）。\n- **适用场景**：\n  - 网络带宽较低时（如移动网络），减少传输数据量。\n  - 传输大量文本数据（如日志、代码）。\n- **不适用场景**：\n  - 高速局域网环境（压缩可能增加延迟）。\n  - 已加密或预压缩的数据（如视频、图片）。\n\n---\n\n#### **8. `-g`**\n- **作用**：允许远程主机连接本地转发端口（与 `GatewayPorts=yes` 功能重复，但双重确保）。\n- **历史背景**：旧版 SSH 中，`-g` 是实现 `GatewayPorts=yes` 的等效命令行选项，现代版本中两者可同时使用以明确意图。\n\n---\n\n### **完整命令行为**\n```bash\nssh \\\n  -o GatewayPorts=yes \\  # 允许远程主机连接本地端口\n  -D 2000 \\              # 动态转发到本地2000端口（SOCKS5）\n  test-2023.intranet.company \\  # 目标服务器\n  -N \\                   # 不执行远程命令\n  -T \\                   # 不分配终端\n  -f \\                   # 后台运行\n  -C \\                   # 启用压缩\n  -g                     # 允许远程主机连接\n```\n\n---\n\n### **典型使用场景**\n#### **场景 1：本地开发代理**\n- 浏览器或应用配置 SOCKS5 代理为 `127.0.0.1:2000`，所有流量通过 `test-2023.intranet.company` 转发。\n- 访问内部服务（如 `http://internal-app:8080`）时，流量经由隧道直达内网。\n\n#### **场景 2：跨设备共享代理**\n- 在本地 PC 运行此命令，手机或其他设备将代理设置为 `<PC的IP>:2000`，即可通过 PC 的 SSH 隧道访问内网。\n\n#### **场景 3：穿透防火墙**\n- 绕过网络限制访问被封资源（如访问外部 API），依赖服务器的出口 IP。\n\n---\n\n### **常见问题排查**\n#### **1. 连接失败：`Permission denied`**\n- **原因**：SSH 认证失败（密码错误、密钥未配置）。\n- **解决**：\n  - 使用 `-v` 参数查看详细日志：`ssh -v ...`。\n  - 配置密钥登录：`ssh-copy-id user@test-2023.intranet.company`。\n\n#### **2. 端口占用：`bind: Address already in use`**\n- **原因**：本地 `2000` 端口被其他进程占用。\n- **解决**：\n  - 更换端口：`-D 2001`。\n  - 释放端口：`lsof -i :2000` 查找占用进程并终止。\n\n#### **3. 远程主机无法连接代理**\n- **原因**：本地防火墙或路由器阻止外部访问 `2000` 端口。\n- **解决**：\n  - 开放防火墙：`sudo ufw allow 2000`（Linux）。\n  - 检查路由器 NAT 规则（如需从公网访问）。\n\n---\n\n### **扩展操作**\n#### **1. 结合 ClashX 使用**\n在 ClashX 配置文件中添加 SOCKS5 代理：\n```yaml\nproxies:\n  - name: \"ssh-tunnel\"\n    type: socks5\n    server: 127.0.0.1\n    port: 2000\n    udp: true  # 按需启用 UDP 转发\n\nrules:\n  - DOMAIN-SUFFIX,intranet.company,ssh-tunnel\n```\n\n#### **2. 保持隧道稳定（防断连）**\n使用 `autossh` 替代 `ssh` 实现自动重连：\n```bash\nautossh -M 0 -o \"ExitOnForwardFailure=yes\" -NTfCg -D 2000 test-2023.intranet.company\n```\n\n---\n\n### **总结**\n此命令通过 SSH 动态端口转发，将本地 `2000` 端口变为一个多功能的 SOCKS5 代理通道，适合需要安全穿透内网或共享代理的场景。通过参数组合优化了后台运行、压缩和远程访问支持，是高效管理网络流量的实用工具。\n","source":"_posts/docker/doc/material/ai/ssh动态代理.md","raw":"---\nlayout: default\ntitle: ssh动态代理\nnav_order: 14\ndescription: 以下是对命令 `ssh -o GatewayPorts=yes -D 2000 test-2023.intranet.company -NTfCg`\n  的逐项解析和完整说明：\nparent: Ai\nhas_children: false\npermalink: \"/docker/doc/material/ai/ssh动态代理/\"\ngrand_parent: Material\n---\n\n以下是对命令 `ssh -o GatewayPorts=yes -D 2000 test-2023.intranet.company -NTfCg` 的逐项解析和完整说明：\n\n---\n\n### **命令功能总结**\n此命令通过 SSH 建立一个 **后台运行的动态端口转发隧道**（SOCKS5 代理），绑定到本地所有网络接口，允许远程主机通过该代理访问目标网络资源。具体用途包括：\n- 将本地 `2000` 端口作为代理入口，流量通过 `test-2023.intranet.company` 服务器转发。\n- 支持远程主机（非本机）连接本地 `2000` 端口（通过 `-g` 和 `GatewayPorts=yes` 实现）。\n- 后台静默运行，无终端交互，适合长期稳定的代理需求。\n\n---\n\n### **参数逐项解析**\n\n#### **1. `-o GatewayPorts=yes`**\n- **作用**：允许远程主机连接到本地转发的端口。\n- **默认行为**：SSH 默认将本地端口绑定到 `127.0.0.1`（仅限本机访问）。\n- **启用后**：绑定到 `0.0.0.0`（所有网络接口），使其他主机可通过本地 IP 访问 `2000` 端口。\n- **典型场景**：需要将本地代理共享给局域网内其他设备时（如手机、平板）。\n\n---\n\n#### **2. `-D 2000`**\n- **作用**：启用动态端口转发（SOCKS5 代理），监听本地 `2000` 端口。\n- **流量规则**：所有发送到 `2000` 端口的流量将通过 SSH 隧道加密并转发到目标网络。\n- **端口选择**：\n  - `<1024` 的端口需要 `root` 权限（如 `-D 80`）。\n  - `2000` 是用户级端口，无需特权。\n\n---\n\n#### **3. `test-2023.intranet.company`**\n- **作用**：指定 SSH 连接的目标服务器。\n- **补充说明**：\n  - 确保该域名能被正确解析（如通过 DNS 或 `/etc/hosts` 配置）。\n  - 如果使用密钥认证，需提前配置 `~/.ssh/config` 或通过 `-i` 指定私钥。\n\n---\n\n#### **4. `-N`**\n- **作用**：不执行远程命令，仅建立隧道。\n- **用途**：适用于纯端口转发场景，无需启动远程 Shell。\n\n---\n\n#### **5. `-T`**\n- **作用**：禁用伪终端（PTY）分配。\n- **用途**：进一步减少资源占用，确保连接仅用于转发。\n\n---\n\n#### **6. `-f`**\n- **作用**：将 SSH 进程转入后台运行。\n- **操作提示**：\n  - 若需终止后台进程，可使用 `ps aux | grep ssh` 查找 PID 后执行 `kill <PID>`。\n  - 结合 `-f` 时，输入密码需在命令中提前处理（如使用密钥或无密码登录）。\n\n---\n\n#### **7. `-C`**\n- **作用**：启用数据压缩（基于 gzip 算法）。\n- **适用场景**：\n  - 网络带宽较低时（如移动网络），减少传输数据量。\n  - 传输大量文本数据（如日志、代码）。\n- **不适用场景**：\n  - 高速局域网环境（压缩可能增加延迟）。\n  - 已加密或预压缩的数据（如视频、图片）。\n\n---\n\n#### **8. `-g`**\n- **作用**：允许远程主机连接本地转发端口（与 `GatewayPorts=yes` 功能重复，但双重确保）。\n- **历史背景**：旧版 SSH 中，`-g` 是实现 `GatewayPorts=yes` 的等效命令行选项，现代版本中两者可同时使用以明确意图。\n\n---\n\n### **完整命令行为**\n```bash\nssh \\\n  -o GatewayPorts=yes \\  # 允许远程主机连接本地端口\n  -D 2000 \\              # 动态转发到本地2000端口（SOCKS5）\n  test-2023.intranet.company \\  # 目标服务器\n  -N \\                   # 不执行远程命令\n  -T \\                   # 不分配终端\n  -f \\                   # 后台运行\n  -C \\                   # 启用压缩\n  -g                     # 允许远程主机连接\n```\n\n---\n\n### **典型使用场景**\n#### **场景 1：本地开发代理**\n- 浏览器或应用配置 SOCKS5 代理为 `127.0.0.1:2000`，所有流量通过 `test-2023.intranet.company` 转发。\n- 访问内部服务（如 `http://internal-app:8080`）时，流量经由隧道直达内网。\n\n#### **场景 2：跨设备共享代理**\n- 在本地 PC 运行此命令，手机或其他设备将代理设置为 `<PC的IP>:2000`，即可通过 PC 的 SSH 隧道访问内网。\n\n#### **场景 3：穿透防火墙**\n- 绕过网络限制访问被封资源（如访问外部 API），依赖服务器的出口 IP。\n\n---\n\n### **常见问题排查**\n#### **1. 连接失败：`Permission denied`**\n- **原因**：SSH 认证失败（密码错误、密钥未配置）。\n- **解决**：\n  - 使用 `-v` 参数查看详细日志：`ssh -v ...`。\n  - 配置密钥登录：`ssh-copy-id user@test-2023.intranet.company`。\n\n#### **2. 端口占用：`bind: Address already in use`**\n- **原因**：本地 `2000` 端口被其他进程占用。\n- **解决**：\n  - 更换端口：`-D 2001`。\n  - 释放端口：`lsof -i :2000` 查找占用进程并终止。\n\n#### **3. 远程主机无法连接代理**\n- **原因**：本地防火墙或路由器阻止外部访问 `2000` 端口。\n- **解决**：\n  - 开放防火墙：`sudo ufw allow 2000`（Linux）。\n  - 检查路由器 NAT 规则（如需从公网访问）。\n\n---\n\n### **扩展操作**\n#### **1. 结合 ClashX 使用**\n在 ClashX 配置文件中添加 SOCKS5 代理：\n```yaml\nproxies:\n  - name: \"ssh-tunnel\"\n    type: socks5\n    server: 127.0.0.1\n    port: 2000\n    udp: true  # 按需启用 UDP 转发\n\nrules:\n  - DOMAIN-SUFFIX,intranet.company,ssh-tunnel\n```\n\n#### **2. 保持隧道稳定（防断连）**\n使用 `autossh` 替代 `ssh` 实现自动重连：\n```bash\nautossh -M 0 -o \"ExitOnForwardFailure=yes\" -NTfCg -D 2000 test-2023.intranet.company\n```\n\n---\n\n### **总结**\n此命令通过 SSH 动态端口转发，将本地 `2000` 端口变为一个多功能的 SOCKS5 代理通道，适合需要安全穿透内网或共享代理的场景。通过参数组合优化了后台运行、压缩和远程访问支持，是高效管理网络流量的实用工具。\n","slug":"docker/doc/material/ai/ssh动态代理","published":1,"date":"2025-02-23T07:43:31.247Z","updated":"2025-02-23T07:43:31.255Z","__permalink":"/docker/doc/material/ai/ssh动态代理/","comments":1,"photos":[],"_id":"cm7k5rwb3008jmswsd7n841df","content":"<p>以下是对命令 <code>ssh -o GatewayPorts=yes -D 2000 test-2023.intranet.company -NTfCg</code> 的逐项解析和完整说明：</p>\n<hr>\n<h3 id=\"命令功能总结\"><a href=\"#命令功能总结\" class=\"headerlink\" title=\"命令功能总结\"></a><strong>命令功能总结</strong></h3><p>此命令通过 SSH 建立一个 <strong>后台运行的动态端口转发隧道</strong>（SOCKS5 代理），绑定到本地所有网络接口，允许远程主机通过该代理访问目标网络资源。具体用途包括：</p>\n<ul>\n<li>将本地 <code>2000</code> 端口作为代理入口，流量通过 <code>test-2023.intranet.company</code> 服务器转发。</li>\n<li>支持远程主机（非本机）连接本地 <code>2000</code> 端口（通过 <code>-g</code> 和 <code>GatewayPorts=yes</code> 实现）。</li>\n<li>后台静默运行，无终端交互，适合长期稳定的代理需求。</li>\n</ul>\n<hr>\n<h3 id=\"参数逐项解析\"><a href=\"#参数逐项解析\" class=\"headerlink\" title=\"参数逐项解析\"></a><strong>参数逐项解析</strong></h3><h4 id=\"1-o-GatewayPorts-yes\"><a href=\"#1-o-GatewayPorts-yes\" class=\"headerlink\" title=\"1. -o GatewayPorts=yes\"></a><strong>1. <code>-o GatewayPorts=yes</code></strong></h4><ul>\n<li><strong>作用</strong>：允许远程主机连接到本地转发的端口。</li>\n<li><strong>默认行为</strong>：SSH 默认将本地端口绑定到 <code>127.0.0.1</code>（仅限本机访问）。</li>\n<li><strong>启用后</strong>：绑定到 <code>0.0.0.0</code>（所有网络接口），使其他主机可通过本地 IP 访问 <code>2000</code> 端口。</li>\n<li><strong>典型场景</strong>：需要将本地代理共享给局域网内其他设备时（如手机、平板）。</li>\n</ul>\n<hr>\n<h4 id=\"2-D-2000\"><a href=\"#2-D-2000\" class=\"headerlink\" title=\"2. -D 2000\"></a><strong>2. <code>-D 2000</code></strong></h4><ul>\n<li><strong>作用</strong>：启用动态端口转发（SOCKS5 代理），监听本地 <code>2000</code> 端口。</li>\n<li><strong>流量规则</strong>：所有发送到 <code>2000</code> 端口的流量将通过 SSH 隧道加密并转发到目标网络。</li>\n<li><strong>端口选择</strong>：<ul>\n<li><code>&lt;1024</code> 的端口需要 <code>root</code> 权限（如 <code>-D 80</code>）。</li>\n<li><code>2000</code> 是用户级端口，无需特权。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"3-test-2023-intranet-company\"><a href=\"#3-test-2023-intranet-company\" class=\"headerlink\" title=\"3. test-2023.intranet.company\"></a><strong>3. <code>test-2023.intranet.company</code></strong></h4><ul>\n<li><strong>作用</strong>：指定 SSH 连接的目标服务器。</li>\n<li><strong>补充说明</strong>：<ul>\n<li>确保该域名能被正确解析（如通过 DNS 或 <code>/etc/hosts</code> 配置）。</li>\n<li>如果使用密钥认证，需提前配置 <code>~/.ssh/config</code> 或通过 <code>-i</code> 指定私钥。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"4-N\"><a href=\"#4-N\" class=\"headerlink\" title=\"4. -N\"></a><strong>4. <code>-N</code></strong></h4><ul>\n<li><strong>作用</strong>：不执行远程命令，仅建立隧道。</li>\n<li><strong>用途</strong>：适用于纯端口转发场景，无需启动远程 Shell。</li>\n</ul>\n<hr>\n<h4 id=\"5-T\"><a href=\"#5-T\" class=\"headerlink\" title=\"5. -T\"></a><strong>5. <code>-T</code></strong></h4><ul>\n<li><strong>作用</strong>：禁用伪终端（PTY）分配。</li>\n<li><strong>用途</strong>：进一步减少资源占用，确保连接仅用于转发。</li>\n</ul>\n<hr>\n<h4 id=\"6-f\"><a href=\"#6-f\" class=\"headerlink\" title=\"6. -f\"></a><strong>6. <code>-f</code></strong></h4><ul>\n<li><strong>作用</strong>：将 SSH 进程转入后台运行。</li>\n<li><strong>操作提示</strong>：<ul>\n<li>若需终止后台进程，可使用 <code>ps aux | grep ssh</code> 查找 PID 后执行 <code>kill &lt;PID&gt;</code>。</li>\n<li>结合 <code>-f</code> 时，输入密码需在命令中提前处理（如使用密钥或无密码登录）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"7-C\"><a href=\"#7-C\" class=\"headerlink\" title=\"7. -C\"></a><strong>7. <code>-C</code></strong></h4><ul>\n<li><strong>作用</strong>：启用数据压缩（基于 gzip 算法）。</li>\n<li><strong>适用场景</strong>：<ul>\n<li>网络带宽较低时（如移动网络），减少传输数据量。</li>\n<li>传输大量文本数据（如日志、代码）。</li>\n</ul>\n</li>\n<li><strong>不适用场景</strong>：<ul>\n<li>高速局域网环境（压缩可能增加延迟）。</li>\n<li>已加密或预压缩的数据（如视频、图片）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"8-g\"><a href=\"#8-g\" class=\"headerlink\" title=\"8. -g\"></a><strong>8. <code>-g</code></strong></h4><ul>\n<li><strong>作用</strong>：允许远程主机连接本地转发端口（与 <code>GatewayPorts=yes</code> 功能重复，但双重确保）。</li>\n<li><strong>历史背景</strong>：旧版 SSH 中，<code>-g</code> 是实现 <code>GatewayPorts=yes</code> 的等效命令行选项，现代版本中两者可同时使用以明确意图。</li>\n</ul>\n<hr>\n<h3 id=\"完整命令行为\"><a href=\"#完整命令行为\" class=\"headerlink\" title=\"完整命令行为\"></a><strong>完整命令行为</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh \\</span><br><span class=\"line\">  -o GatewayPorts=<span class=\"built_in\">yes</span> \\  <span class=\"comment\"># 允许远程主机连接本地端口</span></span><br><span class=\"line\">  -D 2000 \\              <span class=\"comment\"># 动态转发到本地2000端口（SOCKS5）</span></span><br><span class=\"line\">  test-2023.intranet.company \\  <span class=\"comment\"># 目标服务器</span></span><br><span class=\"line\">  -N \\                   <span class=\"comment\"># 不执行远程命令</span></span><br><span class=\"line\">  -T \\                   <span class=\"comment\"># 不分配终端</span></span><br><span class=\"line\">  -f \\                   <span class=\"comment\"># 后台运行</span></span><br><span class=\"line\">  -C \\                   <span class=\"comment\"># 启用压缩</span></span><br><span class=\"line\">  -g                     <span class=\"comment\"># 允许远程主机连接</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"典型使用场景\"><a href=\"#典型使用场景\" class=\"headerlink\" title=\"典型使用场景\"></a><strong>典型使用场景</strong></h3><h4 id=\"场景-1：本地开发代理\"><a href=\"#场景-1：本地开发代理\" class=\"headerlink\" title=\"场景 1：本地开发代理\"></a><strong>场景 1：本地开发代理</strong></h4><ul>\n<li>浏览器或应用配置 SOCKS5 代理为 <code>127.0.0.1:2000</code>，所有流量通过 <code>test-2023.intranet.company</code> 转发。</li>\n<li>访问内部服务（如 <code>http://internal-app:8080</code>）时，流量经由隧道直达内网。</li>\n</ul>\n<h4 id=\"场景-2：跨设备共享代理\"><a href=\"#场景-2：跨设备共享代理\" class=\"headerlink\" title=\"场景 2：跨设备共享代理\"></a><strong>场景 2：跨设备共享代理</strong></h4><ul>\n<li>在本地 PC 运行此命令，手机或其他设备将代理设置为 <code>&lt;PC的IP&gt;:2000</code>，即可通过 PC 的 SSH 隧道访问内网。</li>\n</ul>\n<h4 id=\"场景-3：穿透防火墙\"><a href=\"#场景-3：穿透防火墙\" class=\"headerlink\" title=\"场景 3：穿透防火墙\"></a><strong>场景 3：穿透防火墙</strong></h4><ul>\n<li>绕过网络限制访问被封资源（如访问外部 API），依赖服务器的出口 IP。</li>\n</ul>\n<hr>\n<h3 id=\"常见问题排查\"><a href=\"#常见问题排查\" class=\"headerlink\" title=\"常见问题排查\"></a><strong>常见问题排查</strong></h3><h4 id=\"1-连接失败：Permission-denied\"><a href=\"#1-连接失败：Permission-denied\" class=\"headerlink\" title=\"1. 连接失败：Permission denied\"></a><strong>1. 连接失败：<code>Permission denied</code></strong></h4><ul>\n<li><strong>原因</strong>：SSH 认证失败（密码错误、密钥未配置）。</li>\n<li><strong>解决</strong>：<ul>\n<li>使用 <code>-v</code> 参数查看详细日志：<code>ssh -v ...</code>。</li>\n<li>配置密钥登录：<code>ssh-copy-id user@test-2023.intranet.company</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-端口占用：bind-Address-already-in-use\"><a href=\"#2-端口占用：bind-Address-already-in-use\" class=\"headerlink\" title=\"2. 端口占用：bind: Address already in use\"></a><strong>2. 端口占用：<code>bind: Address already in use</code></strong></h4><ul>\n<li><strong>原因</strong>：本地 <code>2000</code> 端口被其他进程占用。</li>\n<li><strong>解决</strong>：<ul>\n<li>更换端口：<code>-D 2001</code>。</li>\n<li>释放端口：<code>lsof -i :2000</code> 查找占用进程并终止。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-远程主机无法连接代理\"><a href=\"#3-远程主机无法连接代理\" class=\"headerlink\" title=\"3. 远程主机无法连接代理\"></a><strong>3. 远程主机无法连接代理</strong></h4><ul>\n<li><strong>原因</strong>：本地防火墙或路由器阻止外部访问 <code>2000</code> 端口。</li>\n<li><strong>解决</strong>：<ul>\n<li>开放防火墙：<code>sudo ufw allow 2000</code>（Linux）。</li>\n<li>检查路由器 NAT 规则（如需从公网访问）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"扩展操作\"><a href=\"#扩展操作\" class=\"headerlink\" title=\"扩展操作\"></a><strong>扩展操作</strong></h3><h4 id=\"1-结合-ClashX-使用\"><a href=\"#1-结合-ClashX-使用\" class=\"headerlink\" title=\"1. 结合 ClashX 使用\"></a><strong>1. 结合 ClashX 使用</strong></h4><p>在 ClashX 配置文件中添加 SOCKS5 代理：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">proxies:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;ssh-tunnel&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">socks5</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">2000</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 按需启用 UDP 转发</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,intranet.company,ssh-tunnel</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-保持隧道稳定（防断连）\"><a href=\"#2-保持隧道稳定（防断连）\" class=\"headerlink\" title=\"2. 保持隧道稳定（防断连）\"></a><strong>2. 保持隧道稳定（防断连）</strong></h4><p>使用 <code>autossh</code> 替代 <code>ssh</code> 实现自动重连：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autossh -M 0 -o <span class=\"string\">&quot;ExitOnForwardFailure=yes&quot;</span> -NTfCg -D 2000 test-2023.intranet.company</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><p>此命令通过 SSH 动态端口转发，将本地 <code>2000</code> 端口变为一个多功能的 SOCKS5 代理通道，适合需要安全穿透内网或共享代理的场景。通过参数组合优化了后台运行、压缩和远程访问支持，是高效管理网络流量的实用工具。</p>\n","excerpt":"","more":"<p>以下是对命令 <code>ssh -o GatewayPorts=yes -D 2000 test-2023.intranet.company -NTfCg</code> 的逐项解析和完整说明：</p>\n<hr>\n<h3 id=\"命令功能总结\"><a href=\"#命令功能总结\" class=\"headerlink\" title=\"命令功能总结\"></a><strong>命令功能总结</strong></h3><p>此命令通过 SSH 建立一个 <strong>后台运行的动态端口转发隧道</strong>（SOCKS5 代理），绑定到本地所有网络接口，允许远程主机通过该代理访问目标网络资源。具体用途包括：</p>\n<ul>\n<li>将本地 <code>2000</code> 端口作为代理入口，流量通过 <code>test-2023.intranet.company</code> 服务器转发。</li>\n<li>支持远程主机（非本机）连接本地 <code>2000</code> 端口（通过 <code>-g</code> 和 <code>GatewayPorts=yes</code> 实现）。</li>\n<li>后台静默运行，无终端交互，适合长期稳定的代理需求。</li>\n</ul>\n<hr>\n<h3 id=\"参数逐项解析\"><a href=\"#参数逐项解析\" class=\"headerlink\" title=\"参数逐项解析\"></a><strong>参数逐项解析</strong></h3><h4 id=\"1-o-GatewayPorts-yes\"><a href=\"#1-o-GatewayPorts-yes\" class=\"headerlink\" title=\"1. -o GatewayPorts=yes\"></a><strong>1. <code>-o GatewayPorts=yes</code></strong></h4><ul>\n<li><strong>作用</strong>：允许远程主机连接到本地转发的端口。</li>\n<li><strong>默认行为</strong>：SSH 默认将本地端口绑定到 <code>127.0.0.1</code>（仅限本机访问）。</li>\n<li><strong>启用后</strong>：绑定到 <code>0.0.0.0</code>（所有网络接口），使其他主机可通过本地 IP 访问 <code>2000</code> 端口。</li>\n<li><strong>典型场景</strong>：需要将本地代理共享给局域网内其他设备时（如手机、平板）。</li>\n</ul>\n<hr>\n<h4 id=\"2-D-2000\"><a href=\"#2-D-2000\" class=\"headerlink\" title=\"2. -D 2000\"></a><strong>2. <code>-D 2000</code></strong></h4><ul>\n<li><strong>作用</strong>：启用动态端口转发（SOCKS5 代理），监听本地 <code>2000</code> 端口。</li>\n<li><strong>流量规则</strong>：所有发送到 <code>2000</code> 端口的流量将通过 SSH 隧道加密并转发到目标网络。</li>\n<li><strong>端口选择</strong>：<ul>\n<li><code>&lt;1024</code> 的端口需要 <code>root</code> 权限（如 <code>-D 80</code>）。</li>\n<li><code>2000</code> 是用户级端口，无需特权。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"3-test-2023-intranet-company\"><a href=\"#3-test-2023-intranet-company\" class=\"headerlink\" title=\"3. test-2023.intranet.company\"></a><strong>3. <code>test-2023.intranet.company</code></strong></h4><ul>\n<li><strong>作用</strong>：指定 SSH 连接的目标服务器。</li>\n<li><strong>补充说明</strong>：<ul>\n<li>确保该域名能被正确解析（如通过 DNS 或 <code>/etc/hosts</code> 配置）。</li>\n<li>如果使用密钥认证，需提前配置 <code>~/.ssh/config</code> 或通过 <code>-i</code> 指定私钥。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"4-N\"><a href=\"#4-N\" class=\"headerlink\" title=\"4. -N\"></a><strong>4. <code>-N</code></strong></h4><ul>\n<li><strong>作用</strong>：不执行远程命令，仅建立隧道。</li>\n<li><strong>用途</strong>：适用于纯端口转发场景，无需启动远程 Shell。</li>\n</ul>\n<hr>\n<h4 id=\"5-T\"><a href=\"#5-T\" class=\"headerlink\" title=\"5. -T\"></a><strong>5. <code>-T</code></strong></h4><ul>\n<li><strong>作用</strong>：禁用伪终端（PTY）分配。</li>\n<li><strong>用途</strong>：进一步减少资源占用，确保连接仅用于转发。</li>\n</ul>\n<hr>\n<h4 id=\"6-f\"><a href=\"#6-f\" class=\"headerlink\" title=\"6. -f\"></a><strong>6. <code>-f</code></strong></h4><ul>\n<li><strong>作用</strong>：将 SSH 进程转入后台运行。</li>\n<li><strong>操作提示</strong>：<ul>\n<li>若需终止后台进程，可使用 <code>ps aux | grep ssh</code> 查找 PID 后执行 <code>kill &lt;PID&gt;</code>。</li>\n<li>结合 <code>-f</code> 时，输入密码需在命令中提前处理（如使用密钥或无密码登录）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"7-C\"><a href=\"#7-C\" class=\"headerlink\" title=\"7. -C\"></a><strong>7. <code>-C</code></strong></h4><ul>\n<li><strong>作用</strong>：启用数据压缩（基于 gzip 算法）。</li>\n<li><strong>适用场景</strong>：<ul>\n<li>网络带宽较低时（如移动网络），减少传输数据量。</li>\n<li>传输大量文本数据（如日志、代码）。</li>\n</ul>\n</li>\n<li><strong>不适用场景</strong>：<ul>\n<li>高速局域网环境（压缩可能增加延迟）。</li>\n<li>已加密或预压缩的数据（如视频、图片）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"8-g\"><a href=\"#8-g\" class=\"headerlink\" title=\"8. -g\"></a><strong>8. <code>-g</code></strong></h4><ul>\n<li><strong>作用</strong>：允许远程主机连接本地转发端口（与 <code>GatewayPorts=yes</code> 功能重复，但双重确保）。</li>\n<li><strong>历史背景</strong>：旧版 SSH 中，<code>-g</code> 是实现 <code>GatewayPorts=yes</code> 的等效命令行选项，现代版本中两者可同时使用以明确意图。</li>\n</ul>\n<hr>\n<h3 id=\"完整命令行为\"><a href=\"#完整命令行为\" class=\"headerlink\" title=\"完整命令行为\"></a><strong>完整命令行为</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh \\</span><br><span class=\"line\">  -o GatewayPorts=<span class=\"built_in\">yes</span> \\  <span class=\"comment\"># 允许远程主机连接本地端口</span></span><br><span class=\"line\">  -D 2000 \\              <span class=\"comment\"># 动态转发到本地2000端口（SOCKS5）</span></span><br><span class=\"line\">  test-2023.intranet.company \\  <span class=\"comment\"># 目标服务器</span></span><br><span class=\"line\">  -N \\                   <span class=\"comment\"># 不执行远程命令</span></span><br><span class=\"line\">  -T \\                   <span class=\"comment\"># 不分配终端</span></span><br><span class=\"line\">  -f \\                   <span class=\"comment\"># 后台运行</span></span><br><span class=\"line\">  -C \\                   <span class=\"comment\"># 启用压缩</span></span><br><span class=\"line\">  -g                     <span class=\"comment\"># 允许远程主机连接</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"典型使用场景\"><a href=\"#典型使用场景\" class=\"headerlink\" title=\"典型使用场景\"></a><strong>典型使用场景</strong></h3><h4 id=\"场景-1：本地开发代理\"><a href=\"#场景-1：本地开发代理\" class=\"headerlink\" title=\"场景 1：本地开发代理\"></a><strong>场景 1：本地开发代理</strong></h4><ul>\n<li>浏览器或应用配置 SOCKS5 代理为 <code>127.0.0.1:2000</code>，所有流量通过 <code>test-2023.intranet.company</code> 转发。</li>\n<li>访问内部服务（如 <code>http://internal-app:8080</code>）时，流量经由隧道直达内网。</li>\n</ul>\n<h4 id=\"场景-2：跨设备共享代理\"><a href=\"#场景-2：跨设备共享代理\" class=\"headerlink\" title=\"场景 2：跨设备共享代理\"></a><strong>场景 2：跨设备共享代理</strong></h4><ul>\n<li>在本地 PC 运行此命令，手机或其他设备将代理设置为 <code>&lt;PC的IP&gt;:2000</code>，即可通过 PC 的 SSH 隧道访问内网。</li>\n</ul>\n<h4 id=\"场景-3：穿透防火墙\"><a href=\"#场景-3：穿透防火墙\" class=\"headerlink\" title=\"场景 3：穿透防火墙\"></a><strong>场景 3：穿透防火墙</strong></h4><ul>\n<li>绕过网络限制访问被封资源（如访问外部 API），依赖服务器的出口 IP。</li>\n</ul>\n<hr>\n<h3 id=\"常见问题排查\"><a href=\"#常见问题排查\" class=\"headerlink\" title=\"常见问题排查\"></a><strong>常见问题排查</strong></h3><h4 id=\"1-连接失败：Permission-denied\"><a href=\"#1-连接失败：Permission-denied\" class=\"headerlink\" title=\"1. 连接失败：Permission denied\"></a><strong>1. 连接失败：<code>Permission denied</code></strong></h4><ul>\n<li><strong>原因</strong>：SSH 认证失败（密码错误、密钥未配置）。</li>\n<li><strong>解决</strong>：<ul>\n<li>使用 <code>-v</code> 参数查看详细日志：<code>ssh -v ...</code>。</li>\n<li>配置密钥登录：<code>ssh-copy-id user@test-2023.intranet.company</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-端口占用：bind-Address-already-in-use\"><a href=\"#2-端口占用：bind-Address-already-in-use\" class=\"headerlink\" title=\"2. 端口占用：bind: Address already in use\"></a><strong>2. 端口占用：<code>bind: Address already in use</code></strong></h4><ul>\n<li><strong>原因</strong>：本地 <code>2000</code> 端口被其他进程占用。</li>\n<li><strong>解决</strong>：<ul>\n<li>更换端口：<code>-D 2001</code>。</li>\n<li>释放端口：<code>lsof -i :2000</code> 查找占用进程并终止。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-远程主机无法连接代理\"><a href=\"#3-远程主机无法连接代理\" class=\"headerlink\" title=\"3. 远程主机无法连接代理\"></a><strong>3. 远程主机无法连接代理</strong></h4><ul>\n<li><strong>原因</strong>：本地防火墙或路由器阻止外部访问 <code>2000</code> 端口。</li>\n<li><strong>解决</strong>：<ul>\n<li>开放防火墙：<code>sudo ufw allow 2000</code>（Linux）。</li>\n<li>检查路由器 NAT 规则（如需从公网访问）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"扩展操作\"><a href=\"#扩展操作\" class=\"headerlink\" title=\"扩展操作\"></a><strong>扩展操作</strong></h3><h4 id=\"1-结合-ClashX-使用\"><a href=\"#1-结合-ClashX-使用\" class=\"headerlink\" title=\"1. 结合 ClashX 使用\"></a><strong>1. 结合 ClashX 使用</strong></h4><p>在 ClashX 配置文件中添加 SOCKS5 代理：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">proxies:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;ssh-tunnel&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">socks5</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">2000</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 按需启用 UDP 转发</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,intranet.company,ssh-tunnel</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-保持隧道稳定（防断连）\"><a href=\"#2-保持隧道稳定（防断连）\" class=\"headerlink\" title=\"2. 保持隧道稳定（防断连）\"></a><strong>2. 保持隧道稳定（防断连）</strong></h4><p>使用 <code>autossh</code> 替代 <code>ssh</code> 实现自动重连：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autossh -M 0 -o <span class=\"string\">&quot;ExitOnForwardFailure=yes&quot;</span> -NTfCg -D 2000 test-2023.intranet.company</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><p>此命令通过 SSH 动态端口转发，将本地 <code>2000</code> 端口变为一个多功能的 SOCKS5 代理通道，适合需要安全穿透内网或共享代理的场景。通过参数组合优化了后台运行、压缩和远程访问支持，是高效管理网络流量的实用工具。</p>\n"},{"layout":"default","title":"Jenkins","nav_order":4,"has_children":true,"parent":"Jenkins","_content":"\n# Jenkins\n","source":"_posts/kubernetes/app/devs/jenkins/index.md","raw":"---\nlayout: default\ntitle: Jenkins\nnav_order: 4\nhas_children: true\nparent: Jenkins\npermalink: \"/kubernetes/app/devs/jenkins/\"\n---\n\n# Jenkins\n","slug":"kubernetes/app/devs/jenkins/index","published":1,"date":"2025-02-23T07:43:31.452Z","updated":"2025-02-23T07:43:31.453Z","__permalink":"/kubernetes/app/devs/jenkins/","comments":1,"photos":[],"_id":"cm7k5rwb3008kmswsgzj0b615","content":"<h1 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h1>","excerpt":"","more":"<h1 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"jenkins的使用","parent":"Jenkins","has_children":false,"grand_parent":"Devs","_content":"\n# jenkins的使用\n\n## helm方式部署\n\n```bash\n# 添加Jenkins仓库：\nhelm repo add jenkinsci https://charts.jenkins.io && helm repo update\n# 部署Jenkins：\nhelm install jenkins jenkinsci/jenkins\n# 检查Jenkins：使用helm list命令检查Jenkins的部署状态，并使用kubectl get pod命令检查Jenkins的Pod状态\n# 查看ip和端口\nkubectl get svc jenkins\n# 端口映射\nkubectl --namespace default port-forward svc/jenkins 8080:8080\n# 查看备注信息\nhelm get notes jenkins\n\n# 卸载Jenkins\nhelm uninstall jenkins\n```\n","source":"_posts/kubernetes/app/devs/jenkins/jenkins.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: jenkins的使用\nparent: Jenkins\nhas_children: false\npermalink: \"/kubernetes/app/devs/jenkins/jenkins/\"\ngrand_parent: Devs\n---\n\n# jenkins的使用\n\n## helm方式部署\n\n```bash\n# 添加Jenkins仓库：\nhelm repo add jenkinsci https://charts.jenkins.io && helm repo update\n# 部署Jenkins：\nhelm install jenkins jenkinsci/jenkins\n# 检查Jenkins：使用helm list命令检查Jenkins的部署状态，并使用kubectl get pod命令检查Jenkins的Pod状态\n# 查看ip和端口\nkubectl get svc jenkins\n# 端口映射\nkubectl --namespace default port-forward svc/jenkins 8080:8080\n# 查看备注信息\nhelm get notes jenkins\n\n# 卸载Jenkins\nhelm uninstall jenkins\n```\n","slug":"kubernetes/app/devs/jenkins/jenkins","published":1,"date":"2025-02-23T07:43:31.452Z","updated":"2025-02-23T07:43:31.452Z","__permalink":"/kubernetes/app/devs/jenkins/jenkins/","comments":1,"photos":[],"_id":"cm7k5rwb3008lmswsc4b40yht","content":"<h1 id=\"jenkins的使用\"><a href=\"#jenkins的使用\" class=\"headerlink\" title=\"jenkins的使用\"></a>jenkins的使用</h1><h2 id=\"helm方式部署\"><a href=\"#helm方式部署\" class=\"headerlink\" title=\"helm方式部署\"></a>helm方式部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加Jenkins仓库：</span></span><br><span class=\"line\">helm repo add jenkinsci https://charts.jenkins.io &amp;&amp; helm repo update</span><br><span class=\"line\"><span class=\"comment\"># 部署Jenkins：</span></span><br><span class=\"line\">helm install jenkins jenkinsci/jenkins</span><br><span class=\"line\"><span class=\"comment\"># 检查Jenkins：使用helm list命令检查Jenkins的部署状态，并使用kubectl get pod命令检查Jenkins的Pod状态</span></span><br><span class=\"line\"><span class=\"comment\"># 查看ip和端口</span></span><br><span class=\"line\">kubectl get svc jenkins</span><br><span class=\"line\"><span class=\"comment\"># 端口映射</span></span><br><span class=\"line\">kubectl --namespace default port-forward svc/jenkins 8080:8080</span><br><span class=\"line\"><span class=\"comment\"># 查看备注信息</span></span><br><span class=\"line\">helm get notes jenkins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载Jenkins</span></span><br><span class=\"line\">helm uninstall jenkins</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"jenkins的使用\"><a href=\"#jenkins的使用\" class=\"headerlink\" title=\"jenkins的使用\"></a>jenkins的使用</h1><h2 id=\"helm方式部署\"><a href=\"#helm方式部署\" class=\"headerlink\" title=\"helm方式部署\"></a>helm方式部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加Jenkins仓库：</span></span><br><span class=\"line\">helm repo add jenkinsci https://charts.jenkins.io &amp;&amp; helm repo update</span><br><span class=\"line\"><span class=\"comment\"># 部署Jenkins：</span></span><br><span class=\"line\">helm install jenkins jenkinsci/jenkins</span><br><span class=\"line\"><span class=\"comment\"># 检查Jenkins：使用helm list命令检查Jenkins的部署状态，并使用kubectl get pod命令检查Jenkins的Pod状态</span></span><br><span class=\"line\"><span class=\"comment\"># 查看ip和端口</span></span><br><span class=\"line\">kubectl get svc jenkins</span><br><span class=\"line\"><span class=\"comment\"># 端口映射</span></span><br><span class=\"line\">kubectl --namespace default port-forward svc/jenkins 8080:8080</span><br><span class=\"line\"><span class=\"comment\"># 查看备注信息</span></span><br><span class=\"line\">helm get notes jenkins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载Jenkins</span></span><br><span class=\"line\">helm uninstall jenkins</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Logstash","nav_order":4,"has_children":true,"parent":"Logstash","_content":"\n# Logstash\n","source":"_posts/kubernetes/app/elk/logstash/index.md","raw":"---\nlayout: default\ntitle: Logstash\nnav_order: 4\nhas_children: true\nparent: Logstash\npermalink: \"/kubernetes/app/elk/logstash/\"\n---\n\n# Logstash\n","slug":"kubernetes/app/elk/logstash/index","published":1,"date":"2025-02-23T07:43:31.555Z","updated":"2025-02-23T07:43:31.555Z","__permalink":"/kubernetes/app/elk/logstash/","comments":1,"photos":[],"_id":"cm7k5rwb3008mmsws3eo751m5","content":"<h1 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h1>","excerpt":"","more":"<h1 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"logstash使用记录","parent":"Logstash","has_children":false,"grand_parent":"Elk","_content":"\n# logstash使用记录\n\n## 安装\n\n- helm安装\n  - [参考文章](https://segmentfault.com/a/1190000044266596)\n\n```shell\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm search repo logstash\nhelm pull bitnami/logstash\n\n```\n\n- 配置文件\n  - [values.yaml](./config/6.0.3-values.yaml)\n\n```shell\nhelm install -f ./config/6.0.3-values.yaml logstash bitnami/logstash --namespace middleware\nhelm install logstash bitnami/logstash --namespace middleware\n\n```\n","source":"_posts/kubernetes/app/elk/logstash/logstash.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: logstash使用记录\nparent: Logstash\nhas_children: false\npermalink: \"/kubernetes/app/elk/logstash/logstash/\"\ngrand_parent: Elk\n---\n\n# logstash使用记录\n\n## 安装\n\n- helm安装\n  - [参考文章](https://segmentfault.com/a/1190000044266596)\n\n```shell\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm search repo logstash\nhelm pull bitnami/logstash\n\n```\n\n- 配置文件\n  - [values.yaml](./config/6.0.3-values.yaml)\n\n```shell\nhelm install -f ./config/6.0.3-values.yaml logstash bitnami/logstash --namespace middleware\nhelm install logstash bitnami/logstash --namespace middleware\n\n```\n","slug":"kubernetes/app/elk/logstash/logstash","published":1,"date":"2025-02-23T07:43:31.554Z","updated":"2025-02-23T07:43:31.554Z","__permalink":"/kubernetes/app/elk/logstash/logstash/","comments":1,"photos":[],"_id":"cm7k5rwb3008nmswsed6pgtot","content":"<h1 id=\"logstash使用记录\"><a href=\"#logstash使用记录\" class=\"headerlink\" title=\"logstash使用记录\"></a>logstash使用记录</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>helm安装<ul>\n<li><a href=\"https://segmentfault.com/a/1190000044266596\">参考文章</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\">helm search repo logstash</span><br><span class=\"line\">helm pull bitnami/logstash</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置文件<ul>\n<li><a href=\"./config/6.0.3-values.yaml\">values.yaml</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install -f ./config/6.0.3-values.yaml logstash bitnami/logstash --namespace middleware</span><br><span class=\"line\">helm install logstash bitnami/logstash --namespace middleware</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"logstash使用记录\"><a href=\"#logstash使用记录\" class=\"headerlink\" title=\"logstash使用记录\"></a>logstash使用记录</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>helm安装<ul>\n<li><a href=\"https://segmentfault.com/a/1190000044266596\">参考文章</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\">helm search repo logstash</span><br><span class=\"line\">helm pull bitnami/logstash</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置文件<ul>\n<li><a href=\"./config/6.0.3-values.yaml\">values.yaml</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install -f ./config/6.0.3-values.yaml logstash bitnami/logstash --namespace middleware</span><br><span class=\"line\">helm install logstash bitnami/logstash --namespace middleware</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Java","nav_order":4,"has_children":true,"parent":"Java","_content":"\n# Java\n","source":"_posts/kubernetes/app/skywalking/java/index.md","raw":"---\nlayout: default\ntitle: Java\nnav_order: 4\nhas_children: true\nparent: Java\npermalink: \"/kubernetes/app/skywalking/java/\"\n---\n\n# Java\n","slug":"kubernetes/app/skywalking/java/index","published":1,"date":"2025-02-23T07:43:31.687Z","updated":"2025-02-23T07:43:31.689Z","__permalink":"/kubernetes/app/skywalking/java/","comments":1,"photos":[],"_id":"cm7k5rwb3008omswsabdubr7d","content":"<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1>","excerpt":"","more":"<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"ClusterIssuer记录","parent":"Clusterissuer","has_children":false,"grand_parent":"Cert-manager","_content":"\n# ClusterIssuer记录\n\n```bash\n# 安装\nkubectl apply -f ClusterIssuer.yaml\n# 查看(kuboard中的集群管理->自定义资源->cert-manager.io中也能看到)\nkubectl get ClusterIssuer\n```\n\n- [参考](https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/advanced-nginx-ingress-configurations#title-v89-nee-iuh)\n\n```bash\n# 创建ClusterIssuer\ncat <<EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod-http01\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: <your_email_name@gmail.com>  # 替换为您的邮箱名。\n    privateKeySecretRef:\n      name: letsencrypt-http01\n    solvers:\n    - http01: \n        ingress:\n          class: nginx\nEOF\n# 查看ClusterIssuer\nkubectl get clusterissuer\n# 创建Nginx Ingress资源对象\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-tls\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod-http01\"\nspec:\n  tls:\n  - hosts:\n    - <your_domain_name>        # 替换为您的域名。\n    secretName: ingress-tls   \n  rules:\n  - host: <your_domain_name>    # 替换为您的域名。\n    http:\n      paths:\n      - path: /\n        backend:\n          service:\n            name: <your_service_name>  # 替换为您的后端服务名。\n            port: \n              number: <your_service_port>  # 替换为您的服务端口。\n        pathType: ImplementationSpecific\nEOF\n```\n","source":"_posts/kubernetes/docs/cert-manager/ClusterIssuer/ClusterIssuer.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: ClusterIssuer记录\nparent: Clusterissuer\nhas_children: false\npermalink: \"/kubernetes/docs/cert-manager/clusterissuer/clusterissuer/\"\ngrand_parent: Cert-manager\n---\n\n# ClusterIssuer记录\n\n```bash\n# 安装\nkubectl apply -f ClusterIssuer.yaml\n# 查看(kuboard中的集群管理->自定义资源->cert-manager.io中也能看到)\nkubectl get ClusterIssuer\n```\n\n- [参考](https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/advanced-nginx-ingress-configurations#title-v89-nee-iuh)\n\n```bash\n# 创建ClusterIssuer\ncat <<EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod-http01\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: <your_email_name@gmail.com>  # 替换为您的邮箱名。\n    privateKeySecretRef:\n      name: letsencrypt-http01\n    solvers:\n    - http01: \n        ingress:\n          class: nginx\nEOF\n# 查看ClusterIssuer\nkubectl get clusterissuer\n# 创建Nginx Ingress资源对象\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-tls\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod-http01\"\nspec:\n  tls:\n  - hosts:\n    - <your_domain_name>        # 替换为您的域名。\n    secretName: ingress-tls   \n  rules:\n  - host: <your_domain_name>    # 替换为您的域名。\n    http:\n      paths:\n      - path: /\n        backend:\n          service:\n            name: <your_service_name>  # 替换为您的后端服务名。\n            port: \n              number: <your_service_port>  # 替换为您的服务端口。\n        pathType: ImplementationSpecific\nEOF\n```\n","slug":"kubernetes/docs/cert-manager/ClusterIssuer/ClusterIssuer","published":1,"date":"2025-02-23T07:43:31.701Z","updated":"2025-02-23T07:43:31.701Z","__permalink":"/kubernetes/docs/cert-manager/clusterissuer/clusterissuer/","comments":1,"photos":[],"_id":"cm7k5rwb3008pmswsa21z8dhi","content":"<h1 id=\"ClusterIssuer记录\"><a href=\"#ClusterIssuer记录\" class=\"headerlink\" title=\"ClusterIssuer记录\"></a>ClusterIssuer记录</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">kubectl apply -f ClusterIssuer.yaml</span><br><span class=\"line\"><span class=\"comment\"># 查看(kuboard中的集群管理-&gt;自定义资源-&gt;cert-manager.io中也能看到)</span></span><br><span class=\"line\">kubectl get ClusterIssuer</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/advanced-nginx-ingress-configurations#title-v89-nee-iuh\">参考</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建ClusterIssuer</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | kubectl apply -f -</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: cert-manager.io/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterIssuer</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: letsencrypt-prod-http01</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  acme:</span></span><br><span class=\"line\"><span class=\"string\">    server: https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class=\"line\"><span class=\"string\">    email: &lt;your_email_name@gmail.com&gt;  # 替换为您的邮箱名。</span></span><br><span class=\"line\"><span class=\"string\">    privateKeySecretRef:</span></span><br><span class=\"line\"><span class=\"string\">      name: letsencrypt-http01</span></span><br><span class=\"line\"><span class=\"string\">    solvers:</span></span><br><span class=\"line\"><span class=\"string\">    - http01: </span></span><br><span class=\"line\"><span class=\"string\">        ingress:</span></span><br><span class=\"line\"><span class=\"string\">          class: nginx</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\"># 查看ClusterIssuer</span></span><br><span class=\"line\">kubectl get clusterissuer</span><br><span class=\"line\"><span class=\"comment\"># 创建Nginx Ingress资源对象</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | kubectl apply -f -</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: Ingress</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: ingress-tls</span></span><br><span class=\"line\"><span class=\"string\">  annotations:</span></span><br><span class=\"line\"><span class=\"string\">    kubernetes.io/ingress.class: &quot;nginx&quot;</span></span><br><span class=\"line\"><span class=\"string\">    cert-manager.io/cluster-issuer: &quot;letsencrypt-prod-http01&quot;</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  tls:</span></span><br><span class=\"line\"><span class=\"string\">  - hosts:</span></span><br><span class=\"line\"><span class=\"string\">    - &lt;your_domain_name&gt;        # 替换为您的域名。</span></span><br><span class=\"line\"><span class=\"string\">    secretName: ingress-tls   </span></span><br><span class=\"line\"><span class=\"string\">  rules:</span></span><br><span class=\"line\"><span class=\"string\">  - host: &lt;your_domain_name&gt;    # 替换为您的域名。</span></span><br><span class=\"line\"><span class=\"string\">    http:</span></span><br><span class=\"line\"><span class=\"string\">      paths:</span></span><br><span class=\"line\"><span class=\"string\">      - path: /</span></span><br><span class=\"line\"><span class=\"string\">        backend:</span></span><br><span class=\"line\"><span class=\"string\">          service:</span></span><br><span class=\"line\"><span class=\"string\">            name: &lt;your_service_name&gt;  # 替换为您的后端服务名。</span></span><br><span class=\"line\"><span class=\"string\">            port: </span></span><br><span class=\"line\"><span class=\"string\">              number: &lt;your_service_port&gt;  # 替换为您的服务端口。</span></span><br><span class=\"line\"><span class=\"string\">        pathType: ImplementationSpecific</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"ClusterIssuer记录\"><a href=\"#ClusterIssuer记录\" class=\"headerlink\" title=\"ClusterIssuer记录\"></a>ClusterIssuer记录</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">kubectl apply -f ClusterIssuer.yaml</span><br><span class=\"line\"><span class=\"comment\"># 查看(kuboard中的集群管理-&gt;自定义资源-&gt;cert-manager.io中也能看到)</span></span><br><span class=\"line\">kubectl get ClusterIssuer</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/advanced-nginx-ingress-configurations#title-v89-nee-iuh\">参考</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建ClusterIssuer</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | kubectl apply -f -</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: cert-manager.io/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterIssuer</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: letsencrypt-prod-http01</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  acme:</span></span><br><span class=\"line\"><span class=\"string\">    server: https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class=\"line\"><span class=\"string\">    email: &lt;your_email_name@gmail.com&gt;  # 替换为您的邮箱名。</span></span><br><span class=\"line\"><span class=\"string\">    privateKeySecretRef:</span></span><br><span class=\"line\"><span class=\"string\">      name: letsencrypt-http01</span></span><br><span class=\"line\"><span class=\"string\">    solvers:</span></span><br><span class=\"line\"><span class=\"string\">    - http01: </span></span><br><span class=\"line\"><span class=\"string\">        ingress:</span></span><br><span class=\"line\"><span class=\"string\">          class: nginx</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\"># 查看ClusterIssuer</span></span><br><span class=\"line\">kubectl get clusterissuer</span><br><span class=\"line\"><span class=\"comment\"># 创建Nginx Ingress资源对象</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | kubectl apply -f -</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: Ingress</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: ingress-tls</span></span><br><span class=\"line\"><span class=\"string\">  annotations:</span></span><br><span class=\"line\"><span class=\"string\">    kubernetes.io/ingress.class: &quot;nginx&quot;</span></span><br><span class=\"line\"><span class=\"string\">    cert-manager.io/cluster-issuer: &quot;letsencrypt-prod-http01&quot;</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  tls:</span></span><br><span class=\"line\"><span class=\"string\">  - hosts:</span></span><br><span class=\"line\"><span class=\"string\">    - &lt;your_domain_name&gt;        # 替换为您的域名。</span></span><br><span class=\"line\"><span class=\"string\">    secretName: ingress-tls   </span></span><br><span class=\"line\"><span class=\"string\">  rules:</span></span><br><span class=\"line\"><span class=\"string\">  - host: &lt;your_domain_name&gt;    # 替换为您的域名。</span></span><br><span class=\"line\"><span class=\"string\">    http:</span></span><br><span class=\"line\"><span class=\"string\">      paths:</span></span><br><span class=\"line\"><span class=\"string\">      - path: /</span></span><br><span class=\"line\"><span class=\"string\">        backend:</span></span><br><span class=\"line\"><span class=\"string\">          service:</span></span><br><span class=\"line\"><span class=\"string\">            name: &lt;your_service_name&gt;  # 替换为您的后端服务名。</span></span><br><span class=\"line\"><span class=\"string\">            port: </span></span><br><span class=\"line\"><span class=\"string\">              number: &lt;your_service_port&gt;  # 替换为您的服务端口。</span></span><br><span class=\"line\"><span class=\"string\">        pathType: ImplementationSpecific</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Clusterissuer","nav_order":4,"has_children":true,"parent":"Clusterissuer","_content":"\n# Clusterissuer\n","source":"_posts/kubernetes/docs/cert-manager/ClusterIssuer/index.md","raw":"---\nlayout: default\ntitle: Clusterissuer\nnav_order: 4\nhas_children: true\nparent: Clusterissuer\npermalink: \"/kubernetes/docs/cert-manager/clusterissuer/\"\n---\n\n# Clusterissuer\n","slug":"kubernetes/docs/cert-manager/ClusterIssuer/index","published":1,"date":"2025-02-23T07:43:31.700Z","updated":"2025-02-23T07:43:31.700Z","__permalink":"/kubernetes/docs/cert-manager/clusterissuer/","comments":1,"photos":[],"_id":"cm7k5rwb3008qmsws282b02hp","content":"<h1 id=\"Clusterissuer\"><a href=\"#Clusterissuer\" class=\"headerlink\" title=\"Clusterissuer\"></a>Clusterissuer</h1>","excerpt":"","more":"<h1 id=\"Clusterissuer\"><a href=\"#Clusterissuer\" class=\"headerlink\" title=\"Clusterissuer\"></a>Clusterissuer</h1>"},{"layout":"default","title":"<classifier>标签在gradle中怎么用","nav_order":14,"description":"<classifier>jpa</classifier>那这个标签在gradle中怎么用","parent":"Gradle","has_children":false,"grand_parent":"Devs","_content":"\n# <classifier>jpa</classifier>那这个标签在gradle中怎么用\n\n在Gradle中使用`classifier`与在Maven中略有不同，但同样可以实现。在Gradle中指定依赖时，如果需要包含`classifier`，可以通过在依赖声明中直接添加`classifier`属性来完成。以下是一个如何在Gradle项目中使用`classifier`的示例：\n\n假设你想要添加一个带有`classifier`的依赖，例如`querydsl-apt`的JPA版本，你可以这样做：\n\n```groovy\ndependencies {\n    // 使用 classifier\n    implementation 'com.querydsl:querydsl-apt:4.4.0:jpa'\n}\n```\n\n这里，`implementation`是依赖的配置类型（例如，对于编译和运行时依赖，通常使用`implementation`）。`'com.querydsl:querydsl-apt:4.4.0:jpa'`是依赖的坐标，其中包含了`group`、`name`、`version`和`classifier`。这种格式直接将`classifier`作为坐标的一部分，与Maven中的`<classifier>`标签相对应。\n\n如果你需要指定依赖的类型（例如，jar），可以使用以下格式：\n\n```groovy\ndependencies {\n    // 指定依赖类型\n    implementation 'com.querydsl:querydsl-apt:4.4.0:jpa@jar'\n}\n```\n\n在这个例子中，`@jar`指定了依赖的类型为jar文件。这种方式允许你在Gradle中灵活地指定依赖的`classifier`和类型。\n\n总结来说，要在Gradle中使用`classifier`，你可以直接在依赖的坐标中包含它，格式为`\"group:name:version:classifier\"`。如果需要指定类型，可以在坐标后添加`@type`。这种方法简洁明了，允许你在Gradle项目中轻松引入具有特定`classifier`的依赖。\n\n在Gradle中使用`classifier`的另一种方式是通过依赖配置的扩展属性。这种方法允许你更灵活地指定依赖的细节，包括`classifier`和`extension`（如果你需要指定文件的扩展名）。以下是一个示例，展示了如何在Gradle项目中使用这种方法来添加带有`classifier`的依赖：\n\n```groovy\ndependencies {\n    // 添加带有classifier的依赖\n    implementation group: 'com.querydsl', name: 'querydsl-apt', version: '4.4.0', classifier: 'jpa'\n}\n```\n\n这种方式通过显式指定`group`、`name`、`version`和`classifier`属性来添加依赖，使得依赖声明更加清晰和灵活。如果需要指定依赖的文件类型（比如`jar`），可以添加`ext`属性：\n\n```groovy\ndependencies {\n    // 添加带有classifier和指定文件类型的依赖\n    implementation group: 'com.querydsl', name: 'querydsl-apt', version: '4.4.0', classifier: 'jpa', ext: 'jar'\n}\n```\n\n这种方法在处理复杂依赖关系或需要明确指定依赖文件类型时特别有用。通过这种方式，你可以灵活地管理项目的依赖，并确保Gradle能够正确地解析和下载所需的构件。\n\n总结来说，Gradle提供了灵活的依赖声明方式，允许通过直接在依赖坐标中包含`classifier`或通过依赖配置的扩展属性来指定`classifier`。这两种方法都可以根据项目的具体需求和依赖管理策略来选择使用。\n","source":"_posts/materiel/ai/devs/gradle/<classifier>标签在gradle中怎么用.md","raw":"---\nlayout: default\ntitle: \"<classifier>标签在gradle中怎么用\"\nnav_order: 14\ndescription: \"<classifier>jpa</classifier>那这个标签在gradle中怎么用\"\nparent: Gradle\nhas_children: false\npermalink: \"/materiel/ai/devs/gradle/<classifier>标签在gradle中怎么用/\"\ngrand_parent: Devs\n---\n\n# <classifier>jpa</classifier>那这个标签在gradle中怎么用\n\n在Gradle中使用`classifier`与在Maven中略有不同，但同样可以实现。在Gradle中指定依赖时，如果需要包含`classifier`，可以通过在依赖声明中直接添加`classifier`属性来完成。以下是一个如何在Gradle项目中使用`classifier`的示例：\n\n假设你想要添加一个带有`classifier`的依赖，例如`querydsl-apt`的JPA版本，你可以这样做：\n\n```groovy\ndependencies {\n    // 使用 classifier\n    implementation 'com.querydsl:querydsl-apt:4.4.0:jpa'\n}\n```\n\n这里，`implementation`是依赖的配置类型（例如，对于编译和运行时依赖，通常使用`implementation`）。`'com.querydsl:querydsl-apt:4.4.0:jpa'`是依赖的坐标，其中包含了`group`、`name`、`version`和`classifier`。这种格式直接将`classifier`作为坐标的一部分，与Maven中的`<classifier>`标签相对应。\n\n如果你需要指定依赖的类型（例如，jar），可以使用以下格式：\n\n```groovy\ndependencies {\n    // 指定依赖类型\n    implementation 'com.querydsl:querydsl-apt:4.4.0:jpa@jar'\n}\n```\n\n在这个例子中，`@jar`指定了依赖的类型为jar文件。这种方式允许你在Gradle中灵活地指定依赖的`classifier`和类型。\n\n总结来说，要在Gradle中使用`classifier`，你可以直接在依赖的坐标中包含它，格式为`\"group:name:version:classifier\"`。如果需要指定类型，可以在坐标后添加`@type`。这种方法简洁明了，允许你在Gradle项目中轻松引入具有特定`classifier`的依赖。\n\n在Gradle中使用`classifier`的另一种方式是通过依赖配置的扩展属性。这种方法允许你更灵活地指定依赖的细节，包括`classifier`和`extension`（如果你需要指定文件的扩展名）。以下是一个示例，展示了如何在Gradle项目中使用这种方法来添加带有`classifier`的依赖：\n\n```groovy\ndependencies {\n    // 添加带有classifier的依赖\n    implementation group: 'com.querydsl', name: 'querydsl-apt', version: '4.4.0', classifier: 'jpa'\n}\n```\n\n这种方式通过显式指定`group`、`name`、`version`和`classifier`属性来添加依赖，使得依赖声明更加清晰和灵活。如果需要指定依赖的文件类型（比如`jar`），可以添加`ext`属性：\n\n```groovy\ndependencies {\n    // 添加带有classifier和指定文件类型的依赖\n    implementation group: 'com.querydsl', name: 'querydsl-apt', version: '4.4.0', classifier: 'jpa', ext: 'jar'\n}\n```\n\n这种方法在处理复杂依赖关系或需要明确指定依赖文件类型时特别有用。通过这种方式，你可以灵活地管理项目的依赖，并确保Gradle能够正确地解析和下载所需的构件。\n\n总结来说，Gradle提供了灵活的依赖声明方式，允许通过直接在依赖坐标中包含`classifier`或通过依赖配置的扩展属性来指定`classifier`。这两种方法都可以根据项目的具体需求和依赖管理策略来选择使用。\n","slug":"materiel/ai/devs/gradle/<classifier>标签在gradle中怎么用","published":1,"date":"2025-02-23T07:43:31.725Z","updated":"2025-02-23T07:43:31.726Z","__permalink":"/materiel/ai/devs/gradle/<classifier>标签在gradle中怎么用/","comments":1,"photos":[],"_id":"cm7k5rwb3008rmswseaoa6o06","content":"<h1 id=\"jpa那这个标签在gradle中怎么用\"><a href=\"#jpa那这个标签在gradle中怎么用\" class=\"headerlink\" title=\"jpa那这个标签在gradle中怎么用\"></a><classifier>jpa</classifier>那这个标签在gradle中怎么用</h1><p>在Gradle中使用<code>classifier</code>与在Maven中略有不同，但同样可以实现。在Gradle中指定依赖时，如果需要包含<code>classifier</code>，可以通过在依赖声明中直接添加<code>classifier</code>属性来完成。以下是一个如何在Gradle项目中使用<code>classifier</code>的示例：</p>\n<p>假设你想要添加一个带有<code>classifier</code>的依赖，例如<code>querydsl-apt</code>的JPA版本，你可以这样做：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 classifier</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.querydsl:querydsl-apt:4.4.0:jpa&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>implementation</code>是依赖的配置类型（例如，对于编译和运行时依赖，通常使用<code>implementation</code>）。<code>&#39;com.querydsl:querydsl-apt:4.4.0:jpa&#39;</code>是依赖的坐标，其中包含了<code>group</code>、<code>name</code>、<code>version</code>和<code>classifier</code>。这种格式直接将<code>classifier</code>作为坐标的一部分，与Maven中的<code>&lt;classifier&gt;</code>标签相对应。</p>\n<p>如果你需要指定依赖的类型（例如，jar），可以使用以下格式：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指定依赖类型</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.querydsl:querydsl-apt:4.4.0:jpa@jar&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>@jar</code>指定了依赖的类型为jar文件。这种方式允许你在Gradle中灵活地指定依赖的<code>classifier</code>和类型。</p>\n<p>总结来说，要在Gradle中使用<code>classifier</code>，你可以直接在依赖的坐标中包含它，格式为<code>&quot;group:name:version:classifier&quot;</code>。如果需要指定类型，可以在坐标后添加<code>@type</code>。这种方法简洁明了，允许你在Gradle项目中轻松引入具有特定<code>classifier</code>的依赖。</p>\n<p>在Gradle中使用<code>classifier</code>的另一种方式是通过依赖配置的扩展属性。这种方法允许你更灵活地指定依赖的细节，包括<code>classifier</code>和<code>extension</code>（如果你需要指定文件的扩展名）。以下是一个示例，展示了如何在Gradle项目中使用这种方法来添加带有<code>classifier</code>的依赖：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加带有classifier的依赖</span></span><br><span class=\"line\">    implementation <span class=\"attr\">group:</span> <span class=\"string\">&#x27;com.querydsl&#x27;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;querydsl-apt&#x27;</span>, <span class=\"attr\">version:</span> <span class=\"string\">&#x27;4.4.0&#x27;</span>, <span class=\"attr\">classifier:</span> <span class=\"string\">&#x27;jpa&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式通过显式指定<code>group</code>、<code>name</code>、<code>version</code>和<code>classifier</code>属性来添加依赖，使得依赖声明更加清晰和灵活。如果需要指定依赖的文件类型（比如<code>jar</code>），可以添加<code>ext</code>属性：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加带有classifier和指定文件类型的依赖</span></span><br><span class=\"line\">    implementation <span class=\"attr\">group:</span> <span class=\"string\">&#x27;com.querydsl&#x27;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;querydsl-apt&#x27;</span>, <span class=\"attr\">version:</span> <span class=\"string\">&#x27;4.4.0&#x27;</span>, <span class=\"attr\">classifier:</span> <span class=\"string\">&#x27;jpa&#x27;</span>, <span class=\"attr\">ext:</span> <span class=\"string\">&#x27;jar&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方法在处理复杂依赖关系或需要明确指定依赖文件类型时特别有用。通过这种方式，你可以灵活地管理项目的依赖，并确保Gradle能够正确地解析和下载所需的构件。</p>\n<p>总结来说，Gradle提供了灵活的依赖声明方式，允许通过直接在依赖坐标中包含<code>classifier</code>或通过依赖配置的扩展属性来指定<code>classifier</code>。这两种方法都可以根据项目的具体需求和依赖管理策略来选择使用。</p>\n","excerpt":"","more":"<h1 id=\"jpa那这个标签在gradle中怎么用\"><a href=\"#jpa那这个标签在gradle中怎么用\" class=\"headerlink\" title=\"jpa那这个标签在gradle中怎么用\"></a><classifier>jpa</classifier>那这个标签在gradle中怎么用</h1><p>在Gradle中使用<code>classifier</code>与在Maven中略有不同，但同样可以实现。在Gradle中指定依赖时，如果需要包含<code>classifier</code>，可以通过在依赖声明中直接添加<code>classifier</code>属性来完成。以下是一个如何在Gradle项目中使用<code>classifier</code>的示例：</p>\n<p>假设你想要添加一个带有<code>classifier</code>的依赖，例如<code>querydsl-apt</code>的JPA版本，你可以这样做：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 classifier</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.querydsl:querydsl-apt:4.4.0:jpa&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>implementation</code>是依赖的配置类型（例如，对于编译和运行时依赖，通常使用<code>implementation</code>）。<code>&#39;com.querydsl:querydsl-apt:4.4.0:jpa&#39;</code>是依赖的坐标，其中包含了<code>group</code>、<code>name</code>、<code>version</code>和<code>classifier</code>。这种格式直接将<code>classifier</code>作为坐标的一部分，与Maven中的<code>&lt;classifier&gt;</code>标签相对应。</p>\n<p>如果你需要指定依赖的类型（例如，jar），可以使用以下格式：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指定依赖类型</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.querydsl:querydsl-apt:4.4.0:jpa@jar&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>@jar</code>指定了依赖的类型为jar文件。这种方式允许你在Gradle中灵活地指定依赖的<code>classifier</code>和类型。</p>\n<p>总结来说，要在Gradle中使用<code>classifier</code>，你可以直接在依赖的坐标中包含它，格式为<code>&quot;group:name:version:classifier&quot;</code>。如果需要指定类型，可以在坐标后添加<code>@type</code>。这种方法简洁明了，允许你在Gradle项目中轻松引入具有特定<code>classifier</code>的依赖。</p>\n<p>在Gradle中使用<code>classifier</code>的另一种方式是通过依赖配置的扩展属性。这种方法允许你更灵活地指定依赖的细节，包括<code>classifier</code>和<code>extension</code>（如果你需要指定文件的扩展名）。以下是一个示例，展示了如何在Gradle项目中使用这种方法来添加带有<code>classifier</code>的依赖：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加带有classifier的依赖</span></span><br><span class=\"line\">    implementation <span class=\"attr\">group:</span> <span class=\"string\">&#x27;com.querydsl&#x27;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;querydsl-apt&#x27;</span>, <span class=\"attr\">version:</span> <span class=\"string\">&#x27;4.4.0&#x27;</span>, <span class=\"attr\">classifier:</span> <span class=\"string\">&#x27;jpa&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式通过显式指定<code>group</code>、<code>name</code>、<code>version</code>和<code>classifier</code>属性来添加依赖，使得依赖声明更加清晰和灵活。如果需要指定依赖的文件类型（比如<code>jar</code>），可以添加<code>ext</code>属性：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加带有classifier和指定文件类型的依赖</span></span><br><span class=\"line\">    implementation <span class=\"attr\">group:</span> <span class=\"string\">&#x27;com.querydsl&#x27;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;querydsl-apt&#x27;</span>, <span class=\"attr\">version:</span> <span class=\"string\">&#x27;4.4.0&#x27;</span>, <span class=\"attr\">classifier:</span> <span class=\"string\">&#x27;jpa&#x27;</span>, <span class=\"attr\">ext:</span> <span class=\"string\">&#x27;jar&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方法在处理复杂依赖关系或需要明确指定依赖文件类型时特别有用。通过这种方式，你可以灵活地管理项目的依赖，并确保Gradle能够正确地解析和下载所需的构件。</p>\n<p>总结来说，Gradle提供了灵活的依赖声明方式，允许通过直接在依赖坐标中包含<code>classifier</code>或通过依赖配置的扩展属性来指定<code>classifier</code>。这两种方法都可以根据项目的具体需求和依赖管理策略来选择使用。</p>\n"},{"layout":"default","title":"Gradle","nav_order":4,"has_children":true,"parent":"Gradle","_content":"\n# Gradle\n","source":"_posts/materiel/ai/devs/gradle/index.md","raw":"---\nlayout: default\ntitle: Gradle\nnav_order: 4\nhas_children: true\nparent: Gradle\npermalink: \"/materiel/ai/devs/gradle/\"\n---\n\n# Gradle\n","slug":"materiel/ai/devs/gradle/index","published":1,"date":"2025-02-23T07:43:31.726Z","updated":"2025-02-23T07:43:31.726Z","__permalink":"/materiel/ai/devs/gradle/","comments":1,"photos":[],"_id":"cm7k5rwb3008smsws512waqtl","content":"<h1 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h1>","excerpt":"","more":"<h1 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h1>"},{"layout":"default","title":"Html+产品","nav_order":4,"has_children":true,"parent":"Html+产品","_content":"\n# Html+产品\n","source":"_posts/materiel/ai/prompts/html+产品/index.md","raw":"---\nlayout: default\ntitle: Html+产品\nnav_order: 4\nhas_children: true\nparent: Html+产品\npermalink: \"/materiel/ai/prompts/html+产品/\"\n---\n\n# Html+产品\n","slug":"materiel/ai/prompts/html+产品/index","published":1,"date":"2025-02-23T07:43:31.734Z","updated":"2025-02-23T07:43:31.734Z","__permalink":"/materiel/ai/prompts/html+产品/","comments":1,"photos":[],"_id":"cm7k5rwb4008tmswsc46x9c86","content":"<h1 id=\"Html-产品\"><a href=\"#Html-产品\" class=\"headerlink\" title=\"Html+产品\"></a>Html+产品</h1>","excerpt":"","more":"<h1 id=\"Html-产品\"><a href=\"#Html-产品\" class=\"headerlink\" title=\"Html+产品\"></a>Html+产品</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"两台主机之间直连","parent":"Goodlink","has_children":false,"grand_parent":"Docker","_content":"\n# 两台主机之间直连\n\n## docker启动\n\n```bash\ndocker rm goodlink -f\n# remote\ndocker run -d --name=goodlink --net=host --restart=always registry.cn-shanghai.aliyuncs.com/kony/goodlink --key=nas_202412140928\n# local\ndocker run -d --name=goodlink --net=host --restart=always registry.cn-shanghai.aliyuncs.com/kony/goodlink --local=127.0.0.1:18080 --key=nas_202412140928\n\n# 以上两个命令执行后, 如果联通了的话, 那就是通过clash等代理软件可以访问remote端的所有端口\n# 目标: 在家里电脑(或出差电脑)浏览器上配置代理: socks5://127.0.0.1:18080, 访问公司所有内网 WEB, 和在公司无异\n# 由于remote和local两端默认使用的算法不一样, 如果出现超过10分钟无法连接的情况, 可能是其中一端和默认的算法不兼容, 此时可在local端增加 \"--conn=1\" 选项, 以调换两端的算法, 就能连接了\n```\n\n## 命令方式\n\n```bash\nchmod +x ./goodlink-linux-amd64\n./goodlink-linux-amd64 --key=nas_202412140928\n./goodlink-linux-arm64 --local=127.0.0.1:18080 --key=nas_202412140928\n# 后台执行, 收集日志到文件中(PS: 2>&1 作用为将标准错误重定向到标准输出, 即写入goodlink.log日志文件)\nnohup ./goodlink-linux-amd64 --key=nas_202412140928 > ./goodlink.log 2>&1 &\n```\n\n- 异常\n\n- [参考文章](https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes)\n\n```bash\nsysctl -w net.core.rmem_max=7500000\nsysctl -w net.core.wmem_max=7500000\n```\n","source":"_posts/tools/terminal/docker/goodlink/goodlink.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: 两台主机之间直连\nparent: Goodlink\nhas_children: false\npermalink: \"/tools/terminal/docker/goodlink/goodlink/\"\ngrand_parent: Docker\n---\n\n# 两台主机之间直连\n\n## docker启动\n\n```bash\ndocker rm goodlink -f\n# remote\ndocker run -d --name=goodlink --net=host --restart=always registry.cn-shanghai.aliyuncs.com/kony/goodlink --key=nas_202412140928\n# local\ndocker run -d --name=goodlink --net=host --restart=always registry.cn-shanghai.aliyuncs.com/kony/goodlink --local=127.0.0.1:18080 --key=nas_202412140928\n\n# 以上两个命令执行后, 如果联通了的话, 那就是通过clash等代理软件可以访问remote端的所有端口\n# 目标: 在家里电脑(或出差电脑)浏览器上配置代理: socks5://127.0.0.1:18080, 访问公司所有内网 WEB, 和在公司无异\n# 由于remote和local两端默认使用的算法不一样, 如果出现超过10分钟无法连接的情况, 可能是其中一端和默认的算法不兼容, 此时可在local端增加 \"--conn=1\" 选项, 以调换两端的算法, 就能连接了\n```\n\n## 命令方式\n\n```bash\nchmod +x ./goodlink-linux-amd64\n./goodlink-linux-amd64 --key=nas_202412140928\n./goodlink-linux-arm64 --local=127.0.0.1:18080 --key=nas_202412140928\n# 后台执行, 收集日志到文件中(PS: 2>&1 作用为将标准错误重定向到标准输出, 即写入goodlink.log日志文件)\nnohup ./goodlink-linux-amd64 --key=nas_202412140928 > ./goodlink.log 2>&1 &\n```\n\n- 异常\n\n- [参考文章](https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes)\n\n```bash\nsysctl -w net.core.rmem_max=7500000\nsysctl -w net.core.wmem_max=7500000\n```\n","slug":"tools/terminal/docker/goodlink/goodlink","published":1,"date":"2025-02-23T07:43:31.768Z","updated":"2025-02-23T07:43:31.768Z","__permalink":"/tools/terminal/docker/goodlink/goodlink/","comments":1,"photos":[],"_id":"cm7k5rwb4008umsws8bioajg7","content":"<h1 id=\"两台主机之间直连\"><a href=\"#两台主机之间直连\" class=\"headerlink\" title=\"两台主机之间直连\"></a>两台主机之间直连</h1><h2 id=\"docker启动\"><a href=\"#docker启动\" class=\"headerlink\" title=\"docker启动\"></a>docker启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> goodlink -f</span><br><span class=\"line\"><span class=\"comment\"># remote</span></span><br><span class=\"line\">docker run -d --name=goodlink --net=host --restart=always registry.cn-shanghai.aliyuncs.com/kony/goodlink --key=nas_202412140928</span><br><span class=\"line\"><span class=\"comment\"># local</span></span><br><span class=\"line\">docker run -d --name=goodlink --net=host --restart=always registry.cn-shanghai.aliyuncs.com/kony/goodlink --<span class=\"built_in\">local</span>=127.0.0.1:18080 --key=nas_202412140928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以上两个命令执行后, 如果联通了的话, 那就是通过clash等代理软件可以访问remote端的所有端口</span></span><br><span class=\"line\"><span class=\"comment\"># 目标: 在家里电脑(或出差电脑)浏览器上配置代理: socks5://127.0.0.1:18080, 访问公司所有内网 WEB, 和在公司无异</span></span><br><span class=\"line\"><span class=\"comment\"># 由于remote和local两端默认使用的算法不一样, 如果出现超过10分钟无法连接的情况, 可能是其中一端和默认的算法不兼容, 此时可在local端增加 &quot;--conn=1&quot; 选项, 以调换两端的算法, 就能连接了</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令方式\"><a href=\"#命令方式\" class=\"headerlink\" title=\"命令方式\"></a>命令方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./goodlink-linux-amd64</span><br><span class=\"line\">./goodlink-linux-amd64 --key=nas_202412140928</span><br><span class=\"line\">./goodlink-linux-arm64 --<span class=\"built_in\">local</span>=127.0.0.1:18080 --key=nas_202412140928</span><br><span class=\"line\"><span class=\"comment\"># 后台执行, 收集日志到文件中(PS: 2&gt;&amp;1 作用为将标准错误重定向到标准输出, 即写入goodlink.log日志文件)</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ./goodlink-linux-amd64 --key=nas_202412140928 &gt; ./goodlink.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>异常</p>\n</li>\n<li><p><a href=\"https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes\">参考文章</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -w net.core.rmem_max=7500000</span><br><span class=\"line\">sysctl -w net.core.wmem_max=7500000</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"两台主机之间直连\"><a href=\"#两台主机之间直连\" class=\"headerlink\" title=\"两台主机之间直连\"></a>两台主机之间直连</h1><h2 id=\"docker启动\"><a href=\"#docker启动\" class=\"headerlink\" title=\"docker启动\"></a>docker启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> goodlink -f</span><br><span class=\"line\"><span class=\"comment\"># remote</span></span><br><span class=\"line\">docker run -d --name=goodlink --net=host --restart=always registry.cn-shanghai.aliyuncs.com/kony/goodlink --key=nas_202412140928</span><br><span class=\"line\"><span class=\"comment\"># local</span></span><br><span class=\"line\">docker run -d --name=goodlink --net=host --restart=always registry.cn-shanghai.aliyuncs.com/kony/goodlink --<span class=\"built_in\">local</span>=127.0.0.1:18080 --key=nas_202412140928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以上两个命令执行后, 如果联通了的话, 那就是通过clash等代理软件可以访问remote端的所有端口</span></span><br><span class=\"line\"><span class=\"comment\"># 目标: 在家里电脑(或出差电脑)浏览器上配置代理: socks5://127.0.0.1:18080, 访问公司所有内网 WEB, 和在公司无异</span></span><br><span class=\"line\"><span class=\"comment\"># 由于remote和local两端默认使用的算法不一样, 如果出现超过10分钟无法连接的情况, 可能是其中一端和默认的算法不兼容, 此时可在local端增加 &quot;--conn=1&quot; 选项, 以调换两端的算法, 就能连接了</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令方式\"><a href=\"#命令方式\" class=\"headerlink\" title=\"命令方式\"></a>命令方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./goodlink-linux-amd64</span><br><span class=\"line\">./goodlink-linux-amd64 --key=nas_202412140928</span><br><span class=\"line\">./goodlink-linux-arm64 --<span class=\"built_in\">local</span>=127.0.0.1:18080 --key=nas_202412140928</span><br><span class=\"line\"><span class=\"comment\"># 后台执行, 收集日志到文件中(PS: 2&gt;&amp;1 作用为将标准错误重定向到标准输出, 即写入goodlink.log日志文件)</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ./goodlink-linux-amd64 --key=nas_202412140928 &gt; ./goodlink.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>异常</p>\n</li>\n<li><p><a href=\"https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes\">参考文章</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -w net.core.rmem_max=7500000</span><br><span class=\"line\">sysctl -w net.core.wmem_max=7500000</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"项目开发","nav_order":4,"has_children":true,"parent":"项目开发","_content":"\n# 项目开发\n","source":"_posts/materiel/ai/prompts/项目开发/index.md","raw":"---\nlayout: default\ntitle: 项目开发\nnav_order: 4\nhas_children: true\nparent: 项目开发\npermalink: \"/materiel/ai/prompts/项目开发/\"\n---\n\n# 项目开发\n","slug":"materiel/ai/prompts/项目开发/index","published":1,"date":"2025-02-23T07:43:31.732Z","updated":"2025-02-23T07:43:31.732Z","__permalink":"/materiel/ai/prompts/项目开发/","comments":1,"photos":[],"_id":"cm7k5rwb4008vmswscg1l6td3","content":"<h1 id=\"项目开发\"><a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h1>","excerpt":"","more":"<h1 id=\"项目开发\"><a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"项目开发","parent":"项目开发","has_children":false,"grand_parent":"Prompts","_content":"\n# 项目开发\n\n## prompt\n\n```text\n我现在需要你帮忙调优下 系统提示词 @.cursorrules 你需要具备产品设计, UI界面交互设计, 前后端代码编写, 以及运维部署相关的全流程全栈工程师, 从多个维度出发去多为使用的用户着想, 根据不同的问题去选择对应领域的专业知识, 去多角度分析, 去提供多个方案, 并用对应领域的专业技能去选择对用户最友好最简便最优雅的方案去实现目标, 在这个过程中, 如果, 你遇到你认为对你之后的工作很有帮助的内容, 能让你在之后的工作中更得心应手的完成任务的想法, 都可以找个你认为合适的地方记下来\n```\n\n### 补充工具版\n\n```text\n帮忙在补充下使用工具方面的内容, 你会在完成任务的过程中, 自己编写脚本, 自己调用工具, 验证自己的想法并且把可能对之后能更好完成任务的工具, 更新到自己的知识库中, 方便下次调用, 就不用每次都需要重新编写了, 在一次次的完成任务的过程中, 逐步的完善自己的工作流程\n```\n\n### AI优化版\n\n```text\n你觉得呢? 对你有帮助才行, 如果觉得内容太多了也可以适当的优化调整, 你看着来就好\n```\n\n## 碎片化提示词记录\n\n```md\n## 分析-提供方案-解决问题-模版\n帮忙根据你的专业领域能力分析下我目前的需求点, 并提供对你有帮助的解决方案, 你从其中整理出对你最有帮助的方案\n## 重启项目\n使用docker compose的方式重新启动下项目, 方便我直接体验到最新改动内容\n## 提交代码\n帮我提交下代码到远程仓库\n```\n","source":"_posts/materiel/ai/prompts/项目开发/项目开发.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: 项目开发\nparent: 项目开发\nhas_children: false\npermalink: \"/materiel/ai/prompts/项目开发/项目开发/\"\ngrand_parent: Prompts\n---\n\n# 项目开发\n\n## prompt\n\n```text\n我现在需要你帮忙调优下 系统提示词 @.cursorrules 你需要具备产品设计, UI界面交互设计, 前后端代码编写, 以及运维部署相关的全流程全栈工程师, 从多个维度出发去多为使用的用户着想, 根据不同的问题去选择对应领域的专业知识, 去多角度分析, 去提供多个方案, 并用对应领域的专业技能去选择对用户最友好最简便最优雅的方案去实现目标, 在这个过程中, 如果, 你遇到你认为对你之后的工作很有帮助的内容, 能让你在之后的工作中更得心应手的完成任务的想法, 都可以找个你认为合适的地方记下来\n```\n\n### 补充工具版\n\n```text\n帮忙在补充下使用工具方面的内容, 你会在完成任务的过程中, 自己编写脚本, 自己调用工具, 验证自己的想法并且把可能对之后能更好完成任务的工具, 更新到自己的知识库中, 方便下次调用, 就不用每次都需要重新编写了, 在一次次的完成任务的过程中, 逐步的完善自己的工作流程\n```\n\n### AI优化版\n\n```text\n你觉得呢? 对你有帮助才行, 如果觉得内容太多了也可以适当的优化调整, 你看着来就好\n```\n\n## 碎片化提示词记录\n\n```md\n## 分析-提供方案-解决问题-模版\n帮忙根据你的专业领域能力分析下我目前的需求点, 并提供对你有帮助的解决方案, 你从其中整理出对你最有帮助的方案\n## 重启项目\n使用docker compose的方式重新启动下项目, 方便我直接体验到最新改动内容\n## 提交代码\n帮我提交下代码到远程仓库\n```\n","slug":"materiel/ai/prompts/项目开发/项目开发","published":1,"date":"2025-02-23T07:43:31.732Z","updated":"2025-02-23T07:43:31.732Z","__permalink":"/materiel/ai/prompts/项目开发/项目开发/","comments":1,"photos":[],"_id":"cm7k5rwb4008wmsws58q83eoc","content":"<h1 id=\"项目开发\"><a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h1><h2 id=\"prompt\"><a href=\"#prompt\" class=\"headerlink\" title=\"prompt\"></a>prompt</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我现在需要你帮忙调优下 系统提示词 @.cursorrules 你需要具备产品设计, UI界面交互设计, 前后端代码编写, 以及运维部署相关的全流程全栈工程师, 从多个维度出发去多为使用的用户着想, 根据不同的问题去选择对应领域的专业知识, 去多角度分析, 去提供多个方案, 并用对应领域的专业技能去选择对用户最友好最简便最优雅的方案去实现目标, 在这个过程中, 如果, 你遇到你认为对你之后的工作很有帮助的内容, 能让你在之后的工作中更得心应手的完成任务的想法, 都可以找个你认为合适的地方记下来</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"补充工具版\"><a href=\"#补充工具版\" class=\"headerlink\" title=\"补充工具版\"></a>补充工具版</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">帮忙在补充下使用工具方面的内容, 你会在完成任务的过程中, 自己编写脚本, 自己调用工具, 验证自己的想法并且把可能对之后能更好完成任务的工具, 更新到自己的知识库中, 方便下次调用, 就不用每次都需要重新编写了, 在一次次的完成任务的过程中, 逐步的完善自己的工作流程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AI优化版\"><a href=\"#AI优化版\" class=\"headerlink\" title=\"AI优化版\"></a>AI优化版</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你觉得呢? 对你有帮助才行, 如果觉得内容太多了也可以适当的优化调整, 你看着来就好</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"碎片化提示词记录\"><a href=\"#碎片化提示词记录\" class=\"headerlink\" title=\"碎片化提示词记录\"></a>碎片化提示词记录</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## 分析-提供方案-解决问题-模版</span></span><br><span class=\"line\">帮忙根据你的专业领域能力分析下我目前的需求点, 并提供对你有帮助的解决方案, 你从其中整理出对你最有帮助的方案</span><br><span class=\"line\"><span class=\"section\">## 重启项目</span></span><br><span class=\"line\">使用docker compose的方式重新启动下项目, 方便我直接体验到最新改动内容</span><br><span class=\"line\"><span class=\"section\">## 提交代码</span></span><br><span class=\"line\">帮我提交下代码到远程仓库</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"项目开发\"><a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h1><h2 id=\"prompt\"><a href=\"#prompt\" class=\"headerlink\" title=\"prompt\"></a>prompt</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我现在需要你帮忙调优下 系统提示词 @.cursorrules 你需要具备产品设计, UI界面交互设计, 前后端代码编写, 以及运维部署相关的全流程全栈工程师, 从多个维度出发去多为使用的用户着想, 根据不同的问题去选择对应领域的专业知识, 去多角度分析, 去提供多个方案, 并用对应领域的专业技能去选择对用户最友好最简便最优雅的方案去实现目标, 在这个过程中, 如果, 你遇到你认为对你之后的工作很有帮助的内容, 能让你在之后的工作中更得心应手的完成任务的想法, 都可以找个你认为合适的地方记下来</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"补充工具版\"><a href=\"#补充工具版\" class=\"headerlink\" title=\"补充工具版\"></a>补充工具版</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">帮忙在补充下使用工具方面的内容, 你会在完成任务的过程中, 自己编写脚本, 自己调用工具, 验证自己的想法并且把可能对之后能更好完成任务的工具, 更新到自己的知识库中, 方便下次调用, 就不用每次都需要重新编写了, 在一次次的完成任务的过程中, 逐步的完善自己的工作流程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AI优化版\"><a href=\"#AI优化版\" class=\"headerlink\" title=\"AI优化版\"></a>AI优化版</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你觉得呢? 对你有帮助才行, 如果觉得内容太多了也可以适当的优化调整, 你看着来就好</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"碎片化提示词记录\"><a href=\"#碎片化提示词记录\" class=\"headerlink\" title=\"碎片化提示词记录\"></a>碎片化提示词记录</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## 分析-提供方案-解决问题-模版</span></span><br><span class=\"line\">帮忙根据你的专业领域能力分析下我目前的需求点, 并提供对你有帮助的解决方案, 你从其中整理出对你最有帮助的方案</span><br><span class=\"line\"><span class=\"section\">## 重启项目</span></span><br><span class=\"line\">使用docker compose的方式重新启动下项目, 方便我直接体验到最新改动内容</span><br><span class=\"line\"><span class=\"section\">## 提交代码</span></span><br><span class=\"line\">帮我提交下代码到远程仓库</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Goodlink","nav_order":4,"has_children":true,"parent":"Goodlink","_content":"\n# Goodlink\n","source":"_posts/tools/terminal/docker/goodlink/index.md","raw":"---\nlayout: default\ntitle: Goodlink\nnav_order: 4\nhas_children: true\nparent: Goodlink\npermalink: \"/tools/terminal/docker/goodlink/\"\n---\n\n# Goodlink\n","slug":"tools/terminal/docker/goodlink/index","published":1,"date":"2025-02-23T07:43:31.769Z","updated":"2025-02-23T07:43:31.769Z","__permalink":"/tools/terminal/docker/goodlink/","comments":1,"photos":[],"_id":"cm7k5rwb4008xmswsfe6b5mpn","content":"<h1 id=\"Goodlink\"><a href=\"#Goodlink\" class=\"headerlink\" title=\"Goodlink\"></a>Goodlink</h1>","excerpt":"","more":"<h1 id=\"Goodlink\"><a href=\"#Goodlink\" class=\"headerlink\" title=\"Goodlink\"></a>Goodlink</h1>"},{"layout":"default","title":"doc","nav_order":14,"description":"ciphey(一个强大的全自动解密/解码/破解工具，只需输入加密文本就能解密，Star 18K+!)","parent":"Ciphey","has_children":false,"grand_parent":"Docker","_content":"\n# ciphey(一个强大的全自动解密/解码/破解工具，只需输入加密文本就能解密，Star 18K+!)\n\n[github地址](https://github.com/ciphey/Ciphey)\n\n## docker使用方式\n\n```shell\ndocker run -it --rm registry.cn-hangzhou.aliyuncs.com/iuin/ciphey\n```\n","source":"_posts/tools/terminal/docker/ciphey/ciphey.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 14\ndescription: ciphey(一个强大的全自动解密/解码/破解工具，只需输入加密文本就能解密，Star 18K+!)\nparent: Ciphey\nhas_children: false\npermalink: \"/tools/terminal/docker/ciphey/ciphey/\"\ngrand_parent: Docker\n---\n\n# ciphey(一个强大的全自动解密/解码/破解工具，只需输入加密文本就能解密，Star 18K+!)\n\n[github地址](https://github.com/ciphey/Ciphey)\n\n## docker使用方式\n\n```shell\ndocker run -it --rm registry.cn-hangzhou.aliyuncs.com/iuin/ciphey\n```\n","slug":"tools/terminal/docker/ciphey/ciphey","published":1,"date":"2025-02-23T07:43:31.768Z","updated":"2025-02-23T07:43:31.768Z","__permalink":"/tools/terminal/docker/ciphey/ciphey/","comments":1,"photos":[],"_id":"cm7k5rwb4008ymswsaekl8hzf","content":"<h1 id=\"ciphey-一个强大的全自动解密-x2F-解码-x2F-破解工具，只需输入加密文本就能解密，Star-18K\"><a href=\"#ciphey-一个强大的全自动解密-x2F-解码-x2F-破解工具，只需输入加密文本就能解密，Star-18K\" class=\"headerlink\" title=\"ciphey(一个强大的全自动解密&#x2F;解码&#x2F;破解工具，只需输入加密文本就能解密，Star 18K+!)\"></a>ciphey(一个强大的全自动解密&#x2F;解码&#x2F;破解工具，只需输入加密文本就能解密，Star 18K+!)</h1><p><a href=\"https://github.com/ciphey/Ciphey\">github地址</a></p>\n<h2 id=\"docker使用方式\"><a href=\"#docker使用方式\" class=\"headerlink\" title=\"docker使用方式\"></a>docker使用方式</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm registry.cn-hangzhou.aliyuncs.com/iuin/ciphey</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"ciphey-一个强大的全自动解密-x2F-解码-x2F-破解工具，只需输入加密文本就能解密，Star-18K\"><a href=\"#ciphey-一个强大的全自动解密-x2F-解码-x2F-破解工具，只需输入加密文本就能解密，Star-18K\" class=\"headerlink\" title=\"ciphey(一个强大的全自动解密&#x2F;解码&#x2F;破解工具，只需输入加密文本就能解密，Star 18K+!)\"></a>ciphey(一个强大的全自动解密&#x2F;解码&#x2F;破解工具，只需输入加密文本就能解密，Star 18K+!)</h1><p><a href=\"https://github.com/ciphey/Ciphey\">github地址</a></p>\n<h2 id=\"docker使用方式\"><a href=\"#docker使用方式\" class=\"headerlink\" title=\"docker使用方式\"></a>docker使用方式</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm registry.cn-hangzhou.aliyuncs.com/iuin/ciphey</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Ciphey","nav_order":4,"has_children":true,"parent":"Ciphey","_content":"\n# Ciphey\n","source":"_posts/tools/terminal/docker/ciphey/index.md","raw":"---\nlayout: default\ntitle: Ciphey\nnav_order: 4\nhas_children: true\nparent: Ciphey\npermalink: \"/tools/terminal/docker/ciphey/\"\n---\n\n# Ciphey\n","slug":"tools/terminal/docker/ciphey/index","published":1,"date":"2025-02-23T07:43:31.768Z","updated":"2025-02-23T07:43:31.768Z","__permalink":"/tools/terminal/docker/ciphey/","comments":1,"photos":[],"_id":"cm7k5rwb4008zmsws6m4gaki7","content":"<h1 id=\"Ciphey\"><a href=\"#Ciphey\" class=\"headerlink\" title=\"Ciphey\"></a>Ciphey</h1>","excerpt":"","more":"<h1 id=\"Ciphey\"><a href=\"#Ciphey\" class=\"headerlink\" title=\"Ciphey\"></a>Ciphey</h1>"},{"layout":"default","title":"Mongodb","nav_order":5,"has_children":true,"parent":"Mongodb","_content":"\n# Mongodb\n","source":"_posts/docker/app/devs/data/MongoDB/index.md","raw":"---\nlayout: default\ntitle: Mongodb\nnav_order: 5\nhas_children: true\nparent: Mongodb\npermalink: \"/docker/app/devs/data/mongodb/\"\n---\n\n# Mongodb\n","slug":"docker/app/devs/data/MongoDB/index","published":1,"date":"2025-02-23T07:43:31.044Z","updated":"2025-02-23T07:43:31.045Z","__permalink":"/docker/app/devs/data/mongodb/","comments":1,"photos":[],"_id":"cm7k5rwb40090msws06eeg1zu","content":"<h1 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h1>","excerpt":"","more":"<h1 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h1>"},{"layout":"default","title":"xxx1","nav_order":1738252800,"description":"[vvv](xxx)~~fsdfsdf~~```dfsdf`gfgdf````","has_children":false,"parent":"Ciphey","grand_parent":"Docker","_content":"\n[vvv](xxx)~~fsdfsdf~~```\ndfsdf`gfgdf`\n```\n\n![示例图片]({% include img.html name=\"微信图片_202210261942369c6902bf8d6d48de9cb9cb0dad21c88d.jpg\" %})\n","source":"_posts/tools/terminal/docker/ciphey/2025-01-31-xxx1.md","raw":"---\nlayout: default\ntitle: xxx1\nnav_order: 1738252800\ndescription: \"[vvv](xxx)~~fsdfsdf~~```dfsdf`gfgdf````\"\nhas_children: false\npermalink: \"/tools/terminal/docker/ciphey/2025-01-31-xxx1/\"\nparent: Ciphey\ngrand_parent: Docker\n---\n\n[vvv](xxx)~~fsdfsdf~~```\ndfsdf`gfgdf`\n```\n\n![示例图片]({% include img.html name=\"微信图片_202210261942369c6902bf8d6d48de9cb9cb0dad21c88d.jpg\" %})\n","slug":"tools/terminal/docker/ciphey/2025-01-31-xxx1","published":1,"date":"2025-02-23T07:43:31.767Z","updated":"2025-02-23T07:43:31.767Z","__permalink":"/tools/terminal/docker/ciphey/2025-01-31-xxx1/","comments":1,"photos":[],"_id":"cm7k5rwb40091mswsefqc185i","content":"<p><a href=\"xxx\">vvv</a><del>fsdfsdf</del>&#96;&#96;&#96;<br>dfsdf<code>gfgdf</code></p>\n<pre><code>\n![示例图片](&#123;% include img.html name=\"微信图片_202210261942369c6902bf8d6d48de9cb9cb0dad21c88d.jpg\" %&#125;)\n</code></pre>\n","excerpt":"","more":"<p><a href=\"xxx\">vvv</a><del>fsdfsdf</del>&#96;&#96;&#96;<br>dfsdf<code>gfgdf</code></p>\n<pre><code>\n![示例图片](&#123;% include img.html name=\"微信图片_202210261942369c6902bf8d6d48de9cb9cb0dad21c88d.jpg\" %&#125;)\n</code></pre>\n"},{"_content":"# sshuttle\n\n[github地址](https://github.com/sshuttle/sshuttle)\n\n```bash\n# 安装\nbrew install sshuttle\n\n# 配置本地mac免密\nsshuttle --sudoers-no-modify\n# 执行后会打印配置内容\n# 执行以下命令, 将配置内容写入到以下文件中\nvisudo /etc/sudoers.d/sshuttle_auto\n\n# 免密使用(fa为免密用户, 需指定)(配合ssh config使用)\n# PS: 貌似并没有免密\nsshuttle --sudoers-user fa -r jump.local.container2222-sshuttle.fa.intranet.company 10.0.1.0/24\n\n```\n\n```bash\n\n# 其他使用方式示例\nsshuttle -r root@10.0.1.90 --python $(which python3) 0.0.0.0/0\n\n# 成功命令(--python指定的是服务端的python命令, 在服务端安装了python3)\nsshuttle -r root@container2222.fa.intranet.company --python /usr/bin/python3 0.0.0.0/0\n# 简化版\nsshuttle -r container2222.fa.intranet.company 0.0.0.0/0\n\n# 通过内部mac服务器访问网络, mac中连接了其他公司内部VPN, 一下命令实现让本机也能访问受VPN限制的网络\nsshuttle -r mac.intranet.company 0.0.0.0/0\n# 可以指定代理的域名\nsshuttle -r mac.intranet.company baidu.com\n```\n\n## 高级操作(客户端零配置功能测试失败)\n\n### 一、服务器端配置（一次性操作）\n\n#### 1. 创建专用 VPN 用户\n\n```bash\nsudo useradd -r -s /usr/sbin/nologin vpn-tunnel  # 创建无登录权限的系统用户\nsudo mkdir -p /home/vpn-tunnel/.ssh\n```\n\n#### 2. 生成服务器专用密钥对\n\n```bash\n# 在服务器上生成密钥（仅需执行一次）\nsudo ssh-keygen -t ed25519 -f /etc/ssh/vpn-server-key -N \"\" -C \"vpn-server@company\"\n\n# 设置权限\nsudo chmod 600 /etc/ssh/vpn-server-key*\n```\n\n#### 3. 配置自动授权\n\n```bash\n# 将公钥设为 VPN 用户的唯一授权方式\nsudo cp /etc/ssh/vpn-server-key.pub /home/vpn-tunnel/.ssh/authorized_keys\nsudo chown -R vpn-tunnel:vpn-tunnel /home/vpn-tunnel/.ssh\n```\n\n#### 4. 加固 SSH 配置 (`/etc/ssh/sshd_config`)\n\n```bash\n# 限制 VPN 用户权限\nMatch User vpn-tunnel\n   AllowTcpForwarding no         # 禁用端口转发\n   PermitTunnel yes              # 允许创建隧道\n   ForceCommand /bin/false       # 禁止执行任何命令\n   AuthenticationMethods publickey\n   PermitRootLogin no\n   X11Forwarding no\n   AllowAgentForwarding no\n   IdentityFile /etc/ssh/vpn-server-key\n```\n\n#### 5. 应用配置\n\n```bash\n# 重启sshd\nsudo systemctl restart sshd\n# 如果没有上面的命令, 则使用下面的方案\n\n# 测试 sshd 配置文件的语法是否正确\n/usr/sbin/sshd -t\n# 发送 HUP 信号, 促使 sshd 进程重新加载配置。\n/usr/sbin/sshd -k HUP\n```\n\n### 二、客户端零配置连接方案\n\n#### 方案 B：证书认证（更安全，适合生产环境）\n\n```bash\n# 在服务器上生成 CA 证书\nsudo ssh-keygen -t ed25519 -f /etc/ssh/ca_key -N \"\"\n\n# 签署 VPN 用户证书（有效期 30 天）\nsudo ssh-keygen -s /etc/ssh/ca_key -I \"vpn-cert\" -n vpn-tunnel -V +30d /home/vpn-tunnel/.ssh/authorized_keys\n\n# 客户端只需信任 CA 公钥即可连接\n```\n","source":"_posts/tools/terminal/sshuttle/test/doc.md","raw":"# sshuttle\n\n[github地址](https://github.com/sshuttle/sshuttle)\n\n```bash\n# 安装\nbrew install sshuttle\n\n# 配置本地mac免密\nsshuttle --sudoers-no-modify\n# 执行后会打印配置内容\n# 执行以下命令, 将配置内容写入到以下文件中\nvisudo /etc/sudoers.d/sshuttle_auto\n\n# 免密使用(fa为免密用户, 需指定)(配合ssh config使用)\n# PS: 貌似并没有免密\nsshuttle --sudoers-user fa -r jump.local.container2222-sshuttle.fa.intranet.company 10.0.1.0/24\n\n```\n\n```bash\n\n# 其他使用方式示例\nsshuttle -r root@10.0.1.90 --python $(which python3) 0.0.0.0/0\n\n# 成功命令(--python指定的是服务端的python命令, 在服务端安装了python3)\nsshuttle -r root@container2222.fa.intranet.company --python /usr/bin/python3 0.0.0.0/0\n# 简化版\nsshuttle -r container2222.fa.intranet.company 0.0.0.0/0\n\n# 通过内部mac服务器访问网络, mac中连接了其他公司内部VPN, 一下命令实现让本机也能访问受VPN限制的网络\nsshuttle -r mac.intranet.company 0.0.0.0/0\n# 可以指定代理的域名\nsshuttle -r mac.intranet.company baidu.com\n```\n\n## 高级操作(客户端零配置功能测试失败)\n\n### 一、服务器端配置（一次性操作）\n\n#### 1. 创建专用 VPN 用户\n\n```bash\nsudo useradd -r -s /usr/sbin/nologin vpn-tunnel  # 创建无登录权限的系统用户\nsudo mkdir -p /home/vpn-tunnel/.ssh\n```\n\n#### 2. 生成服务器专用密钥对\n\n```bash\n# 在服务器上生成密钥（仅需执行一次）\nsudo ssh-keygen -t ed25519 -f /etc/ssh/vpn-server-key -N \"\" -C \"vpn-server@company\"\n\n# 设置权限\nsudo chmod 600 /etc/ssh/vpn-server-key*\n```\n\n#### 3. 配置自动授权\n\n```bash\n# 将公钥设为 VPN 用户的唯一授权方式\nsudo cp /etc/ssh/vpn-server-key.pub /home/vpn-tunnel/.ssh/authorized_keys\nsudo chown -R vpn-tunnel:vpn-tunnel /home/vpn-tunnel/.ssh\n```\n\n#### 4. 加固 SSH 配置 (`/etc/ssh/sshd_config`)\n\n```bash\n# 限制 VPN 用户权限\nMatch User vpn-tunnel\n   AllowTcpForwarding no         # 禁用端口转发\n   PermitTunnel yes              # 允许创建隧道\n   ForceCommand /bin/false       # 禁止执行任何命令\n   AuthenticationMethods publickey\n   PermitRootLogin no\n   X11Forwarding no\n   AllowAgentForwarding no\n   IdentityFile /etc/ssh/vpn-server-key\n```\n\n#### 5. 应用配置\n\n```bash\n# 重启sshd\nsudo systemctl restart sshd\n# 如果没有上面的命令, 则使用下面的方案\n\n# 测试 sshd 配置文件的语法是否正确\n/usr/sbin/sshd -t\n# 发送 HUP 信号, 促使 sshd 进程重新加载配置。\n/usr/sbin/sshd -k HUP\n```\n\n### 二、客户端零配置连接方案\n\n#### 方案 B：证书认证（更安全，适合生产环境）\n\n```bash\n# 在服务器上生成 CA 证书\nsudo ssh-keygen -t ed25519 -f /etc/ssh/ca_key -N \"\"\n\n# 签署 VPN 用户证书（有效期 30 天）\nsudo ssh-keygen -s /etc/ssh/ca_key -I \"vpn-cert\" -n vpn-tunnel -V +30d /home/vpn-tunnel/.ssh/authorized_keys\n\n# 客户端只需信任 CA 公钥即可连接\n```\n","slug":"tools/terminal/sshuttle/test/doc","published":1,"date":"2025-02-23T07:43:31.772Z","updated":"2025-02-23T07:43:31.772Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm7k5rwb40092mswsar7060dw","content":"<h1 id=\"sshuttle\"><a href=\"#sshuttle\" class=\"headerlink\" title=\"sshuttle\"></a>sshuttle</h1><p><a href=\"https://github.com/sshuttle/sshuttle\">github地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">brew install sshuttle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置本地mac免密</span></span><br><span class=\"line\">sshuttle --sudoers-no-modify</span><br><span class=\"line\"><span class=\"comment\"># 执行后会打印配置内容</span></span><br><span class=\"line\"><span class=\"comment\"># 执行以下命令, 将配置内容写入到以下文件中</span></span><br><span class=\"line\">visudo /etc/sudoers.d/sshuttle_auto</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 免密使用(fa为免密用户, 需指定)(配合ssh config使用)</span></span><br><span class=\"line\"><span class=\"comment\"># PS: 貌似并没有免密</span></span><br><span class=\"line\">sshuttle --sudoers-user fa -r jump.local.container2222-sshuttle.fa.intranet.company 10.0.1.0/24</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其他使用方式示例</span></span><br><span class=\"line\">sshuttle -r root@10.0.1.90 --python $(<span class=\"built_in\">which</span> python3) 0.0.0.0/0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 成功命令(--python指定的是服务端的python命令, 在服务端安装了python3)</span></span><br><span class=\"line\">sshuttle -r root@container2222.fa.intranet.company --python /usr/bin/python3 0.0.0.0/0</span><br><span class=\"line\"><span class=\"comment\"># 简化版</span></span><br><span class=\"line\">sshuttle -r container2222.fa.intranet.company 0.0.0.0/0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过内部mac服务器访问网络, mac中连接了其他公司内部VPN, 一下命令实现让本机也能访问受VPN限制的网络</span></span><br><span class=\"line\">sshuttle -r mac.intranet.company 0.0.0.0/0</span><br><span class=\"line\"><span class=\"comment\"># 可以指定代理的域名</span></span><br><span class=\"line\">sshuttle -r mac.intranet.company baidu.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级操作-客户端零配置功能测试失败\"><a href=\"#高级操作-客户端零配置功能测试失败\" class=\"headerlink\" title=\"高级操作(客户端零配置功能测试失败)\"></a>高级操作(客户端零配置功能测试失败)</h2><h3 id=\"一、服务器端配置（一次性操作）\"><a href=\"#一、服务器端配置（一次性操作）\" class=\"headerlink\" title=\"一、服务器端配置（一次性操作）\"></a>一、服务器端配置（一次性操作）</h3><h4 id=\"1-创建专用-VPN-用户\"><a href=\"#1-创建专用-VPN-用户\" class=\"headerlink\" title=\"1. 创建专用 VPN 用户\"></a>1. 创建专用 VPN 用户</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> useradd -r -s /usr/sbin/nologin vpn-tunnel  <span class=\"comment\"># 创建无登录权限的系统用户</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> -p /home/vpn-tunnel/.ssh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-生成服务器专用密钥对\"><a href=\"#2-生成服务器专用密钥对\" class=\"headerlink\" title=\"2. 生成服务器专用密钥对\"></a>2. 生成服务器专用密钥对</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在服务器上生成密钥（仅需执行一次）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -t ed25519 -f /etc/ssh/vpn-server-key -N <span class=\"string\">&quot;&quot;</span> -C <span class=\"string\">&quot;vpn-server@company&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置权限</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> 600 /etc/ssh/vpn-server-key*</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-配置自动授权\"><a href=\"#3-配置自动授权\" class=\"headerlink\" title=\"3. 配置自动授权\"></a>3. 配置自动授权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将公钥设为 VPN 用户的唯一授权方式</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> /etc/ssh/vpn-server-key.pub /home/vpn-tunnel/.ssh/authorized_keys</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R vpn-tunnel:vpn-tunnel /home/vpn-tunnel/.ssh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-加固-SSH-配置-etc-ssh-sshd-config\"><a href=\"#4-加固-SSH-配置-etc-ssh-sshd-config\" class=\"headerlink\" title=\"4. 加固 SSH 配置 (/etc/ssh/sshd_config)\"></a>4. 加固 SSH 配置 (<code>/etc/ssh/sshd_config</code>)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 限制 VPN 用户权限</span></span><br><span class=\"line\">Match User vpn-tunnel</span><br><span class=\"line\">   AllowTcpForwarding no         <span class=\"comment\"># 禁用端口转发</span></span><br><span class=\"line\">   PermitTunnel <span class=\"built_in\">yes</span>              <span class=\"comment\"># 允许创建隧道</span></span><br><span class=\"line\">   ForceCommand /bin/false       <span class=\"comment\"># 禁止执行任何命令</span></span><br><span class=\"line\">   AuthenticationMethods publickey</span><br><span class=\"line\">   PermitRootLogin no</span><br><span class=\"line\">   X11Forwarding no</span><br><span class=\"line\">   AllowAgentForwarding no</span><br><span class=\"line\">   IdentityFile /etc/ssh/vpn-server-key</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-应用配置\"><a href=\"#5-应用配置\" class=\"headerlink\" title=\"5. 应用配置\"></a>5. 应用配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启sshd</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart sshd</span><br><span class=\"line\"><span class=\"comment\"># 如果没有上面的命令, 则使用下面的方案</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试 sshd 配置文件的语法是否正确</span></span><br><span class=\"line\">/usr/sbin/sshd -t</span><br><span class=\"line\"><span class=\"comment\"># 发送 HUP 信号, 促使 sshd 进程重新加载配置。</span></span><br><span class=\"line\">/usr/sbin/sshd -k HUP</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、客户端零配置连接方案\"><a href=\"#二、客户端零配置连接方案\" class=\"headerlink\" title=\"二、客户端零配置连接方案\"></a>二、客户端零配置连接方案</h3><h4 id=\"方案-B：证书认证（更安全，适合生产环境）\"><a href=\"#方案-B：证书认证（更安全，适合生产环境）\" class=\"headerlink\" title=\"方案 B：证书认证（更安全，适合生产环境）\"></a>方案 B：证书认证（更安全，适合生产环境）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在服务器上生成 CA 证书</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -t ed25519 -f /etc/ssh/ca_key -N <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 签署 VPN 用户证书（有效期 30 天）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -s /etc/ssh/ca_key -I <span class=\"string\">&quot;vpn-cert&quot;</span> -n vpn-tunnel -V +30d /home/vpn-tunnel/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端只需信任 CA 公钥即可连接</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"sshuttle\"><a href=\"#sshuttle\" class=\"headerlink\" title=\"sshuttle\"></a>sshuttle</h1><p><a href=\"https://github.com/sshuttle/sshuttle\">github地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">brew install sshuttle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置本地mac免密</span></span><br><span class=\"line\">sshuttle --sudoers-no-modify</span><br><span class=\"line\"><span class=\"comment\"># 执行后会打印配置内容</span></span><br><span class=\"line\"><span class=\"comment\"># 执行以下命令, 将配置内容写入到以下文件中</span></span><br><span class=\"line\">visudo /etc/sudoers.d/sshuttle_auto</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 免密使用(fa为免密用户, 需指定)(配合ssh config使用)</span></span><br><span class=\"line\"><span class=\"comment\"># PS: 貌似并没有免密</span></span><br><span class=\"line\">sshuttle --sudoers-user fa -r jump.local.container2222-sshuttle.fa.intranet.company 10.0.1.0/24</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其他使用方式示例</span></span><br><span class=\"line\">sshuttle -r root@10.0.1.90 --python $(<span class=\"built_in\">which</span> python3) 0.0.0.0/0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 成功命令(--python指定的是服务端的python命令, 在服务端安装了python3)</span></span><br><span class=\"line\">sshuttle -r root@container2222.fa.intranet.company --python /usr/bin/python3 0.0.0.0/0</span><br><span class=\"line\"><span class=\"comment\"># 简化版</span></span><br><span class=\"line\">sshuttle -r container2222.fa.intranet.company 0.0.0.0/0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过内部mac服务器访问网络, mac中连接了其他公司内部VPN, 一下命令实现让本机也能访问受VPN限制的网络</span></span><br><span class=\"line\">sshuttle -r mac.intranet.company 0.0.0.0/0</span><br><span class=\"line\"><span class=\"comment\"># 可以指定代理的域名</span></span><br><span class=\"line\">sshuttle -r mac.intranet.company baidu.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级操作-客户端零配置功能测试失败\"><a href=\"#高级操作-客户端零配置功能测试失败\" class=\"headerlink\" title=\"高级操作(客户端零配置功能测试失败)\"></a>高级操作(客户端零配置功能测试失败)</h2><h3 id=\"一、服务器端配置（一次性操作）\"><a href=\"#一、服务器端配置（一次性操作）\" class=\"headerlink\" title=\"一、服务器端配置（一次性操作）\"></a>一、服务器端配置（一次性操作）</h3><h4 id=\"1-创建专用-VPN-用户\"><a href=\"#1-创建专用-VPN-用户\" class=\"headerlink\" title=\"1. 创建专用 VPN 用户\"></a>1. 创建专用 VPN 用户</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> useradd -r -s /usr/sbin/nologin vpn-tunnel  <span class=\"comment\"># 创建无登录权限的系统用户</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> -p /home/vpn-tunnel/.ssh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-生成服务器专用密钥对\"><a href=\"#2-生成服务器专用密钥对\" class=\"headerlink\" title=\"2. 生成服务器专用密钥对\"></a>2. 生成服务器专用密钥对</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在服务器上生成密钥（仅需执行一次）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -t ed25519 -f /etc/ssh/vpn-server-key -N <span class=\"string\">&quot;&quot;</span> -C <span class=\"string\">&quot;vpn-server@company&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置权限</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> 600 /etc/ssh/vpn-server-key*</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-配置自动授权\"><a href=\"#3-配置自动授权\" class=\"headerlink\" title=\"3. 配置自动授权\"></a>3. 配置自动授权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将公钥设为 VPN 用户的唯一授权方式</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> /etc/ssh/vpn-server-key.pub /home/vpn-tunnel/.ssh/authorized_keys</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R vpn-tunnel:vpn-tunnel /home/vpn-tunnel/.ssh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-加固-SSH-配置-etc-ssh-sshd-config\"><a href=\"#4-加固-SSH-配置-etc-ssh-sshd-config\" class=\"headerlink\" title=\"4. 加固 SSH 配置 (/etc/ssh/sshd_config)\"></a>4. 加固 SSH 配置 (<code>/etc/ssh/sshd_config</code>)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 限制 VPN 用户权限</span></span><br><span class=\"line\">Match User vpn-tunnel</span><br><span class=\"line\">   AllowTcpForwarding no         <span class=\"comment\"># 禁用端口转发</span></span><br><span class=\"line\">   PermitTunnel <span class=\"built_in\">yes</span>              <span class=\"comment\"># 允许创建隧道</span></span><br><span class=\"line\">   ForceCommand /bin/false       <span class=\"comment\"># 禁止执行任何命令</span></span><br><span class=\"line\">   AuthenticationMethods publickey</span><br><span class=\"line\">   PermitRootLogin no</span><br><span class=\"line\">   X11Forwarding no</span><br><span class=\"line\">   AllowAgentForwarding no</span><br><span class=\"line\">   IdentityFile /etc/ssh/vpn-server-key</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-应用配置\"><a href=\"#5-应用配置\" class=\"headerlink\" title=\"5. 应用配置\"></a>5. 应用配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启sshd</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart sshd</span><br><span class=\"line\"><span class=\"comment\"># 如果没有上面的命令, 则使用下面的方案</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试 sshd 配置文件的语法是否正确</span></span><br><span class=\"line\">/usr/sbin/sshd -t</span><br><span class=\"line\"><span class=\"comment\"># 发送 HUP 信号, 促使 sshd 进程重新加载配置。</span></span><br><span class=\"line\">/usr/sbin/sshd -k HUP</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、客户端零配置连接方案\"><a href=\"#二、客户端零配置连接方案\" class=\"headerlink\" title=\"二、客户端零配置连接方案\"></a>二、客户端零配置连接方案</h3><h4 id=\"方案-B：证书认证（更安全，适合生产环境）\"><a href=\"#方案-B：证书认证（更安全，适合生产环境）\" class=\"headerlink\" title=\"方案 B：证书认证（更安全，适合生产环境）\"></a>方案 B：证书认证（更安全，适合生产环境）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在服务器上生成 CA 证书</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -t ed25519 -f /etc/ssh/ca_key -N <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 签署 VPN 用户证书（有效期 30 天）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ssh-keygen -s /etc/ssh/ca_key -I <span class=\"string\">&quot;vpn-cert&quot;</span> -n vpn-tunnel -V +30d /home/vpn-tunnel/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端只需信任 CA 公钥即可连接</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":15,"description":"postgresql数据库相关文档","parent":"Postgresql","has_children":false,"grand_parent":"Data","_content":"\n# postgresql数据库相关文档\n\n## 部署\n\n- [参考文章](http://t.csdn.cn/awC63)\n- 使用的容器为[bitnami/postgresql:latest]\n\n```shell\n# 创建目录\nmkdir -p /www/gfs-share/postgresql/data/ /www/gfs-share/postgresql/conf/\n# 调整目录权限\nsudo chown 1001:1001 /www/gfs-share/postgresql/data/\nsudo chown 1001:1001 /www/gfs-share/postgresql/conf/\n\n# 启动容器\ndocker stack up -c postgresql.yml data\n\n```\n\n- 后期配置\n\n```shell\n# 默认配置文件`/www/gfs-share/postgresql/conf/postgresql.conf`\n# 创建自定义配置文件`/www/gfs-share/postgresql/conf/conf.d/custom.conf`\n# 最大连接数，默认是100\nmax_connections = 10000\n\n# 查看最大连接数\nshow max_connections;\n```\n\n## 备份数据\n\n```bash\ndocker exec -it fc870c5cd426 pg_dump --dbname=iuin --create --clean --if-exists --user aaa\n# pg_dump -h your_host -p your_port -U your_username -d your_database -f dump.sql\n\nexport containerId=xxx host=localhost port=5432 username=postgres password=root database=xxx\necho \"$password\" | docker exec -i $containerId pg_dump -h $host -p $port -U $username -d $database -f $database.sql\necho \"$password\" | docker exec -i $containerId pg_dump -h $host -p $port -U $username -d $database > ./backup/$database.sql\n\n````\n","source":"_posts/docker/app/devs/data/PostgreSQL/PostgreSQL.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: postgresql数据库相关文档\nparent: Postgresql\nhas_children: false\npermalink: \"/docker/app/devs/data/postgresql/postgresql/\"\ngrand_parent: Data\n---\n\n# postgresql数据库相关文档\n\n## 部署\n\n- [参考文章](http://t.csdn.cn/awC63)\n- 使用的容器为[bitnami/postgresql:latest]\n\n```shell\n# 创建目录\nmkdir -p /www/gfs-share/postgresql/data/ /www/gfs-share/postgresql/conf/\n# 调整目录权限\nsudo chown 1001:1001 /www/gfs-share/postgresql/data/\nsudo chown 1001:1001 /www/gfs-share/postgresql/conf/\n\n# 启动容器\ndocker stack up -c postgresql.yml data\n\n```\n\n- 后期配置\n\n```shell\n# 默认配置文件`/www/gfs-share/postgresql/conf/postgresql.conf`\n# 创建自定义配置文件`/www/gfs-share/postgresql/conf/conf.d/custom.conf`\n# 最大连接数，默认是100\nmax_connections = 10000\n\n# 查看最大连接数\nshow max_connections;\n```\n\n## 备份数据\n\n```bash\ndocker exec -it fc870c5cd426 pg_dump --dbname=iuin --create --clean --if-exists --user aaa\n# pg_dump -h your_host -p your_port -U your_username -d your_database -f dump.sql\n\nexport containerId=xxx host=localhost port=5432 username=postgres password=root database=xxx\necho \"$password\" | docker exec -i $containerId pg_dump -h $host -p $port -U $username -d $database -f $database.sql\necho \"$password\" | docker exec -i $containerId pg_dump -h $host -p $port -U $username -d $database > ./backup/$database.sql\n\n````\n","slug":"docker/app/devs/data/PostgreSQL/PostgreSQL","published":1,"date":"2025-02-23T07:43:31.022Z","updated":"2025-02-23T07:43:31.022Z","__permalink":"/docker/app/devs/data/postgresql/postgresql/","comments":1,"photos":[],"_id":"cm7k5rwb50093msws2fovanl5","content":"<h1 id=\"postgresql数据库相关文档\"><a href=\"#postgresql数据库相关文档\" class=\"headerlink\" title=\"postgresql数据库相关文档\"></a>postgresql数据库相关文档</h1><h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ul>\n<li><a href=\"http://t.csdn.cn/awC63\">参考文章</a></li>\n<li>使用的容器为[bitnami&#x2F;postgresql:latest]</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建目录</span></span><br><span class=\"line\">mkdir -p /www/gfs-share/postgresql/data/ /www/gfs-share/postgresql/conf/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整目录权限</span></span><br><span class=\"line\">sudo chown 1001:1001 /www/gfs-share/postgresql/data/</span><br><span class=\"line\">sudo chown 1001:1001 /www/gfs-share/postgresql/conf/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动容器</span></span><br><span class=\"line\">docker stack up -c postgresql.yml data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>后期配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认配置文件`/www/gfs-share/postgresql/conf/postgresql.conf`</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建自定义配置文件`/www/gfs-share/postgresql/conf/conf.d/custom.conf`</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">最大连接数，默认是100</span></span><br><span class=\"line\">max_connections = 10000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看最大连接数</span></span><br><span class=\"line\">show max_connections;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备份数据\"><a href=\"#备份数据\" class=\"headerlink\" title=\"备份数据\"></a>备份数据</h2><pre><code class=\"bash\">docker exec -it fc870c5cd426 pg_dump --dbname=iuin --create --clean --if-exists --user aaa\n# pg_dump -h your_host -p your_port -U your_username -d your_database -f dump.sql\n\nexport containerId=xxx host=localhost port=5432 username=postgres password=root database=xxx\necho &quot;$password&quot; | docker exec -i $containerId pg_dump -h $host -p $port -U $username -d $database -f $database.sql\necho &quot;$password&quot; | docker exec -i $containerId pg_dump -h $host -p $port -U $username -d $database &gt; ./backup/$database.sql\n</code></pre>\n","excerpt":"","more":"<h1 id=\"postgresql数据库相关文档\"><a href=\"#postgresql数据库相关文档\" class=\"headerlink\" title=\"postgresql数据库相关文档\"></a>postgresql数据库相关文档</h1><h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ul>\n<li><a href=\"http://t.csdn.cn/awC63\">参考文章</a></li>\n<li>使用的容器为[bitnami&#x2F;postgresql:latest]</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建目录</span></span><br><span class=\"line\">mkdir -p /www/gfs-share/postgresql/data/ /www/gfs-share/postgresql/conf/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整目录权限</span></span><br><span class=\"line\">sudo chown 1001:1001 /www/gfs-share/postgresql/data/</span><br><span class=\"line\">sudo chown 1001:1001 /www/gfs-share/postgresql/conf/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动容器</span></span><br><span class=\"line\">docker stack up -c postgresql.yml data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>后期配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认配置文件`/www/gfs-share/postgresql/conf/postgresql.conf`</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建自定义配置文件`/www/gfs-share/postgresql/conf/conf.d/custom.conf`</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">最大连接数，默认是100</span></span><br><span class=\"line\">max_connections = 10000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看最大连接数</span></span><br><span class=\"line\">show max_connections;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备份数据\"><a href=\"#备份数据\" class=\"headerlink\" title=\"备份数据\"></a>备份数据</h2><pre><code class=\"bash\">docker exec -it fc870c5cd426 pg_dump --dbname=iuin --create --clean --if-exists --user aaa\n# pg_dump -h your_host -p your_port -U your_username -d your_database -f dump.sql\n\nexport containerId=xxx host=localhost port=5432 username=postgres password=root database=xxx\necho &quot;$password&quot; | docker exec -i $containerId pg_dump -h $host -p $port -U $username -d $database -f $database.sql\necho &quot;$password&quot; | docker exec -i $containerId pg_dump -h $host -p $port -U $username -d $database &gt; ./backup/$database.sql\n</code></pre>\n"},{"layout":"default","title":"Postgresql","nav_order":5,"has_children":true,"parent":"Postgresql","_content":"\n# Postgresql\n","source":"_posts/docker/app/devs/data/PostgreSQL/index.md","raw":"---\nlayout: default\ntitle: Postgresql\nnav_order: 5\nhas_children: true\nparent: Postgresql\npermalink: \"/docker/app/devs/data/postgresql/\"\n---\n\n# Postgresql\n","slug":"docker/app/devs/data/PostgreSQL/index","published":1,"date":"2025-02-23T07:43:31.021Z","updated":"2025-02-23T07:43:31.022Z","__permalink":"/docker/app/devs/data/postgresql/","comments":1,"photos":[],"_id":"cm7k5rwb50094mswsca7dawcj","content":"<h1 id=\"Postgresql\"><a href=\"#Postgresql\" class=\"headerlink\" title=\"Postgresql\"></a>Postgresql</h1>","excerpt":"","more":"<h1 id=\"Postgresql\"><a href=\"#Postgresql\" class=\"headerlink\" title=\"Postgresql\"></a>Postgresql</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"TiDB部署记录","parent":"Tidb","has_children":false,"grand_parent":"Data","_content":"\n# TiDB部署记录\n\n## 启动命令\n\n```shell\ndocker swarm init # if your docker daemon is not already part of a swarm\nmkdir -p data logs\ndocker stack deploy tidb -c docker-swarm.yml\nmysql -h 127.0.0.1 -P 4000 -u root\n```\n\n## 参考资料\n\n- [tidb-docker-compose官方部署配置](https://github.com/pingcap/tidb-docker-compose)\n  \n","source":"_posts/docker/app/devs/data/TiDB/TiDB.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: TiDB部署记录\nparent: Tidb\nhas_children: false\npermalink: \"/docker/app/devs/data/tidb/tidb/\"\ngrand_parent: Data\n---\n\n# TiDB部署记录\n\n## 启动命令\n\n```shell\ndocker swarm init # if your docker daemon is not already part of a swarm\nmkdir -p data logs\ndocker stack deploy tidb -c docker-swarm.yml\nmysql -h 127.0.0.1 -P 4000 -u root\n```\n\n## 参考资料\n\n- [tidb-docker-compose官方部署配置](https://github.com/pingcap/tidb-docker-compose)\n  \n","slug":"docker/app/devs/data/TiDB/TiDB","published":1,"date":"2025-02-23T07:43:31.054Z","updated":"2025-02-23T07:43:31.054Z","__permalink":"/docker/app/devs/data/tidb/tidb/","comments":1,"photos":[],"_id":"cm7k5rwb50095msws5l5k89s0","content":"<h1 id=\"TiDB部署记录\"><a href=\"#TiDB部署记录\" class=\"headerlink\" title=\"TiDB部署记录\"></a>TiDB部署记录</h1><h2 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm init # if your docker daemon is not already part of a swarm</span><br><span class=\"line\">mkdir -p data logs</span><br><span class=\"line\">docker stack deploy tidb -c docker-swarm.yml</span><br><span class=\"line\">mysql -h 127.0.0.1 -P 4000 -u root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/pingcap/tidb-docker-compose\">tidb-docker-compose官方部署配置</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"TiDB部署记录\"><a href=\"#TiDB部署记录\" class=\"headerlink\" title=\"TiDB部署记录\"></a>TiDB部署记录</h1><h2 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm init # if your docker daemon is not already part of a swarm</span><br><span class=\"line\">mkdir -p data logs</span><br><span class=\"line\">docker stack deploy tidb -c docker-swarm.yml</span><br><span class=\"line\">mysql -h 127.0.0.1 -P 4000 -u root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/pingcap/tidb-docker-compose\">tidb-docker-compose官方部署配置</a></li>\n</ul>\n"},{"layout":"default","title":"Elasticsearch","nav_order":5,"has_children":true,"parent":"Elasticsearch","_content":"\n# Elasticsearch\n","source":"_posts/docker/app/devs/data/elasticsearch/index.md","raw":"---\nlayout: default\ntitle: Elasticsearch\nnav_order: 5\nhas_children: true\nparent: Elasticsearch\npermalink: \"/docker/app/devs/data/elasticsearch/\"\n---\n\n# Elasticsearch\n","slug":"docker/app/devs/data/elasticsearch/index","published":1,"date":"2025-02-23T07:43:31.070Z","updated":"2025-02-23T07:43:31.070Z","__permalink":"/docker/app/devs/data/elasticsearch/","comments":1,"photos":[],"_id":"cm7k5rwb70096msws7dq17h7v","content":"<h1 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h1>","excerpt":"","more":"<h1 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h1>"},{"layout":"default","title":"Tidb","nav_order":5,"has_children":true,"parent":"Tidb","_content":"\n# Tidb\n","source":"_posts/docker/app/devs/data/TiDB/index.md","raw":"---\nlayout: default\ntitle: Tidb\nnav_order: 5\nhas_children: true\nparent: Tidb\npermalink: \"/docker/app/devs/data/tidb/\"\n---\n\n# Tidb\n","slug":"docker/app/devs/data/TiDB/index","published":1,"date":"2025-02-23T07:43:31.055Z","updated":"2025-02-23T07:43:31.055Z","__permalink":"/docker/app/devs/data/tidb/","comments":1,"photos":[],"_id":"cm7k5rwb70097msws683ydjr4","content":"<h1 id=\"Tidb\"><a href=\"#Tidb\" class=\"headerlink\" title=\"Tidb\"></a>Tidb</h1>","excerpt":"","more":"<h1 id=\"Tidb\"><a href=\"#Tidb\" class=\"headerlink\" title=\"Tidb\"></a>Tidb</h1>"},{"layout":"default","title":"Mysql","nav_order":5,"has_children":true,"parent":"Mysql","_content":"\n# Mysql\n","source":"_posts/docker/app/devs/data/mysql/index.md","raw":"---\nlayout: default\ntitle: Mysql\nnav_order: 5\nhas_children: true\nparent: Mysql\npermalink: \"/docker/app/devs/data/mysql/\"\n---\n\n# Mysql\n","slug":"docker/app/devs/data/mysql/index","published":1,"date":"2025-02-23T07:43:31.058Z","updated":"2025-02-23T07:43:31.058Z","__permalink":"/docker/app/devs/data/mysql/","comments":1,"photos":[],"_id":"cm7k5rwb70098msws2hj1bf9t","content":"<h1 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h1>","excerpt":"","more":"<h1 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h1>"},{"layout":"default","title":"Hadoop","nav_order":5,"has_children":true,"parent":"Hadoop","_content":"\n# Hadoop\n","source":"_posts/docker/app/devs/data/hadoop/index.md","raw":"---\nlayout: default\ntitle: Hadoop\nnav_order: 5\nhas_children: true\nparent: Hadoop\npermalink: \"/docker/app/devs/data/hadoop/\"\n---\n\n# Hadoop\n","slug":"docker/app/devs/data/hadoop/index","published":1,"date":"2025-02-23T07:43:31.056Z","updated":"2025-02-23T07:43:31.056Z","__permalink":"/docker/app/devs/data/hadoop/","comments":1,"photos":[],"_id":"cm7k5rwb70099msws70aa7cd0","content":"<h1 id=\"Hadoop\"><a href=\"#Hadoop\" class=\"headerlink\" title=\"Hadoop\"></a>Hadoop</h1>","excerpt":"","more":"<h1 id=\"Hadoop\"><a href=\"#Hadoop\" class=\"headerlink\" title=\"Hadoop\"></a>Hadoop</h1>"},{"layout":"default","title":"Docker Registry","nav_order":5,"has_children":true,"parent":"Docker Registry","_content":"\n# Docker Registry\n","source":"_posts/docker/app/devs/data/docker_registry/index.md","raw":"---\nlayout: default\ntitle: Docker Registry\nnav_order: 5\nhas_children: true\nparent: Docker Registry\npermalink: \"/docker/app/devs/data/docker_registry/\"\n---\n\n# Docker Registry\n","slug":"docker/app/devs/data/docker_registry/index","published":1,"date":"2025-02-23T07:43:31.019Z","updated":"2025-02-23T07:43:31.019Z","__permalink":"/docker/app/devs/data/docker_registry/","comments":1,"photos":[],"_id":"cm7k5rwb7009amswsa4xhd3ll","content":"<h1 id=\"Docker-Registry\"><a href=\"#Docker-Registry\" class=\"headerlink\" title=\"Docker Registry\"></a>Docker Registry</h1>","excerpt":"","more":"<h1 id=\"Docker-Registry\"><a href=\"#Docker-Registry\" class=\"headerlink\" title=\"Docker Registry\"></a>Docker Registry</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"文档说明","parent":"Nas","has_children":false,"grand_parent":"Data","_content":"\n# 文档说明\n\n## [参考文章](https://post.smzdm.com/p/alpompze/)\n\n## [参考作者](https://zhiyou.smzdm.com/member/9424085625/)\n\n---\n\n## 问题\n\n### General error: 4047 InnoDB refuses to write tables with ROW_FORMAT=COMPRESSED or KEY_BLOCK_SIZE.\n\n- [参考文章](https://bbs.archlinux.org/viewtopic.php?id=268127)\n\n## nextCloud.yml文件相关说明\n\n```shell\n# 磁盘空间不够用的话，可以对某个目录进行挂载到移动硬盘之类的地方去，使用命令: mount\n```\n","source":"_posts/docker/app/devs/data/nas/nas.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: 文档说明\nparent: Nas\nhas_children: false\npermalink: \"/docker/app/devs/data/nas/nas/\"\ngrand_parent: Data\n---\n\n# 文档说明\n\n## [参考文章](https://post.smzdm.com/p/alpompze/)\n\n## [参考作者](https://zhiyou.smzdm.com/member/9424085625/)\n\n---\n\n## 问题\n\n### General error: 4047 InnoDB refuses to write tables with ROW_FORMAT=COMPRESSED or KEY_BLOCK_SIZE.\n\n- [参考文章](https://bbs.archlinux.org/viewtopic.php?id=268127)\n\n## nextCloud.yml文件相关说明\n\n```shell\n# 磁盘空间不够用的话，可以对某个目录进行挂载到移动硬盘之类的地方去，使用命令: mount\n```\n","slug":"docker/app/devs/data/nas/nas","published":1,"date":"2025-02-23T07:43:31.041Z","updated":"2025-02-23T07:43:31.041Z","__permalink":"/docker/app/devs/data/nas/nas/","comments":1,"photos":[],"_id":"cm7k5rwb8009bmswsdaae1dg8","content":"<h1 id=\"文档说明\"><a href=\"#文档说明\" class=\"headerlink\" title=\"文档说明\"></a>文档说明</h1><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a><a href=\"https://post.smzdm.com/p/alpompze/\">参考文章</a></h2><h2 id=\"参考作者\"><a href=\"#参考作者\" class=\"headerlink\" title=\"参考作者\"></a><a href=\"https://zhiyou.smzdm.com/member/9424085625/\">参考作者</a></h2><hr>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"General-error-4047-InnoDB-refuses-to-write-tables-with-ROW-FORMAT-x3D-COMPRESSED-or-KEY-BLOCK-SIZE\"><a href=\"#General-error-4047-InnoDB-refuses-to-write-tables-with-ROW-FORMAT-x3D-COMPRESSED-or-KEY-BLOCK-SIZE\" class=\"headerlink\" title=\"General error: 4047 InnoDB refuses to write tables with ROW_FORMAT&#x3D;COMPRESSED or KEY_BLOCK_SIZE.\"></a>General error: 4047 InnoDB refuses to write tables with ROW_FORMAT&#x3D;COMPRESSED or KEY_BLOCK_SIZE.</h3><ul>\n<li><a href=\"https://bbs.archlinux.org/viewtopic.php?id=268127\">参考文章</a></li>\n</ul>\n<h2 id=\"nextCloud-yml文件相关说明\"><a href=\"#nextCloud-yml文件相关说明\" class=\"headerlink\" title=\"nextCloud.yml文件相关说明\"></a>nextCloud.yml文件相关说明</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">磁盘空间不够用的话，可以对某个目录进行挂载到移动硬盘之类的地方去，使用命令: mount</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"文档说明\"><a href=\"#文档说明\" class=\"headerlink\" title=\"文档说明\"></a>文档说明</h1><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a><a href=\"https://post.smzdm.com/p/alpompze/\">参考文章</a></h2><h2 id=\"参考作者\"><a href=\"#参考作者\" class=\"headerlink\" title=\"参考作者\"></a><a href=\"https://zhiyou.smzdm.com/member/9424085625/\">参考作者</a></h2><hr>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"General-error-4047-InnoDB-refuses-to-write-tables-with-ROW-FORMAT-x3D-COMPRESSED-or-KEY-BLOCK-SIZE\"><a href=\"#General-error-4047-InnoDB-refuses-to-write-tables-with-ROW-FORMAT-x3D-COMPRESSED-or-KEY-BLOCK-SIZE\" class=\"headerlink\" title=\"General error: 4047 InnoDB refuses to write tables with ROW_FORMAT&#x3D;COMPRESSED or KEY_BLOCK_SIZE.\"></a>General error: 4047 InnoDB refuses to write tables with ROW_FORMAT&#x3D;COMPRESSED or KEY_BLOCK_SIZE.</h3><ul>\n<li><a href=\"https://bbs.archlinux.org/viewtopic.php?id=268127\">参考文章</a></li>\n</ul>\n<h2 id=\"nextCloud-yml文件相关说明\"><a href=\"#nextCloud-yml文件相关说明\" class=\"headerlink\" title=\"nextCloud.yml文件相关说明\"></a>nextCloud.yml文件相关说明</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">磁盘空间不够用的话，可以对某个目录进行挂载到移动硬盘之类的地方去，使用命令: mount</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Nas","nav_order":5,"has_children":true,"parent":"Nas","_content":"\n# Nas\n","source":"_posts/docker/app/devs/data/nas/index.md","raw":"---\nlayout: default\ntitle: Nas\nnav_order: 5\nhas_children: true\nparent: Nas\npermalink: \"/docker/app/devs/data/nas/\"\n---\n\n# Nas\n","slug":"docker/app/devs/data/nas/index","published":1,"date":"2025-02-23T07:43:31.041Z","updated":"2025-02-23T07:43:31.042Z","__permalink":"/docker/app/devs/data/nas/","comments":1,"photos":[],"_id":"cm7k5rwb8009cmsws8sdd5r91","content":"<h1 id=\"Nas\"><a href=\"#Nas\" class=\"headerlink\" title=\"Nas\"></a>Nas</h1>","excerpt":"","more":"<h1 id=\"Nas\"><a href=\"#Nas\" class=\"headerlink\" title=\"Nas\"></a>Nas</h1>"},{"layout":"default","title":"samba","nav_order":15,"parent":"Nas","has_children":false,"grand_parent":"Data","_content":"\n```shell\ndocker run -it \\\n--name samba_docker \\  #为新的容器命一个名，方便启动、停止、删除等操作，毕竟一长串字符不好输入\n-p 139:139 \\           #将主机的139端口映射到samba_docker这个容器的139端口上\n-p 445:445 \\           #将主机的445端口映射到samba_docker这个容器的445端口上\n-v /home/shares/shareA:/home/shares/shareA \\  # 将主机上的共享目录向容器进行映射\n-d dperson/samba \\     #以dperson/samba这个dockers镜像为模板，建立容器\n-w \"WORKGROUP\" \\       #从这里开始是dperson/samba 的参数，上面是docker run 的参数。这里指定了工作组\n-u \"userA;123456789\" \\ #为samba服务设置账户和密码\n-s \"shareA;/home/shares/shareA;yes;no;no;userA;userA;userA\"\n \n最后一行以分号为间隔，分别是：\n共享文件夹的名称；共享在samba容器中的路径；共享名称对所有工作组用户可见；不是只读（也就是说可写）；不允许guest用户；指定共享的所有权用户；指定共享的超级用户；指定具有写权限的用户；\n \n至于在共享文件夹中所创建的文件、文件夹的权限，通过：\ndocker exec -it 4ae45cd4f491 /bin/bash\n用vi 修改容器内的samba的配置文档 /etc/samba/smb.conf 即可。\n```\n```shell\ndocker run -it --name samba_docker -p 139:139 -p 445:445 -v /home/shares/share:/home/shares/share -d dperson/samba -w \"WORKGROUP\" -u \"user;pwd\" -s \"share;/home/shares/share;yes;no;no;user;user;user\"\n\n```\n","source":"_posts/docker/app/devs/data/nas/samba.md","raw":"---\nlayout: default\ntitle: samba\nnav_order: 15\nparent: Nas\npermalink: \"/docker/app/devs/data/nas/samba/\"\nhas_children: false\ngrand_parent: Data\n---\n\n```shell\ndocker run -it \\\n--name samba_docker \\  #为新的容器命一个名，方便启动、停止、删除等操作，毕竟一长串字符不好输入\n-p 139:139 \\           #将主机的139端口映射到samba_docker这个容器的139端口上\n-p 445:445 \\           #将主机的445端口映射到samba_docker这个容器的445端口上\n-v /home/shares/shareA:/home/shares/shareA \\  # 将主机上的共享目录向容器进行映射\n-d dperson/samba \\     #以dperson/samba这个dockers镜像为模板，建立容器\n-w \"WORKGROUP\" \\       #从这里开始是dperson/samba 的参数，上面是docker run 的参数。这里指定了工作组\n-u \"userA;123456789\" \\ #为samba服务设置账户和密码\n-s \"shareA;/home/shares/shareA;yes;no;no;userA;userA;userA\"\n \n最后一行以分号为间隔，分别是：\n共享文件夹的名称；共享在samba容器中的路径；共享名称对所有工作组用户可见；不是只读（也就是说可写）；不允许guest用户；指定共享的所有权用户；指定共享的超级用户；指定具有写权限的用户；\n \n至于在共享文件夹中所创建的文件、文件夹的权限，通过：\ndocker exec -it 4ae45cd4f491 /bin/bash\n用vi 修改容器内的samba的配置文档 /etc/samba/smb.conf 即可。\n```\n```shell\ndocker run -it --name samba_docker -p 139:139 -p 445:445 -v /home/shares/share:/home/shares/share -d dperson/samba -w \"WORKGROUP\" -u \"user;pwd\" -s \"share;/home/shares/share;yes;no;no;user;user;user\"\n\n```\n","slug":"docker/app/devs/data/nas/samba","published":1,"date":"2025-02-23T07:43:31.042Z","updated":"2025-02-23T07:43:31.042Z","__permalink":"/docker/app/devs/data/nas/samba/","comments":1,"photos":[],"_id":"cm7k5rwb8009dmsws1c4y63g1","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it \\</span><br><span class=\"line\">--name samba_docker \\  #为新的容器命一个名，方便启动、停止、删除等操作，毕竟一长串字符不好输入</span><br><span class=\"line\">-p 139:139 \\           #将主机的139端口映射到samba_docker这个容器的139端口上</span><br><span class=\"line\">-p 445:445 \\           #将主机的445端口映射到samba_docker这个容器的445端口上</span><br><span class=\"line\">-v /home/shares/shareA:/home/shares/shareA \\  # 将主机上的共享目录向容器进行映射</span><br><span class=\"line\">-d dperson/samba \\     #以dperson/samba这个dockers镜像为模板，建立容器</span><br><span class=\"line\">-w &quot;WORKGROUP&quot; \\       #从这里开始是dperson/samba 的参数，上面是docker run 的参数。这里指定了工作组</span><br><span class=\"line\">-u &quot;userA;123456789&quot; \\ #为samba服务设置账户和密码</span><br><span class=\"line\">-s &quot;shareA;/home/shares/shareA;yes;no;no;userA;userA;userA&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">最后一行以分号为间隔，分别是：</span><br><span class=\"line\">共享文件夹的名称；共享在samba容器中的路径；共享名称对所有工作组用户可见；不是只读（也就是说可写）；不允许guest用户；指定共享的所有权用户；指定共享的超级用户；指定具有写权限的用户；</span><br><span class=\"line\"> </span><br><span class=\"line\">至于在共享文件夹中所创建的文件、文件夹的权限，通过：</span><br><span class=\"line\">docker exec -it 4ae45cd4f491 /bin/bash</span><br><span class=\"line\">用vi 修改容器内的samba的配置文档 /etc/samba/smb.conf 即可。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name samba_docker -p 139:139 -p 445:445 -v /home/shares/share:/home/shares/share -d dperson/samba -w &quot;WORKGROUP&quot; -u &quot;user;pwd&quot; -s &quot;share;/home/shares/share;yes;no;no;user;user;user&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it \\</span><br><span class=\"line\">--name samba_docker \\  #为新的容器命一个名，方便启动、停止、删除等操作，毕竟一长串字符不好输入</span><br><span class=\"line\">-p 139:139 \\           #将主机的139端口映射到samba_docker这个容器的139端口上</span><br><span class=\"line\">-p 445:445 \\           #将主机的445端口映射到samba_docker这个容器的445端口上</span><br><span class=\"line\">-v /home/shares/shareA:/home/shares/shareA \\  # 将主机上的共享目录向容器进行映射</span><br><span class=\"line\">-d dperson/samba \\     #以dperson/samba这个dockers镜像为模板，建立容器</span><br><span class=\"line\">-w &quot;WORKGROUP&quot; \\       #从这里开始是dperson/samba 的参数，上面是docker run 的参数。这里指定了工作组</span><br><span class=\"line\">-u &quot;userA;123456789&quot; \\ #为samba服务设置账户和密码</span><br><span class=\"line\">-s &quot;shareA;/home/shares/shareA;yes;no;no;userA;userA;userA&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">最后一行以分号为间隔，分别是：</span><br><span class=\"line\">共享文件夹的名称；共享在samba容器中的路径；共享名称对所有工作组用户可见；不是只读（也就是说可写）；不允许guest用户；指定共享的所有权用户；指定共享的超级用户；指定具有写权限的用户；</span><br><span class=\"line\"> </span><br><span class=\"line\">至于在共享文件夹中所创建的文件、文件夹的权限，通过：</span><br><span class=\"line\">docker exec -it 4ae45cd4f491 /bin/bash</span><br><span class=\"line\">用vi 修改容器内的samba的配置文档 /etc/samba/smb.conf 即可。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name samba_docker -p 139:139 -p 445:445 -v /home/shares/share:/home/shares/share -d dperson/samba -w &quot;WORKGROUP&quot; -u &quot;user;pwd&quot; -s &quot;share;/home/shares/share;yes;no;no;user;user;user&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":15,"description":"maven使用记录","parent":"Doc","has_children":false,"grand_parent":"Maven","_content":"\n# maven使用记录\n\n## 一键删除maven仓库无效jar包脚本\n\n    delLastUpdated.bat\n使用方法：\n复制上面文件，双击打开，输入maven仓库的地址或者把仓库的文件夹拖入到命令窗口，在回车即可。\n![img.png](imgs/img.png)\n\n## Maven的-pl用法\n\n- [参考文章](https://blog.csdn.net/zmm0420/article/details/115937027)\n- [参考文章](https://blog.csdn.net/wangooo/article/details/109361708)\n\n```shell\n\nclean deploy -Dmaven.test.skip=true -pl project-a (只构建其中一个)\n \nclean deploy -Dmaven.test.skip=true -pl project-a,project-b,project-c (只构建其中三个个)\n\n# 示例\nmvn clean package -Dmaven.test.skip=true -pl cn.facoder:mall-server -am\n```\n\n## 依赖分析\n\n- mvn dependency:analyze\n- 可以分析没有用到的依赖有哪些\n\n## jar包瘦身\n\n- [参考文章](https://www.cnblogs.com/ygjlch/p/7767639.html)`主要思想：将依赖放到宿主机上，通过挂载方式加载依赖`\n","source":"_posts/docker/app/devs/maven/doc/doc.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: maven使用记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/maven/doc/doc/\"\ngrand_parent: Maven\n---\n\n# maven使用记录\n\n## 一键删除maven仓库无效jar包脚本\n\n    delLastUpdated.bat\n使用方法：\n复制上面文件，双击打开，输入maven仓库的地址或者把仓库的文件夹拖入到命令窗口，在回车即可。\n![img.png](imgs/img.png)\n\n## Maven的-pl用法\n\n- [参考文章](https://blog.csdn.net/zmm0420/article/details/115937027)\n- [参考文章](https://blog.csdn.net/wangooo/article/details/109361708)\n\n```shell\n\nclean deploy -Dmaven.test.skip=true -pl project-a (只构建其中一个)\n \nclean deploy -Dmaven.test.skip=true -pl project-a,project-b,project-c (只构建其中三个个)\n\n# 示例\nmvn clean package -Dmaven.test.skip=true -pl cn.facoder:mall-server -am\n```\n\n## 依赖分析\n\n- mvn dependency:analyze\n- 可以分析没有用到的依赖有哪些\n\n## jar包瘦身\n\n- [参考文章](https://www.cnblogs.com/ygjlch/p/7767639.html)`主要思想：将依赖放到宿主机上，通过挂载方式加载依赖`\n","slug":"docker/app/devs/maven/doc/doc","published":1,"date":"2025-02-23T07:43:30.482Z","updated":"2025-02-23T07:43:30.483Z","__permalink":"/docker/app/devs/maven/doc/doc/","comments":1,"photos":[],"_id":"cm7k5rwb8009emswsewau2qnq","content":"<h1 id=\"maven使用记录\"><a href=\"#maven使用记录\" class=\"headerlink\" title=\"maven使用记录\"></a>maven使用记录</h1><h2 id=\"一键删除maven仓库无效jar包脚本\"><a href=\"#一键删除maven仓库无效jar包脚本\" class=\"headerlink\" title=\"一键删除maven仓库无效jar包脚本\"></a>一键删除maven仓库无效jar包脚本</h2><pre><code>delLastUpdated.bat\n</code></pre>\n<p>使用方法：<br>复制上面文件，双击打开，输入maven仓库的地址或者把仓库的文件夹拖入到命令窗口，在回车即可。<br><img data-src=\"/imgs/img.png\" alt=\"img.png\"></p>\n<h2 id=\"Maven的-pl用法\"><a href=\"#Maven的-pl用法\" class=\"headerlink\" title=\"Maven的-pl用法\"></a>Maven的-pl用法</h2><ul>\n<li><a href=\"https://blog.csdn.net/zmm0420/article/details/115937027\">参考文章</a></li>\n<li><a href=\"https://blog.csdn.net/wangooo/article/details/109361708\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">clean deploy -Dmaven.test.skip=true -pl project-a (只构建其中一个)</span><br><span class=\"line\"> </span><br><span class=\"line\">clean deploy -Dmaven.test.skip=true -pl project-a,project-b,project-c (只构建其中三个个)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">示例</span></span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=true -pl cn.facoder:mall-server -am</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"依赖分析\"><a href=\"#依赖分析\" class=\"headerlink\" title=\"依赖分析\"></a>依赖分析</h2><ul>\n<li>mvn dependency:analyze</li>\n<li>可以分析没有用到的依赖有哪些</li>\n</ul>\n<h2 id=\"jar包瘦身\"><a href=\"#jar包瘦身\" class=\"headerlink\" title=\"jar包瘦身\"></a>jar包瘦身</h2><ul>\n<li><a href=\"https://www.cnblogs.com/ygjlch/p/7767639.html\">参考文章</a><code>主要思想：将依赖放到宿主机上，通过挂载方式加载依赖</code></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"maven使用记录\"><a href=\"#maven使用记录\" class=\"headerlink\" title=\"maven使用记录\"></a>maven使用记录</h1><h2 id=\"一键删除maven仓库无效jar包脚本\"><a href=\"#一键删除maven仓库无效jar包脚本\" class=\"headerlink\" title=\"一键删除maven仓库无效jar包脚本\"></a>一键删除maven仓库无效jar包脚本</h2><pre><code>delLastUpdated.bat\n</code></pre>\n<p>使用方法：<br>复制上面文件，双击打开，输入maven仓库的地址或者把仓库的文件夹拖入到命令窗口，在回车即可。<br><img data-src=\"/imgs/img.png\" alt=\"img.png\"></p>\n<h2 id=\"Maven的-pl用法\"><a href=\"#Maven的-pl用法\" class=\"headerlink\" title=\"Maven的-pl用法\"></a>Maven的-pl用法</h2><ul>\n<li><a href=\"https://blog.csdn.net/zmm0420/article/details/115937027\">参考文章</a></li>\n<li><a href=\"https://blog.csdn.net/wangooo/article/details/109361708\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">clean deploy -Dmaven.test.skip=true -pl project-a (只构建其中一个)</span><br><span class=\"line\"> </span><br><span class=\"line\">clean deploy -Dmaven.test.skip=true -pl project-a,project-b,project-c (只构建其中三个个)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">示例</span></span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=true -pl cn.facoder:mall-server -am</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"依赖分析\"><a href=\"#依赖分析\" class=\"headerlink\" title=\"依赖分析\"></a>依赖分析</h2><ul>\n<li>mvn dependency:analyze</li>\n<li>可以分析没有用到的依赖有哪些</li>\n</ul>\n<h2 id=\"jar包瘦身\"><a href=\"#jar包瘦身\" class=\"headerlink\" title=\"jar包瘦身\"></a>jar包瘦身</h2><ul>\n<li><a href=\"https://www.cnblogs.com/ygjlch/p/7767639.html\">参考文章</a><code>主要思想：将依赖放到宿主机上，通过挂载方式加载依赖</code></li>\n</ul>\n"},{"layout":"default","title":"Doc","nav_order":5,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/app/devs/maven/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 5\nhas_children: true\nparent: Doc\npermalink: \"/docker/app/devs/maven/doc/\"\n---\n\n# Doc\n","slug":"docker/app/devs/maven/doc/index","published":1,"date":"2025-02-23T07:43:30.484Z","updated":"2025-02-23T07:43:30.484Z","__permalink":"/docker/app/devs/maven/doc/","comments":1,"photos":[],"_id":"cm7k5rwb8009fmsws19ycddpq","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"Redis","nav_order":5,"has_children":true,"parent":"Redis","_content":"\n# Redis\n","source":"_posts/docker/app/devs/data/redis/index.md","raw":"---\nlayout: default\ntitle: Redis\nnav_order: 5\nhas_children: true\nparent: Redis\npermalink: \"/docker/app/devs/data/redis/\"\n---\n\n# Redis\n","slug":"docker/app/devs/data/redis/index","published":1,"date":"2025-02-23T07:43:31.034Z","updated":"2025-02-23T07:43:31.035Z","__permalink":"/docker/app/devs/data/redis/","comments":1,"photos":[],"_id":"cm7k5rwb8009gmswsfsgcaf59","content":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1>","excerpt":"","more":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"Redis相关记录","parent":"Redis","has_children":false,"grand_parent":"Data","_content":"\n# Redis相关记录\n\n## 数据导出\n\n```shell\n# 使用exec和DUMP命令导出数据\ndocker exec -it <你的Redis容器名或ID> redis-cli -a foobared DUMP your_key_name > /path/to/your/key.dump\n# 使用临时容器导出数据\ndocker run --rm --link <你的Redis容器名或ID>:redis -it redis redis-cli -h redis DUMP your_key_name > /path/to/your/key.dump\n```\n\n- 相关链接\n  - [数据导出](../../../../../middleware/data/redis/doc.md#导出redis中的数据)\n  \n## 监听命令\n\nMONITOR命令貌似只能监听当前实例的命令，无法监听集群内其他实例的命令。\n\n```shell\n# 监听是否执行了指定key\ndocker exec -it 017daffcd5a3 redis-cli -c -p 7001 -a foobared MONITOR | grep \"xx:key\"\n# 指定host\ndocker exec -it 017daffcd5a3 redis-cli -c -h redis2 -p 7002 -a foobared MONITOR | grep \"formative:prize\"\n```\n","source":"_posts/docker/app/devs/data/redis/redis.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: Redis相关记录\nparent: Redis\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/redis/\"\ngrand_parent: Data\n---\n\n# Redis相关记录\n\n## 数据导出\n\n```shell\n# 使用exec和DUMP命令导出数据\ndocker exec -it <你的Redis容器名或ID> redis-cli -a foobared DUMP your_key_name > /path/to/your/key.dump\n# 使用临时容器导出数据\ndocker run --rm --link <你的Redis容器名或ID>:redis -it redis redis-cli -h redis DUMP your_key_name > /path/to/your/key.dump\n```\n\n- 相关链接\n  - [数据导出](../../../../../middleware/data/redis/doc.md#导出redis中的数据)\n  \n## 监听命令\n\nMONITOR命令貌似只能监听当前实例的命令，无法监听集群内其他实例的命令。\n\n```shell\n# 监听是否执行了指定key\ndocker exec -it 017daffcd5a3 redis-cli -c -p 7001 -a foobared MONITOR | grep \"xx:key\"\n# 指定host\ndocker exec -it 017daffcd5a3 redis-cli -c -h redis2 -p 7002 -a foobared MONITOR | grep \"formative:prize\"\n```\n","slug":"docker/app/devs/data/redis/redis","published":1,"date":"2025-02-23T07:43:31.031Z","updated":"2025-02-23T07:43:31.031Z","__permalink":"/docker/app/devs/data/redis/redis/","comments":1,"photos":[],"_id":"cm7k5rwb8009hmsws52myef2n","content":"<h1 id=\"Redis相关记录\"><a href=\"#Redis相关记录\" class=\"headerlink\" title=\"Redis相关记录\"></a>Redis相关记录</h1><h2 id=\"数据导出\"><a href=\"#数据导出\" class=\"headerlink\" title=\"数据导出\"></a>数据导出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用<span class=\"built_in\">exec</span>和DUMP命令导出数据</span></span><br><span class=\"line\">docker exec -it &lt;你的Redis容器名或ID&gt; redis-cli -a foobared DUMP your_key_name &gt; /path/to/your/key.dump</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用临时容器导出数据</span></span><br><span class=\"line\">docker run --rm --link &lt;你的Redis容器名或ID&gt;:redis -it redis redis-cli -h redis DUMP your_key_name &gt; /path/to/your/key.dump</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>相关链接<ul>\n<li><a href=\"../../../../../middleware/data/redis/doc.md#%E5%AF%BC%E5%87%BAredis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE\">数据导出</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"监听命令\"><a href=\"#监听命令\" class=\"headerlink\" title=\"监听命令\"></a>监听命令</h2><p>MONITOR命令貌似只能监听当前实例的命令，无法监听集群内其他实例的命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">监听是否执行了指定key</span></span><br><span class=\"line\">docker exec -it 017daffcd5a3 redis-cli -c -p 7001 -a foobared MONITOR | grep &quot;xx:key&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定host</span></span><br><span class=\"line\">docker exec -it 017daffcd5a3 redis-cli -c -h redis2 -p 7002 -a foobared MONITOR | grep &quot;formative:prize&quot;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Redis相关记录\"><a href=\"#Redis相关记录\" class=\"headerlink\" title=\"Redis相关记录\"></a>Redis相关记录</h1><h2 id=\"数据导出\"><a href=\"#数据导出\" class=\"headerlink\" title=\"数据导出\"></a>数据导出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用<span class=\"built_in\">exec</span>和DUMP命令导出数据</span></span><br><span class=\"line\">docker exec -it &lt;你的Redis容器名或ID&gt; redis-cli -a foobared DUMP your_key_name &gt; /path/to/your/key.dump</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用临时容器导出数据</span></span><br><span class=\"line\">docker run --rm --link &lt;你的Redis容器名或ID&gt;:redis -it redis redis-cli -h redis DUMP your_key_name &gt; /path/to/your/key.dump</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>相关链接<ul>\n<li><a href=\"../../../../../middleware/data/redis/doc.md#%E5%AF%BC%E5%87%BAredis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE\">数据导出</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"监听命令\"><a href=\"#监听命令\" class=\"headerlink\" title=\"监听命令\"></a>监听命令</h2><p>MONITOR命令貌似只能监听当前实例的命令，无法监听集群内其他实例的命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">监听是否执行了指定key</span></span><br><span class=\"line\">docker exec -it 017daffcd5a3 redis-cli -c -p 7001 -a foobared MONITOR | grep &quot;xx:key&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定host</span></span><br><span class=\"line\">docker exec -it 017daffcd5a3 redis-cli -c -h redis2 -p 7002 -a foobared MONITOR | grep &quot;formative:prize&quot;</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Simple","nav_order":5,"has_children":true,"parent":"Simple","_content":"\n# Simple\n","source":"_posts/docker/app/devs/jenkins/simple/index.md","raw":"---\nlayout: default\ntitle: Simple\nnav_order: 5\nhas_children: true\nparent: Simple\npermalink: \"/docker/app/devs/jenkins/simple/\"\n---\n\n# Simple\n","slug":"docker/app/devs/jenkins/simple/index","published":1,"date":"2025-02-23T07:43:31.003Z","updated":"2025-02-23T07:43:31.003Z","__permalink":"/docker/app/devs/jenkins/simple/","comments":1,"photos":[],"_id":"cm7k5rwb8009imswsegzdeeqg","content":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>","excerpt":"","more":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"Jenkins 相关使用记录","parent":"Doc","has_children":false,"grand_parent":"Jenkins","_content":"\n# Jenkins 相关使用记录\n\n## maven配置settings.xml\n\n```shell\ndocker volume ls\ndocker volume inspect jenkins_jenkins_home\ncd /var/lib/docker/volumes/jenkins_jenkins_home/_data\nmkdir -p ./data/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n```\n\n---\n\n## 多分支参数构建\n\n```shell\n# 1. 下载安装插件\n# 在管理中选插件，输入Git Parameter\n```\n\n![img.png](img/多分支参数构建/img.png)\n![img_1.png](img/多分支参数构建/img_1.png)\n![img_2.png](img/多分支参数构建/img_2.png)\n---\n\n## 构建maven项目\n\n```shell\n# 下载安装插件\n# 在管理中选插件，输入\n# Maven Integration\n# SSH\n# Deploy to container \n# Send build artifacts over SSH\n```\n\n- 步骤\n    ![img.png](img/构建maven项目/img.png)\n    ![img_1.png](img/构建maven项目/img_1.png)\n    ![img_2.png](img/构建maven项目/img_2.png)\n    ![img_3.png](img/构建maven项目/img_3.png)\n    ![img_4.png](img/构建maven项目/img_4.png)\n    ![ssh信息输出到控制台](img/构建maven项目/img_5.png)\n    ![docker全局环境变量](img/构建maven项目/img_6.png)\n- Build\n\n```shell\n# Goals and options\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第一版(初版)\nimagesid=`docker images|grep -i docker-test|awk '{print $3}'`\nproject=/var/lib/docker/volumes/jks_jenkins_home/_data/workspace/test4\ndockerid=`docker ps -a|grep -i docker-test|awk '{print $1}' `\necho $project\nif  [ ! -n \"$imagesid\" ];then\n   echo $imagesid \"is null\"\nelse\n    docker rmi $imagesid -f\nfi\ncd $project\n\necho \"FROM tomcat:8.5\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"RUN rm -rf /usr/local/tomcat/webapps/*\" >> Dockerfile\necho \"ADD ./target/*.war /usr/local/tomcat/webapps/\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n# echo 'ENTRYPOINT [\"/usr/local/tomcat/bin/catalina.sh\",\"run\"]' >> Dockerfile\n\ndocker build -t docker-test .\n\nif  [ -n \"$dockerid\" ]  ;then\n   docker stop $dockerid\n   docker rm -f $dockerid\nelse\n   echo 'dockerid is null'\nfi\ndocker run -itd -p 8080:8080 docker-test\n```\n\n```shell\n# 第二版\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\ndockerid=`docker ps -aq -f ancestor=$JOB_NAME `\n\nif  [ -n \"$dockerid\" ]  ;then\n   docker stop $dockerid\n   docker rm -f $dockerid\n   docker rmi $(docker images -q -f reference=$JOB_NAME)\nelse\n   echo 'dockerid is null'\nfi\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\necho \"FROM tomcat:8.5\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"RUN rm -rf /usr/local/tomcat/webapps/*\" >> Dockerfile\necho \"ADD ./target/*.war /usr/local/tomcat/webapps/\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n# echo \"ENTRYPOINT [\"/usr/local/tomcat/bin/catalina.sh\",\"run\"]\" >> Dockerfile\n\ndocker build -t $JOB_NAME .\n\ndocker run -itd -p 8280:8080 $JOB_NAME\n\n```\n\n```shell\n# 第三版(swarm)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n# published: 8280 # todo 映射端口根据实际调整\n\nexport app_version='1.0'\n\ndocker service rm app_$JOB_NAME\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\necho \"FROM tomcat:8.5.71-jdk8-corretto\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"RUN rm -rf /usr/local/tomcat/webapps/*\" >> Dockerfile\necho \"ADD ./target/*.war /usr/local/tomcat/webapps/\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi \n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: $JOB_NAME:${app_version}\n    ports:\n      - target: 8080\n        published: 8280\n        mode: host\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n```\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n# published: 8280 # todo 映射端口根据实际调整\n\nexport app_version='1.0'\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\necho \"FROM tomcat:8.5.71-jdk8-corretto\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/local/tomcat\" >> Dockerfile\necho \"RUN rm -rf webapps/*\" >> Dockerfile\necho \"ADD ./target/*$JOB_NAME webapps/$JOB_NAME\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi \n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 8080\n        published: 8280\n        mode: host\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n```\n","source":"_posts/docker/app/devs/jenkins/doc/doc.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: Jenkins 相关使用记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/doc/\"\ngrand_parent: Jenkins\n---\n\n# Jenkins 相关使用记录\n\n## maven配置settings.xml\n\n```shell\ndocker volume ls\ndocker volume inspect jenkins_jenkins_home\ncd /var/lib/docker/volumes/jenkins_jenkins_home/_data\nmkdir -p ./data/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n```\n\n---\n\n## 多分支参数构建\n\n```shell\n# 1. 下载安装插件\n# 在管理中选插件，输入Git Parameter\n```\n\n![img.png](img/多分支参数构建/img.png)\n![img_1.png](img/多分支参数构建/img_1.png)\n![img_2.png](img/多分支参数构建/img_2.png)\n---\n\n## 构建maven项目\n\n```shell\n# 下载安装插件\n# 在管理中选插件，输入\n# Maven Integration\n# SSH\n# Deploy to container \n# Send build artifacts over SSH\n```\n\n- 步骤\n    ![img.png](img/构建maven项目/img.png)\n    ![img_1.png](img/构建maven项目/img_1.png)\n    ![img_2.png](img/构建maven项目/img_2.png)\n    ![img_3.png](img/构建maven项目/img_3.png)\n    ![img_4.png](img/构建maven项目/img_4.png)\n    ![ssh信息输出到控制台](img/构建maven项目/img_5.png)\n    ![docker全局环境变量](img/构建maven项目/img_6.png)\n- Build\n\n```shell\n# Goals and options\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第一版(初版)\nimagesid=`docker images|grep -i docker-test|awk '{print $3}'`\nproject=/var/lib/docker/volumes/jks_jenkins_home/_data/workspace/test4\ndockerid=`docker ps -a|grep -i docker-test|awk '{print $1}' `\necho $project\nif  [ ! -n \"$imagesid\" ];then\n   echo $imagesid \"is null\"\nelse\n    docker rmi $imagesid -f\nfi\ncd $project\n\necho \"FROM tomcat:8.5\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"RUN rm -rf /usr/local/tomcat/webapps/*\" >> Dockerfile\necho \"ADD ./target/*.war /usr/local/tomcat/webapps/\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n# echo 'ENTRYPOINT [\"/usr/local/tomcat/bin/catalina.sh\",\"run\"]' >> Dockerfile\n\ndocker build -t docker-test .\n\nif  [ -n \"$dockerid\" ]  ;then\n   docker stop $dockerid\n   docker rm -f $dockerid\nelse\n   echo 'dockerid is null'\nfi\ndocker run -itd -p 8080:8080 docker-test\n```\n\n```shell\n# 第二版\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\ndockerid=`docker ps -aq -f ancestor=$JOB_NAME `\n\nif  [ -n \"$dockerid\" ]  ;then\n   docker stop $dockerid\n   docker rm -f $dockerid\n   docker rmi $(docker images -q -f reference=$JOB_NAME)\nelse\n   echo 'dockerid is null'\nfi\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\necho \"FROM tomcat:8.5\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"RUN rm -rf /usr/local/tomcat/webapps/*\" >> Dockerfile\necho \"ADD ./target/*.war /usr/local/tomcat/webapps/\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n# echo \"ENTRYPOINT [\"/usr/local/tomcat/bin/catalina.sh\",\"run\"]\" >> Dockerfile\n\ndocker build -t $JOB_NAME .\n\ndocker run -itd -p 8280:8080 $JOB_NAME\n\n```\n\n```shell\n# 第三版(swarm)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n# published: 8280 # todo 映射端口根据实际调整\n\nexport app_version='1.0'\n\ndocker service rm app_$JOB_NAME\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\necho \"FROM tomcat:8.5.71-jdk8-corretto\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"RUN rm -rf /usr/local/tomcat/webapps/*\" >> Dockerfile\necho \"ADD ./target/*.war /usr/local/tomcat/webapps/\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi \n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: $JOB_NAME:${app_version}\n    ports:\n      - target: 8080\n        published: 8280\n        mode: host\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n```\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n# published: 8280 # todo 映射端口根据实际调整\n\nexport app_version='1.0'\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\necho \"FROM tomcat:8.5.71-jdk8-corretto\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/local/tomcat\" >> Dockerfile\necho \"RUN rm -rf webapps/*\" >> Dockerfile\necho \"ADD ./target/*$JOB_NAME webapps/$JOB_NAME\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi \n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 8080\n        published: 8280\n        mode: host\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n```\n","slug":"docker/app/devs/jenkins/doc/doc","published":1,"date":"2025-02-23T07:43:31.003Z","updated":"2025-02-23T07:43:31.004Z","__permalink":"/docker/app/devs/jenkins/doc/doc/","comments":1,"photos":[],"_id":"cm7k5rwb9009jmswsh18n75tx","content":"<h1 id=\"Jenkins-相关使用记录\"><a href=\"#Jenkins-相关使用记录\" class=\"headerlink\" title=\"Jenkins 相关使用记录\"></a>Jenkins 相关使用记录</h1><h2 id=\"maven配置settings-xml\"><a href=\"#maven配置settings-xml\" class=\"headerlink\" title=\"maven配置settings.xml\"></a>maven配置settings.xml</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span><br><span class=\"line\">docker volume inspect jenkins_jenkins_home</span><br><span class=\"line\">cd /var/lib/docker/volumes/jenkins_jenkins_home/_data</span><br><span class=\"line\">mkdir -p ./data/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"多分支参数构建\"><a href=\"#多分支参数构建\" class=\"headerlink\" title=\"多分支参数构建\"></a>多分支参数构建</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 下载安装插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在管理中选插件，输入Git Parameter</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img data-src=\"/img/%E5%A4%9A%E5%88%86%E6%94%AF%E5%8F%82%E6%95%B0%E6%9E%84%E5%BB%BA/img.png\" alt=\"img.png\"><br><img data-src=\"/img/%E5%A4%9A%E5%88%86%E6%94%AF%E5%8F%82%E6%95%B0%E6%9E%84%E5%BB%BA/img_1.png\" alt=\"img_1.png\"><br><img data-src=\"/img/%E5%A4%9A%E5%88%86%E6%94%AF%E5%8F%82%E6%95%B0%E6%9E%84%E5%BB%BA/img_2.png\" alt=\"img_2.png\"></h2><h2 id=\"构建maven项目\"><a href=\"#构建maven项目\" class=\"headerlink\" title=\"构建maven项目\"></a>构建maven项目</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在管理中选插件，输入</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Maven Integration</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SSH</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Deploy to container</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Send build artifacts over SSH</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步骤<br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img.png\" alt=\"img.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_1.png\" alt=\"img_1.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_2.png\" alt=\"img_2.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_3.png\" alt=\"img_3.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_4.png\" alt=\"img_4.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_5.png\" alt=\"ssh信息输出到控制台\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_6.png\" alt=\"docker全局环境变量\"></li>\n<li>Build</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Goals and options</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第一版(初版)</span></span><br><span class=\"line\">imagesid=`docker images|grep -i docker-test|awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class=\"line\">project=/var/lib/docker/volumes/jks_jenkins_home/_data/workspace/test4</span><br><span class=\"line\">dockerid=`docker ps -a|grep -i docker-test|awk &#x27;&#123;print $1&#125;&#x27; `</span><br><span class=\"line\">echo $project</span><br><span class=\"line\">if  [ ! -n &quot;$imagesid&quot; ];then</span><br><span class=\"line\">   echo $imagesid &quot;is null&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    docker rmi $imagesid -f</span><br><span class=\"line\">fi</span><br><span class=\"line\">cd $project</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf /usr/local/tomcat/webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*.war /usr/local/tomcat/webapps/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;ENTRYPOINT [&quot;/usr/local/tomcat/bin/catalina.sh&quot;,&quot;run&quot;]&#x27;</span> &gt;&gt; Dockerfile</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t docker-test .</span><br><span class=\"line\"></span><br><span class=\"line\">if  [ -n &quot;$dockerid&quot; ]  ;then</span><br><span class=\"line\">   docker stop $dockerid</span><br><span class=\"line\">   docker rm -f $dockerid</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &#x27;dockerid is null&#x27;</span><br><span class=\"line\">fi</span><br><span class=\"line\">docker run -itd -p 8080:8080 docker-test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第二版</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">dockerid=`docker ps -aq -f ancestor=$JOB_NAME `</span><br><span class=\"line\"></span><br><span class=\"line\">if  [ -n &quot;$dockerid&quot; ]  ;then</span><br><span class=\"line\">   docker stop $dockerid</span><br><span class=\"line\">   docker rm -f $dockerid</span><br><span class=\"line\">   docker rmi $(docker images -q -f reference=$JOB_NAME)</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &#x27;dockerid is null&#x27;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf /usr/local/tomcat/webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*.war /usr/local/tomcat/webapps/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ENTRYPOINT [&quot;</span>/usr/local/tomcat/bin/catalina.sh<span class=\"string\">&quot;,&quot;</span>run<span class=\"string\">&quot;]&quot;</span> &gt;&gt; Dockerfile</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t $JOB_NAME .</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -itd -p 8280:8080 $JOB_NAME</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第三版(swarm)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">published: 8280 <span class=\"comment\"># todo 映射端口根据实际调整</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">docker service rm app_$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5.71-jdk8-corretto&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf /usr/local/tomcat/webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*.war /usr/local/tomcat/webapps/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: $JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8080</span><br><span class=\"line\">        published: 8280</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">published: 8280 <span class=\"comment\"># todo 映射端口根据实际调整</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5.71-jdk8-corretto&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/local/tomcat&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*$JOB_NAME webapps/$JOB_NAME&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8080</span><br><span class=\"line\">        published: 8280</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Jenkins-相关使用记录\"><a href=\"#Jenkins-相关使用记录\" class=\"headerlink\" title=\"Jenkins 相关使用记录\"></a>Jenkins 相关使用记录</h1><h2 id=\"maven配置settings-xml\"><a href=\"#maven配置settings-xml\" class=\"headerlink\" title=\"maven配置settings.xml\"></a>maven配置settings.xml</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span><br><span class=\"line\">docker volume inspect jenkins_jenkins_home</span><br><span class=\"line\">cd /var/lib/docker/volumes/jenkins_jenkins_home/_data</span><br><span class=\"line\">mkdir -p ./data/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"多分支参数构建\"><a href=\"#多分支参数构建\" class=\"headerlink\" title=\"多分支参数构建\"></a>多分支参数构建</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 下载安装插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在管理中选插件，输入Git Parameter</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img data-src=\"/img/%E5%A4%9A%E5%88%86%E6%94%AF%E5%8F%82%E6%95%B0%E6%9E%84%E5%BB%BA/img.png\" alt=\"img.png\"><br><img data-src=\"/img/%E5%A4%9A%E5%88%86%E6%94%AF%E5%8F%82%E6%95%B0%E6%9E%84%E5%BB%BA/img_1.png\" alt=\"img_1.png\"><br><img data-src=\"/img/%E5%A4%9A%E5%88%86%E6%94%AF%E5%8F%82%E6%95%B0%E6%9E%84%E5%BB%BA/img_2.png\" alt=\"img_2.png\"></h2><h2 id=\"构建maven项目\"><a href=\"#构建maven项目\" class=\"headerlink\" title=\"构建maven项目\"></a>构建maven项目</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在管理中选插件，输入</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Maven Integration</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SSH</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Deploy to container</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Send build artifacts over SSH</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步骤<br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img.png\" alt=\"img.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_1.png\" alt=\"img_1.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_2.png\" alt=\"img_2.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_3.png\" alt=\"img_3.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_4.png\" alt=\"img_4.png\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_5.png\" alt=\"ssh信息输出到控制台\"><br>  <img data-src=\"/img/%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/img_6.png\" alt=\"docker全局环境变量\"></li>\n<li>Build</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Goals and options</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第一版(初版)</span></span><br><span class=\"line\">imagesid=`docker images|grep -i docker-test|awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class=\"line\">project=/var/lib/docker/volumes/jks_jenkins_home/_data/workspace/test4</span><br><span class=\"line\">dockerid=`docker ps -a|grep -i docker-test|awk &#x27;&#123;print $1&#125;&#x27; `</span><br><span class=\"line\">echo $project</span><br><span class=\"line\">if  [ ! -n &quot;$imagesid&quot; ];then</span><br><span class=\"line\">   echo $imagesid &quot;is null&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    docker rmi $imagesid -f</span><br><span class=\"line\">fi</span><br><span class=\"line\">cd $project</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf /usr/local/tomcat/webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*.war /usr/local/tomcat/webapps/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;ENTRYPOINT [&quot;/usr/local/tomcat/bin/catalina.sh&quot;,&quot;run&quot;]&#x27;</span> &gt;&gt; Dockerfile</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t docker-test .</span><br><span class=\"line\"></span><br><span class=\"line\">if  [ -n &quot;$dockerid&quot; ]  ;then</span><br><span class=\"line\">   docker stop $dockerid</span><br><span class=\"line\">   docker rm -f $dockerid</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &#x27;dockerid is null&#x27;</span><br><span class=\"line\">fi</span><br><span class=\"line\">docker run -itd -p 8080:8080 docker-test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第二版</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">dockerid=`docker ps -aq -f ancestor=$JOB_NAME `</span><br><span class=\"line\"></span><br><span class=\"line\">if  [ -n &quot;$dockerid&quot; ]  ;then</span><br><span class=\"line\">   docker stop $dockerid</span><br><span class=\"line\">   docker rm -f $dockerid</span><br><span class=\"line\">   docker rmi $(docker images -q -f reference=$JOB_NAME)</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &#x27;dockerid is null&#x27;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf /usr/local/tomcat/webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*.war /usr/local/tomcat/webapps/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ENTRYPOINT [&quot;</span>/usr/local/tomcat/bin/catalina.sh<span class=\"string\">&quot;,&quot;</span>run<span class=\"string\">&quot;]&quot;</span> &gt;&gt; Dockerfile</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t $JOB_NAME .</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -itd -p 8280:8080 $JOB_NAME</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第三版(swarm)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">published: 8280 <span class=\"comment\"># todo 映射端口根据实际调整</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">docker service rm app_$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5.71-jdk8-corretto&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf /usr/local/tomcat/webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*.war /usr/local/tomcat/webapps/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: $JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8080</span><br><span class=\"line\">        published: 8280</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">published: 8280 <span class=\"comment\"># todo 映射端口根据实际调整</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5.71-jdk8-corretto&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/local/tomcat&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*$JOB_NAME webapps/$JOB_NAME&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8080</span><br><span class=\"line\">        published: 8280</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"nodeJs-doc","nav_order":15,"description":"jenkins构建node项目","parent":"Doc","has_children":false,"grand_parent":"Jenkins","_content":"\n# jenkins构建node项目\n\n## 安装插件\n\n    nodeJs(14.16.0)\n![img.png](img/构建nodeJs项目/img_2.png)\n\n## 配置步骤\n\n![img.png](img/构建nodeJs项目/img.png)\n![img_1.png](img/构建nodeJs项目/img_1.png)\n\n## 执行shell（在jenkins里执行）\n\n```shell\n\npwd\n\n# 安装依赖(非必须)\nnpm --registry https://registry.npmmirror.com/ install\n# 构建项目\nnpm run build:test\n\n# 删除除 node_modules和dist 以外的所有内容\nls | grep -v 'node_modules\\|dist' | xargs  rm -rf\n\n```\n\n## Send files or execute commands over SSH(通过ssh远程执行shell)\n\n```shell\n\nexport app_version='1.0'\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\nmkdir -p ./nginx/conf.d/\n\n# 添加default.conf文件\ntee ./nginx/conf.d/default.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n    }\n\n}\nEOF\n\n# 编辑Dockerfile文件\necho \"FROM nginx\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/share/nginx/html\" >> Dockerfile\necho \"RUN rm -rf *\" >> Dockerfile\necho \"ADD ./dist .\" >> Dockerfile\necho \"ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/\" >> Dockerfile\necho \"EXPOSE 80\" >> Dockerfile\n\n# 构建镜像\ndocker build --no-cache -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 80\n        published: 3230\n        mode: host\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\nnetworks:\n  middleware:\n    external: true\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n# 删除除 node_modules 以外的所有内容\nls | grep -v 'node_modules' | xargs  rm -rf\n\n```\n","source":"_posts/docker/app/devs/jenkins/doc/nodeJs-doc.md","raw":"---\nlayout: default\ntitle: nodeJs-doc\nnav_order: 15\ndescription: jenkins构建node项目\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/nodejs-doc/\"\ngrand_parent: Jenkins\n---\n\n# jenkins构建node项目\n\n## 安装插件\n\n    nodeJs(14.16.0)\n![img.png](img/构建nodeJs项目/img_2.png)\n\n## 配置步骤\n\n![img.png](img/构建nodeJs项目/img.png)\n![img_1.png](img/构建nodeJs项目/img_1.png)\n\n## 执行shell（在jenkins里执行）\n\n```shell\n\npwd\n\n# 安装依赖(非必须)\nnpm --registry https://registry.npmmirror.com/ install\n# 构建项目\nnpm run build:test\n\n# 删除除 node_modules和dist 以外的所有内容\nls | grep -v 'node_modules\\|dist' | xargs  rm -rf\n\n```\n\n## Send files or execute commands over SSH(通过ssh远程执行shell)\n\n```shell\n\nexport app_version='1.0'\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\nmkdir -p ./nginx/conf.d/\n\n# 添加default.conf文件\ntee ./nginx/conf.d/default.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n    }\n\n}\nEOF\n\n# 编辑Dockerfile文件\necho \"FROM nginx\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/share/nginx/html\" >> Dockerfile\necho \"RUN rm -rf *\" >> Dockerfile\necho \"ADD ./dist .\" >> Dockerfile\necho \"ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/\" >> Dockerfile\necho \"EXPOSE 80\" >> Dockerfile\n\n# 构建镜像\ndocker build --no-cache -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 80\n        published: 3230\n        mode: host\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\nnetworks:\n  middleware:\n    external: true\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n# 删除除 node_modules 以外的所有内容\nls | grep -v 'node_modules' | xargs  rm -rf\n\n```\n","slug":"docker/app/devs/jenkins/doc/nodeJs-doc","published":1,"date":"2025-02-23T07:43:31.017Z","updated":"2025-02-23T07:43:31.017Z","__permalink":"/docker/app/devs/jenkins/doc/nodejs-doc/","comments":1,"photos":[],"_id":"cm7k5rwb9009kmswse0sd8uig","content":"<h1 id=\"jenkins构建node项目\"><a href=\"#jenkins构建node项目\" class=\"headerlink\" title=\"jenkins构建node项目\"></a>jenkins构建node项目</h1><h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><pre><code>nodeJs(14.16.0)\n</code></pre>\n<p><img data-src=\"/img/%E6%9E%84%E5%BB%BAnodeJs%E9%A1%B9%E7%9B%AE/img_2.png\" alt=\"img.png\"></p>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><p><img data-src=\"/img/%E6%9E%84%E5%BB%BAnodeJs%E9%A1%B9%E7%9B%AE/img.png\" alt=\"img.png\"><br><img data-src=\"/img/%E6%9E%84%E5%BB%BAnodeJs%E9%A1%B9%E7%9B%AE/img_1.png\" alt=\"img_1.png\"></p>\n<h2 id=\"执行shell（在jenkins里执行）\"><a href=\"#执行shell（在jenkins里执行）\" class=\"headerlink\" title=\"执行shell（在jenkins里执行）\"></a>执行shell（在jenkins里执行）</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖(非必须)</span></span><br><span class=\"line\">npm --registry https://registry.npmmirror.com/ install</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建项目</span></span><br><span class=\"line\">npm run build:test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules和dist 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules\\|dist&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Send-files-or-execute-commands-over-SSH-通过ssh远程执行shell\"><a href=\"#Send-files-or-execute-commands-over-SSH-通过ssh远程执行shell\" class=\"headerlink\" title=\"Send files or execute commands over SSH(通过ssh远程执行shell)\"></a>Send files or execute commands over SSH(通过ssh远程执行shell)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./nginx/conf.d/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加default.conf文件</span></span><br><span class=\"line\">tee ./nginx/conf.d/default.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM nginx&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/share/nginx/html&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf *&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./dist .&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 80&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build --no-cache -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 80</span><br><span class=\"line\">        published: 3230</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"jenkins构建node项目\"><a href=\"#jenkins构建node项目\" class=\"headerlink\" title=\"jenkins构建node项目\"></a>jenkins构建node项目</h1><h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><pre><code>nodeJs(14.16.0)\n</code></pre>\n<p><img data-src=\"/img/%E6%9E%84%E5%BB%BAnodeJs%E9%A1%B9%E7%9B%AE/img_2.png\" alt=\"img.png\"></p>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><p><img data-src=\"/img/%E6%9E%84%E5%BB%BAnodeJs%E9%A1%B9%E7%9B%AE/img.png\" alt=\"img.png\"><br><img data-src=\"/img/%E6%9E%84%E5%BB%BAnodeJs%E9%A1%B9%E7%9B%AE/img_1.png\" alt=\"img_1.png\"></p>\n<h2 id=\"执行shell（在jenkins里执行）\"><a href=\"#执行shell（在jenkins里执行）\" class=\"headerlink\" title=\"执行shell（在jenkins里执行）\"></a>执行shell（在jenkins里执行）</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖(非必须)</span></span><br><span class=\"line\">npm --registry https://registry.npmmirror.com/ install</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建项目</span></span><br><span class=\"line\">npm run build:test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules和dist 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules\\|dist&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Send-files-or-execute-commands-over-SSH-通过ssh远程执行shell\"><a href=\"#Send-files-or-execute-commands-over-SSH-通过ssh远程执行shell\" class=\"headerlink\" title=\"Send files or execute commands over SSH(通过ssh远程执行shell)\"></a>Send files or execute commands over SSH(通过ssh远程执行shell)</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./nginx/conf.d/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加default.conf文件</span></span><br><span class=\"line\">tee ./nginx/conf.d/default.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM nginx&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/share/nginx/html&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf *&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./dist .&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 80&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build --no-cache -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 80</span><br><span class=\"line\">        published: 3230</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Doc","nav_order":5,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/app/devs/jenkins/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 5\nhas_children: true\nparent: Doc\npermalink: \"/docker/app/devs/jenkins/doc/\"\n---\n\n# Doc\n","slug":"docker/app/devs/jenkins/doc/index","published":1,"date":"2025-02-23T07:43:31.016Z","updated":"2025-02-23T07:43:31.016Z","__permalink":"/docker/app/devs/jenkins/doc/","comments":1,"photos":[],"_id":"cm7k5rwb9009lmsws8hfv3dz7","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"plugins","nav_order":15,"description":"Jenkins插件相关记录","parent":"Doc","has_children":false,"grand_parent":"Jenkins","_content":"\n# Jenkins插件相关记录\n\n## jenkins 创建用户角色项目权限\n\n- [参考文章](https://blog.csdn.net/u013066244/article/details/53407985)\n- jenkins 创建用户角色项目权限\n  - 安装Role-Based Strategy插件\n  - 配置设置路径：\n    - 系统管理->\n      - 全局安全配置->授权策略->Role-Based Strategy\n      - 管理用户->新建用户\n      - Manage and Assign Roles->\n        - Manage Roles->\n          - Global roles->[全部->Read]\n          - Item roles->[Pattern->\"ma-.*\"]|[任务->(Build|Read)]\n        - Assign Roles->\n          - Global roles->按实际情况配置\n          - Item roles->按实际情况配置\n","source":"_posts/docker/app/devs/jenkins/doc/plugins.md","raw":"---\nlayout: default\ntitle: plugins\nnav_order: 15\ndescription: Jenkins插件相关记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/plugins/\"\ngrand_parent: Jenkins\n---\n\n# Jenkins插件相关记录\n\n## jenkins 创建用户角色项目权限\n\n- [参考文章](https://blog.csdn.net/u013066244/article/details/53407985)\n- jenkins 创建用户角色项目权限\n  - 安装Role-Based Strategy插件\n  - 配置设置路径：\n    - 系统管理->\n      - 全局安全配置->授权策略->Role-Based Strategy\n      - 管理用户->新建用户\n      - Manage and Assign Roles->\n        - Manage Roles->\n          - Global roles->[全部->Read]\n          - Item roles->[Pattern->\"ma-.*\"]|[任务->(Build|Read)]\n        - Assign Roles->\n          - Global roles->按实际情况配置\n          - Item roles->按实际情况配置\n","slug":"docker/app/devs/jenkins/doc/plugins","published":1,"date":"2025-02-23T07:43:31.016Z","updated":"2025-02-23T07:43:31.016Z","__permalink":"/docker/app/devs/jenkins/doc/plugins/","comments":1,"photos":[],"_id":"cm7k5rwb9009mmsws5qsw03fj","content":"<h1 id=\"Jenkins插件相关记录\"><a href=\"#Jenkins插件相关记录\" class=\"headerlink\" title=\"Jenkins插件相关记录\"></a>Jenkins插件相关记录</h1><h2 id=\"jenkins-创建用户角色项目权限\"><a href=\"#jenkins-创建用户角色项目权限\" class=\"headerlink\" title=\"jenkins 创建用户角色项目权限\"></a>jenkins 创建用户角色项目权限</h2><ul>\n<li><a href=\"https://blog.csdn.net/u013066244/article/details/53407985\">参考文章</a></li>\n<li>jenkins 创建用户角色项目权限<ul>\n<li>安装Role-Based Strategy插件</li>\n<li>配置设置路径：<ul>\n<li>系统管理-&gt;<ul>\n<li>全局安全配置-&gt;授权策略-&gt;Role-Based Strategy</li>\n<li>管理用户-&gt;新建用户</li>\n<li>Manage and Assign Roles-&gt;<ul>\n<li>Manage Roles-&gt;<ul>\n<li>Global roles-&gt;[全部-&gt;Read]</li>\n<li>Item roles-&gt;[Pattern-&gt;”ma-.*”]|[任务-&gt;(Build|Read)]</li>\n</ul>\n</li>\n<li>Assign Roles-&gt;<ul>\n<li>Global roles-&gt;按实际情况配置</li>\n<li>Item roles-&gt;按实际情况配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Jenkins插件相关记录\"><a href=\"#Jenkins插件相关记录\" class=\"headerlink\" title=\"Jenkins插件相关记录\"></a>Jenkins插件相关记录</h1><h2 id=\"jenkins-创建用户角色项目权限\"><a href=\"#jenkins-创建用户角色项目权限\" class=\"headerlink\" title=\"jenkins 创建用户角色项目权限\"></a>jenkins 创建用户角色项目权限</h2><ul>\n<li><a href=\"https://blog.csdn.net/u013066244/article/details/53407985\">参考文章</a></li>\n<li>jenkins 创建用户角色项目权限<ul>\n<li>安装Role-Based Strategy插件</li>\n<li>配置设置路径：<ul>\n<li>系统管理-&gt;<ul>\n<li>全局安全配置-&gt;授权策略-&gt;Role-Based Strategy</li>\n<li>管理用户-&gt;新建用户</li>\n<li>Manage and Assign Roles-&gt;<ul>\n<li>Manage Roles-&gt;<ul>\n<li>Global roles-&gt;[全部-&gt;Read]</li>\n<li>Item roles-&gt;[Pattern-&gt;”ma-.*”]|[任务-&gt;(Build|Read)]</li>\n</ul>\n</li>\n<li>Assign Roles-&gt;<ul>\n<li>Global roles-&gt;按实际情况配置</li>\n<li>Item roles-&gt;按实际情况配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"layout":"default","title":"java","nav_order":15,"description":"java 启动 相关记录","parent":"Doc","has_children":false,"grand_parent":"Jenkins","_content":"\n# java 启动 相关记录\n\n- [参考文章](http://www.javashuo.com/article/p-mdhxsxqr-eq.html)\n\n```shell\nnohup java -Xms500m -Xmx500m -Xmn250m -Xss256k -server -XX:+HeapDumpOnOutOfMemoryError -jar $JAR_PATH/test-0.0.1-SNAPSHOT.jar --spring.profiles.active=daily -verbose:class &\n## 说明：\n# --spring.profiles.active=daily， 这个能够在spring-boot启动中指定系统变量，多环境(测试、预发、线上配置)的区分\n# 在排查jar包冲突时，能够指定启动的-verbose:class  打印出启动的应用实际加载类的路径，来排查来源。\n# jvm堆设值： -Xms500m -Xmx500m -Xmn250m -Xss256k\n# nohup 不挂断地运行命令；& 在后台运行 ，通常两个一块儿用。 eg：nohup command &\n# -server:服务器模式，在多个CPU时性能佳，启动慢但性能好，能合理管理内存。\n# -XX:+HeapDumpOnOutOfMemoryError：在堆溢出时保存快照\n```\n\n```shell\n## -server和-client具体说明：\n# -server：必定要做为第一个参数，在多个 CPU 时性能佳，还有一种叫 -client 的模式，特色是启动速度比较快，但运行时性能和内存管理效率不高，一般用于客户端应用程序或开发调试，在 32 位环境下直接运行 Java 程序默认启用该模式。Server 模式的特色是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境，在具备 64 位能力的 JDK 环境下默认启用该模式，能够不配置该参数。\n```\n","source":"_posts/docker/app/devs/jenkins/doc/java.md","raw":"---\nlayout: default\ntitle: java\nnav_order: 15\ndescription: java 启动 相关记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/java/\"\ngrand_parent: Jenkins\n---\n\n# java 启动 相关记录\n\n- [参考文章](http://www.javashuo.com/article/p-mdhxsxqr-eq.html)\n\n```shell\nnohup java -Xms500m -Xmx500m -Xmn250m -Xss256k -server -XX:+HeapDumpOnOutOfMemoryError -jar $JAR_PATH/test-0.0.1-SNAPSHOT.jar --spring.profiles.active=daily -verbose:class &\n## 说明：\n# --spring.profiles.active=daily， 这个能够在spring-boot启动中指定系统变量，多环境(测试、预发、线上配置)的区分\n# 在排查jar包冲突时，能够指定启动的-verbose:class  打印出启动的应用实际加载类的路径，来排查来源。\n# jvm堆设值： -Xms500m -Xmx500m -Xmn250m -Xss256k\n# nohup 不挂断地运行命令；& 在后台运行 ，通常两个一块儿用。 eg：nohup command &\n# -server:服务器模式，在多个CPU时性能佳，启动慢但性能好，能合理管理内存。\n# -XX:+HeapDumpOnOutOfMemoryError：在堆溢出时保存快照\n```\n\n```shell\n## -server和-client具体说明：\n# -server：必定要做为第一个参数，在多个 CPU 时性能佳，还有一种叫 -client 的模式，特色是启动速度比较快，但运行时性能和内存管理效率不高，一般用于客户端应用程序或开发调试，在 32 位环境下直接运行 Java 程序默认启用该模式。Server 模式的特色是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境，在具备 64 位能力的 JDK 环境下默认启用该模式，能够不配置该参数。\n```\n","slug":"docker/app/devs/jenkins/doc/java","published":1,"date":"2025-02-23T07:43:31.016Z","updated":"2025-02-23T07:43:31.016Z","__permalink":"/docker/app/devs/jenkins/doc/java/","comments":1,"photos":[],"_id":"cm7k5rwb9009nmsws0pm60wg7","content":"<h1 id=\"java-启动-相关记录\"><a href=\"#java-启动-相关记录\" class=\"headerlink\" title=\"java 启动 相关记录\"></a>java 启动 相关记录</h1><ul>\n<li><a href=\"http://www.javashuo.com/article/p-mdhxsxqr-eq.html\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup java -Xms500m -Xmx500m -Xmn250m -Xss256k -server -XX:+HeapDumpOnOutOfMemoryError -jar $JAR_PATH/test-0.0.1-SNAPSHOT.jar --spring.profiles.active=daily -verbose:class &amp;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 说明：</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--spring.profiles.active=daily， 这个能够在spring-boot启动中指定系统变量，多环境(测试、预发、线上配置)的区分</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在排查jar包冲突时，能够指定启动的-verbose:class  打印出启动的应用实际加载类的路径，来排查来源。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">jvm堆设值： -Xms500m -Xmx500m -Xmn250m -Xss256k</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">nohup</span> 不挂断地运行命令；&amp; 在后台运行 ，通常两个一块儿用。 eg：<span class=\"built_in\">nohup</span> <span class=\"built_in\">command</span> &amp;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-server:服务器模式，在多个CPU时性能佳，启动慢但性能好，能合理管理内存。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-XX:+HeapDumpOnOutOfMemoryError：在堆溢出时保存快照</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># -server和-client具体说明：</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-server：必定要做为第一个参数，在多个 CPU 时性能佳，还有一种叫 -client 的模式，特色是启动速度比较快，但运行时性能和内存管理效率不高，一般用于客户端应用程序或开发调试，在 32 位环境下直接运行 Java 程序默认启用该模式。Server 模式的特色是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境，在具备 64 位能力的 JDK 环境下默认启用该模式，能够不配置该参数。</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"java-启动-相关记录\"><a href=\"#java-启动-相关记录\" class=\"headerlink\" title=\"java 启动 相关记录\"></a>java 启动 相关记录</h1><ul>\n<li><a href=\"http://www.javashuo.com/article/p-mdhxsxqr-eq.html\">参考文章</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup java -Xms500m -Xmx500m -Xmn250m -Xss256k -server -XX:+HeapDumpOnOutOfMemoryError -jar $JAR_PATH/test-0.0.1-SNAPSHOT.jar --spring.profiles.active=daily -verbose:class &amp;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 说明：</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--spring.profiles.active=daily， 这个能够在spring-boot启动中指定系统变量，多环境(测试、预发、线上配置)的区分</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在排查jar包冲突时，能够指定启动的-verbose:class  打印出启动的应用实际加载类的路径，来排查来源。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">jvm堆设值： -Xms500m -Xmx500m -Xmn250m -Xss256k</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">nohup</span> 不挂断地运行命令；&amp; 在后台运行 ，通常两个一块儿用。 eg：<span class=\"built_in\">nohup</span> <span class=\"built_in\">command</span> &amp;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-server:服务器模式，在多个CPU时性能佳，启动慢但性能好，能合理管理内存。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-XX:+HeapDumpOnOutOfMemoryError：在堆溢出时保存快照</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># -server和-client具体说明：</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-server：必定要做为第一个参数，在多个 CPU 时性能佳，还有一种叫 -client 的模式，特色是启动速度比较快，但运行时性能和内存管理效率不高，一般用于客户端应用程序或开发调试，在 32 位环境下直接运行 Java 程序默认启用该模式。Server 模式的特色是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境，在具备 64 位能力的 JDK 环境下默认启用该模式，能够不配置该参数。</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"problem","nav_order":15,"description":"jenkins部署相关问题记录","parent":"Doc","has_children":false,"grand_parent":"Jenkins","_content":"\n# jenkins部署相关问题记录\n\n## 该jenkins实例似乎已离线\n\n    安装插件那个页面，就是提示你offline的那个页面，不要动。\n    然后打开一个新的tab，输入网址http://192.168.211.103:8080/jenkins/pluginManager/advanced。 \n    这里面最底下有个【升级站点】，把其中的链接由https改成http的就好了，http://updates.jenkins.io/update-center.json。 \n    然后在服务列表中关闭jenkins，再tomcat重新启动，这样就能正常联网了\n\n## 不能下载maven插件依赖\n\n- Could not transfer artifact org.apache.maven.plugins:maven-clean-plugin:pom:2.5 from 这类问题的解决方法\n- -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true # 在maven_ops中加入该配置即可\n- -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true # 未用过\n- [参考文章](https://www.cnblogs.com/JavaArchitect/p/14383061.html)\n\n![img.png](img/不能下载maven插件依赖/img.png)\n\n---\n\n## vue项目，刷新页面后，显示404的问题\n\n- try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n- [参考文章](https://www.cnblogs.com/caijinghong/p/14693820.html)\n\n## npm镜像源问题\n\n- <https://registry.npmmirror.com/>(淘宝镜像源)\n- <https://registry.npm.taobao.org>(淘宝cnpm镜像源)\n- [参考文章](https://cloud.tencent.com/developer/article/1372949)\n\n## Dockerfile给服务器配置文件追加内容\n\n    ```shell\n\n    echo \"FROM tomcat:8.5\" > Dockerfile\n    echo \"MAINTAINER Fa\" >> Dockerfile\n    echo \"RUN rm -rf /usr/local/tomcat/webapps/*\" >> Dockerfile\n    echo \"RUN echo '' >> conf/catalina.properties\" >> Dockerfile\n    echo \"RUN echo 'tomcat.util.http.parser.HttpParser.requestTargetAllow=|{}' >> conf/catalina.properties\" >> Dockerfile\n    echo \"RUN echo 'org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true' >> conf/catalina.properties\" >> Dockerfile\n    echo \"ADD ./target/*.war /usr/local/tomcat/webapps/\" >> Dockerfile\n    echo \"EXPOSE 8080\" >> Dockerfile\n    # echo 'ENTRYPOINT [\"/usr/local/tomcat/bin/catalina.sh\",\"run\"]' >> Dockerfile\n\n    docker build -t docker-test .\n\n    ```\n\n## Java相关问题\n\n- 异常：org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: Could not initialize class sun.font.SunFontManager\n  - 启动java时加上参数:-Djava.awt.headless=true\n  - [参考文章](https://www.cnblogs.com/yanqin/p/7160889.html)\n\n- 异常：找不到文件/opt/java/openjdk/lib/libfontmanager.so\n  - 11-jre-alpine的docker镜像中找不到这个文件，所以去除-alpine，直接使用11-jre即可\n","source":"_posts/docker/app/devs/jenkins/doc/problem.md","raw":"---\nlayout: default\ntitle: problem\nnav_order: 15\ndescription: jenkins部署相关问题记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/problem/\"\ngrand_parent: Jenkins\n---\n\n# jenkins部署相关问题记录\n\n## 该jenkins实例似乎已离线\n\n    安装插件那个页面，就是提示你offline的那个页面，不要动。\n    然后打开一个新的tab，输入网址http://192.168.211.103:8080/jenkins/pluginManager/advanced。 \n    这里面最底下有个【升级站点】，把其中的链接由https改成http的就好了，http://updates.jenkins.io/update-center.json。 \n    然后在服务列表中关闭jenkins，再tomcat重新启动，这样就能正常联网了\n\n## 不能下载maven插件依赖\n\n- Could not transfer artifact org.apache.maven.plugins:maven-clean-plugin:pom:2.5 from 这类问题的解决方法\n- -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true # 在maven_ops中加入该配置即可\n- -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true # 未用过\n- [参考文章](https://www.cnblogs.com/JavaArchitect/p/14383061.html)\n\n![img.png](img/不能下载maven插件依赖/img.png)\n\n---\n\n## vue项目，刷新页面后，显示404的问题\n\n- try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n- [参考文章](https://www.cnblogs.com/caijinghong/p/14693820.html)\n\n## npm镜像源问题\n\n- <https://registry.npmmirror.com/>(淘宝镜像源)\n- <https://registry.npm.taobao.org>(淘宝cnpm镜像源)\n- [参考文章](https://cloud.tencent.com/developer/article/1372949)\n\n## Dockerfile给服务器配置文件追加内容\n\n    ```shell\n\n    echo \"FROM tomcat:8.5\" > Dockerfile\n    echo \"MAINTAINER Fa\" >> Dockerfile\n    echo \"RUN rm -rf /usr/local/tomcat/webapps/*\" >> Dockerfile\n    echo \"RUN echo '' >> conf/catalina.properties\" >> Dockerfile\n    echo \"RUN echo 'tomcat.util.http.parser.HttpParser.requestTargetAllow=|{}' >> conf/catalina.properties\" >> Dockerfile\n    echo \"RUN echo 'org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true' >> conf/catalina.properties\" >> Dockerfile\n    echo \"ADD ./target/*.war /usr/local/tomcat/webapps/\" >> Dockerfile\n    echo \"EXPOSE 8080\" >> Dockerfile\n    # echo 'ENTRYPOINT [\"/usr/local/tomcat/bin/catalina.sh\",\"run\"]' >> Dockerfile\n\n    docker build -t docker-test .\n\n    ```\n\n## Java相关问题\n\n- 异常：org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: Could not initialize class sun.font.SunFontManager\n  - 启动java时加上参数:-Djava.awt.headless=true\n  - [参考文章](https://www.cnblogs.com/yanqin/p/7160889.html)\n\n- 异常：找不到文件/opt/java/openjdk/lib/libfontmanager.so\n  - 11-jre-alpine的docker镜像中找不到这个文件，所以去除-alpine，直接使用11-jre即可\n","slug":"docker/app/devs/jenkins/doc/problem","published":1,"date":"2025-02-23T07:43:31.004Z","updated":"2025-02-23T07:43:31.004Z","__permalink":"/docker/app/devs/jenkins/doc/problem/","comments":1,"photos":[],"_id":"cm7k5rwb9009omsws43pj8onk","content":"<h1 id=\"jenkins部署相关问题记录\"><a href=\"#jenkins部署相关问题记录\" class=\"headerlink\" title=\"jenkins部署相关问题记录\"></a>jenkins部署相关问题记录</h1><h2 id=\"该jenkins实例似乎已离线\"><a href=\"#该jenkins实例似乎已离线\" class=\"headerlink\" title=\"该jenkins实例似乎已离线\"></a>该jenkins实例似乎已离线</h2><pre><code>安装插件那个页面，就是提示你offline的那个页面，不要动。\n然后打开一个新的tab，输入网址http://192.168.211.103:8080/jenkins/pluginManager/advanced。 \n这里面最底下有个【升级站点】，把其中的链接由https改成http的就好了，http://updates.jenkins.io/update-center.json。 \n然后在服务列表中关闭jenkins，再tomcat重新启动，这样就能正常联网了\n</code></pre>\n<h2 id=\"不能下载maven插件依赖\"><a href=\"#不能下载maven插件依赖\" class=\"headerlink\" title=\"不能下载maven插件依赖\"></a>不能下载maven插件依赖</h2><ul>\n<li>Could not transfer artifact org.apache.maven.plugins:maven-clean-plugin:pom:2.5 from 这类问题的解决方法</li>\n<li>-Dmaven.wagon.http.ssl.insecure&#x3D;true -Dmaven.wagon.http.ssl.allowall&#x3D;true # 在maven_ops中加入该配置即可</li>\n<li>-Dmaven.wagon.http.ssl.insecure&#x3D;true -Dmaven.wagon.http.ssl.allowall&#x3D;true -Dmaven.wagon.http.ssl.ignore.validity.dates&#x3D;true # 未用过</li>\n<li><a href=\"https://www.cnblogs.com/JavaArchitect/p/14383061.html\">参考文章</a></li>\n</ul>\n<p><img data-src=\"/img/%E4%B8%8D%E8%83%BD%E4%B8%8B%E8%BD%BDmaven%E6%8F%92%E4%BB%B6%E4%BE%9D%E8%B5%96/img.png\" alt=\"img.png\"></p>\n<hr>\n<h2 id=\"vue项目，刷新页面后，显示404的问题\"><a href=\"#vue项目，刷新页面后，显示404的问题\" class=\"headerlink\" title=\"vue项目，刷新页面后，显示404的问题\"></a>vue项目，刷新页面后，显示404的问题</h2><ul>\n<li>try_files $uri $uri&#x2F; &#x2F;index.html; # 用于解决刷新页面后，显示404的问题</li>\n<li><a href=\"https://www.cnblogs.com/caijinghong/p/14693820.html\">参考文章</a></li>\n</ul>\n<h2 id=\"npm镜像源问题\"><a href=\"#npm镜像源问题\" class=\"headerlink\" title=\"npm镜像源问题\"></a>npm镜像源问题</h2><ul>\n<li><a href=\"https://registry.npmmirror.com/\">https://registry.npmmirror.com/</a>(淘宝镜像源)</li>\n<li><a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a>(淘宝cnpm镜像源)</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1372949\">参考文章</a></li>\n</ul>\n<h2 id=\"Dockerfile给服务器配置文件追加内容\"><a href=\"#Dockerfile给服务器配置文件追加内容\" class=\"headerlink\" title=\"Dockerfile给服务器配置文件追加内容\"></a>Dockerfile给服务器配置文件追加内容</h2><pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf /usr/local/tomcat/webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN echo &#x27;&#x27; &gt;&gt; conf/catalina.properties&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN echo &#x27;tomcat.util.http.parser.HttpParser.requestTargetAllow=|&#123;&#125;&#x27; &gt;&gt; conf/catalina.properties&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN echo &#x27;org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true&#x27; &gt;&gt; conf/catalina.properties&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*.war /usr/local/tomcat/webapps/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;ENTRYPOINT [&quot;/usr/local/tomcat/bin/catalina.sh&quot;,&quot;run&quot;]&#x27;</span> &gt;&gt; Dockerfile</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t docker-test .</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"Java相关问题\"><a href=\"#Java相关问题\" class=\"headerlink\" title=\"Java相关问题\"></a>Java相关问题</h2><ul>\n<li><p>异常：org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: Could not initialize class sun.font.SunFontManager</p>\n<ul>\n<li>启动java时加上参数:-Djava.awt.headless&#x3D;true</li>\n<li><a href=\"https://www.cnblogs.com/yanqin/p/7160889.html\">参考文章</a></li>\n</ul>\n</li>\n<li><p>异常：找不到文件&#x2F;opt&#x2F;java&#x2F;openjdk&#x2F;lib&#x2F;libfontmanager.so</p>\n<ul>\n<li>11-jre-alpine的docker镜像中找不到这个文件，所以去除-alpine，直接使用11-jre即可</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"jenkins部署相关问题记录\"><a href=\"#jenkins部署相关问题记录\" class=\"headerlink\" title=\"jenkins部署相关问题记录\"></a>jenkins部署相关问题记录</h1><h2 id=\"该jenkins实例似乎已离线\"><a href=\"#该jenkins实例似乎已离线\" class=\"headerlink\" title=\"该jenkins实例似乎已离线\"></a>该jenkins实例似乎已离线</h2><pre><code>安装插件那个页面，就是提示你offline的那个页面，不要动。\n然后打开一个新的tab，输入网址http://192.168.211.103:8080/jenkins/pluginManager/advanced。 \n这里面最底下有个【升级站点】，把其中的链接由https改成http的就好了，http://updates.jenkins.io/update-center.json。 \n然后在服务列表中关闭jenkins，再tomcat重新启动，这样就能正常联网了\n</code></pre>\n<h2 id=\"不能下载maven插件依赖\"><a href=\"#不能下载maven插件依赖\" class=\"headerlink\" title=\"不能下载maven插件依赖\"></a>不能下载maven插件依赖</h2><ul>\n<li>Could not transfer artifact org.apache.maven.plugins:maven-clean-plugin:pom:2.5 from 这类问题的解决方法</li>\n<li>-Dmaven.wagon.http.ssl.insecure&#x3D;true -Dmaven.wagon.http.ssl.allowall&#x3D;true # 在maven_ops中加入该配置即可</li>\n<li>-Dmaven.wagon.http.ssl.insecure&#x3D;true -Dmaven.wagon.http.ssl.allowall&#x3D;true -Dmaven.wagon.http.ssl.ignore.validity.dates&#x3D;true # 未用过</li>\n<li><a href=\"https://www.cnblogs.com/JavaArchitect/p/14383061.html\">参考文章</a></li>\n</ul>\n<p><img data-src=\"/img/%E4%B8%8D%E8%83%BD%E4%B8%8B%E8%BD%BDmaven%E6%8F%92%E4%BB%B6%E4%BE%9D%E8%B5%96/img.png\" alt=\"img.png\"></p>\n<hr>\n<h2 id=\"vue项目，刷新页面后，显示404的问题\"><a href=\"#vue项目，刷新页面后，显示404的问题\" class=\"headerlink\" title=\"vue项目，刷新页面后，显示404的问题\"></a>vue项目，刷新页面后，显示404的问题</h2><ul>\n<li>try_files $uri $uri&#x2F; &#x2F;index.html; # 用于解决刷新页面后，显示404的问题</li>\n<li><a href=\"https://www.cnblogs.com/caijinghong/p/14693820.html\">参考文章</a></li>\n</ul>\n<h2 id=\"npm镜像源问题\"><a href=\"#npm镜像源问题\" class=\"headerlink\" title=\"npm镜像源问题\"></a>npm镜像源问题</h2><ul>\n<li><a href=\"https://registry.npmmirror.com/\">https://registry.npmmirror.com/</a>(淘宝镜像源)</li>\n<li><a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a>(淘宝cnpm镜像源)</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1372949\">参考文章</a></li>\n</ul>\n<h2 id=\"Dockerfile给服务器配置文件追加内容\"><a href=\"#Dockerfile给服务器配置文件追加内容\" class=\"headerlink\" title=\"Dockerfile给服务器配置文件追加内容\"></a>Dockerfile给服务器配置文件追加内容</h2><pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf /usr/local/tomcat/webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN echo &#x27;&#x27; &gt;&gt; conf/catalina.properties&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN echo &#x27;tomcat.util.http.parser.HttpParser.requestTargetAllow=|&#123;&#125;&#x27; &gt;&gt; conf/catalina.properties&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN echo &#x27;org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true&#x27; &gt;&gt; conf/catalina.properties&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*.war /usr/local/tomcat/webapps/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;ENTRYPOINT [&quot;/usr/local/tomcat/bin/catalina.sh&quot;,&quot;run&quot;]&#x27;</span> &gt;&gt; Dockerfile</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t docker-test .</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"Java相关问题\"><a href=\"#Java相关问题\" class=\"headerlink\" title=\"Java相关问题\"></a>Java相关问题</h2><ul>\n<li><p>异常：org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: Could not initialize class sun.font.SunFontManager</p>\n<ul>\n<li>启动java时加上参数:-Djava.awt.headless&#x3D;true</li>\n<li><a href=\"https://www.cnblogs.com/yanqin/p/7160889.html\">参考文章</a></li>\n</ul>\n</li>\n<li><p>异常：找不到文件&#x2F;opt&#x2F;java&#x2F;openjdk&#x2F;lib&#x2F;libfontmanager.so</p>\n<ul>\n<li>11-jre-alpine的docker镜像中找不到这个文件，所以去除-alpine，直接使用11-jre即可</li>\n</ul>\n</li>\n</ul>\n"},{"layout":"default","title":"ssh-git","nav_order":15,"description":"git通过ssh拉取代码","parent":"Doc","has_children":false,"grand_parent":"Jenkins","_content":"\n# git通过ssh拉取代码\n\n- 生成公私钥\n\n```shell\nssh-keygen -t rsa -C “123456@qq.com”\n```\n\n- 将公钥(id_rsa.pub)配置到github\n\n- 在jenkins中设置全局凭证，类型选择“SSH Username with private key”，将id_rsa文件的内容复制到Private Key中，其他都是非必填选项，这里Username我们填写github\n\n![ssh-username-with-private-key](./img/ssh-git/ssh-username-with-private-key.png)\n","source":"_posts/docker/app/devs/jenkins/doc/ssh-git.md","raw":"---\nlayout: default\ntitle: ssh-git\nnav_order: 15\ndescription: git通过ssh拉取代码\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/ssh-git/\"\ngrand_parent: Jenkins\n---\n\n# git通过ssh拉取代码\n\n- 生成公私钥\n\n```shell\nssh-keygen -t rsa -C “123456@qq.com”\n```\n\n- 将公钥(id_rsa.pub)配置到github\n\n- 在jenkins中设置全局凭证，类型选择“SSH Username with private key”，将id_rsa文件的内容复制到Private Key中，其他都是非必填选项，这里Username我们填写github\n\n![ssh-username-with-private-key](./img/ssh-git/ssh-username-with-private-key.png)\n","slug":"docker/app/devs/jenkins/doc/ssh-git","published":1,"date":"2025-02-23T07:43:31.006Z","updated":"2025-02-23T07:43:31.006Z","__permalink":"/docker/app/devs/jenkins/doc/ssh-git/","comments":1,"photos":[],"_id":"cm7k5rwb9009pmsws5xcf8cbh","content":"<h1 id=\"git通过ssh拉取代码\"><a href=\"#git通过ssh拉取代码\" class=\"headerlink\" title=\"git通过ssh拉取代码\"></a>git通过ssh拉取代码</h1><ul>\n<li>生成公私钥</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C “123456@qq.com”</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>将公钥(id_rsa.pub)配置到github</p>\n</li>\n<li><p>在jenkins中设置全局凭证，类型选择“SSH Username with private key”，将id_rsa文件的内容复制到Private Key中，其他都是非必填选项，这里Username我们填写github</p>\n</li>\n</ul>\n<p><img data-src=\"/./img/ssh-git/ssh-username-with-private-key.png\" alt=\"ssh-username-with-private-key\"></p>\n","excerpt":"","more":"<h1 id=\"git通过ssh拉取代码\"><a href=\"#git通过ssh拉取代码\" class=\"headerlink\" title=\"git通过ssh拉取代码\"></a>git通过ssh拉取代码</h1><ul>\n<li>生成公私钥</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C “123456@qq.com”</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>将公钥(id_rsa.pub)配置到github</p>\n</li>\n<li><p>在jenkins中设置全局凭证，类型选择“SSH Username with private key”，将id_rsa文件的内容复制到Private Key中，其他都是非必填选项，这里Username我们填写github</p>\n</li>\n</ul>\n<p><img data-src=\"/./img/ssh-git/ssh-username-with-private-key.png\" alt=\"ssh-username-with-private-key\"></p>\n"},{"layout":"default","title":"ssh-remote","nav_order":15,"description":"远程登陆","parent":"Doc","has_children":false,"grand_parent":"Jenkins","_content":"\n# 远程登陆\n\n- Publish over SSH\n- 配置私钥登陆\n\n![SSH Server](./img/ssh-remote/ssh-service.png)\n","source":"_posts/docker/app/devs/jenkins/doc/ssh-remote.md","raw":"---\nlayout: default\ntitle: ssh-remote\nnav_order: 15\ndescription: 远程登陆\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/ssh-remote/\"\ngrand_parent: Jenkins\n---\n\n# 远程登陆\n\n- Publish over SSH\n- 配置私钥登陆\n\n![SSH Server](./img/ssh-remote/ssh-service.png)\n","slug":"docker/app/devs/jenkins/doc/ssh-remote","published":1,"date":"2025-02-23T07:43:31.007Z","updated":"2025-02-23T07:43:31.007Z","__permalink":"/docker/app/devs/jenkins/doc/ssh-remote/","comments":1,"photos":[],"_id":"cm7k5rwb9009qmswshpjz9irs","content":"<h1 id=\"远程登陆\"><a href=\"#远程登陆\" class=\"headerlink\" title=\"远程登陆\"></a>远程登陆</h1><ul>\n<li>Publish over SSH</li>\n<li>配置私钥登陆</li>\n</ul>\n<p><img data-src=\"/./img/ssh-remote/ssh-service.png\" alt=\"SSH Server\"></p>\n","excerpt":"","more":"<h1 id=\"远程登陆\"><a href=\"#远程登陆\" class=\"headerlink\" title=\"远程登陆\"></a>远程登陆</h1><ul>\n<li>Publish over SSH</li>\n<li>配置私钥登陆</li>\n</ul>\n<p><img data-src=\"/./img/ssh-remote/ssh-service.png\" alt=\"SSH Server\"></p>\n"},{"layout":"default","title":"tomcat-file-2","nav_order":15,"description":"构建tomcat应用的相关记录","parent":"Doc","has_children":false,"grand_parent":"Jenkins","_content":"\n# 构建tomcat应用的相关记录\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n# published: 8280 # todo 映射端口根据实际调整\n\nexport app_version='1.0'\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 编辑server.xml文件\ntee tomcat-server.xml <<-'EOF'\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n\n  <GlobalNamingResources>\n\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n\n  <Service name=\"Catalina\">\n\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\"\n               URIEncoding=\"utf-8\" />\n\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n\n      </Host>\n    </Engine>\n  </Service>\n</Server>\nEOF\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM tomcat:8.5-jdk8-corretto\nMAINTAINER Fa\nWORKDIR /usr/local/tomcat\nRUN rm -rf webapps/*\nADD ./target/*$JOB_NAME webapps/ROOT\n\nRUN rm -rf ./conf/server.xml\nADD ./tomcat-server.xml ./conf/server.xml\n\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi \n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 8080\n        published: 8280\n        mode: host\n    volumes:\n      - /home/data/file:/usr/local/tmp/web-api/uploads/\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n```\n","source":"_posts/docker/app/devs/jenkins/doc/tomcat-file-2.md","raw":"---\nlayout: default\ntitle: tomcat-file-2\nnav_order: 15\ndescription: 构建tomcat应用的相关记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/tomcat-file-2/\"\ngrand_parent: Jenkins\n---\n\n# 构建tomcat应用的相关记录\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n# published: 8280 # todo 映射端口根据实际调整\n\nexport app_version='1.0'\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 编辑server.xml文件\ntee tomcat-server.xml <<-'EOF'\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n\n  <GlobalNamingResources>\n\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n\n  <Service name=\"Catalina\">\n\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\"\n               URIEncoding=\"utf-8\" />\n\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n\n      </Host>\n    </Engine>\n  </Service>\n</Server>\nEOF\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM tomcat:8.5-jdk8-corretto\nMAINTAINER Fa\nWORKDIR /usr/local/tomcat\nRUN rm -rf webapps/*\nADD ./target/*$JOB_NAME webapps/ROOT\n\nRUN rm -rf ./conf/server.xml\nADD ./tomcat-server.xml ./conf/server.xml\n\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi \n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 8080\n        published: 8280\n        mode: host\n    volumes:\n      - /home/data/file:/usr/local/tmp/web-api/uploads/\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n```\n","slug":"docker/app/devs/jenkins/doc/tomcat-file-2","published":1,"date":"2025-02-23T07:43:31.017Z","updated":"2025-02-23T07:43:31.017Z","__permalink":"/docker/app/devs/jenkins/doc/tomcat-file-2/","comments":1,"photos":[],"_id":"cm7k5rwb9009rmswsdxgh58h0","content":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">published: 8280 <span class=\"comment\"># todo 映射端口根据实际调整</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑server.xml文件</span></span><br><span class=\"line\">tee tomcat-server.xml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;GlobalNamingResources&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</span><br><span class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class=\"line\">              description=&quot;User database that can be updated and saved&quot;</span><br><span class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class=\"line\">  &lt;/GlobalNamingResources&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">               connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">               redirectPort=&quot;8443&quot;</span><br><span class=\"line\">               URIEncoding=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span><br><span class=\"line\">               resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class=\"line\">      &lt;/Realm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/Host&gt;</span><br><span class=\"line\">    &lt;/Engine&gt;</span><br><span class=\"line\">  &lt;/Service&gt;</span><br><span class=\"line\">&lt;/Server&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM tomcat:8.5-jdk8-corretto</span><br><span class=\"line\">MAINTAINER Fa</span><br><span class=\"line\">WORKDIR /usr/local/tomcat</span><br><span class=\"line\">RUN rm -rf webapps/*</span><br><span class=\"line\">ADD ./target/*$JOB_NAME webapps/ROOT</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rm -rf ./conf/server.xml</span><br><span class=\"line\">ADD ./tomcat-server.xml ./conf/server.xml</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8080</span><br><span class=\"line\">        published: 8280</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /home/data/file:/usr/local/tmp/web-api/uploads/</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">published: 8280 <span class=\"comment\"># todo 映射端口根据实际调整</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑server.xml文件</span></span><br><span class=\"line\">tee tomcat-server.xml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;GlobalNamingResources&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</span><br><span class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class=\"line\">              description=&quot;User database that can be updated and saved&quot;</span><br><span class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class=\"line\">  &lt;/GlobalNamingResources&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">               connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">               redirectPort=&quot;8443&quot;</span><br><span class=\"line\">               URIEncoding=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span><br><span class=\"line\">               resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class=\"line\">      &lt;/Realm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/Host&gt;</span><br><span class=\"line\">    &lt;/Engine&gt;</span><br><span class=\"line\">  &lt;/Service&gt;</span><br><span class=\"line\">&lt;/Server&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM tomcat:8.5-jdk8-corretto</span><br><span class=\"line\">MAINTAINER Fa</span><br><span class=\"line\">WORKDIR /usr/local/tomcat</span><br><span class=\"line\">RUN rm -rf webapps/*</span><br><span class=\"line\">ADD ./target/*$JOB_NAME webapps/ROOT</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rm -rf ./conf/server.xml</span><br><span class=\"line\">ADD ./tomcat-server.xml ./conf/server.xml</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8080</span><br><span class=\"line\">        published: 8280</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /home/data/file:/usr/local/tmp/web-api/uploads/</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"tomcat-file","nav_order":15,"description":"构建tomcat应用的相关记录","parent":"Doc","has_children":false,"grand_parent":"Jenkins","_content":"\n# 构建tomcat应用的相关记录\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n# published: 8280 # todo 映射端口根据实际调整\n\nexport app_version='1.0'\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\necho \"FROM tomcat:8.5.71-jdk8-corretto\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/local/tomcat\" >> Dockerfile\necho \"RUN rm -rf webapps/*\" >> Dockerfile\necho \"ADD ./target/*$JOB_NAME webapps/$JOB_NAME\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi \n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 8080\n        published: 8280\n        mode: host\n    volumes:\n      - /home/data/file:/usr/local/tmp/web-api/uploads/\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n```\n","source":"_posts/docker/app/devs/jenkins/doc/tomcat-file.md","raw":"---\nlayout: default\ntitle: tomcat-file\nnav_order: 15\ndescription: 构建tomcat应用的相关记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/tomcat-file/\"\ngrand_parent: Jenkins\n---\n\n# 构建tomcat应用的相关记录\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n# published: 8280 # todo 映射端口根据实际调整\n\nexport app_version='1.0'\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\necho \"FROM tomcat:8.5.71-jdk8-corretto\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/local/tomcat\" >> Dockerfile\necho \"RUN rm -rf webapps/*\" >> Dockerfile\necho \"ADD ./target/*$JOB_NAME webapps/$JOB_NAME\" >> Dockerfile\necho \"EXPOSE 8080\" >> Dockerfile\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi \n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 8080\n        published: 8280\n        mode: host\n    volumes:\n      - /home/data/file:/usr/local/tmp/web-api/uploads/\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n```\n","slug":"docker/app/devs/jenkins/doc/tomcat-file","published":1,"date":"2025-02-23T07:43:31.004Z","updated":"2025-02-23T07:43:31.004Z","__permalink":"/docker/app/devs/jenkins/doc/tomcat-file/","comments":1,"photos":[],"_id":"cm7k5rwb9009smsws4kdc3naa","content":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">published: 8280 <span class=\"comment\"># todo 映射端口根据实际调整</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5.71-jdk8-corretto&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/local/tomcat&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*$JOB_NAME webapps/$JOB_NAME&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8080</span><br><span class=\"line\">        published: 8280</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /home/data/file:/usr/local/tmp/web-api/uploads/</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">published: 8280 <span class=\"comment\"># todo 映射端口根据实际调整</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM tomcat:8.5.71-jdk8-corretto&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/local/tomcat&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf webapps/*&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./target/*$JOB_NAME webapps/$JOB_NAME&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 8080&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8080</span><br><span class=\"line\">        published: 8280</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /home/data/file:/usr/local/tmp/web-api/uploads/</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Springboot","nav_order":5,"has_children":true,"parent":"Springboot","_content":"\n# Springboot\n","source":"_posts/docker/app/devs/jenkins/springboot/index.md","raw":"---\nlayout: default\ntitle: Springboot\nnav_order: 5\nhas_children: true\nparent: Springboot\npermalink: \"/docker/app/devs/jenkins/springboot/\"\n---\n\n# Springboot\n","slug":"docker/app/devs/jenkins/springboot/index","published":1,"date":"2025-02-23T07:43:30.910Z","updated":"2025-02-23T07:43:30.917Z","__permalink":"/docker/app/devs/jenkins/springboot/","comments":1,"photos":[],"_id":"cm7k5rwb9009tmswscc138y86","content":"<h1 id=\"Springboot\"><a href=\"#Springboot\" class=\"headerlink\" title=\"Springboot\"></a>Springboot</h1>","excerpt":"","more":"<h1 id=\"Springboot\"><a href=\"#Springboot\" class=\"headerlink\" title=\"Springboot\"></a>Springboot</h1>"},{"layout":"default","title":"doc","nav_order":15,"parent":"Springboot","has_children":false,"grand_parent":"Jenkins","_content":"\n## springboot pom.xml配置\n```xml\n            <!-- Docker maven plugin start -->\n            <plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>0.4.13</version>\n                <configuration>\n                    <imageName>demo</imageName><!--[a-z 0-9] 不然docker:build会报错-->\n                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>\n                    <resources>\n                        <resource>\n                            <targetPath>/</targetPath>\n                            <directory>${project.build.directory}</directory>\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                </configuration>\n            </plugin>\n            <!-- Docker maven plugin end -->\n```\n## docker.sh\n```shell\nmvn clean package  docker:build\necho \"当前docker 镜像：\"\ndocker images | grep demo\necho \"启动容器----->\"\ndocker run -p 8001:8001 -d demo\necho \"启动服务成功！\"\n```\n## Dockerfile \n```shell\n#FROM openjdk:8-jdk-alpine\nFROM hub.c.163.com/dwyane/openjdk:8\nVOLUME /tmp\nADD docker-springboot-1.0-SNAPSHOT.jar app.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```\n## jenkins 安装docker插件\n- docker插件配置[系统管理->系统配置->Cloud]\n- 配置docker host URI [unix:///var/run/docker.sock]\n> (typically unix:///var/run/docker.sock or tcp://127.0.0.1:2376)\n\n![img.png](img/img.png)\n## 新建maven项目配置\n![img_1.png](img/img_1.png)\n![img_2.png](img/img_2.png)\n","source":"_posts/docker/app/devs/jenkins/springboot/springboot.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\nparent: Springboot\npermalink: \"/docker/app/devs/jenkins/springboot/springboot/\"\nhas_children: false\ngrand_parent: Jenkins\n---\n\n## springboot pom.xml配置\n```xml\n            <!-- Docker maven plugin start -->\n            <plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>0.4.13</version>\n                <configuration>\n                    <imageName>demo</imageName><!--[a-z 0-9] 不然docker:build会报错-->\n                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>\n                    <resources>\n                        <resource>\n                            <targetPath>/</targetPath>\n                            <directory>${project.build.directory}</directory>\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                </configuration>\n            </plugin>\n            <!-- Docker maven plugin end -->\n```\n## docker.sh\n```shell\nmvn clean package  docker:build\necho \"当前docker 镜像：\"\ndocker images | grep demo\necho \"启动容器----->\"\ndocker run -p 8001:8001 -d demo\necho \"启动服务成功！\"\n```\n## Dockerfile \n```shell\n#FROM openjdk:8-jdk-alpine\nFROM hub.c.163.com/dwyane/openjdk:8\nVOLUME /tmp\nADD docker-springboot-1.0-SNAPSHOT.jar app.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```\n## jenkins 安装docker插件\n- docker插件配置[系统管理->系统配置->Cloud]\n- 配置docker host URI [unix:///var/run/docker.sock]\n> (typically unix:///var/run/docker.sock or tcp://127.0.0.1:2376)\n\n![img.png](img/img.png)\n## 新建maven项目配置\n![img_1.png](img/img_1.png)\n![img_2.png](img/img_2.png)\n","slug":"docker/app/devs/jenkins/springboot/springboot","published":1,"date":"2025-02-23T07:43:30.876Z","updated":"2025-02-23T07:43:30.877Z","__permalink":"/docker/app/devs/jenkins/springboot/springboot/","comments":1,"photos":[],"_id":"cm7k5rwba009umswsbzj83byi","content":"<h2 id=\"springboot-pom-xml配置\"><a href=\"#springboot-pom-xml配置\" class=\"headerlink\" title=\"springboot pom.xml配置\"></a>springboot pom.xml配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Docker maven plugin start --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.4.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span><span class=\"comment\">&lt;!--[a-z 0-9] 不然docker:build会报错--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Docker maven plugin end --&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-sh\"><a href=\"#docker-sh\" class=\"headerlink\" title=\"docker.sh\"></a>docker.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package  docker:build</span><br><span class=\"line\">echo &quot;当前docker 镜像：&quot;</span><br><span class=\"line\">docker images | grep demo</span><br><span class=\"line\">echo &quot;启动容器-----&gt;&quot;</span><br><span class=\"line\">docker run -p 8001:8001 -d demo</span><br><span class=\"line\">echo &quot;启动服务成功！&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">FROM openjdk:8-jdk-alpine</span></span><br><span class=\"line\">FROM hub.c.163.com/dwyane/openjdk:8</span><br><span class=\"line\">VOLUME /tmp</span><br><span class=\"line\">ADD docker-springboot-1.0-SNAPSHOT.jar app.jar</span><br><span class=\"line\">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"jenkins-安装docker插件\"><a href=\"#jenkins-安装docker插件\" class=\"headerlink\" title=\"jenkins 安装docker插件\"></a>jenkins 安装docker插件</h2><ul>\n<li>docker插件配置[系统管理-&gt;系统配置-&gt;Cloud]</li>\n<li>配置docker host URI [unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock]<blockquote>\n<p>(typically unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock or tcp:&#x2F;&#x2F;127.0.0.1:2376)</p>\n</blockquote>\n</li>\n</ul>\n<p><img data-src=\"/img/img.png\" alt=\"img.png\"></p>\n<h2 id=\"新建maven项目配置\"><a href=\"#新建maven项目配置\" class=\"headerlink\" title=\"新建maven项目配置\"></a>新建maven项目配置</h2><p><img data-src=\"/img/img_1.png\" alt=\"img_1.png\"><br><img data-src=\"/img/img_2.png\" alt=\"img_2.png\"></p>\n","excerpt":"","more":"<h2 id=\"springboot-pom-xml配置\"><a href=\"#springboot-pom-xml配置\" class=\"headerlink\" title=\"springboot pom.xml配置\"></a>springboot pom.xml配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Docker maven plugin start --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.4.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span><span class=\"comment\">&lt;!--[a-z 0-9] 不然docker:build会报错--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Docker maven plugin end --&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-sh\"><a href=\"#docker-sh\" class=\"headerlink\" title=\"docker.sh\"></a>docker.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package  docker:build</span><br><span class=\"line\">echo &quot;当前docker 镜像：&quot;</span><br><span class=\"line\">docker images | grep demo</span><br><span class=\"line\">echo &quot;启动容器-----&gt;&quot;</span><br><span class=\"line\">docker run -p 8001:8001 -d demo</span><br><span class=\"line\">echo &quot;启动服务成功！&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">FROM openjdk:8-jdk-alpine</span></span><br><span class=\"line\">FROM hub.c.163.com/dwyane/openjdk:8</span><br><span class=\"line\">VOLUME /tmp</span><br><span class=\"line\">ADD docker-springboot-1.0-SNAPSHOT.jar app.jar</span><br><span class=\"line\">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"jenkins-安装docker插件\"><a href=\"#jenkins-安装docker插件\" class=\"headerlink\" title=\"jenkins 安装docker插件\"></a>jenkins 安装docker插件</h2><ul>\n<li>docker插件配置[系统管理-&gt;系统配置-&gt;Cloud]</li>\n<li>配置docker host URI [unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock]<blockquote>\n<p>(typically unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock or tcp:&#x2F;&#x2F;127.0.0.1:2376)</p>\n</blockquote>\n</li>\n</ul>\n<p><img data-src=\"/img/img.png\" alt=\"img.png\"></p>\n<h2 id=\"新建maven项目配置\"><a href=\"#新建maven项目配置\" class=\"headerlink\" title=\"新建maven项目配置\"></a>新建maven项目配置</h2><p><img data-src=\"/img/img_1.png\" alt=\"img_1.png\"><br><img data-src=\"/img/img_2.png\" alt=\"img_2.png\"></p>\n"},{"layout":"default","title":"Deploy","nav_order":5,"has_children":true,"parent":"Deploy","_content":"\n# Deploy\n","source":"_posts/docker/app/devs/jenkins/deploy/index.md","raw":"---\nlayout: default\ntitle: Deploy\nnav_order: 5\nhas_children: true\nparent: Deploy\npermalink: \"/docker/app/devs/jenkins/deploy/\"\n---\n\n# Deploy\n","slug":"docker/app/devs/jenkins/deploy/index","published":1,"date":"2025-02-23T07:43:30.998Z","updated":"2025-02-23T07:43:30.998Z","__permalink":"/docker/app/devs/jenkins/deploy/","comments":1,"photos":[],"_id":"cm7k5rwba009vmsws783232ag","content":"<h1 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h1>","excerpt":"","more":"<h1 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h1>"},{"layout":"default","title":"Simple","nav_order":5,"has_children":true,"parent":"Simple","_content":"\n# Simple\n","source":"_posts/docker/app/devs/watch/simple/index.md","raw":"---\nlayout: default\ntitle: Simple\nnav_order: 5\nhas_children: true\nparent: Simple\npermalink: \"/docker/app/devs/watch/simple/\"\n---\n\n# Simple\n","slug":"docker/app/devs/watch/simple/index","published":1,"date":"2025-02-23T07:43:30.789Z","updated":"2025-02-23T07:43:30.789Z","__permalink":"/docker/app/devs/watch/simple/","comments":1,"photos":[],"_id":"cm7k5rwba009wmswsgr0xdmqb","content":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>","excerpt":"","more":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>"},{"layout":"default","title":"node-pnpm","nav_order":15,"description":"使用Jenkins构建node项目","parent":"Deploy","has_children":false,"grand_parent":"Jenkins","_content":"\n# 使用Jenkins构建node项目\n\n## Jenkins配置\n\n- 创建一个自由风格的项目\n- 使用gitee作为代码源\n- 在构建步骤中添加[执行 shell]步骤\n\n```shell\n\npwd\n\n# 安装pnpm\nnpm install -g pnpm\n\n# 安装依赖(非必须)\npnpm install\n# 构建项目\npnpm run build\n\n# 删除除 node_modules和dist 以外的所有内容\nls | grep -v 'node_modules\\|dist' | xargs  rm -rf\n\n\n```\n\n- 在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell)]步骤\n\n```shell\n\nexport app_version='1.0'\n\nexport docker_jenkins_workspace=\"/var/lib/docker/volumes/mng_jenkins_home/_data/workspace/\"\n\ncd $docker_jenkins_workspace/$JOB_NAME\n\nmkdir -p ./nginx/conf.d/\n\n# 添加default.conf文件\ntee ./nginx/conf.d/default.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n    }\n\n}\nEOF\n\n# 编辑Dockerfile文件\necho \"FROM nginx\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/share/nginx/html\" >> Dockerfile\necho \"RUN rm -rf *\" >> Dockerfile\necho \"ADD ./dist .\" >> Dockerfile\necho \"ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/\" >> Dockerfile\necho \"EXPOSE 80\" >> Dockerfile\n\n# 构建镜像\ndocker build --no-cache -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\nnetworks:\n  middleware:\n    external: true\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n# 删除除 node_modules 以外的所有内容\nls | grep -v 'node_modules' | xargs  rm -rf\n\n```\n\n- Nginx添加代理配置\n\n- 在conf.d目录中添加mall-admin-web-demo.conf文件\n\n```shell\nserver {\n    listen      80;\n    server_name mall-admin-web-demo.iuin.xyz iuin.xyz;\n\n    access_log /var/log/mall-admin-web-demo_access.log;\n    error_log /var/log/mall-admin-web-demo_error.log;\n\n    location / {\n        include cors.conf;\n        proxy_set_header Host $host;\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://mall-admin-web-demo;\n    }\n\n}\n\n```\n\n## 部署\n\n```shell\n# 镜像下载问题，可试这添加--with-registry-auth看看\ndocker stack up -c $JOB_NAME.yml --with-registry-auth app\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/node-pnpm.md","raw":"---\nlayout: default\ntitle: node-pnpm\nnav_order: 15\ndescription: 使用Jenkins构建node项目\nparent: Deploy\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/node-pnpm/\"\ngrand_parent: Jenkins\n---\n\n# 使用Jenkins构建node项目\n\n## Jenkins配置\n\n- 创建一个自由风格的项目\n- 使用gitee作为代码源\n- 在构建步骤中添加[执行 shell]步骤\n\n```shell\n\npwd\n\n# 安装pnpm\nnpm install -g pnpm\n\n# 安装依赖(非必须)\npnpm install\n# 构建项目\npnpm run build\n\n# 删除除 node_modules和dist 以外的所有内容\nls | grep -v 'node_modules\\|dist' | xargs  rm -rf\n\n\n```\n\n- 在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell)]步骤\n\n```shell\n\nexport app_version='1.0'\n\nexport docker_jenkins_workspace=\"/var/lib/docker/volumes/mng_jenkins_home/_data/workspace/\"\n\ncd $docker_jenkins_workspace/$JOB_NAME\n\nmkdir -p ./nginx/conf.d/\n\n# 添加default.conf文件\ntee ./nginx/conf.d/default.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n    }\n\n}\nEOF\n\n# 编辑Dockerfile文件\necho \"FROM nginx\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/share/nginx/html\" >> Dockerfile\necho \"RUN rm -rf *\" >> Dockerfile\necho \"ADD ./dist .\" >> Dockerfile\necho \"ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/\" >> Dockerfile\necho \"EXPOSE 80\" >> Dockerfile\n\n# 构建镜像\ndocker build --no-cache -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\nnetworks:\n  middleware:\n    external: true\nEOF\n\ndocker stack up -c $JOB_NAME.yml app\n\n# 删除除 node_modules 以外的所有内容\nls | grep -v 'node_modules' | xargs  rm -rf\n\n```\n\n- Nginx添加代理配置\n\n- 在conf.d目录中添加mall-admin-web-demo.conf文件\n\n```shell\nserver {\n    listen      80;\n    server_name mall-admin-web-demo.iuin.xyz iuin.xyz;\n\n    access_log /var/log/mall-admin-web-demo_access.log;\n    error_log /var/log/mall-admin-web-demo_error.log;\n\n    location / {\n        include cors.conf;\n        proxy_set_header Host $host;\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://mall-admin-web-demo;\n    }\n\n}\n\n```\n\n## 部署\n\n```shell\n# 镜像下载问题，可试这添加--with-registry-auth看看\ndocker stack up -c $JOB_NAME.yml --with-registry-auth app\n\n```\n","slug":"docker/app/devs/jenkins/deploy/node-pnpm","published":1,"date":"2025-02-23T07:43:30.968Z","updated":"2025-02-23T07:43:30.968Z","__permalink":"/docker/app/devs/jenkins/deploy/node-pnpm/","comments":1,"photos":[],"_id":"cm7k5rwba009xmsws1otu3a27","content":"<h1 id=\"使用Jenkins构建node项目\"><a href=\"#使用Jenkins构建node项目\" class=\"headerlink\" title=\"使用Jenkins构建node项目\"></a>使用Jenkins构建node项目</h1><h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><ul>\n<li>创建一个自由风格的项目</li>\n<li>使用gitee作为代码源</li>\n<li>在构建步骤中添加[执行 shell]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装pnpm</span></span><br><span class=\"line\">npm install -g pnpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖(非必须)</span></span><br><span class=\"line\">pnpm install</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建项目</span></span><br><span class=\"line\">pnpm run build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules和dist 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules\\|dist&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell)]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export docker_jenkins_workspace=&quot;/var/lib/docker/volumes/mng_jenkins_home/_data/workspace/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $docker_jenkins_workspace/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./nginx/conf.d/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加default.conf文件</span></span><br><span class=\"line\">tee ./nginx/conf.d/default.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM nginx&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/share/nginx/html&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf *&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./dist .&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 80&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build --no-cache -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Nginx添加代理配置</p>\n</li>\n<li><p>在conf.d目录中添加mall-admin-web-demo.conf文件</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name mall-admin-web-demo.iuin.xyz iuin.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /var/log/mall-admin-web-demo_access.log;</span><br><span class=\"line\">    error_log /var/log/mall-admin-web-demo_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        include cors.conf;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://mall-admin-web-demo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">镜像下载问题，可试这添加--with-registry-auth看看</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml --with-registry-auth app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"使用Jenkins构建node项目\"><a href=\"#使用Jenkins构建node项目\" class=\"headerlink\" title=\"使用Jenkins构建node项目\"></a>使用Jenkins构建node项目</h1><h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><ul>\n<li>创建一个自由风格的项目</li>\n<li>使用gitee作为代码源</li>\n<li>在构建步骤中添加[执行 shell]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装pnpm</span></span><br><span class=\"line\">npm install -g pnpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖(非必须)</span></span><br><span class=\"line\">pnpm install</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建项目</span></span><br><span class=\"line\">pnpm run build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules和dist 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules\\|dist&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell)]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export docker_jenkins_workspace=&quot;/var/lib/docker/volumes/mng_jenkins_home/_data/workspace/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $docker_jenkins_workspace/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./nginx/conf.d/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加default.conf文件</span></span><br><span class=\"line\">tee ./nginx/conf.d/default.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM nginx&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/share/nginx/html&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf *&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./dist .&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 80&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build --no-cache -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Nginx添加代理配置</p>\n</li>\n<li><p>在conf.d目录中添加mall-admin-web-demo.conf文件</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name mall-admin-web-demo.iuin.xyz iuin.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /var/log/mall-admin-web-demo_access.log;</span><br><span class=\"line\">    error_log /var/log/mall-admin-web-demo_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        include cors.conf;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://mall-admin-web-demo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">镜像下载问题，可试这添加--with-registry-auth看看</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml --with-registry-auth app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Simple","nav_order":5,"has_children":true,"parent":"Simple","_content":"\n# Simple\n","source":"_posts/docker/app/devs/yapi/simple/index.md","raw":"---\nlayout: default\ntitle: Simple\nnav_order: 5\nhas_children: true\nparent: Simple\npermalink: \"/docker/app/devs/yapi/simple/\"\n---\n\n# Simple\n","slug":"docker/app/devs/yapi/simple/index","published":1,"date":"2025-02-23T07:43:30.529Z","updated":"2025-02-23T07:43:30.531Z","__permalink":"/docker/app/devs/yapi/simple/","comments":1,"photos":[],"_id":"cm7k5rwba009ymsws7xwnc5kn","content":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>","excerpt":"","more":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"访问地址```shellhttp://ip:9100/metrics( 查看服务器的指标)http://ip:8899/metrics（查看docker容器的指标）http://ip:9090/(prometheus的原生web-ui)http://ip:3000/(Grafana开源的监控可视化组件页面)```![img.png](img/img_0.png)","parent":"Simple","has_children":false,"grand_parent":"Watch","_content":"\n## 访问地址\n```shell\nhttp://ip:9100/metrics( 查看服务器的指标)\nhttp://ip:8899/metrics（查看docker容器的指标）\nhttp://ip:9090/(prometheus的原生web-ui)\nhttp://ip:3000/(Grafana开源的监控可视化组件页面)\n```\n![img.png](img/img_0.png)\n\n## Grafana配置监控\n- Try it out, default admin user credentials are admin/admin.\n- configuration -> base sources -> prometheus\n![img.png](img/img.png)\n- 配置url: http://prometheus:9090\n![img_1.png](img/img_1.png)\n- import对应的模板，相关的模板可以在 https://grafana.com/grafana/dashboards/ 这里查到。\n- create -> import -> 8913\n![img_2.png](img/img_2.png)\n![img_3.png](img/img_3.png)\n![img_4.png](img/img_4.png)  \n- 我们用docker启动的服务还是蛮多的，也可以看看Docker的监控（上面启动的cadvisor服务就采集了Docker的信息），我们使用模板893来配置监控docker的信息：\n![img_5.png](img/img_5.png)\n\n## Java系统指标\n- 在项目中多引入两个pom依赖\n```xml\n<!--监控-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n<!--适配prometheus-->\n<dependency>\n  <groupId>io.micrometer</groupId>\n  <artifactId>micrometer-registry-prometheus</artifactId>\n</dependency>\n```\n- 然后在配置文件上加上对应的配置（开启监控并可以让prometheus拉取配置）\n```yaml\n# 监控配置  TODO\nmanagement:\n  endpoint:\n    health:\n      show-details: always\n    metrics:\n      enabled: true\n    prometheus:\n      enabled: true\n  endpoints:\n    web:\n      exposure:\n        include: '*'\n  metrics:\n    export:\n      prometheus:\n        enabled: true\n```\n- 启动服务后，访问/actuator路径就能看到一大堆输出的指标了，包括prometheus的\n![img_6.png](img/img_6.png)\n- 在前面写好的的prometheus.yml文件下添加相关的配置信息：\n```yaml\n  - job_name: 'austin'\n    metrics_path: '/actuator/prometheus' # 采集的路径\n    static_configs:\n    - targets: ['ip:port'] # todo 这里的ip和端口写自己的应用下的\n```\n- 访问：ip:9090/targets这个路径下，能看到现在prometheus能采集到的端点有哪些，看到都是自己所配置的状态为up，那就说明正常了。\n![img_7.png](img/img_7.png)\n- 选用了4701模板的JVM监控和12900SpringBoot监控\n![img_8.png](img/img_8.png)\n![img_9.png](img/img_9.png)\n- 业务指标\n![img_10.png](img/img_10.png)\n- 总结\n![img_11.png](img/img_11.png)\n","source":"_posts/docker/app/devs/watch/simple/simple.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: 访问地址```shellhttp://ip:9100/metrics( 查看服务器的指标)http://ip:8899/metrics（查看docker容器的指标）http://ip:9090/(prometheus的原生web-ui)http://ip:3000/(Grafana开源的监控可视化组件页面)```![img.png](img/img_0.png)\nparent: Simple\nhas_children: false\npermalink: \"/docker/app/devs/watch/simple/simple/\"\ngrand_parent: Watch\n---\n\n## 访问地址\n```shell\nhttp://ip:9100/metrics( 查看服务器的指标)\nhttp://ip:8899/metrics（查看docker容器的指标）\nhttp://ip:9090/(prometheus的原生web-ui)\nhttp://ip:3000/(Grafana开源的监控可视化组件页面)\n```\n![img.png](img/img_0.png)\n\n## Grafana配置监控\n- Try it out, default admin user credentials are admin/admin.\n- configuration -> base sources -> prometheus\n![img.png](img/img.png)\n- 配置url: http://prometheus:9090\n![img_1.png](img/img_1.png)\n- import对应的模板，相关的模板可以在 https://grafana.com/grafana/dashboards/ 这里查到。\n- create -> import -> 8913\n![img_2.png](img/img_2.png)\n![img_3.png](img/img_3.png)\n![img_4.png](img/img_4.png)  \n- 我们用docker启动的服务还是蛮多的，也可以看看Docker的监控（上面启动的cadvisor服务就采集了Docker的信息），我们使用模板893来配置监控docker的信息：\n![img_5.png](img/img_5.png)\n\n## Java系统指标\n- 在项目中多引入两个pom依赖\n```xml\n<!--监控-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n<!--适配prometheus-->\n<dependency>\n  <groupId>io.micrometer</groupId>\n  <artifactId>micrometer-registry-prometheus</artifactId>\n</dependency>\n```\n- 然后在配置文件上加上对应的配置（开启监控并可以让prometheus拉取配置）\n```yaml\n# 监控配置  TODO\nmanagement:\n  endpoint:\n    health:\n      show-details: always\n    metrics:\n      enabled: true\n    prometheus:\n      enabled: true\n  endpoints:\n    web:\n      exposure:\n        include: '*'\n  metrics:\n    export:\n      prometheus:\n        enabled: true\n```\n- 启动服务后，访问/actuator路径就能看到一大堆输出的指标了，包括prometheus的\n![img_6.png](img/img_6.png)\n- 在前面写好的的prometheus.yml文件下添加相关的配置信息：\n```yaml\n  - job_name: 'austin'\n    metrics_path: '/actuator/prometheus' # 采集的路径\n    static_configs:\n    - targets: ['ip:port'] # todo 这里的ip和端口写自己的应用下的\n```\n- 访问：ip:9090/targets这个路径下，能看到现在prometheus能采集到的端点有哪些，看到都是自己所配置的状态为up，那就说明正常了。\n![img_7.png](img/img_7.png)\n- 选用了4701模板的JVM监控和12900SpringBoot监控\n![img_8.png](img/img_8.png)\n![img_9.png](img/img_9.png)\n- 业务指标\n![img_10.png](img/img_10.png)\n- 总结\n![img_11.png](img/img_11.png)\n","slug":"docker/app/devs/watch/simple/simple","published":1,"date":"2025-02-23T07:43:30.730Z","updated":"2025-02-23T07:43:30.730Z","__permalink":"/docker/app/devs/watch/simple/simple/","comments":1,"photos":[],"_id":"cm7k5rwba009zmsws4fzxbopj","content":"<h2 id=\"访问地址\"><a href=\"#访问地址\" class=\"headerlink\" title=\"访问地址\"></a>访问地址</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://ip:9100/metrics( 查看服务器的指标)</span><br><span class=\"line\">http://ip:8899/metrics（查看docker容器的指标）</span><br><span class=\"line\">http://ip:9090/(prometheus的原生web-ui)</span><br><span class=\"line\">http://ip:3000/(Grafana开源的监控可视化组件页面)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/img/img_0.png\" alt=\"img.png\"></p>\n<h2 id=\"Grafana配置监控\"><a href=\"#Grafana配置监控\" class=\"headerlink\" title=\"Grafana配置监控\"></a>Grafana配置监控</h2><ul>\n<li>Try it out, default admin user credentials are admin&#x2F;admin.</li>\n<li>configuration -&gt; base sources -&gt; prometheus<br><img data-src=\"/img/img.png\" alt=\"img.png\"></li>\n<li>配置url: <a href=\"http://prometheus:9090/\">http://prometheus:9090</a><br><img data-src=\"/img/img_1.png\" alt=\"img_1.png\"></li>\n<li>import对应的模板，相关的模板可以在 <a href=\"https://grafana.com/grafana/dashboards/\">https://grafana.com/grafana/dashboards/</a> 这里查到。</li>\n<li>create -&gt; import -&gt; 8913<br><img data-src=\"/img/img_2.png\" alt=\"img_2.png\"><br><img data-src=\"/img/img_3.png\" alt=\"img_3.png\"><br><img data-src=\"/img/img_4.png\" alt=\"img_4.png\">  </li>\n<li>我们用docker启动的服务还是蛮多的，也可以看看Docker的监控（上面启动的cadvisor服务就采集了Docker的信息），我们使用模板893来配置监控docker的信息：<br><img data-src=\"/img/img_5.png\" alt=\"img_5.png\"></li>\n</ul>\n<h2 id=\"Java系统指标\"><a href=\"#Java系统指标\" class=\"headerlink\" title=\"Java系统指标\"></a>Java系统指标</h2><ul>\n<li>在项目中多引入两个pom依赖<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--监控--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--适配prometheus--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.micrometer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>然后在配置文件上加上对应的配置（开启监控并可以让prometheus拉取配置）<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 监控配置  TODO</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">metrics:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span></span><br><span class=\"line\">    <span class=\"attr\">export:</span></span><br><span class=\"line\">      <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li>启动服务后，访问&#x2F;actuator路径就能看到一大堆输出的指标了，包括prometheus的<br><img data-src=\"/img/img_6.png\" alt=\"img_6.png\"></li>\n<li>在前面写好的的prometheus.yml文件下添加相关的配置信息：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;austin&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">metrics_path:</span> <span class=\"string\">&#x27;/actuator/prometheus&#x27;</span> <span class=\"comment\"># 采集的路径</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;ip:port&#x27;</span>] <span class=\"comment\"># todo 这里的ip和端口写自己的应用下的</span></span><br></pre></td></tr></table></figure></li>\n<li>访问：ip:9090&#x2F;targets这个路径下，能看到现在prometheus能采集到的端点有哪些，看到都是自己所配置的状态为up，那就说明正常了。<br><img data-src=\"/img/img_7.png\" alt=\"img_7.png\"></li>\n<li>选用了4701模板的JVM监控和12900SpringBoot监控<br><img data-src=\"/img/img_8.png\" alt=\"img_8.png\"><br><img data-src=\"/img/img_9.png\" alt=\"img_9.png\"></li>\n<li>业务指标<br><img data-src=\"/img/img_10.png\" alt=\"img_10.png\"></li>\n<li>总结<br><img data-src=\"/img/img_11.png\" alt=\"img_11.png\"></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"访问地址\"><a href=\"#访问地址\" class=\"headerlink\" title=\"访问地址\"></a>访问地址</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://ip:9100/metrics( 查看服务器的指标)</span><br><span class=\"line\">http://ip:8899/metrics（查看docker容器的指标）</span><br><span class=\"line\">http://ip:9090/(prometheus的原生web-ui)</span><br><span class=\"line\">http://ip:3000/(Grafana开源的监控可视化组件页面)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"/img/img_0.png\" alt=\"img.png\"></p>\n<h2 id=\"Grafana配置监控\"><a href=\"#Grafana配置监控\" class=\"headerlink\" title=\"Grafana配置监控\"></a>Grafana配置监控</h2><ul>\n<li>Try it out, default admin user credentials are admin&#x2F;admin.</li>\n<li>configuration -&gt; base sources -&gt; prometheus<br><img data-src=\"/img/img.png\" alt=\"img.png\"></li>\n<li>配置url: <a href=\"http://prometheus:9090/\">http://prometheus:9090</a><br><img data-src=\"/img/img_1.png\" alt=\"img_1.png\"></li>\n<li>import对应的模板，相关的模板可以在 <a href=\"https://grafana.com/grafana/dashboards/\">https://grafana.com/grafana/dashboards/</a> 这里查到。</li>\n<li>create -&gt; import -&gt; 8913<br><img data-src=\"/img/img_2.png\" alt=\"img_2.png\"><br><img data-src=\"/img/img_3.png\" alt=\"img_3.png\"><br><img data-src=\"/img/img_4.png\" alt=\"img_4.png\">  </li>\n<li>我们用docker启动的服务还是蛮多的，也可以看看Docker的监控（上面启动的cadvisor服务就采集了Docker的信息），我们使用模板893来配置监控docker的信息：<br><img data-src=\"/img/img_5.png\" alt=\"img_5.png\"></li>\n</ul>\n<h2 id=\"Java系统指标\"><a href=\"#Java系统指标\" class=\"headerlink\" title=\"Java系统指标\"></a>Java系统指标</h2><ul>\n<li>在项目中多引入两个pom依赖<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--监控--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--适配prometheus--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.micrometer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>然后在配置文件上加上对应的配置（开启监控并可以让prometheus拉取配置）<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 监控配置  TODO</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">metrics:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span></span><br><span class=\"line\">    <span class=\"attr\">export:</span></span><br><span class=\"line\">      <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li>启动服务后，访问&#x2F;actuator路径就能看到一大堆输出的指标了，包括prometheus的<br><img data-src=\"/img/img_6.png\" alt=\"img_6.png\"></li>\n<li>在前面写好的的prometheus.yml文件下添加相关的配置信息：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;austin&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">metrics_path:</span> <span class=\"string\">&#x27;/actuator/prometheus&#x27;</span> <span class=\"comment\"># 采集的路径</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;ip:port&#x27;</span>] <span class=\"comment\"># todo 这里的ip和端口写自己的应用下的</span></span><br></pre></td></tr></table></figure></li>\n<li>访问：ip:9090&#x2F;targets这个路径下，能看到现在prometheus能采集到的端点有哪些，看到都是自己所配置的状态为up，那就说明正常了。<br><img data-src=\"/img/img_7.png\" alt=\"img_7.png\"></li>\n<li>选用了4701模板的JVM监控和12900SpringBoot监控<br><img data-src=\"/img/img_8.png\" alt=\"img_8.png\"><br><img data-src=\"/img/img_9.png\" alt=\"img_9.png\"></li>\n<li>业务指标<br><img data-src=\"/img/img_10.png\" alt=\"img_10.png\"></li>\n<li>总结<br><img data-src=\"/img/img_11.png\" alt=\"img_11.png\"></li>\n</ul>\n"},{"layout":"default","title":"Simplev2","nav_order":5,"has_children":true,"parent":"Simplev2","_content":"\n# Simplev2\n","source":"_posts/docker/app/devs/yapi/simpleV2/index.md","raw":"---\nlayout: default\ntitle: Simplev2\nnav_order: 5\nhas_children: true\nparent: Simplev2\npermalink: \"/docker/app/devs/yapi/simplev2/\"\n---\n\n# Simplev2\n","slug":"docker/app/devs/yapi/simpleV2/index","published":1,"date":"2025-02-23T07:43:30.551Z","updated":"2025-02-23T07:43:30.551Z","__permalink":"/docker/app/devs/yapi/simplev2/","comments":1,"photos":[],"_id":"cm7k5rwba00a0mswsc5tobik0","content":"<h1 id=\"Simplev2\"><a href=\"#Simplev2\" class=\"headerlink\" title=\"Simplev2\"></a>Simplev2</h1>","excerpt":"","more":"<h1 id=\"Simplev2\"><a href=\"#Simplev2\" class=\"headerlink\" title=\"Simplev2\"></a>Simplev2</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"yapi","parent":"Simplev2","has_children":false,"grand_parent":"Yapi","_content":"\n# yapi\n\n## 部署\n\n- [参考地址](https://github.com/fjc0k/docker-YApi)\n\n```shell\ngit clone https://github.com/fjc0k/docker-YApi.git\n# 无法访问 github 的可使用国内镜像：\ngit clone https://gitee.com/fjc0k/docker-YApi.git\n# 接下来，进入docker-YApi目录，修改 docker-compose.yml 中 yapi-web 下的环境变量 YAPI_ADMIN_ACCOUNT 为你的管理员邮箱，YAPI_ADMIN_PASSWORD 为你的管理员密码。\n# YAPI_CLOSE_REGISTER=false 设置为false则开启普通用户注册功能\n\n# 最后，执行 docker-compose up -d 启动服务。\n\n# 然后，通过 http://localhost:40001 即可访问 YApi。\n```\n","source":"_posts/docker/app/devs/yapi/simpleV2/simpleV2.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: yapi\nparent: Simplev2\nhas_children: false\npermalink: \"/docker/app/devs/yapi/simplev2/simplev2/\"\ngrand_parent: Yapi\n---\n\n# yapi\n\n## 部署\n\n- [参考地址](https://github.com/fjc0k/docker-YApi)\n\n```shell\ngit clone https://github.com/fjc0k/docker-YApi.git\n# 无法访问 github 的可使用国内镜像：\ngit clone https://gitee.com/fjc0k/docker-YApi.git\n# 接下来，进入docker-YApi目录，修改 docker-compose.yml 中 yapi-web 下的环境变量 YAPI_ADMIN_ACCOUNT 为你的管理员邮箱，YAPI_ADMIN_PASSWORD 为你的管理员密码。\n# YAPI_CLOSE_REGISTER=false 设置为false则开启普通用户注册功能\n\n# 最后，执行 docker-compose up -d 启动服务。\n\n# 然后，通过 http://localhost:40001 即可访问 YApi。\n```\n","slug":"docker/app/devs/yapi/simpleV2/simpleV2","published":1,"date":"2025-02-23T07:43:30.550Z","updated":"2025-02-23T07:43:30.551Z","__permalink":"/docker/app/devs/yapi/simplev2/simplev2/","comments":1,"photos":[],"_id":"cm7k5rwba00a1mswsbn7wcv6v","content":"<h1 id=\"yapi\"><a href=\"#yapi\" class=\"headerlink\" title=\"yapi\"></a>yapi</h1><h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ul>\n<li><a href=\"https://github.com/fjc0k/docker-YApi\">参考地址</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/fjc0k/docker-YApi.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">无法访问 github 的可使用国内镜像：</span></span><br><span class=\"line\">git clone https://gitee.com/fjc0k/docker-YApi.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">接下来，进入docker-YApi目录，修改 docker-compose.yml 中 yapi-web 下的环境变量 YAPI_ADMIN_ACCOUNT 为你的管理员邮箱，YAPI_ADMIN_PASSWORD 为你的管理员密码。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">YAPI_CLOSE_REGISTER=<span class=\"literal\">false</span> 设置为<span class=\"literal\">false</span>则开启普通用户注册功能</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">最后，执行 docker-compose up -d 启动服务。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后，通过 http://localhost:40001 即可访问 YApi。</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"yapi\"><a href=\"#yapi\" class=\"headerlink\" title=\"yapi\"></a>yapi</h1><h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ul>\n<li><a href=\"https://github.com/fjc0k/docker-YApi\">参考地址</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/fjc0k/docker-YApi.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">无法访问 github 的可使用国内镜像：</span></span><br><span class=\"line\">git clone https://gitee.com/fjc0k/docker-YApi.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">接下来，进入docker-YApi目录，修改 docker-compose.yml 中 yapi-web 下的环境变量 YAPI_ADMIN_ACCOUNT 为你的管理员邮箱，YAPI_ADMIN_PASSWORD 为你的管理员密码。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">YAPI_CLOSE_REGISTER=<span class=\"literal\">false</span> 设置为<span class=\"literal\">false</span>则开启普通用户注册功能</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">最后，执行 docker-compose up -d 启动服务。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后，通过 http://localhost:40001 即可访问 YApi。</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":15,"description":"Jenkins配置```shell","parent":"Simple","has_children":false,"grand_parent":"Yapi","_content":"\n## Jenkins配置\n```shell\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n\n# 创建docker mongo.yml文件(执行一次就好了)\ntee mongo.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  mongo:\n    image: mongo\n    environment:\n      - MONGO_INITDB_DATABASE=yapi\n      - MONGO_INITDB_ROOT_USERNAME=root\n      - MONGO_INITDB_ROOT_PASSWORD=root\n    ports:\n      - target: 27017\n        published: 27017\n        mode: host\n    volumes:\n      - mongo_data_db:/data/db\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  mongo_data_db:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c mongo.yml data\n\n\n# 自定义配置文件 config.json\n# 其中管理员账号在下面配置，密码默认为ymfe.org\ntee config.json <<-'EOF'\n\n{\n  \"port\": \"3000\",\n  \"adminAccount\": \"admin@admin.com\",\n  \"timeout\":120000,\n  \"db\": {\n    \"servername\": \"_MONGO_SERVER_NAME\",\n    \"DATABASE\": \"yapi\",\n    \"port\": 27017,\n    \"user\": \"root\",\n    \"pass\": \"root\",\n    \"authSource\": \"admin\"\n  }\n}\n\nEOF\n\n# 自定义配置文件 docker-entrypoint.sh\ntee docker-entrypoint.sh <<-'EOF'\n#!/bin/bash\n\n# set -eo pipefail\n\ndeclare -A PAGE_PARAMS=(\n\n  [\"_MONGO_SERVER_NAME\"]=\"mongo\"\n\n)\n\nfor index in \"${!PAGE_PARAMS[@]}\";\n\ndo\n\n  ENV_VAL=`eval echo '$'${index}`\n\n  [ -z \"${ENV_VAL}\" ] && ENV_VAL=${PAGE_PARAMS[$index]}\n\n  echo \"text repeat: ${index}-->${ENV_VAL}\"\n  echo \"$(/bin/sed \"s!${index}!${ENV_VAL}!g\" /yapi/config.json)\" > /yapi/config.json;\n\ndone\n\ncat /yapi/config.json\n\nnode /yapi/vendors/server/install.js\n\nexec \"$@\"\n\nEOF\n\n# 创建Dockerfile文件\ntee Dockerfile <<-'EOF'\n\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python3 make\nENV VERSION=1.9.3\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd vendors && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 183461750@qq.com\nENV TZ=\"Asia/Shanghai\"\nENV MONGO_SERVER_NAME=mongo\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nCOPY config.json ../config.json\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\nRUN echo -e http://mirrors.ustc.edu.cn/alpine/v3.15/main/ > /etc/apk/repositories\nRUN apk add --no-cache bash\nEXPOSE 3000\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"node\", \"server/app.js\"]\n\nEOF\n\n# app构建版本号\nexport app_version='1.0'\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 创建docker yapi.yml文件\ntee $JOB_NAME.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 3000\n        published: 3000\n        mode: host\n    environment:\n      MONGO_SERVER_NAME: mongo\n    depends_on:\n      - mongo\n    volumes:\n      - yapi_log:/home/vendors/log\n      - ./config.json:/yapi/config.json\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  yapi_log:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c $JOB_NAME.yml open_app\n\n```\n","source":"_posts/docker/app/devs/yapi/simple/simple.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: Jenkins配置```shell\nparent: Simple\nhas_children: false\npermalink: \"/docker/app/devs/yapi/simple/simple/\"\ngrand_parent: Yapi\n---\n\n## Jenkins配置\n```shell\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\n\n# 创建docker mongo.yml文件(执行一次就好了)\ntee mongo.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  mongo:\n    image: mongo\n    environment:\n      - MONGO_INITDB_DATABASE=yapi\n      - MONGO_INITDB_ROOT_USERNAME=root\n      - MONGO_INITDB_ROOT_PASSWORD=root\n    ports:\n      - target: 27017\n        published: 27017\n        mode: host\n    volumes:\n      - mongo_data_db:/data/db\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  mongo_data_db:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c mongo.yml data\n\n\n# 自定义配置文件 config.json\n# 其中管理员账号在下面配置，密码默认为ymfe.org\ntee config.json <<-'EOF'\n\n{\n  \"port\": \"3000\",\n  \"adminAccount\": \"admin@admin.com\",\n  \"timeout\":120000,\n  \"db\": {\n    \"servername\": \"_MONGO_SERVER_NAME\",\n    \"DATABASE\": \"yapi\",\n    \"port\": 27017,\n    \"user\": \"root\",\n    \"pass\": \"root\",\n    \"authSource\": \"admin\"\n  }\n}\n\nEOF\n\n# 自定义配置文件 docker-entrypoint.sh\ntee docker-entrypoint.sh <<-'EOF'\n#!/bin/bash\n\n# set -eo pipefail\n\ndeclare -A PAGE_PARAMS=(\n\n  [\"_MONGO_SERVER_NAME\"]=\"mongo\"\n\n)\n\nfor index in \"${!PAGE_PARAMS[@]}\";\n\ndo\n\n  ENV_VAL=`eval echo '$'${index}`\n\n  [ -z \"${ENV_VAL}\" ] && ENV_VAL=${PAGE_PARAMS[$index]}\n\n  echo \"text repeat: ${index}-->${ENV_VAL}\"\n  echo \"$(/bin/sed \"s!${index}!${ENV_VAL}!g\" /yapi/config.json)\" > /yapi/config.json;\n\ndone\n\ncat /yapi/config.json\n\nnode /yapi/vendors/server/install.js\n\nexec \"$@\"\n\nEOF\n\n# 创建Dockerfile文件\ntee Dockerfile <<-'EOF'\n\nFROM node:12-alpine as builder\nWORKDIR /yapi\nRUN apk add --no-cache wget python3 make\nENV VERSION=1.9.3\nRUN wget https://github.com/YMFE/yapi/archive/v${VERSION}.zip\nRUN unzip v${VERSION}.zip && mv yapi-${VERSION} vendors\nRUN cd vendors && npm install --production --registry https://registry.npm.taobao.org\n\nFROM node:12-alpine\nMAINTAINER 183461750@qq.com\nENV TZ=\"Asia/Shanghai\"\nENV MONGO_SERVER_NAME=mongo\nWORKDIR /yapi/vendors\nCOPY --from=builder /yapi/vendors /yapi/vendors\nCOPY config.json ../config.json\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\nRUN echo -e http://mirrors.ustc.edu.cn/alpine/v3.15/main/ > /etc/apk/repositories\nRUN apk add --no-cache bash\nEXPOSE 3000\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"node\", \"server/app.js\"]\n\nEOF\n\n# app构建版本号\nexport app_version='1.0'\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 创建docker yapi.yml文件\ntee $JOB_NAME.yml <<-'EOF'\n\nversion: \"3.5\"\n\nservices:\n  \n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 3000\n        published: 3000\n        mode: host\n    environment:\n      MONGO_SERVER_NAME: mongo\n    depends_on:\n      - mongo\n    volumes:\n      - yapi_log:/home/vendors/log\n      - ./config.json:/yapi/config.json\n    networks:\n      middleware:\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  yapi_log:\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动\ndocker stack up -c $JOB_NAME.yml open_app\n\n```\n","slug":"docker/app/devs/yapi/simple/simple","published":1,"date":"2025-02-23T07:43:30.528Z","updated":"2025-02-23T07:43:30.528Z","__permalink":"/docker/app/devs/yapi/simple/simple/","comments":1,"photos":[],"_id":"cm7k5rwba00a2mswsai3b4w78","content":"<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker mongo.yml文件(执行一次就好了)</span></span><br><span class=\"line\">tee mongo.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\">  mongo:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - MONGO_INITDB_DATABASE=yapi</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_USERNAME=root</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_PASSWORD=root</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 27017</span><br><span class=\"line\">        published: 27017</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - mongo_data_db:/data/db</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  mongo_data_db:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c mongo.yml data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 config.json</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中管理员账号在下面配置，密码默认为ymfe.org</span></span><br><span class=\"line\">tee config.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;port&quot;: &quot;3000&quot;,</span><br><span class=\"line\">  &quot;adminAccount&quot;: &quot;admin@admin.com&quot;,</span><br><span class=\"line\">  &quot;timeout&quot;:120000,</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;servername&quot;: &quot;_MONGO_SERVER_NAME&quot;,</span><br><span class=\"line\">    &quot;DATABASE&quot;: &quot;yapi&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;user&quot;: &quot;root&quot;,</span><br><span class=\"line\">    &quot;pass&quot;: &quot;root&quot;,</span><br><span class=\"line\">    &quot;authSource&quot;: &quot;admin&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 docker-entrypoint.sh</span></span><br><span class=\"line\">tee docker-entrypoint.sh &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">set</span> -eo pipefail</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare -A PAGE_PARAMS=(</span><br><span class=\"line\"></span><br><span class=\"line\">  [&quot;_MONGO_SERVER_NAME&quot;]=&quot;mongo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">for index in &quot;$&#123;!PAGE_PARAMS[@]&#125;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">do</span><br><span class=\"line\"></span><br><span class=\"line\">  ENV_VAL=`eval echo &#x27;$&#x27;$&#123;index&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">  [ -z &quot;$&#123;ENV_VAL&#125;&quot; ] &amp;&amp; ENV_VAL=$&#123;PAGE_PARAMS[$index]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  echo &quot;text repeat: $&#123;index&#125;--&gt;$&#123;ENV_VAL&#125;&quot;</span><br><span class=\"line\">  echo &quot;$(/bin/sed &quot;s!$&#123;index&#125;!$&#123;ENV_VAL&#125;!g&quot; /yapi/config.json)&quot; &gt; /yapi/config.json;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">cat /yapi/config.json</span><br><span class=\"line\"></span><br><span class=\"line\">node /yapi/vendors/server/install.js</span><br><span class=\"line\"></span><br><span class=\"line\">exec &quot;$@&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python3 make</span><br><span class=\"line\">ENV VERSION=1.9.3</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd vendors &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 183461750@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">ENV MONGO_SERVER_NAME=mongo</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">COPY config.json ../config.json</span><br><span class=\"line\">COPY docker-entrypoint.sh /docker-entrypoint.sh</span><br><span class=\"line\">RUN chmod +x /docker-entrypoint.sh</span><br><span class=\"line\">RUN echo -e http://mirrors.ustc.edu.cn/alpine/v3.15/main/ &gt; /etc/apk/repositories</span><br><span class=\"line\">RUN apk add --no-cache bash</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</span><br><span class=\"line\">CMD [&quot;node&quot;, &quot;server/app.js&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">app构建版本号</span></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker yapi.yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 3000</span><br><span class=\"line\">        published: 3000</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MONGO_SERVER_NAME: mongo</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mongo</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - yapi_log:/home/vendors/log</span><br><span class=\"line\">      - ./config.json:/yapi/config.json</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  yapi_log:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml open_app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker mongo.yml文件(执行一次就好了)</span></span><br><span class=\"line\">tee mongo.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\">  mongo:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - MONGO_INITDB_DATABASE=yapi</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_USERNAME=root</span><br><span class=\"line\">      - MONGO_INITDB_ROOT_PASSWORD=root</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 27017</span><br><span class=\"line\">        published: 27017</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - mongo_data_db:/data/db</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  mongo_data_db:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c mongo.yml data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 config.json</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中管理员账号在下面配置，密码默认为ymfe.org</span></span><br><span class=\"line\">tee config.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;port&quot;: &quot;3000&quot;,</span><br><span class=\"line\">  &quot;adminAccount&quot;: &quot;admin@admin.com&quot;,</span><br><span class=\"line\">  &quot;timeout&quot;:120000,</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;servername&quot;: &quot;_MONGO_SERVER_NAME&quot;,</span><br><span class=\"line\">    &quot;DATABASE&quot;: &quot;yapi&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;user&quot;: &quot;root&quot;,</span><br><span class=\"line\">    &quot;pass&quot;: &quot;root&quot;,</span><br><span class=\"line\">    &quot;authSource&quot;: &quot;admin&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义配置文件 docker-entrypoint.sh</span></span><br><span class=\"line\">tee docker-entrypoint.sh &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">set</span> -eo pipefail</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare -A PAGE_PARAMS=(</span><br><span class=\"line\"></span><br><span class=\"line\">  [&quot;_MONGO_SERVER_NAME&quot;]=&quot;mongo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">for index in &quot;$&#123;!PAGE_PARAMS[@]&#125;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">do</span><br><span class=\"line\"></span><br><span class=\"line\">  ENV_VAL=`eval echo &#x27;$&#x27;$&#123;index&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">  [ -z &quot;$&#123;ENV_VAL&#125;&quot; ] &amp;&amp; ENV_VAL=$&#123;PAGE_PARAMS[$index]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  echo &quot;text repeat: $&#123;index&#125;--&gt;$&#123;ENV_VAL&#125;&quot;</span><br><span class=\"line\">  echo &quot;$(/bin/sed &quot;s!$&#123;index&#125;!$&#123;ENV_VAL&#125;!g&quot; /yapi/config.json)&quot; &gt; /yapi/config.json;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">cat /yapi/config.json</span><br><span class=\"line\"></span><br><span class=\"line\">node /yapi/vendors/server/install.js</span><br><span class=\"line\"></span><br><span class=\"line\">exec &quot;$@&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine as builder</span><br><span class=\"line\">WORKDIR /yapi</span><br><span class=\"line\">RUN apk add --no-cache wget python3 make</span><br><span class=\"line\">ENV VERSION=1.9.3</span><br><span class=\"line\">RUN wget https://github.com/YMFE/yapi/archive/v$&#123;VERSION&#125;.zip</span><br><span class=\"line\">RUN unzip v$&#123;VERSION&#125;.zip &amp;&amp; mv yapi-$&#123;VERSION&#125; vendors</span><br><span class=\"line\">RUN cd vendors &amp;&amp; npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">FROM node:12-alpine</span><br><span class=\"line\">MAINTAINER 183461750@qq.com</span><br><span class=\"line\">ENV TZ=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">ENV MONGO_SERVER_NAME=mongo</span><br><span class=\"line\">WORKDIR /yapi/vendors</span><br><span class=\"line\">COPY --from=builder /yapi/vendors /yapi/vendors</span><br><span class=\"line\">COPY config.json ../config.json</span><br><span class=\"line\">COPY docker-entrypoint.sh /docker-entrypoint.sh</span><br><span class=\"line\">RUN chmod +x /docker-entrypoint.sh</span><br><span class=\"line\">RUN echo -e http://mirrors.ustc.edu.cn/alpine/v3.15/main/ &gt; /etc/apk/repositories</span><br><span class=\"line\">RUN apk add --no-cache bash</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</span><br><span class=\"line\">CMD [&quot;node&quot;, &quot;server/app.js&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">app构建版本号</span></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建docker yapi.yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">version: &quot;3.5&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 3000</span><br><span class=\"line\">        published: 3000</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MONGO_SERVER_NAME: mongo</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mongo</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - yapi_log:/home/vendors/log</span><br><span class=\"line\">      - ./config.json:/yapi/config.json</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      middleware:</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  yapi_log:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml open_app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Ipsec-vpn","nav_order":5,"has_children":true,"parent":"Ipsec-vpn","_content":"\n# Ipsec-vpn\n","source":"_posts/docker/app/networks/vpn/ipsec-vpn/index.md","raw":"---\nlayout: default\ntitle: Ipsec-vpn\nnav_order: 5\nhas_children: true\nparent: Ipsec-vpn\npermalink: \"/docker/app/networks/vpn/ipsec-vpn/\"\n---\n\n# Ipsec-vpn\n","slug":"docker/app/networks/vpn/ipsec-vpn/index","published":1,"date":"2025-02-23T07:43:31.075Z","updated":"2025-02-23T07:43:31.075Z","__permalink":"/docker/app/networks/vpn/ipsec-vpn/","comments":1,"photos":[],"_id":"cm7k5rwba00a3mswsaqnlfxkw","content":"<h1 id=\"Ipsec-vpn\"><a href=\"#Ipsec-vpn\" class=\"headerlink\" title=\"Ipsec-vpn\"></a>Ipsec-vpn</h1>","excerpt":"","more":"<h1 id=\"Ipsec-vpn\"><a href=\"#Ipsec-vpn\" class=\"headerlink\" title=\"Ipsec-vpn\"></a>Ipsec-vpn</h1>"},{"layout":"default","title":"Openvpn","nav_order":5,"has_children":true,"parent":"Openvpn","_content":"\n# Openvpn\n","source":"_posts/docker/app/networks/vpn/openvpn/index.md","raw":"---\nlayout: default\ntitle: Openvpn\nnav_order: 5\nhas_children: true\nparent: Openvpn\npermalink: \"/docker/app/networks/vpn/openvpn/\"\n---\n\n# Openvpn\n","slug":"docker/app/networks/vpn/openvpn/index","published":1,"date":"2025-02-23T07:43:31.074Z","updated":"2025-02-23T07:43:31.074Z","__permalink":"/docker/app/networks/vpn/openvpn/","comments":1,"photos":[],"_id":"cm7k5rwba00a4msws0i9c9urz","content":"<h1 id=\"Openvpn\"><a href=\"#Openvpn\" class=\"headerlink\" title=\"Openvpn\"></a>Openvpn</h1>","excerpt":"","more":"<h1 id=\"Openvpn\"><a href=\"#Openvpn\" class=\"headerlink\" title=\"Openvpn\"></a>Openvpn</h1>"},{"layout":"default","title":"Middleware","nav_order":5,"has_children":true,"parent":"Middleware","_content":"\n# Middleware\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/index.md","raw":"---\nlayout: default\ntitle: Middleware\nnav_order: 5\nhas_children: true\nparent: Middleware\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/middleware/\"\n---\n\n# Middleware\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/middleware/index","published":1,"date":"2025-02-23T07:43:31.141Z","updated":"2025-02-23T07:43:31.141Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/middleware/","comments":1,"photos":[],"_id":"cm7k5rwba00a5mswscoke46bw","content":"<h1 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h1>","excerpt":"","more":"<h1 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h1>"},{"layout":"default","title":"Backend","nav_order":5,"has_children":true,"parent":"Backend","_content":"\n# Backend\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/index.md","raw":"---\nlayout: default\ntitle: Backend\nnav_order: 5\nhas_children: true\nparent: Backend\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/backend/\"\n---\n\n# Backend\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/backend/index","published":1,"date":"2025-02-23T07:43:31.152Z","updated":"2025-02-23T07:43:31.152Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/backend/","comments":1,"photos":[],"_id":"cm7k5rwbb00a6mswsah85cs3c","content":"<h1 id=\"Backend\"><a href=\"#Backend\" class=\"headerlink\" title=\"Backend\"></a>Backend</h1>","excerpt":"","more":"<h1 id=\"Backend\"><a href=\"#Backend\" class=\"headerlink\" title=\"Backend\"></a>Backend</h1>"},{"layout":"default","title":"Projects","nav_order":5,"has_children":true,"parent":"Projects","_content":"\n# Projects\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/index.md","raw":"---\nlayout: default\ntitle: Projects\nnav_order: 5\nhas_children: true\nparent: Projects\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/projects/\"\n---\n\n# Projects\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/projects/index","published":1,"date":"2025-02-23T07:43:31.151Z","updated":"2025-02-23T07:43:31.152Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/projects/","comments":1,"photos":[],"_id":"cm7k5rwbb00a7msws8sxxg0t7","content":"<h1 id=\"Projects\"><a href=\"#Projects\" class=\"headerlink\" title=\"Projects\"></a>Projects</h1>","excerpt":"","more":"<h1 id=\"Projects\"><a href=\"#Projects\" class=\"headerlink\" title=\"Projects\"></a>Projects</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"ipsec-vpn","parent":"Ipsec-vpn","has_children":false,"grand_parent":"Vpn","_content":"\n# ipsec-vpn\n\n## 什么是IPsec VPN？\n\nIPsec即Internet Protocol Security，是一种用于保护互联网协议（IP）传输数据的协议。而VPN（Virtual Private Network）则是一种基于公共网络构建的专用网络，在其中可以进行安全数据传输。IPsec VPN结合二者的优势，可以在公共网络中创建一个虚拟专用网络，实现不同地点之间的安全通信，包括远程办公、资源共享等。\n\n## 使用Docker搭建IPsec VPN Server\n\n### 服务端\n\n规划vpn配置信息\n\n- /data/jump/vpn/.env为vpn配置信息\n\n```shell\nVPN_IPSEC_PSK=password1!\n# 配置用于登陆VPN的账号和密码\nVPN_USER=vpn\nVPN_PASSWORD=vpn1234\n# 如下应该填写本机的外网IP（服务器ip）\nVPN_PUBLIC_IP=36.111.179.*\n# 配置额外的用户名和密码\nVPN_ADDL_USERS=vpn1 vpn2\nVPN_ADDL_PASSWORDS=vpn11234 pass21234\n#DNS配置\nVPN_DNS_SRV1=8.8.8.5\nVPN_DNS_SRV2=114.114.114.114\n```\n\n启动VPN服务\n\n```shell\ndocker run \\ \n    --name ipsec-vpn-server \\\n    --env-file /data/jump/vpn/.env \\ \n    --restart=always \\\n    -p 500:500/udp \\\n    -p 4500:4500/udp \\\n    -v /lib/modules:/lib/modules:ro \\\n    -d --privileged \\\n    hwdsl2/ipsec-vpn-server\n```\n\n查看信息\n\n```shell\n# 查看VPN连接信息\ndocker logs -f ipsec-vpn-server\n# 查看客户端连接情况,ip分配、流量使用等\ndocker exec -it ipsec-vpn-server ipsec whack --trafficstatus\n```\n\n### 客户端\n\n客户端连接VPN通用配置（手机、电脑）\n\n```shell\n#不同设备实际需要填写的信息会有略微不同，但是关键信息为以下几个配置\nVPN类型：IPSec\n服务器：vpn服务器的ip，不需要端口\n密钥：配置信息中的IPSec PSK\n用户名、密码：配置信息中的username、password\n```\n\n## 相关文章\n\n- [一套好用的VPN](https://mp.weixin.qq.com/s/iKOaRoSwbA5Nz667uk-jRA)\n- 私有文章\n  - [package](https://gitee.com/LFa/doc/raw/master/me/records/soft/vpn/openVPN/pakage/doc.md)\n  \n","source":"_posts/docker/app/networks/vpn/ipsec-vpn/ipsec-vpn.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: ipsec-vpn\nparent: Ipsec-vpn\nhas_children: false\npermalink: \"/docker/app/networks/vpn/ipsec-vpn/ipsec-vpn/\"\ngrand_parent: Vpn\n---\n\n# ipsec-vpn\n\n## 什么是IPsec VPN？\n\nIPsec即Internet Protocol Security，是一种用于保护互联网协议（IP）传输数据的协议。而VPN（Virtual Private Network）则是一种基于公共网络构建的专用网络，在其中可以进行安全数据传输。IPsec VPN结合二者的优势，可以在公共网络中创建一个虚拟专用网络，实现不同地点之间的安全通信，包括远程办公、资源共享等。\n\n## 使用Docker搭建IPsec VPN Server\n\n### 服务端\n\n规划vpn配置信息\n\n- /data/jump/vpn/.env为vpn配置信息\n\n```shell\nVPN_IPSEC_PSK=password1!\n# 配置用于登陆VPN的账号和密码\nVPN_USER=vpn\nVPN_PASSWORD=vpn1234\n# 如下应该填写本机的外网IP（服务器ip）\nVPN_PUBLIC_IP=36.111.179.*\n# 配置额外的用户名和密码\nVPN_ADDL_USERS=vpn1 vpn2\nVPN_ADDL_PASSWORDS=vpn11234 pass21234\n#DNS配置\nVPN_DNS_SRV1=8.8.8.5\nVPN_DNS_SRV2=114.114.114.114\n```\n\n启动VPN服务\n\n```shell\ndocker run \\ \n    --name ipsec-vpn-server \\\n    --env-file /data/jump/vpn/.env \\ \n    --restart=always \\\n    -p 500:500/udp \\\n    -p 4500:4500/udp \\\n    -v /lib/modules:/lib/modules:ro \\\n    -d --privileged \\\n    hwdsl2/ipsec-vpn-server\n```\n\n查看信息\n\n```shell\n# 查看VPN连接信息\ndocker logs -f ipsec-vpn-server\n# 查看客户端连接情况,ip分配、流量使用等\ndocker exec -it ipsec-vpn-server ipsec whack --trafficstatus\n```\n\n### 客户端\n\n客户端连接VPN通用配置（手机、电脑）\n\n```shell\n#不同设备实际需要填写的信息会有略微不同，但是关键信息为以下几个配置\nVPN类型：IPSec\n服务器：vpn服务器的ip，不需要端口\n密钥：配置信息中的IPSec PSK\n用户名、密码：配置信息中的username、password\n```\n\n## 相关文章\n\n- [一套好用的VPN](https://mp.weixin.qq.com/s/iKOaRoSwbA5Nz667uk-jRA)\n- 私有文章\n  - [package](https://gitee.com/LFa/doc/raw/master/me/records/soft/vpn/openVPN/pakage/doc.md)\n  \n","slug":"docker/app/networks/vpn/ipsec-vpn/ipsec-vpn","published":1,"date":"2025-02-23T07:43:31.075Z","updated":"2025-02-23T07:43:31.075Z","__permalink":"/docker/app/networks/vpn/ipsec-vpn/ipsec-vpn/","comments":1,"photos":[],"_id":"cm7k5rwbb00a8mswsf8t51clu","content":"<h1 id=\"ipsec-vpn\"><a href=\"#ipsec-vpn\" class=\"headerlink\" title=\"ipsec-vpn\"></a>ipsec-vpn</h1><h2 id=\"什么是IPsec-VPN？\"><a href=\"#什么是IPsec-VPN？\" class=\"headerlink\" title=\"什么是IPsec VPN？\"></a>什么是IPsec VPN？</h2><p>IPsec即Internet Protocol Security，是一种用于保护互联网协议（IP）传输数据的协议。而VPN（Virtual Private Network）则是一种基于公共网络构建的专用网络，在其中可以进行安全数据传输。IPsec VPN结合二者的优势，可以在公共网络中创建一个虚拟专用网络，实现不同地点之间的安全通信，包括远程办公、资源共享等。</p>\n<h2 id=\"使用Docker搭建IPsec-VPN-Server\"><a href=\"#使用Docker搭建IPsec-VPN-Server\" class=\"headerlink\" title=\"使用Docker搭建IPsec VPN Server\"></a>使用Docker搭建IPsec VPN Server</h2><h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><p>规划vpn配置信息</p>\n<ul>\n<li>&#x2F;data&#x2F;jump&#x2F;vpn&#x2F;.env为vpn配置信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VPN_IPSEC_PSK=password1!</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置用于登陆VPN的账号和密码</span></span><br><span class=\"line\">VPN_USER=vpn</span><br><span class=\"line\">VPN_PASSWORD=vpn1234</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如下应该填写本机的外网IP（服务器ip）</span></span><br><span class=\"line\">VPN_PUBLIC_IP=36.111.179.*</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置额外的用户名和密码</span></span><br><span class=\"line\">VPN_ADDL_USERS=vpn1 vpn2</span><br><span class=\"line\">VPN_ADDL_PASSWORDS=vpn11234 pass21234</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">DNS配置</span></span><br><span class=\"line\">VPN_DNS_SRV1=8.8.8.5</span><br><span class=\"line\">VPN_DNS_SRV2=114.114.114.114</span><br></pre></td></tr></table></figure>\n\n<p>启动VPN服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\ </span><br><span class=\"line\">    --name ipsec-vpn-server \\</span><br><span class=\"line\">    --env-file /data/jump/vpn/.env \\ </span><br><span class=\"line\">    --restart=always \\</span><br><span class=\"line\">    -p 500:500/udp \\</span><br><span class=\"line\">    -p 4500:4500/udp \\</span><br><span class=\"line\">    -v /lib/modules:/lib/modules:ro \\</span><br><span class=\"line\">    -d --privileged \\</span><br><span class=\"line\">    hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure>\n\n<p>查看信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看VPN连接信息</span></span><br><span class=\"line\">docker logs -f ipsec-vpn-server</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看客户端连接情况,ip分配、流量使用等</span></span><br><span class=\"line\">docker exec -it ipsec-vpn-server ipsec whack --trafficstatus</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><p>客户端连接VPN通用配置（手机、电脑）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">不同设备实际需要填写的信息会有略微不同，但是关键信息为以下几个配置</span></span><br><span class=\"line\">VPN类型：IPSec</span><br><span class=\"line\">服务器：vpn服务器的ip，不需要端口</span><br><span class=\"line\">密钥：配置信息中的IPSec PSK</span><br><span class=\"line\">用户名、密码：配置信息中的username、password</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/iKOaRoSwbA5Nz667uk-jRA\">一套好用的VPN</a></li>\n<li>私有文章<ul>\n<li><a href=\"https://gitee.com/LFa/doc/raw/master/me/records/soft/vpn/openVPN/pakage/doc.md\">package</a></li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"ipsec-vpn\"><a href=\"#ipsec-vpn\" class=\"headerlink\" title=\"ipsec-vpn\"></a>ipsec-vpn</h1><h2 id=\"什么是IPsec-VPN？\"><a href=\"#什么是IPsec-VPN？\" class=\"headerlink\" title=\"什么是IPsec VPN？\"></a>什么是IPsec VPN？</h2><p>IPsec即Internet Protocol Security，是一种用于保护互联网协议（IP）传输数据的协议。而VPN（Virtual Private Network）则是一种基于公共网络构建的专用网络，在其中可以进行安全数据传输。IPsec VPN结合二者的优势，可以在公共网络中创建一个虚拟专用网络，实现不同地点之间的安全通信，包括远程办公、资源共享等。</p>\n<h2 id=\"使用Docker搭建IPsec-VPN-Server\"><a href=\"#使用Docker搭建IPsec-VPN-Server\" class=\"headerlink\" title=\"使用Docker搭建IPsec VPN Server\"></a>使用Docker搭建IPsec VPN Server</h2><h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><p>规划vpn配置信息</p>\n<ul>\n<li>&#x2F;data&#x2F;jump&#x2F;vpn&#x2F;.env为vpn配置信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VPN_IPSEC_PSK=password1!</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置用于登陆VPN的账号和密码</span></span><br><span class=\"line\">VPN_USER=vpn</span><br><span class=\"line\">VPN_PASSWORD=vpn1234</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如下应该填写本机的外网IP（服务器ip）</span></span><br><span class=\"line\">VPN_PUBLIC_IP=36.111.179.*</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置额外的用户名和密码</span></span><br><span class=\"line\">VPN_ADDL_USERS=vpn1 vpn2</span><br><span class=\"line\">VPN_ADDL_PASSWORDS=vpn11234 pass21234</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">DNS配置</span></span><br><span class=\"line\">VPN_DNS_SRV1=8.8.8.5</span><br><span class=\"line\">VPN_DNS_SRV2=114.114.114.114</span><br></pre></td></tr></table></figure>\n\n<p>启动VPN服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\ </span><br><span class=\"line\">    --name ipsec-vpn-server \\</span><br><span class=\"line\">    --env-file /data/jump/vpn/.env \\ </span><br><span class=\"line\">    --restart=always \\</span><br><span class=\"line\">    -p 500:500/udp \\</span><br><span class=\"line\">    -p 4500:4500/udp \\</span><br><span class=\"line\">    -v /lib/modules:/lib/modules:ro \\</span><br><span class=\"line\">    -d --privileged \\</span><br><span class=\"line\">    hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure>\n\n<p>查看信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看VPN连接信息</span></span><br><span class=\"line\">docker logs -f ipsec-vpn-server</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看客户端连接情况,ip分配、流量使用等</span></span><br><span class=\"line\">docker exec -it ipsec-vpn-server ipsec whack --trafficstatus</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><p>客户端连接VPN通用配置（手机、电脑）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">不同设备实际需要填写的信息会有略微不同，但是关键信息为以下几个配置</span></span><br><span class=\"line\">VPN类型：IPSec</span><br><span class=\"line\">服务器：vpn服务器的ip，不需要端口</span><br><span class=\"line\">密钥：配置信息中的IPSec PSK</span><br><span class=\"line\">用户名、密码：配置信息中的username、password</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/iKOaRoSwbA5Nz667uk-jRA\">一套好用的VPN</a></li>\n<li>私有文章<ul>\n<li><a href=\"https://gitee.com/LFa/doc/raw/master/me/records/soft/vpn/openVPN/pakage/doc.md\">package</a></li>\n</ul>\n</li>\n</ul>\n"},{"layout":"default","title":"doc","nav_order":15,"description":"docker版openVPN服务搭建","parent":"Openvpn","has_children":false,"grand_parent":"Vpn","_content":"\n# docker版openVPN服务搭建\n\n- [docker-compose版的参考文章](https://github.com/kylemanna/docker-openvpn/blob/master/docs/docker-compose.md)\n- [dockerhub地址](https://hub.docker.com/r/kylemanna/openvpn)\n","source":"_posts/docker/app/networks/vpn/openvpn/openvpn.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: docker版openVPN服务搭建\nparent: Openvpn\nhas_children: false\npermalink: \"/docker/app/networks/vpn/openvpn/openvpn/\"\ngrand_parent: Vpn\n---\n\n# docker版openVPN服务搭建\n\n- [docker-compose版的参考文章](https://github.com/kylemanna/docker-openvpn/blob/master/docs/docker-compose.md)\n- [dockerhub地址](https://hub.docker.com/r/kylemanna/openvpn)\n","slug":"docker/app/networks/vpn/openvpn/openvpn","published":1,"date":"2025-02-23T07:43:31.074Z","updated":"2025-02-23T07:43:31.074Z","__permalink":"/docker/app/networks/vpn/openvpn/openvpn/","comments":1,"photos":[],"_id":"cm7k5rwbb00a9msws3yujc8k3","content":"<h1 id=\"docker版openVPN服务搭建\"><a href=\"#docker版openVPN服务搭建\" class=\"headerlink\" title=\"docker版openVPN服务搭建\"></a>docker版openVPN服务搭建</h1><ul>\n<li><a href=\"https://github.com/kylemanna/docker-openvpn/blob/master/docs/docker-compose.md\">docker-compose版的参考文章</a></li>\n<li><a href=\"https://hub.docker.com/r/kylemanna/openvpn\">dockerhub地址</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"docker版openVPN服务搭建\"><a href=\"#docker版openVPN服务搭建\" class=\"headerlink\" title=\"docker版openVPN服务搭建\"></a>docker版openVPN服务搭建</h1><ul>\n<li><a href=\"https://github.com/kylemanna/docker-openvpn/blob/master/docs/docker-compose.md\">docker-compose版的参考文章</a></li>\n<li><a href=\"https://hub.docker.com/r/kylemanna/openvpn\">dockerhub地址</a></li>\n</ul>\n"},{"layout":"default","title":"Publish","nav_order":5,"has_children":true,"parent":"Publish","_content":"\n# Publish\n","source":"_posts/docker/dev_utls/serverless/nocobase/publish/index.md","raw":"---\nlayout: default\ntitle: Publish\nnav_order: 5\nhas_children: true\nparent: Publish\npermalink: \"/docker/dev_utls/serverless/nocobase/publish/\"\n---\n\n# Publish\n","slug":"docker/dev_utls/serverless/nocobase/publish/index","published":1,"date":"2025-02-23T07:43:31.137Z","updated":"2025-02-23T07:43:31.137Z","__permalink":"/docker/dev_utls/serverless/nocobase/publish/","comments":1,"photos":[],"_id":"cm7k5rwbb00aamsws944bfou1","content":"<h1 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h1>","excerpt":"","more":"<h1 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"使用记录","parent":"Publish","has_children":false,"grand_parent":"Nocobase","_content":"\n# 使用记录\n\n## 发布到Serverless Registry\n\n```shell\n# 登录\ns cli registry login\n# 发布\ns cli registry publish\n```\n\n## 从Serverless Registry中拉取项目\n\n```shell\n# 初始化项目\ns init start-nocobase -d start-nocobase\n# 进入项目，并进行项目部署\ncd start-nocobase && s deploy -y\n```\n","source":"_posts/docker/dev_utls/serverless/nocobase/publish/publish.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: 使用记录\nparent: Publish\nhas_children: false\npermalink: \"/docker/dev_utls/serverless/nocobase/publish/publish/\"\ngrand_parent: Nocobase\n---\n\n# 使用记录\n\n## 发布到Serverless Registry\n\n```shell\n# 登录\ns cli registry login\n# 发布\ns cli registry publish\n```\n\n## 从Serverless Registry中拉取项目\n\n```shell\n# 初始化项目\ns init start-nocobase -d start-nocobase\n# 进入项目，并进行项目部署\ncd start-nocobase && s deploy -y\n```\n","slug":"docker/dev_utls/serverless/nocobase/publish/publish","published":1,"date":"2025-02-23T07:43:31.135Z","updated":"2025-02-23T07:43:31.136Z","__permalink":"/docker/dev_utls/serverless/nocobase/publish/publish/","comments":1,"photos":[],"_id":"cm7k5rwbb00abmswseaeu6udy","content":"<h1 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h1><h2 id=\"发布到Serverless-Registry\"><a href=\"#发布到Serverless-Registry\" class=\"headerlink\" title=\"发布到Serverless Registry\"></a>发布到Serverless Registry</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录</span></span><br><span class=\"line\">s cli registry login</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">发布</span></span><br><span class=\"line\">s cli registry publish</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从Serverless-Registry中拉取项目\"><a href=\"#从Serverless-Registry中拉取项目\" class=\"headerlink\" title=\"从Serverless Registry中拉取项目\"></a>从Serverless Registry中拉取项目</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化项目</span></span><br><span class=\"line\">s init start-nocobase -d start-nocobase</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入项目，并进行项目部署</span></span><br><span class=\"line\">cd start-nocobase &amp;&amp; s deploy -y</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h1><h2 id=\"发布到Serverless-Registry\"><a href=\"#发布到Serverless-Registry\" class=\"headerlink\" title=\"发布到Serverless Registry\"></a>发布到Serverless Registry</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录</span></span><br><span class=\"line\">s cli registry login</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">发布</span></span><br><span class=\"line\">s cli registry publish</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从Serverless-Registry中拉取项目\"><a href=\"#从Serverless-Registry中拉取项目\" class=\"headerlink\" title=\"从Serverless Registry中拉取项目\"></a>从Serverless Registry中拉取项目</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化项目</span></span><br><span class=\"line\">s init start-nocobase -d start-nocobase</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入项目，并进行项目部署</span></span><br><span class=\"line\">cd start-nocobase &amp;&amp; s deploy -y</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"readme","nav_order":15,"description":"start-nocobase 帮助文档","parent":"Publish","has_children":false,"grand_parent":"Nocobase","_content":"\n# start-nocobase 帮助文档\n\n<description>\n\n快速部署一个 nocobase 函数到阿里云函数计算\n\n</description>\n\n<table>\n\n## 前期准备\n使用该项目，推荐您拥有以下的产品权限 / 策略：\n\n| 服务/业务 | 函数计算 |     \n| --- |  --- |   \n| 权限/策略 | AliyunFCFullAccess<br/>AliyunContainerRegistryFullAccess |  \n\n</table>\n\n<codepre id=\"codepre\">\n\n# 代码 & 预览\n\n- [ :smiley_cat:  源代码](https://github.com/183461750/nocobase)\n\n</codepre>\n\n<deploy>\n\n## 部署 & 体验\n\n<appcenter>\n\n-  :fire:  通过 [Serverless 应用中心](https://fcnext.console.aliyun.com/applications/create?template=start-fc-custom-container-websocket-nodejs14) ，\n[![Deploy with Severless Devs](https://img.alicdn.com/imgextra/i1/O1CN01w5RFbX1v45s8TIXPz_!!6000000006118-55-tps-95-28.svg)](https://fcnext.console.aliyun.com/applications/create?template=start-fc-custom-container-websocket-nodejs14)  该应用。 \n\n</appcenter>\n\n- 通过 [Serverless Devs Cli](https://www.serverless-devs.com/serverless-devs/install) 进行部署：\n    - [安装 Serverless Devs Cli 开发者工具](https://www.serverless-devs.com/serverless-devs/install) ，并进行[授权信息配置](https://www.serverless-devs.com/fc/config) ；\n    - 初始化项目：`s init start-nocobase -d start-nocobase`   \n    - 进入项目，并进行项目部署：`cd start-nocobase && s deploy -y`\n\n</deploy>\n\n<appdetail id=\"flushContent\">\n\n# 应用详情\n\n\n\n本应用仅作为学习和参考使用，您可以基于本项目进行二次开发和完善，实现自己的业务逻辑\n\n\n\n</appdetail>\n","source":"_posts/docker/dev_utls/serverless/nocobase/publish/readme.md","raw":"---\nlayout: default\ntitle: readme\nnav_order: 15\ndescription: start-nocobase 帮助文档\nparent: Publish\nhas_children: false\npermalink: \"/docker/dev_utls/serverless/nocobase/publish/readme/\"\ngrand_parent: Nocobase\n---\n\n# start-nocobase 帮助文档\n\n<description>\n\n快速部署一个 nocobase 函数到阿里云函数计算\n\n</description>\n\n<table>\n\n## 前期准备\n使用该项目，推荐您拥有以下的产品权限 / 策略：\n\n| 服务/业务 | 函数计算 |     \n| --- |  --- |   \n| 权限/策略 | AliyunFCFullAccess<br/>AliyunContainerRegistryFullAccess |  \n\n</table>\n\n<codepre id=\"codepre\">\n\n# 代码 & 预览\n\n- [ :smiley_cat:  源代码](https://github.com/183461750/nocobase)\n\n</codepre>\n\n<deploy>\n\n## 部署 & 体验\n\n<appcenter>\n\n-  :fire:  通过 [Serverless 应用中心](https://fcnext.console.aliyun.com/applications/create?template=start-fc-custom-container-websocket-nodejs14) ，\n[![Deploy with Severless Devs](https://img.alicdn.com/imgextra/i1/O1CN01w5RFbX1v45s8TIXPz_!!6000000006118-55-tps-95-28.svg)](https://fcnext.console.aliyun.com/applications/create?template=start-fc-custom-container-websocket-nodejs14)  该应用。 \n\n</appcenter>\n\n- 通过 [Serverless Devs Cli](https://www.serverless-devs.com/serverless-devs/install) 进行部署：\n    - [安装 Serverless Devs Cli 开发者工具](https://www.serverless-devs.com/serverless-devs/install) ，并进行[授权信息配置](https://www.serverless-devs.com/fc/config) ；\n    - 初始化项目：`s init start-nocobase -d start-nocobase`   \n    - 进入项目，并进行项目部署：`cd start-nocobase && s deploy -y`\n\n</deploy>\n\n<appdetail id=\"flushContent\">\n\n# 应用详情\n\n\n\n本应用仅作为学习和参考使用，您可以基于本项目进行二次开发和完善，实现自己的业务逻辑\n\n\n\n</appdetail>\n","slug":"docker/dev_utls/serverless/nocobase/publish/readme","published":1,"date":"2025-02-23T07:43:31.136Z","updated":"2025-02-23T07:43:31.136Z","__permalink":"/docker/dev_utls/serverless/nocobase/publish/readme/","comments":1,"photos":[],"_id":"cm7k5rwbb00acmsws09otgtp9","content":"<h1 id=\"start-nocobase-帮助文档\"><a href=\"#start-nocobase-帮助文档\" class=\"headerlink\" title=\"start-nocobase 帮助文档\"></a>start-nocobase 帮助文档</h1><description>\n\n<p>快速部署一个 nocobase 函数到阿里云函数计算</p>\n</description>\n\n<table>\n\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>使用该项目，推荐您拥有以下的产品权限 &#x2F; 策略：</p>\n<table>\n<thead>\n<tr>\n<th>服务&#x2F;业务</th>\n<th>函数计算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>权限&#x2F;策略</td>\n<td>AliyunFCFullAccess<br/>AliyunContainerRegistryFullAccess</td>\n</tr>\n</tbody></table>\n</table>\n\n<codepre id=\"codepre\">\n\n<h1 id=\"代码-amp-预览\"><a href=\"#代码-amp-预览\" class=\"headerlink\" title=\"代码 &amp; 预览\"></a>代码 &amp; 预览</h1><ul>\n<li><a href=\"https://github.com/183461750/nocobase\"> :smiley_cat:  源代码</a></li>\n</ul>\n</codepre>\n\n<deploy>\n\n<h2 id=\"部署-amp-体验\"><a href=\"#部署-amp-体验\" class=\"headerlink\" title=\"部署 &amp; 体验\"></a>部署 &amp; 体验</h2><appcenter>\n\n<ul>\n<li>:fire:  通过 <a href=\"https://fcnext.console.aliyun.com/applications/create?template=start-fc-custom-container-websocket-nodejs14\">Serverless 应用中心</a> ，<br><a href=\"https://fcnext.console.aliyun.com/applications/create?template=start-fc-custom-container-websocket-nodejs14\"><img data-src=\"https://img.alicdn.com/imgextra/i1/O1CN01w5RFbX1v45s8TIXPz_!!6000000006118-55-tps-95-28.svg\" alt=\"Deploy with Severless Devs\"></a>  该应用。</li>\n</ul>\n</appcenter>\n\n<ul>\n<li>通过 <a href=\"https://www.serverless-devs.com/serverless-devs/install\">Serverless Devs Cli</a> 进行部署：<ul>\n<li><a href=\"https://www.serverless-devs.com/serverless-devs/install\">安装 Serverless Devs Cli 开发者工具</a> ，并进行<a href=\"https://www.serverless-devs.com/fc/config\">授权信息配置</a> ；</li>\n<li>初始化项目：<code>s init start-nocobase -d start-nocobase</code>   </li>\n<li>进入项目，并进行项目部署：<code>cd start-nocobase &amp;&amp; s deploy -y</code></li>\n</ul>\n</li>\n</ul>\n</deploy>\n\n<appdetail id=\"flushContent\">\n\n<h1 id=\"应用详情\"><a href=\"#应用详情\" class=\"headerlink\" title=\"应用详情\"></a>应用详情</h1><p>本应用仅作为学习和参考使用，您可以基于本项目进行二次开发和完善，实现自己的业务逻辑</p>\n</appdetail>\n","excerpt":"","more":"<h1 id=\"start-nocobase-帮助文档\"><a href=\"#start-nocobase-帮助文档\" class=\"headerlink\" title=\"start-nocobase 帮助文档\"></a>start-nocobase 帮助文档</h1><description>\n\n<p>快速部署一个 nocobase 函数到阿里云函数计算</p>\n</description>\n\n<table>\n\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>使用该项目，推荐您拥有以下的产品权限 &#x2F; 策略：</p>\n<table>\n<thead>\n<tr>\n<th>服务&#x2F;业务</th>\n<th>函数计算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>权限&#x2F;策略</td>\n<td>AliyunFCFullAccess<br/>AliyunContainerRegistryFullAccess</td>\n</tr>\n</tbody></table>\n</table>\n\n<codepre id=\"codepre\">\n\n<h1 id=\"代码-amp-预览\"><a href=\"#代码-amp-预览\" class=\"headerlink\" title=\"代码 &amp; 预览\"></a>代码 &amp; 预览</h1><ul>\n<li><a href=\"https://github.com/183461750/nocobase\"> :smiley_cat:  源代码</a></li>\n</ul>\n</codepre>\n\n<deploy>\n\n<h2 id=\"部署-amp-体验\"><a href=\"#部署-amp-体验\" class=\"headerlink\" title=\"部署 &amp; 体验\"></a>部署 &amp; 体验</h2><appcenter>\n\n<ul>\n<li>:fire:  通过 <a href=\"https://fcnext.console.aliyun.com/applications/create?template=start-fc-custom-container-websocket-nodejs14\">Serverless 应用中心</a> ，<br><a href=\"https://fcnext.console.aliyun.com/applications/create?template=start-fc-custom-container-websocket-nodejs14\"><img data-src=\"https://img.alicdn.com/imgextra/i1/O1CN01w5RFbX1v45s8TIXPz_!!6000000006118-55-tps-95-28.svg\" alt=\"Deploy with Severless Devs\"></a>  该应用。</li>\n</ul>\n</appcenter>\n\n<ul>\n<li>通过 <a href=\"https://www.serverless-devs.com/serverless-devs/install\">Serverless Devs Cli</a> 进行部署：<ul>\n<li><a href=\"https://www.serverless-devs.com/serverless-devs/install\">安装 Serverless Devs Cli 开发者工具</a> ，并进行<a href=\"https://www.serverless-devs.com/fc/config\">授权信息配置</a> ；</li>\n<li>初始化项目：<code>s init start-nocobase -d start-nocobase</code>   </li>\n<li>进入项目，并进行项目部署：<code>cd start-nocobase &amp;&amp; s deploy -y</code></li>\n</ul>\n</li>\n</ul>\n</deploy>\n\n<appdetail id=\"flushContent\">\n\n<h1 id=\"应用详情\"><a href=\"#应用详情\" class=\"headerlink\" title=\"应用详情\"></a>应用详情</h1><p>本应用仅作为学习和参考使用，您可以基于本项目进行二次开发和完善，实现自己的业务逻辑</p>\n</appdetail>\n"},{"layout":"default","title":"version","nav_order":15,"description":"- 兼容新版本","parent":"Publish","has_children":false,"grand_parent":"Nocobase","_content":"\n- 兼容新版本\n","source":"_posts/docker/dev_utls/serverless/nocobase/publish/version.md","raw":"---\nlayout: default\ntitle: version\nnav_order: 15\ndescription: \"- 兼容新版本\"\nparent: Publish\nhas_children: false\npermalink: \"/docker/dev_utls/serverless/nocobase/publish/version/\"\ngrand_parent: Nocobase\n---\n\n- 兼容新版本\n","slug":"docker/dev_utls/serverless/nocobase/publish/version","published":1,"date":"2025-02-23T07:43:31.136Z","updated":"2025-02-23T07:43:31.136Z","__permalink":"/docker/dev_utls/serverless/nocobase/publish/version/","comments":1,"photos":[],"_id":"cm7k5rwbb00admswsdi6mfwip","content":"<ul>\n<li>兼容新版本</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>兼容新版本</li>\n</ul>\n"},{"layout":"default","title":"V2","nav_order":5,"has_children":true,"parent":"V2","_content":"\n# V2\n","source":"_posts/docker/dev_utls/serverless/nocobase/v2/index.md","raw":"---\nlayout: default\ntitle: V2\nnav_order: 5\nhas_children: true\nparent: V2\npermalink: \"/docker/dev_utls/serverless/nocobase/v2/\"\n---\n\n# V2\n","slug":"docker/dev_utls/serverless/nocobase/v2/index","published":1,"date":"2025-02-23T07:43:31.134Z","updated":"2025-02-23T07:43:31.134Z","__permalink":"/docker/dev_utls/serverless/nocobase/v2/","comments":1,"photos":[],"_id":"cm7k5rwbb00aemsws5n75b1cm","content":"<h1 id=\"V2\"><a href=\"#V2\" class=\"headerlink\" title=\"V2\"></a>V2</h1>","excerpt":"","more":"<h1 id=\"V2\"><a href=\"#V2\" class=\"headerlink\" title=\"V2\"></a>V2</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"记录","parent":"V2","has_children":false,"grand_parent":"Nocobase","_content":"\n# 记录\n\n## 版本说明\n\n- 将sqlite数据存储到nas中\n\n```yaml\n# 部分配置\nservices:\n  nocobaseService:\n    component: fc\n    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述\n      post-deploy: # 在deploy之后运行\n        - component: fc nas upload -ro /app/nocobase/storage/db /mnt/auto/nocobase/storage/db\n        ...\n```\n\n## 开始使用\n\n```shell\nbash setup.sh\n# 搞个git仓库将v2目录下的文件上传到git上\n# 在FC中创建个应用，再创建环境时勾选允许访问vps和nas\n```\n","source":"_posts/docker/dev_utls/serverless/nocobase/v2/v2.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: 记录\nparent: V2\nhas_children: false\npermalink: \"/docker/dev_utls/serverless/nocobase/v2/v2/\"\ngrand_parent: Nocobase\n---\n\n# 记录\n\n## 版本说明\n\n- 将sqlite数据存储到nas中\n\n```yaml\n# 部分配置\nservices:\n  nocobaseService:\n    component: fc\n    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述\n      post-deploy: # 在deploy之后运行\n        - component: fc nas upload -ro /app/nocobase/storage/db /mnt/auto/nocobase/storage/db\n        ...\n```\n\n## 开始使用\n\n```shell\nbash setup.sh\n# 搞个git仓库将v2目录下的文件上传到git上\n# 在FC中创建个应用，再创建环境时勾选允许访问vps和nas\n```\n","slug":"docker/dev_utls/serverless/nocobase/v2/v2","published":1,"date":"2025-02-23T07:43:31.134Z","updated":"2025-02-23T07:43:31.134Z","__permalink":"/docker/dev_utls/serverless/nocobase/v2/v2/","comments":1,"photos":[],"_id":"cm7k5rwbb00afmsws0qr9b5b5","content":"<h1 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h1><h2 id=\"版本说明\"><a href=\"#版本说明\" class=\"headerlink\" title=\"版本说明\"></a>版本说明</h2><ul>\n<li>将sqlite数据存储到nas中</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部分配置</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nocobaseService:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">fc</span></span><br><span class=\"line\">    <span class=\"attr\">actions:</span> <span class=\"comment\"># 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述</span></span><br><span class=\"line\">      <span class=\"attr\">post-deploy:</span> <span class=\"comment\"># 在deploy之后运行</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">component:</span> <span class=\"string\">fc</span> <span class=\"string\">nas</span> <span class=\"string\">upload</span> <span class=\"string\">-ro</span> <span class=\"string\">/app/nocobase/storage/db</span> <span class=\"string\">/mnt/auto/nocobase/storage/db</span></span><br><span class=\"line\">        <span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash setup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">搞个git仓库将v2目录下的文件上传到git上</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在FC中创建个应用，再创建环境时勾选允许访问vps和nas</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h1><h2 id=\"版本说明\"><a href=\"#版本说明\" class=\"headerlink\" title=\"版本说明\"></a>版本说明</h2><ul>\n<li>将sqlite数据存储到nas中</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部分配置</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nocobaseService:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">fc</span></span><br><span class=\"line\">    <span class=\"attr\">actions:</span> <span class=\"comment\"># 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述</span></span><br><span class=\"line\">      <span class=\"attr\">post-deploy:</span> <span class=\"comment\"># 在deploy之后运行</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">component:</span> <span class=\"string\">fc</span> <span class=\"string\">nas</span> <span class=\"string\">upload</span> <span class=\"string\">-ro</span> <span class=\"string\">/app/nocobase/storage/db</span> <span class=\"string\">/mnt/auto/nocobase/storage/db</span></span><br><span class=\"line\">        <span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash setup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">搞个git仓库将v2目录下的文件上传到git上</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在FC中创建个应用，再创建环境时勾选允许访问vps和nas</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":15,"description":"nginx使用记录","parent":"Common","has_children":false,"grand_parent":"Simple-common","_content":"\n# nginx使用记录\n\n- 先启动nginx-common.yml后，再将templates目录里的内容复制到数据卷volumes的nginx_templates中的_data目录中\n","source":"_posts/docker/mid/nginx/simple-common/common/common.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: nginx使用记录\nparent: Common\nhas_children: false\npermalink: \"/docker/mid/nginx/simple-common/common/common/\"\ngrand_parent: Simple-common\n---\n\n# nginx使用记录\n\n- 先启动nginx-common.yml后，再将templates目录里的内容复制到数据卷volumes的nginx_templates中的_data目录中\n","slug":"docker/mid/nginx/simple-common/common/common","published":1,"date":"2025-02-23T07:43:31.094Z","updated":"2025-02-23T07:43:31.094Z","__permalink":"/docker/mid/nginx/simple-common/common/common/","comments":1,"photos":[],"_id":"cm7k5rwbb00agmswsbsu7hdu9","content":"<h1 id=\"nginx使用记录\"><a href=\"#nginx使用记录\" class=\"headerlink\" title=\"nginx使用记录\"></a>nginx使用记录</h1><ul>\n<li>先启动nginx-common.yml后，再将templates目录里的内容复制到数据卷volumes的nginx_templates中的_data目录中</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"nginx使用记录\"><a href=\"#nginx使用记录\" class=\"headerlink\" title=\"nginx使用记录\"></a>nginx使用记录</h1><ul>\n<li>先启动nginx-common.yml后，再将templates目录里的内容复制到数据卷volumes的nginx_templates中的_data目录中</li>\n</ul>\n"},{"layout":"default","title":"Common","nav_order":5,"has_children":true,"parent":"Common","_content":"\n# Common\n","source":"_posts/docker/mid/nginx/simple-common/common/index.md","raw":"---\nlayout: default\ntitle: Common\nnav_order: 5\nhas_children: true\nparent: Common\npermalink: \"/docker/mid/nginx/simple-common/common/\"\n---\n\n# Common\n","slug":"docker/mid/nginx/simple-common/common/index","published":1,"date":"2025-02-23T07:43:31.094Z","updated":"2025-02-23T07:43:31.094Z","__permalink":"/docker/mid/nginx/simple-common/common/","comments":1,"photos":[],"_id":"cm7k5rwbc00ahmswsesodcuai","content":"<h1 id=\"Common\"><a href=\"#Common\" class=\"headerlink\" title=\"Common\"></a>Common</h1>","excerpt":"","more":"<h1 id=\"Common\"><a href=\"#Common\" class=\"headerlink\" title=\"Common\"></a>Common</h1>"},{"layout":"default","title":"查询pgsql数据库中所有表数据量的sql","nav_order":15,"description":"查询pgsql数据库中所有表数据量的sql","parent":"Db","has_children":false,"grand_parent":"Ai","_content":"\n# 查询pgsql数据库中所有表数据量的sql\n\n以下是查询 PostgreSQL 数据库中所有表数据量的 SQL 语句的示例：\n\n方法一：使用 pg_class 表\n\n```sql\nSELECT relname AS table_name, reltuples AS row_count\nFROM pg_class\nWHERE relkind = 'r'\nAND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public');\n```\n\n这个查询语句会返回所有表的表名和对应的数据量。你可以将 `public` 替换为你要查询的实际 schema 名称。\n\n方法二：使用 pg_stat_user_tables 视图\n\n```sql\nSELECT schemaname, relname, n_live_tup AS row_count\nFROM pg_stat_user_tables;\n```\n\n这个查询语句会返回所有用户表的 schema 名称、表名和对应的数据量。\n\n以上是查询 PostgreSQL 数据库中所有表数据量的 SQL 语句示例。你可以根据具体的需求选择适合的方法进行查询。\n\n参考资料：\n\n- [postgresql 查询当前schema下所有表数据的数量 - 程序猿网友666 - 博客园][[1]](https://www.cnblogs.com/chenghu/p/17201210.html)\n- [PostgreSQL 查询所有表的记录数_pg查询所有表的数据量-CSDN博客][[2]](https://blog.csdn.net/londa/article/details/109046131)\n- [查看PostgreSQL数据库中所有表_pg查看库内表-CSDN博客][[3]](https://blog.csdn.net/huangbaokang/article/details/88862791)\n\n---\nLearn more:\n\n1. [postgresql 查询当前schema下所有表数据的数量 - 程序猿网友666 - 博客园](https://www.cnblogs.com/chenghu/p/17201210.html)\n2. [PostgreSQL 查询所有表的记录数_pg查询所有表的数据量-CSDN博客](https://blog.csdn.net/londa/article/details/109046131)\n3. [查看PostgreSQL数据库中所有表_pg查看库内表-CSDN博客](https://blog.csdn.net/huangbaokang/article/details/88862791)\n","source":"_posts/docker/doc/material/ai/db/查询pgsql数据库中所有表数据量的sql.md","raw":"---\nlayout: default\ntitle: 查询pgsql数据库中所有表数据量的sql\nnav_order: 15\ndescription: 查询pgsql数据库中所有表数据量的sql\nparent: Db\nhas_children: false\npermalink: \"/docker/doc/material/ai/db/查询pgsql数据库中所有表数据量的sql/\"\ngrand_parent: Ai\n---\n\n# 查询pgsql数据库中所有表数据量的sql\n\n以下是查询 PostgreSQL 数据库中所有表数据量的 SQL 语句的示例：\n\n方法一：使用 pg_class 表\n\n```sql\nSELECT relname AS table_name, reltuples AS row_count\nFROM pg_class\nWHERE relkind = 'r'\nAND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public');\n```\n\n这个查询语句会返回所有表的表名和对应的数据量。你可以将 `public` 替换为你要查询的实际 schema 名称。\n\n方法二：使用 pg_stat_user_tables 视图\n\n```sql\nSELECT schemaname, relname, n_live_tup AS row_count\nFROM pg_stat_user_tables;\n```\n\n这个查询语句会返回所有用户表的 schema 名称、表名和对应的数据量。\n\n以上是查询 PostgreSQL 数据库中所有表数据量的 SQL 语句示例。你可以根据具体的需求选择适合的方法进行查询。\n\n参考资料：\n\n- [postgresql 查询当前schema下所有表数据的数量 - 程序猿网友666 - 博客园][[1]](https://www.cnblogs.com/chenghu/p/17201210.html)\n- [PostgreSQL 查询所有表的记录数_pg查询所有表的数据量-CSDN博客][[2]](https://blog.csdn.net/londa/article/details/109046131)\n- [查看PostgreSQL数据库中所有表_pg查看库内表-CSDN博客][[3]](https://blog.csdn.net/huangbaokang/article/details/88862791)\n\n---\nLearn more:\n\n1. [postgresql 查询当前schema下所有表数据的数量 - 程序猿网友666 - 博客园](https://www.cnblogs.com/chenghu/p/17201210.html)\n2. [PostgreSQL 查询所有表的记录数_pg查询所有表的数据量-CSDN博客](https://blog.csdn.net/londa/article/details/109046131)\n3. [查看PostgreSQL数据库中所有表_pg查看库内表-CSDN博客](https://blog.csdn.net/huangbaokang/article/details/88862791)\n","slug":"docker/doc/material/ai/db/查询pgsql数据库中所有表数据量的sql","published":1,"date":"2025-02-23T07:43:31.265Z","updated":"2025-02-23T07:43:31.355Z","__permalink":"/docker/doc/material/ai/db/查询pgsql数据库中所有表数据量的sql/","comments":1,"photos":[],"_id":"cm7k5rwbc00aimswsd6vu28qg","content":"<h1 id=\"查询pgsql数据库中所有表数据量的sql\"><a href=\"#查询pgsql数据库中所有表数据量的sql\" class=\"headerlink\" title=\"查询pgsql数据库中所有表数据量的sql\"></a>查询pgsql数据库中所有表数据量的sql</h1><p>以下是查询 PostgreSQL 数据库中所有表数据量的 SQL 语句的示例：</p>\n<p>方法一：使用 pg_class 表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> relname <span class=\"keyword\">AS</span> table_name, reltuples <span class=\"keyword\">AS</span> row_count</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> pg_class</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> relkind <span class=\"operator\">=</span> <span class=\"string\">&#x27;r&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> relnamespace <span class=\"operator\">=</span> (<span class=\"keyword\">SELECT</span> oid <span class=\"keyword\">FROM</span> pg_namespace <span class=\"keyword\">WHERE</span> nspname <span class=\"operator\">=</span> <span class=\"string\">&#x27;public&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个查询语句会返回所有表的表名和对应的数据量。你可以将 <code>public</code> 替换为你要查询的实际 schema 名称。</p>\n<p>方法二：使用 pg_stat_user_tables 视图</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> schemaname, relname, n_live_tup <span class=\"keyword\">AS</span> row_count</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> pg_stat_user_tables;</span><br></pre></td></tr></table></figure>\n\n<p>这个查询语句会返回所有用户表的 schema 名称、表名和对应的数据量。</p>\n<p>以上是查询 PostgreSQL 数据库中所有表数据量的 SQL 语句示例。你可以根据具体的需求选择适合的方法进行查询。</p>\n<p>参考资料：</p>\n<ul>\n<li>[postgresql 查询当前schema下所有表数据的数量 - 程序猿网友666 - 博客园]<a href=\"https://www.cnblogs.com/chenghu/p/17201210.html\">[1]</a></li>\n<li>[PostgreSQL 查询所有表的记录数_pg查询所有表的数据量-CSDN博客]<a href=\"https://blog.csdn.net/londa/article/details/109046131\">[2]</a></li>\n<li>[查看PostgreSQL数据库中所有表_pg查看库内表-CSDN博客]<a href=\"https://blog.csdn.net/huangbaokang/article/details/88862791\">[3]</a></li>\n</ul>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://www.cnblogs.com/chenghu/p/17201210.html\">postgresql 查询当前schema下所有表数据的数量 - 程序猿网友666 - 博客园</a></li>\n<li><a href=\"https://blog.csdn.net/londa/article/details/109046131\">PostgreSQL 查询所有表的记录数_pg查询所有表的数据量-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/huangbaokang/article/details/88862791\">查看PostgreSQL数据库中所有表_pg查看库内表-CSDN博客</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"查询pgsql数据库中所有表数据量的sql\"><a href=\"#查询pgsql数据库中所有表数据量的sql\" class=\"headerlink\" title=\"查询pgsql数据库中所有表数据量的sql\"></a>查询pgsql数据库中所有表数据量的sql</h1><p>以下是查询 PostgreSQL 数据库中所有表数据量的 SQL 语句的示例：</p>\n<p>方法一：使用 pg_class 表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> relname <span class=\"keyword\">AS</span> table_name, reltuples <span class=\"keyword\">AS</span> row_count</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> pg_class</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> relkind <span class=\"operator\">=</span> <span class=\"string\">&#x27;r&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> relnamespace <span class=\"operator\">=</span> (<span class=\"keyword\">SELECT</span> oid <span class=\"keyword\">FROM</span> pg_namespace <span class=\"keyword\">WHERE</span> nspname <span class=\"operator\">=</span> <span class=\"string\">&#x27;public&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个查询语句会返回所有表的表名和对应的数据量。你可以将 <code>public</code> 替换为你要查询的实际 schema 名称。</p>\n<p>方法二：使用 pg_stat_user_tables 视图</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> schemaname, relname, n_live_tup <span class=\"keyword\">AS</span> row_count</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> pg_stat_user_tables;</span><br></pre></td></tr></table></figure>\n\n<p>这个查询语句会返回所有用户表的 schema 名称、表名和对应的数据量。</p>\n<p>以上是查询 PostgreSQL 数据库中所有表数据量的 SQL 语句示例。你可以根据具体的需求选择适合的方法进行查询。</p>\n<p>参考资料：</p>\n<ul>\n<li>[postgresql 查询当前schema下所有表数据的数量 - 程序猿网友666 - 博客园]<a href=\"https://www.cnblogs.com/chenghu/p/17201210.html\">[1]</a></li>\n<li>[PostgreSQL 查询所有表的记录数_pg查询所有表的数据量-CSDN博客]<a href=\"https://blog.csdn.net/londa/article/details/109046131\">[2]</a></li>\n<li>[查看PostgreSQL数据库中所有表_pg查看库内表-CSDN博客]<a href=\"https://blog.csdn.net/huangbaokang/article/details/88862791\">[3]</a></li>\n</ul>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://www.cnblogs.com/chenghu/p/17201210.html\">postgresql 查询当前schema下所有表数据的数量 - 程序猿网友666 - 博客园</a></li>\n<li><a href=\"https://blog.csdn.net/londa/article/details/109046131\">PostgreSQL 查询所有表的记录数_pg查询所有表的数据量-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/huangbaokang/article/details/88862791\">查看PostgreSQL数据库中所有表_pg查看库内表-CSDN博客</a></li>\n</ol>\n"},{"layout":"default","title":"Db","nav_order":5,"has_children":true,"parent":"Db","_content":"\n# Db\n","source":"_posts/docker/doc/material/ai/db/index.md","raw":"---\nlayout: default\ntitle: Db\nnav_order: 5\nhas_children: true\nparent: Db\npermalink: \"/docker/doc/material/ai/db/\"\n---\n\n# Db\n","slug":"docker/doc/material/ai/db/index","published":1,"date":"2025-02-23T07:43:31.393Z","updated":"2025-02-23T07:43:31.418Z","__permalink":"/docker/doc/material/ai/db/","comments":1,"photos":[],"_id":"cm7k5rwbc00ajmswsg9hggfzk","content":"<h1 id=\"Db\"><a href=\"#Db\" class=\"headerlink\" title=\"Db\"></a>Db</h1>","excerpt":"","more":"<h1 id=\"Db\"><a href=\"#Db\" class=\"headerlink\" title=\"Db\"></a>Db</h1>"},{"layout":"default","title":"Docker Swarm 节点标签管理","nav_order":5,"description":"Docker Swarm 节点标签管理","parent":"Docker","has_children":false,"grand_parent":"Ai","_content":"\n# Docker Swarm 节点标签管理\n\n## 查看节点标签\n\n使用以下命令查看节点标签：\n\n```bash\n# 查看所有节点的标签\ndocker node ls --format \"ID: {{.ID}}, Labels: {{.Labels}}\"\n\n# 查看特定节点的标签\ndocker node inspect NODE_ID --format \"Labels: {{.Spec.Labels}}\"\n```\n\n## 添加节点标签\n\n使用以下命令添加标签：\n\n```bash\ndocker node update --label-add key=value NODE_ID\n```\n\n例如：\n```bash\ndocker node update --label-add environment=production node1\n```\n\n## 移除节点标签\n\n使用以下命令移除标签：\n\n```bash\ndocker node update --label-rm key NODE_ID\n```\n\n例如：\n```bash\ndocker node update --label-rm environment node1\n```\n\n## 使用标签进行服务部署\n\n在 docker-compose.yml 中使用标签约束：\n\n```yaml\nversion: '3.8'\nservices:\n  app:\n    deploy:\n      placement:\n        constraints:\n          - node.labels.environment == production\n","source":"_posts/docker/doc/material/ai/docker/docker swarm 给节点打标和查看和移除.md","raw":"---\nlayout: default\ntitle: Docker Swarm 节点标签管理\nnav_order: 5\ndescription: Docker Swarm 节点标签管理\nparent: Docker\nhas_children: false\npermalink: \"/docker/doc/material/ai/docker/docker swarm 给节点打标和查看和移除/\"\ngrand_parent: Ai\n---\n\n# Docker Swarm 节点标签管理\n\n## 查看节点标签\n\n使用以下命令查看节点标签：\n\n```bash\n# 查看所有节点的标签\ndocker node ls --format \"ID: {{.ID}}, Labels: {{.Labels}}\"\n\n# 查看特定节点的标签\ndocker node inspect NODE_ID --format \"Labels: {{.Spec.Labels}}\"\n```\n\n## 添加节点标签\n\n使用以下命令添加标签：\n\n```bash\ndocker node update --label-add key=value NODE_ID\n```\n\n例如：\n```bash\ndocker node update --label-add environment=production node1\n```\n\n## 移除节点标签\n\n使用以下命令移除标签：\n\n```bash\ndocker node update --label-rm key NODE_ID\n```\n\n例如：\n```bash\ndocker node update --label-rm environment node1\n```\n\n## 使用标签进行服务部署\n\n在 docker-compose.yml 中使用标签约束：\n\n```yaml\nversion: '3.8'\nservices:\n  app:\n    deploy:\n      placement:\n        constraints:\n          - node.labels.environment == production\n","slug":"docker/doc/material/ai/docker/docker swarm 给节点打标和查看和移除","published":1,"date":"2025-02-23T07:43:31.245Z","updated":"2025-02-23T07:43:31.246Z","__permalink":"/docker/doc/material/ai/docker/docker swarm 给节点打标和查看和移除/","comments":1,"photos":[],"_id":"cm7k5rwbc00akmswsaisyhper","content":"<h1 id=\"Docker-Swarm-节点标签管理\"><a href=\"#Docker-Swarm-节点标签管理\" class=\"headerlink\" title=\"Docker Swarm 节点标签管理\"></a>Docker Swarm 节点标签管理</h1><h2 id=\"查看节点标签\"><a href=\"#查看节点标签\" class=\"headerlink\" title=\"查看节点标签\"></a>查看节点标签</h2><p>使用以下命令查看节点标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有节点的标签</span></span><br><span class=\"line\">docker node <span class=\"built_in\">ls</span> --format <span class=\"string\">&quot;ID: &#123;&#123;.ID&#125;&#125;, Labels: &#123;&#123;.Labels&#125;&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看特定节点的标签</span></span><br><span class=\"line\">docker node inspect NODE_ID --format <span class=\"string\">&quot;Labels: &#123;&#123;.Spec.Labels&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加节点标签\"><a href=\"#添加节点标签\" class=\"headerlink\" title=\"添加节点标签\"></a>添加节点标签</h2><p>使用以下命令添加标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-add key=value NODE_ID</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-add environment=production node1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除节点标签\"><a href=\"#移除节点标签\" class=\"headerlink\" title=\"移除节点标签\"></a>移除节点标签</h2><p>使用以下命令移除标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-rm key NODE_ID</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-rm environment node1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用标签进行服务部署\"><a href=\"#使用标签进行服务部署\" class=\"headerlink\" title=\"使用标签进行服务部署\"></a>使用标签进行服务部署</h2><p>在 docker-compose.yml 中使用标签约束：</p>\n<pre><code class=\"yaml\">version: &#39;3.8&#39;\nservices:\n  app:\n    deploy:\n      placement:\n        constraints:\n          - node.labels.environment == production\n</code></pre>\n","excerpt":"","more":"<h1 id=\"Docker-Swarm-节点标签管理\"><a href=\"#Docker-Swarm-节点标签管理\" class=\"headerlink\" title=\"Docker Swarm 节点标签管理\"></a>Docker Swarm 节点标签管理</h1><h2 id=\"查看节点标签\"><a href=\"#查看节点标签\" class=\"headerlink\" title=\"查看节点标签\"></a>查看节点标签</h2><p>使用以下命令查看节点标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有节点的标签</span></span><br><span class=\"line\">docker node <span class=\"built_in\">ls</span> --format <span class=\"string\">&quot;ID: &#123;&#123;.ID&#125;&#125;, Labels: &#123;&#123;.Labels&#125;&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看特定节点的标签</span></span><br><span class=\"line\">docker node inspect NODE_ID --format <span class=\"string\">&quot;Labels: &#123;&#123;.Spec.Labels&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加节点标签\"><a href=\"#添加节点标签\" class=\"headerlink\" title=\"添加节点标签\"></a>添加节点标签</h2><p>使用以下命令添加标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-add key=value NODE_ID</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-add environment=production node1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除节点标签\"><a href=\"#移除节点标签\" class=\"headerlink\" title=\"移除节点标签\"></a>移除节点标签</h2><p>使用以下命令移除标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-rm key NODE_ID</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-rm environment node1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用标签进行服务部署\"><a href=\"#使用标签进行服务部署\" class=\"headerlink\" title=\"使用标签进行服务部署\"></a>使用标签进行服务部署</h2><p>在 docker-compose.yml 中使用标签约束：</p>\n<pre><code class=\"yaml\">version: &#39;3.8&#39;\nservices:\n  app:\n    deploy:\n      placement:\n        constraints:\n          - node.labels.environment == production\n</code></pre>\n"},{"layout":"default","title":"docker compose 中 , 当我配置了副本的时候, IP怎么固定","nav_order":15,"description":"docker compose 中 , 当我配置了副本的时候, IP怎么固定","parent":"Docker","has_children":false,"grand_parent":"Ai","_content":"\n# docker compose 中 , 当我配置了副本的时候, IP怎么固定\n\n在Docker Compose中，当配置了副本（replicas）时，容器的IP地址是动态分配的，无法直接固定。然而，可以通过一些方法来实现类似固定IP的效果。\n\n以下是一种可能的解决方案：\n\n1. 使用Overlay网络：创建一个Overlay网络，并指定一个自定义的子网。通过这种方式，可以控制容器的IP地址范围，避免与Docker引擎分配的IP地址冲突[[3]](https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1)。\n\n   ````yaml\n   version: \"3.9\"\n   \n   networks:\n     mynetwork:\n       driver: overlay\n       ipam:\n         config:\n           - subnet: 10.0.0.0/24\n   ```\n\n2. 自定义Docker镜像：创建一个自定义的Docker镜像，该镜像在容器启动时可以设置固定的IP地址。可以在Dockerfile中添加相应的配置，例如使用ifconfig命令设置容器的IP地址[[3]](https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1)。\n\n   ````Dockerfile\n   FROM ubuntu\n   RUN apt-get update && apt-get install -y net-tools iputils-ping\n   COPY start.sh /\n   ENTRYPOINT /start.sh\n   ```\n\n   ````bash\n   # start.sh\n   #!/bin/bash\n   if [[ -f \"${STATIC_IP}\" ]]; then\n       echo \"Using default IP from Docker\"\n   else\n       echo \"Found static IP: ${STATIC_IP}, using it\"\n       ifconfig eth0 ${STATIC_IP} netmask 255.255.255.0 up\n   fi\n   sleep infinity\n   ```\n\n3. 启动容器：在Docker Compose文件中，使用`cap-add=NET_ADMIN`参数启动容器，并将其连接到Overlay网络。通过设置`STATIC_IP`环境变量，可以将容器的IP地址设置为固定值[[3]](https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1)。\n\n   ````yaml\n   version: \"3.9\"\n   \n   services:\n     myservice:\n       image: static-ip\n       networks:\n         - mynetwork\n       environment:\n         - STATIC_IP=10.0.0.11\n       deploy:\n         replicas: 2\n         placement:\n           constraints:\n             - node.role == worker\n   ```\n\n请注意，以上解决方案仅提供了一种可能的方法，具体实现方式可能因环境和需求而有所不同。建议根据实际情况进行调整和测试。\n\n---\nLearn more:\n\n1. [Provide static IP to docker containers via docker-compose - Stack Overflow](https://stackoverflow.com/questions/39493490/provide-static-ip-to-docker-containers-via-docker-compose)\n2. [It is useless for fixing the ip of container for Swarm after enabling the replicas - Swarm - Docker Community Forums](https://forums.docker.com/t/it-is-useless-for-fixing-the-ip-of-container-for-swarm-after-enabling-the-replicas/121998)\n3. [Overlay network and static IPs for Docker containers · GitHub](https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1)\n","source":"_posts/docker/doc/material/ai/docker/docker compose 中 , 当我配置了副本的时候, IP怎么固定.md","raw":"---\nlayout: default\ntitle: docker compose 中 , 当我配置了副本的时候, IP怎么固定\nnav_order: 15\ndescription: docker compose 中 , 当我配置了副本的时候, IP怎么固定\nparent: Docker\nhas_children: false\npermalink: \"/docker/doc/material/ai/docker/docker compose 中 , 当我配置了副本的时候, ip怎么固定/\"\ngrand_parent: Ai\n---\n\n# docker compose 中 , 当我配置了副本的时候, IP怎么固定\n\n在Docker Compose中，当配置了副本（replicas）时，容器的IP地址是动态分配的，无法直接固定。然而，可以通过一些方法来实现类似固定IP的效果。\n\n以下是一种可能的解决方案：\n\n1. 使用Overlay网络：创建一个Overlay网络，并指定一个自定义的子网。通过这种方式，可以控制容器的IP地址范围，避免与Docker引擎分配的IP地址冲突[[3]](https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1)。\n\n   ````yaml\n   version: \"3.9\"\n   \n   networks:\n     mynetwork:\n       driver: overlay\n       ipam:\n         config:\n           - subnet: 10.0.0.0/24\n   ```\n\n2. 自定义Docker镜像：创建一个自定义的Docker镜像，该镜像在容器启动时可以设置固定的IP地址。可以在Dockerfile中添加相应的配置，例如使用ifconfig命令设置容器的IP地址[[3]](https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1)。\n\n   ````Dockerfile\n   FROM ubuntu\n   RUN apt-get update && apt-get install -y net-tools iputils-ping\n   COPY start.sh /\n   ENTRYPOINT /start.sh\n   ```\n\n   ````bash\n   # start.sh\n   #!/bin/bash\n   if [[ -f \"${STATIC_IP}\" ]]; then\n       echo \"Using default IP from Docker\"\n   else\n       echo \"Found static IP: ${STATIC_IP}, using it\"\n       ifconfig eth0 ${STATIC_IP} netmask 255.255.255.0 up\n   fi\n   sleep infinity\n   ```\n\n3. 启动容器：在Docker Compose文件中，使用`cap-add=NET_ADMIN`参数启动容器，并将其连接到Overlay网络。通过设置`STATIC_IP`环境变量，可以将容器的IP地址设置为固定值[[3]](https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1)。\n\n   ````yaml\n   version: \"3.9\"\n   \n   services:\n     myservice:\n       image: static-ip\n       networks:\n         - mynetwork\n       environment:\n         - STATIC_IP=10.0.0.11\n       deploy:\n         replicas: 2\n         placement:\n           constraints:\n             - node.role == worker\n   ```\n\n请注意，以上解决方案仅提供了一种可能的方法，具体实现方式可能因环境和需求而有所不同。建议根据实际情况进行调整和测试。\n\n---\nLearn more:\n\n1. [Provide static IP to docker containers via docker-compose - Stack Overflow](https://stackoverflow.com/questions/39493490/provide-static-ip-to-docker-containers-via-docker-compose)\n2. [It is useless for fixing the ip of container for Swarm after enabling the replicas - Swarm - Docker Community Forums](https://forums.docker.com/t/it-is-useless-for-fixing-the-ip-of-container-for-swarm-after-enabling-the-replicas/121998)\n3. [Overlay network and static IPs for Docker containers · GitHub](https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1)\n","slug":"docker/doc/material/ai/docker/docker compose 中 , 当我配置了副本的时候, IP怎么固定","published":1,"date":"2025-02-23T07:43:31.246Z","updated":"2025-02-23T07:43:31.246Z","__permalink":"/docker/doc/material/ai/docker/docker compose 中 , 当我配置了副本的时候, ip怎么固定/","comments":1,"photos":[],"_id":"cm7k5rwbc00almswsbm9e2my7","content":"<h1 id=\"docker-compose-中-当我配置了副本的时候-IP怎么固定\"><a href=\"#docker-compose-中-当我配置了副本的时候-IP怎么固定\" class=\"headerlink\" title=\"docker compose 中 , 当我配置了副本的时候, IP怎么固定\"></a>docker compose 中 , 当我配置了副本的时候, IP怎么固定</h1><p>在Docker Compose中，当配置了副本（replicas）时，容器的IP地址是动态分配的，无法直接固定。然而，可以通过一些方法来实现类似固定IP的效果。</p>\n<p>以下是一种可能的解决方案：</p>\n<ol>\n<li><p>使用Overlay网络：创建一个Overlay网络，并指定一个自定义的子网。通过这种方式，可以控制容器的IP地址范围，避免与Docker引擎分配的IP地址冲突<a href=\"https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1\">[3]</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  mynetwork:</span><br><span class=\"line\">    driver: overlay</span><br><span class=\"line\">    ipam:</span><br><span class=\"line\">      config:</span><br><span class=\"line\">        - subnet: 10.0.0.0/24</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义Docker镜像：创建一个自定义的Docker镜像，该镜像在容器启动时可以设置固定的IP地址。可以在Dockerfile中添加相应的配置，例如使用ifconfig命令设置容器的IP地址<a href=\"https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1\">[3]</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y net-tools iputils-ping</span><br><span class=\"line\">COPY start.sh /</span><br><span class=\"line\">ENTRYPOINT /start.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># start.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">if [[ -f &quot;$&#123;STATIC_IP&#125;&quot; ]]; then</span><br><span class=\"line\">    echo &quot;Using default IP from Docker&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;Found static IP: $&#123;STATIC_IP&#125;, using it&quot;</span><br><span class=\"line\">    ifconfig eth0 $&#123;STATIC_IP&#125; netmask 255.255.255.0 up</span><br><span class=\"line\">fi</span><br><span class=\"line\">sleep infinity</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动容器：在Docker Compose文件中，使用<code>cap-add=NET_ADMIN</code>参数启动容器，并将其连接到Overlay网络。通过设置<code>STATIC_IP</code>环境变量，可以将容器的IP地址设置为固定值<a href=\"https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1\">[3]</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  myservice:</span><br><span class=\"line\">    image: static-ip</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - mynetwork</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - STATIC_IP=10.0.0.11</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 2</span><br><span class=\"line\">      placement:</span><br><span class=\"line\">        constraints:</span><br><span class=\"line\">          - node.role == worker</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>请注意，以上解决方案仅提供了一种可能的方法，具体实现方式可能因环境和需求而有所不同。建议根据实际情况进行调整和测试。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/39493490/provide-static-ip-to-docker-containers-via-docker-compose\">Provide static IP to docker containers via docker-compose - Stack Overflow</a></li>\n<li><a href=\"https://forums.docker.com/t/it-is-useless-for-fixing-the-ip-of-container-for-swarm-after-enabling-the-replicas/121998\">It is useless for fixing the ip of container for Swarm after enabling the replicas - Swarm - Docker Community Forums</a></li>\n<li><a href=\"https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1\">Overlay network and static IPs for Docker containers · GitHub</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"docker-compose-中-当我配置了副本的时候-IP怎么固定\"><a href=\"#docker-compose-中-当我配置了副本的时候-IP怎么固定\" class=\"headerlink\" title=\"docker compose 中 , 当我配置了副本的时候, IP怎么固定\"></a>docker compose 中 , 当我配置了副本的时候, IP怎么固定</h1><p>在Docker Compose中，当配置了副本（replicas）时，容器的IP地址是动态分配的，无法直接固定。然而，可以通过一些方法来实现类似固定IP的效果。</p>\n<p>以下是一种可能的解决方案：</p>\n<ol>\n<li><p>使用Overlay网络：创建一个Overlay网络，并指定一个自定义的子网。通过这种方式，可以控制容器的IP地址范围，避免与Docker引擎分配的IP地址冲突<a href=\"https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1\">[3]</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  mynetwork:</span><br><span class=\"line\">    driver: overlay</span><br><span class=\"line\">    ipam:</span><br><span class=\"line\">      config:</span><br><span class=\"line\">        - subnet: 10.0.0.0/24</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义Docker镜像：创建一个自定义的Docker镜像，该镜像在容器启动时可以设置固定的IP地址。可以在Dockerfile中添加相应的配置，例如使用ifconfig命令设置容器的IP地址<a href=\"https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1\">[3]</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y net-tools iputils-ping</span><br><span class=\"line\">COPY start.sh /</span><br><span class=\"line\">ENTRYPOINT /start.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># start.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">if [[ -f &quot;$&#123;STATIC_IP&#125;&quot; ]]; then</span><br><span class=\"line\">    echo &quot;Using default IP from Docker&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;Found static IP: $&#123;STATIC_IP&#125;, using it&quot;</span><br><span class=\"line\">    ifconfig eth0 $&#123;STATIC_IP&#125; netmask 255.255.255.0 up</span><br><span class=\"line\">fi</span><br><span class=\"line\">sleep infinity</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动容器：在Docker Compose文件中，使用<code>cap-add=NET_ADMIN</code>参数启动容器，并将其连接到Overlay网络。通过设置<code>STATIC_IP</code>环境变量，可以将容器的IP地址设置为固定值<a href=\"https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1\">[3]</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  myservice:</span><br><span class=\"line\">    image: static-ip</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - mynetwork</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - STATIC_IP=10.0.0.11</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 2</span><br><span class=\"line\">      placement:</span><br><span class=\"line\">        constraints:</span><br><span class=\"line\">          - node.role == worker</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>请注意，以上解决方案仅提供了一种可能的方法，具体实现方式可能因环境和需求而有所不同。建议根据实际情况进行调整和测试。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/39493490/provide-static-ip-to-docker-containers-via-docker-compose\">Provide static IP to docker containers via docker-compose - Stack Overflow</a></li>\n<li><a href=\"https://forums.docker.com/t/it-is-useless-for-fixing-the-ip-of-container-for-swarm-after-enabling-the-replicas/121998\">It is useless for fixing the ip of container for Swarm after enabling the replicas - Swarm - Docker Community Forums</a></li>\n<li><a href=\"https://gist.github.com/olljanat/b96ed26583c452118313fc18e4a663c1\">Overlay network and static IPs for Docker containers · GitHub</a></li>\n</ol>\n"},{"layout":"default","title":"Docker","nav_order":5,"has_children":true,"parent":"Docker","_content":"\n# Docker\n","source":"_posts/docker/doc/material/ai/docker/index.md","raw":"---\nlayout: default\ntitle: Docker\nnav_order: 5\nhas_children: true\nparent: Docker\npermalink: \"/docker/doc/material/ai/docker/\"\n---\n\n# Docker\n","slug":"docker/doc/material/ai/docker/index","published":1,"date":"2025-02-23T07:43:31.246Z","updated":"2025-02-23T07:43:31.247Z","__permalink":"/docker/doc/material/ai/docker/","comments":1,"photos":[],"_id":"cm7k5rwbc00ammswsfqgqb1kx","content":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1>","excerpt":"","more":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1>"},{"layout":"default","title":"centos使用date命令同步网络时间","nav_order":15,"description":"centos使用date命令同步网络时间","parent":"Os","has_children":false,"grand_parent":"Ai","_content":"\n# centos使用date命令同步网络时间\n\n在CentOS中，可以使用date命令来同步网络时间。下面是使用date命令同步网络时间的步骤：\n\n1. 设置时区：\n   首先，确保服务器的时区设置正确。可以使用以下命令来查看当前的时区设置：\n\n   ````shell\n   timedatectl status | grep 'Time zone'\n   ```\n\n   如果时区不正确，可以使用以下命令来设置时区为中国时区（Asia/Shanghai）：\n\n   ````shell\n   timedatectl set-timezone Asia/Shanghai\n   ```\n\n2. 同步网络时间：\n   使用以下命令来同步网络时间：\n\n   ````shell\n   date -s \"$(curl -s --head http://www.baidu.com | grep '^Date:' | cut -d' ' -f3-6)Z\"\n   ```\n   这个命令会从百度的服务器获取当前的时间，并将系统时间设置为该时间。\n\n3. 验证时间同步：\n   使用以下命令来验证时间是否同步成功：\n\n   ````shell\n   date\n   ```\n   这个命令会显示当前的系统时间。\n\n请注意，使用date命令同步网络时间可能不是最准确的方法。更好的方法是使用ntpdate或者ntp服务来同步网络时间。你可以参考搜索结果中提到的ntpdate和ntp服务的使用方法。\n\n---\nLearn more:\n\n1. [CentOS 7同步时间的2种方法 - 小z博客](https://blog.xiaoz.org/archives/12989)\n2. [Linux/CentOS系统同步网络时间的2种方法详解-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/1721411)\n3. [CentOS设置系统时间与网络时间同步-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/1795159)\n","source":"_posts/docker/doc/material/ai/os/centos使用date命令同步网络时间.md","raw":"---\nlayout: default\ntitle: centos使用date命令同步网络时间\nnav_order: 15\ndescription: centos使用date命令同步网络时间\nparent: Os\nhas_children: false\npermalink: \"/docker/doc/material/ai/os/centos使用date命令同步网络时间/\"\ngrand_parent: Ai\n---\n\n# centos使用date命令同步网络时间\n\n在CentOS中，可以使用date命令来同步网络时间。下面是使用date命令同步网络时间的步骤：\n\n1. 设置时区：\n   首先，确保服务器的时区设置正确。可以使用以下命令来查看当前的时区设置：\n\n   ````shell\n   timedatectl status | grep 'Time zone'\n   ```\n\n   如果时区不正确，可以使用以下命令来设置时区为中国时区（Asia/Shanghai）：\n\n   ````shell\n   timedatectl set-timezone Asia/Shanghai\n   ```\n\n2. 同步网络时间：\n   使用以下命令来同步网络时间：\n\n   ````shell\n   date -s \"$(curl -s --head http://www.baidu.com | grep '^Date:' | cut -d' ' -f3-6)Z\"\n   ```\n   这个命令会从百度的服务器获取当前的时间，并将系统时间设置为该时间。\n\n3. 验证时间同步：\n   使用以下命令来验证时间是否同步成功：\n\n   ````shell\n   date\n   ```\n   这个命令会显示当前的系统时间。\n\n请注意，使用date命令同步网络时间可能不是最准确的方法。更好的方法是使用ntpdate或者ntp服务来同步网络时间。你可以参考搜索结果中提到的ntpdate和ntp服务的使用方法。\n\n---\nLearn more:\n\n1. [CentOS 7同步时间的2种方法 - 小z博客](https://blog.xiaoz.org/archives/12989)\n2. [Linux/CentOS系统同步网络时间的2种方法详解-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/1721411)\n3. [CentOS设置系统时间与网络时间同步-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/1795159)\n","slug":"docker/doc/material/ai/os/centos使用date命令同步网络时间","published":1,"date":"2025-02-23T07:43:31.448Z","updated":"2025-02-23T07:43:31.449Z","__permalink":"/docker/doc/material/ai/os/centos使用date命令同步网络时间/","comments":1,"photos":[],"_id":"cm7k5rwbc00anmswsepjph0b2","content":"<h1 id=\"centos使用date命令同步网络时间\"><a href=\"#centos使用date命令同步网络时间\" class=\"headerlink\" title=\"centos使用date命令同步网络时间\"></a>centos使用date命令同步网络时间</h1><p>在CentOS中，可以使用date命令来同步网络时间。下面是使用date命令同步网络时间的步骤：</p>\n<ol>\n<li><p>设置时区：<br>首先，确保服务器的时区设置正确。可以使用以下命令来查看当前的时区设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timedatectl status | grep &#x27;Time zone&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>如果时区不正确，可以使用以下命令来设置时区为中国时区（Asia&#x2F;Shanghai）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步网络时间：<br>使用以下命令来同步网络时间：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -s &quot;$(curl -s --head http://www.baidu.com | grep &#x27;^Date:&#x27; | cut -d&#x27; &#x27; -f3-6)Z&quot;</span><br></pre></td></tr></table></figure>\n<p>这个命令会从百度的服务器获取当前的时间，并将系统时间设置为该时间。</p>\n</li>\n<li><p>验证时间同步：<br>使用以下命令来验证时间是否同步成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n<p>这个命令会显示当前的系统时间。</p>\n</li>\n</ol>\n<p>请注意，使用date命令同步网络时间可能不是最准确的方法。更好的方法是使用ntpdate或者ntp服务来同步网络时间。你可以参考搜索结果中提到的ntpdate和ntp服务的使用方法。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://blog.xiaoz.org/archives/12989\">CentOS 7同步时间的2种方法 - 小z博客</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1721411\">Linux&#x2F;CentOS系统同步网络时间的2种方法详解-腾讯云开发者社区-腾讯云</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1795159\">CentOS设置系统时间与网络时间同步-腾讯云开发者社区-腾讯云</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"centos使用date命令同步网络时间\"><a href=\"#centos使用date命令同步网络时间\" class=\"headerlink\" title=\"centos使用date命令同步网络时间\"></a>centos使用date命令同步网络时间</h1><p>在CentOS中，可以使用date命令来同步网络时间。下面是使用date命令同步网络时间的步骤：</p>\n<ol>\n<li><p>设置时区：<br>首先，确保服务器的时区设置正确。可以使用以下命令来查看当前的时区设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timedatectl status | grep &#x27;Time zone&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>如果时区不正确，可以使用以下命令来设置时区为中国时区（Asia&#x2F;Shanghai）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步网络时间：<br>使用以下命令来同步网络时间：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -s &quot;$(curl -s --head http://www.baidu.com | grep &#x27;^Date:&#x27; | cut -d&#x27; &#x27; -f3-6)Z&quot;</span><br></pre></td></tr></table></figure>\n<p>这个命令会从百度的服务器获取当前的时间，并将系统时间设置为该时间。</p>\n</li>\n<li><p>验证时间同步：<br>使用以下命令来验证时间是否同步成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n<p>这个命令会显示当前的系统时间。</p>\n</li>\n</ol>\n<p>请注意，使用date命令同步网络时间可能不是最准确的方法。更好的方法是使用ntpdate或者ntp服务来同步网络时间。你可以参考搜索结果中提到的ntpdate和ntp服务的使用方法。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://blog.xiaoz.org/archives/12989\">CentOS 7同步时间的2种方法 - 小z博客</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1721411\">Linux&#x2F;CentOS系统同步网络时间的2种方法详解-腾讯云开发者社区-腾讯云</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1795159\">CentOS设置系统时间与网络时间同步-腾讯云开发者社区-腾讯云</a></li>\n</ol>\n"},{"layout":"default","title":"curl 看连接是否通","nav_order":15,"description":"curl 看连接是否通","parent":"Os","has_children":false,"grand_parent":"Ai","_content":"\n# curl 看连接是否通\n\n您可以使用curl命令来检查连接是否通畅。以下是使用curl命令检查连接的几种方法：\n\n1. 使用curl发送HTTP请求：\n\n   ````bash\n   curl -I <URL>\n   ```\n   这将发送一个HEAD请求到指定的URL，并返回HTTP响应头信息。如果连接成功，您将看到HTTP响应的状态码和其他相关信息。\n\n2. 使用curl发送TCP连接请求：\n\n   ````bash\n   curl telnet://<host>:<port>\n   ```\n   这将尝试建立到指定主机和端口的TCP连接。如果连接成功，您将看到\"Connected\"的状态。\n\n3. 使用curl测试特定端口的连接：\n\n   ````bash\n   curl -v telnet://<host>:<port>\n   ```\n   这将显示与指定主机和端口的连接过程的详细信息。如果连接成功，您将看到\"Connected\"的状态。\n\n请注意，这些命令仅适用于检查连接是否成功建立，而不涉及实际的数据传输。\n\n---\nLearn more:\n\n1. [Test TCP connectivity with curl](https://www.unixtutorial.org/test-tcp-connectivity-with-curl/)\n2. [Curl: Using curl to test if a port is open: exit immediately upon connection if STDIN is /dev/null](https://curl.se/mail/archive-2022-04/0027.html)\n3. [monitoring - Health check of web page using curl - Unix & Linux Stack Exchange](https://unix.stackexchange.com/questions/84814/health-check-of-web-page-using-curl)\n","source":"_posts/docker/doc/material/ai/os/curl 看连接是否通.md","raw":"---\nlayout: default\ntitle: curl 看连接是否通\nnav_order: 15\ndescription: curl 看连接是否通\nparent: Os\nhas_children: false\npermalink: \"/docker/doc/material/ai/os/curl 看连接是否通/\"\ngrand_parent: Ai\n---\n\n# curl 看连接是否通\n\n您可以使用curl命令来检查连接是否通畅。以下是使用curl命令检查连接的几种方法：\n\n1. 使用curl发送HTTP请求：\n\n   ````bash\n   curl -I <URL>\n   ```\n   这将发送一个HEAD请求到指定的URL，并返回HTTP响应头信息。如果连接成功，您将看到HTTP响应的状态码和其他相关信息。\n\n2. 使用curl发送TCP连接请求：\n\n   ````bash\n   curl telnet://<host>:<port>\n   ```\n   这将尝试建立到指定主机和端口的TCP连接。如果连接成功，您将看到\"Connected\"的状态。\n\n3. 使用curl测试特定端口的连接：\n\n   ````bash\n   curl -v telnet://<host>:<port>\n   ```\n   这将显示与指定主机和端口的连接过程的详细信息。如果连接成功，您将看到\"Connected\"的状态。\n\n请注意，这些命令仅适用于检查连接是否成功建立，而不涉及实际的数据传输。\n\n---\nLearn more:\n\n1. [Test TCP connectivity with curl](https://www.unixtutorial.org/test-tcp-connectivity-with-curl/)\n2. [Curl: Using curl to test if a port is open: exit immediately upon connection if STDIN is /dev/null](https://curl.se/mail/archive-2022-04/0027.html)\n3. [monitoring - Health check of web page using curl - Unix & Linux Stack Exchange](https://unix.stackexchange.com/questions/84814/health-check-of-web-page-using-curl)\n","slug":"docker/doc/material/ai/os/curl 看连接是否通","published":1,"date":"2025-02-23T07:43:31.447Z","updated":"2025-02-23T07:43:31.447Z","__permalink":"/docker/doc/material/ai/os/curl 看连接是否通/","comments":1,"photos":[],"_id":"cm7k5rwbc00aomsws3d4e30ns","content":"<h1 id=\"curl-看连接是否通\"><a href=\"#curl-看连接是否通\" class=\"headerlink\" title=\"curl 看连接是否通\"></a>curl 看连接是否通</h1><p>您可以使用curl命令来检查连接是否通畅。以下是使用curl命令检查连接的几种方法：</p>\n<ol>\n<li><p>使用curl发送HTTP请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I &lt;URL&gt;</span><br></pre></td></tr></table></figure>\n<p>这将发送一个HEAD请求到指定的URL，并返回HTTP响应头信息。如果连接成功，您将看到HTTP响应的状态码和其他相关信息。</p>\n</li>\n<li><p>使用curl发送TCP连接请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl telnet://&lt;host&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure>\n<p>这将尝试建立到指定主机和端口的TCP连接。如果连接成功，您将看到”Connected”的状态。</p>\n</li>\n<li><p>使用curl测试特定端口的连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v telnet://&lt;host&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure>\n<p>这将显示与指定主机和端口的连接过程的详细信息。如果连接成功，您将看到”Connected”的状态。</p>\n</li>\n</ol>\n<p>请注意，这些命令仅适用于检查连接是否成功建立，而不涉及实际的数据传输。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://www.unixtutorial.org/test-tcp-connectivity-with-curl/\">Test TCP connectivity with curl</a></li>\n<li><a href=\"https://curl.se/mail/archive-2022-04/0027.html\">Curl: Using curl to test if a port is open: exit immediately upon connection if STDIN is &#x2F;dev&#x2F;null</a></li>\n<li><a href=\"https://unix.stackexchange.com/questions/84814/health-check-of-web-page-using-curl\">monitoring - Health check of web page using curl - Unix &amp; Linux Stack Exchange</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"curl-看连接是否通\"><a href=\"#curl-看连接是否通\" class=\"headerlink\" title=\"curl 看连接是否通\"></a>curl 看连接是否通</h1><p>您可以使用curl命令来检查连接是否通畅。以下是使用curl命令检查连接的几种方法：</p>\n<ol>\n<li><p>使用curl发送HTTP请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I &lt;URL&gt;</span><br></pre></td></tr></table></figure>\n<p>这将发送一个HEAD请求到指定的URL，并返回HTTP响应头信息。如果连接成功，您将看到HTTP响应的状态码和其他相关信息。</p>\n</li>\n<li><p>使用curl发送TCP连接请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl telnet://&lt;host&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure>\n<p>这将尝试建立到指定主机和端口的TCP连接。如果连接成功，您将看到”Connected”的状态。</p>\n</li>\n<li><p>使用curl测试特定端口的连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v telnet://&lt;host&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure>\n<p>这将显示与指定主机和端口的连接过程的详细信息。如果连接成功，您将看到”Connected”的状态。</p>\n</li>\n</ol>\n<p>请注意，这些命令仅适用于检查连接是否成功建立，而不涉及实际的数据传输。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://www.unixtutorial.org/test-tcp-connectivity-with-curl/\">Test TCP connectivity with curl</a></li>\n<li><a href=\"https://curl.se/mail/archive-2022-04/0027.html\">Curl: Using curl to test if a port is open: exit immediately upon connection if STDIN is &#x2F;dev&#x2F;null</a></li>\n<li><a href=\"https://unix.stackexchange.com/questions/84814/health-check-of-web-page-using-curl\">monitoring - Health check of web page using curl - Unix &amp; Linux Stack Exchange</a></li>\n</ol>\n"},{"layout":"default","title":"Os","nav_order":5,"has_children":true,"parent":"Os","_content":"\n# Os\n","source":"_posts/docker/doc/material/ai/os/index.md","raw":"---\nlayout: default\ntitle: Os\nnav_order: 5\nhas_children: true\nparent: Os\npermalink: \"/docker/doc/material/ai/os/\"\n---\n\n# Os\n","slug":"docker/doc/material/ai/os/index","published":1,"date":"2025-02-23T07:43:31.448Z","updated":"2025-02-23T07:43:31.448Z","__permalink":"/docker/doc/material/ai/os/","comments":1,"photos":[],"_id":"cm7k5rwbc00apmsws54ozc4hw","content":"<h1 id=\"Os\"><a href=\"#Os\" class=\"headerlink\" title=\"Os\"></a>Os</h1>","excerpt":"","more":"<h1 id=\"Os\"><a href=\"#Os\" class=\"headerlink\" title=\"Os\"></a>Os</h1>"},{"layout":"default","title":"timedatectl命令怎么同步网络时间","nav_order":15,"description":"timedatectl命令怎么同步网络时间","parent":"Os","has_children":false,"grand_parent":"Ai","_content":"\n# timedatectl命令怎么同步网络时间\n\n要使用`timedatectl`命令同步网络时间，您可以按照以下步骤操作：\n\n1. 检查当前时间同步状态：\n   - 在终端中运行以下命令来查看当前时间同步状态：`timedatectl status` [[1]](https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/).\n   - 检查输出中的 \"System clock synchronized\" 字段，如果显示为 \"yes\"，则表示时间已经同步。\n\n2. 启用网络时间同步：\n   - 在终端中运行以下命令来启用网络时间同步：`sudo timedatectl set-ntp true` [[1]](https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/).\n   - 这将启用系统与网络时间协议（NTP）服务器的自动时间同步。\n\n3. 检查时间同步状态：\n   - 再次运行 `timedatectl status` 命令来检查时间同步状态 [[1]](https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/).\n   - 确保 \"System clock synchronized\" 字段显示为 \"yes\"，表示时间已成功同步。\n\n---\nLearn more:\n\n1. [Synchronizing a Linux System Clock with NTP Server](https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/)\n2. [How to Set Time, Timezone and Synchronize System Clock Using timedatectl Command](https://www.tecmint.com/set-time-timezone-and-synchronize-time-using-timedatectl-command/)\n3. [systemd - How to sync the time to network with timedatectl on Ubuntu 18.04? - Ask Ubuntu](https://askubuntu.com/questions/1058593/how-to-sync-the-time-to-network-with-timedatectl-on-ubuntu-18-04)\n","source":"_posts/docker/doc/material/ai/os/timedatectl命令怎么同步网络时间.md","raw":"---\nlayout: default\ntitle: timedatectl命令怎么同步网络时间\nnav_order: 15\ndescription: timedatectl命令怎么同步网络时间\nparent: Os\nhas_children: false\npermalink: \"/docker/doc/material/ai/os/timedatectl命令怎么同步网络时间/\"\ngrand_parent: Ai\n---\n\n# timedatectl命令怎么同步网络时间\n\n要使用`timedatectl`命令同步网络时间，您可以按照以下步骤操作：\n\n1. 检查当前时间同步状态：\n   - 在终端中运行以下命令来查看当前时间同步状态：`timedatectl status` [[1]](https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/).\n   - 检查输出中的 \"System clock synchronized\" 字段，如果显示为 \"yes\"，则表示时间已经同步。\n\n2. 启用网络时间同步：\n   - 在终端中运行以下命令来启用网络时间同步：`sudo timedatectl set-ntp true` [[1]](https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/).\n   - 这将启用系统与网络时间协议（NTP）服务器的自动时间同步。\n\n3. 检查时间同步状态：\n   - 再次运行 `timedatectl status` 命令来检查时间同步状态 [[1]](https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/).\n   - 确保 \"System clock synchronized\" 字段显示为 \"yes\"，表示时间已成功同步。\n\n---\nLearn more:\n\n1. [Synchronizing a Linux System Clock with NTP Server](https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/)\n2. [How to Set Time, Timezone and Synchronize System Clock Using timedatectl Command](https://www.tecmint.com/set-time-timezone-and-synchronize-time-using-timedatectl-command/)\n3. [systemd - How to sync the time to network with timedatectl on Ubuntu 18.04? - Ask Ubuntu](https://askubuntu.com/questions/1058593/how-to-sync-the-time-to-network-with-timedatectl-on-ubuntu-18-04)\n","slug":"docker/doc/material/ai/os/timedatectl命令怎么同步网络时间","published":1,"date":"2025-02-23T07:43:31.420Z","updated":"2025-02-23T07:43:31.420Z","__permalink":"/docker/doc/material/ai/os/timedatectl命令怎么同步网络时间/","comments":1,"photos":[],"_id":"cm7k5rwbc00aqmswsgoon5qnn","content":"<h1 id=\"timedatectl命令怎么同步网络时间\"><a href=\"#timedatectl命令怎么同步网络时间\" class=\"headerlink\" title=\"timedatectl命令怎么同步网络时间\"></a>timedatectl命令怎么同步网络时间</h1><p>要使用<code>timedatectl</code>命令同步网络时间，您可以按照以下步骤操作：</p>\n<ol>\n<li><p>检查当前时间同步状态：</p>\n<ul>\n<li>在终端中运行以下命令来查看当前时间同步状态：<code>timedatectl status</code> <a href=\"https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/\">[1]</a>.</li>\n<li>检查输出中的 “System clock synchronized” 字段，如果显示为 “yes”，则表示时间已经同步。</li>\n</ul>\n</li>\n<li><p>启用网络时间同步：</p>\n<ul>\n<li>在终端中运行以下命令来启用网络时间同步：<code>sudo timedatectl set-ntp true</code> <a href=\"https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/\">[1]</a>.</li>\n<li>这将启用系统与网络时间协议（NTP）服务器的自动时间同步。</li>\n</ul>\n</li>\n<li><p>检查时间同步状态：</p>\n<ul>\n<li>再次运行 <code>timedatectl status</code> 命令来检查时间同步状态 <a href=\"https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/\">[1]</a>.</li>\n<li>确保 “System clock synchronized” 字段显示为 “yes”，表示时间已成功同步。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/\">Synchronizing a Linux System Clock with NTP Server</a></li>\n<li><a href=\"https://www.tecmint.com/set-time-timezone-and-synchronize-time-using-timedatectl-command/\">How to Set Time, Timezone and Synchronize System Clock Using timedatectl Command</a></li>\n<li><a href=\"https://askubuntu.com/questions/1058593/how-to-sync-the-time-to-network-with-timedatectl-on-ubuntu-18-04\">systemd - How to sync the time to network with timedatectl on Ubuntu 18.04? - Ask Ubuntu</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"timedatectl命令怎么同步网络时间\"><a href=\"#timedatectl命令怎么同步网络时间\" class=\"headerlink\" title=\"timedatectl命令怎么同步网络时间\"></a>timedatectl命令怎么同步网络时间</h1><p>要使用<code>timedatectl</code>命令同步网络时间，您可以按照以下步骤操作：</p>\n<ol>\n<li><p>检查当前时间同步状态：</p>\n<ul>\n<li>在终端中运行以下命令来查看当前时间同步状态：<code>timedatectl status</code> <a href=\"https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/\">[1]</a>.</li>\n<li>检查输出中的 “System clock synchronized” 字段，如果显示为 “yes”，则表示时间已经同步。</li>\n</ul>\n</li>\n<li><p>启用网络时间同步：</p>\n<ul>\n<li>在终端中运行以下命令来启用网络时间同步：<code>sudo timedatectl set-ntp true</code> <a href=\"https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/\">[1]</a>.</li>\n<li>这将启用系统与网络时间协议（NTP）服务器的自动时间同步。</li>\n</ul>\n</li>\n<li><p>检查时间同步状态：</p>\n<ul>\n<li>再次运行 <code>timedatectl status</code> 命令来检查时间同步状态 <a href=\"https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/\">[1]</a>.</li>\n<li>确保 “System clock synchronized” 字段显示为 “yes”，表示时间已成功同步。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://tecadmin.net/synchronizing-a-linux-system-clock-with-ntp-server/\">Synchronizing a Linux System Clock with NTP Server</a></li>\n<li><a href=\"https://www.tecmint.com/set-time-timezone-and-synchronize-time-using-timedatectl-command/\">How to Set Time, Timezone and Synchronize System Clock Using timedatectl Command</a></li>\n<li><a href=\"https://askubuntu.com/questions/1058593/how-to-sync-the-time-to-network-with-timedatectl-on-ubuntu-18-04\">systemd - How to sync the time to network with timedatectl on Ubuntu 18.04? - Ask Ubuntu</a></li>\n</ol>\n"},{"layout":"default","title":"为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?","nav_order":15,"description":"为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?","parent":"Os","has_children":false,"grand_parent":"Ai","_content":"\n# 为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?\n\n通过ssh -R转发端口后，只能通过127.0.0.1的IP访问，而不能通过外网IP访问的原因是默认情况下，SSH服务器只会监听本地回环地址（127.0.0.1）上的转发端口。这是为了安全考虑，防止未经授权的访问。\n\n要通过外网IP访问转发的端口，需要进行以下步骤：\n\n1. 在SSH服务器上修改配置文件：打开SSH服务器的配置文件（通常是/etc/ssh/sshd_config），找到并修改以下行：\n\n   ```shell\n   GatewayPorts yes\n   ```\n\n   这将允许SSH服务器监听所有网络接口上的转发端口，而不仅仅是本地回环地址。\n\n2. 重启SSH服务器：保存配置文件修改后，重启SSH服务器以使修改生效。可以使用以下命令重启SSH服务器：\n\n   ```shell\n   sudo service ssh restart\n   # 或者\n   systemctl restart sshd\n   ```\n\n3. 在客户端使用外网IP访问：现在，你可以使用SSH客户端通过外网IP访问转发的端口。例如，如果你将端口转发到SSH服务器的端口2222，并且SSH服务器的外网IP是203.0.113.1，你可以使用以下命令连接到转发的端口：\n\n   ```shell\n   ssh -p 2222 user@203.0.113.1\n   ```\n\n   这将连接到SSH服务器，并将流量转发到转发的端口。\n\n请注意，修改SSH服务器的配置文件可能需要管理员权限。此外，开放SSH服务器的转发端口可能会带来安全风险，请确保只允许受信任的主机访问转发的端口。\n\n---\nLearn more:\n\n1. [ssh如何实现内网访问外网? - 知乎](https://www.zhihu.com/question/398993211)\n2. [SSH的三种端口转发 - jeremy的技术点滴](https://jeremyxu2010.github.io/2018/12/ssh%E7%9A%84%E4%B8%89%E7%A7%8D%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/)\n3. [通过ssh反向连接内网主机的方法(防火墙的主机) - memphise - 博客园](https://www.cnblogs.com/memphise/articles/6472207.html)\n\n## 相关问题\n\n> sudo service ssh restart\n这句命令执行失败了, 并且已经安装了ssh, 怎么解决\nFailed to restart ssh.service: Unit not found.\n\n根据搜索结果，\"Failed to restart ssh.service: Unit not found\"错误可能是由于使用了错误的命令或系统版本不同导致的。以下是解决此问题的几种可能方法：\n\n1. 使用正确的命令：根据您的系统版本，尝试使用适当的命令来重启SSH服务。在CentOS 7及更高版本中，应使用以下命令：\n\n   ```shell\n   sudo systemctl restart sshd\n   ```\n\n   在Ubuntu 16.04及更高版本中，应使用以下命令：\n\n   ```shell\n   sudo systemctl restart ssh\n   ```\n\n   如果仍然出现相同的错误，请继续以下步骤。\n\n2. 检查SSH服务的状态：使用以下命令检查SSH服务的状态，确保它已正确安装并正在运行：\n\n   ```shell\n   sudo systemctl status sshd\n   ```\n\n   如果SSH服务未安装或未运行，请尝试重新安装SSH服务器并启动服务。\n\n3. 重新安装SSH服务器：如果SSH服务已正确安装但仍无法启动，请尝试重新安装SSH服务器。首先，卸载现有的SSH服务器：\n\n   ```shell\n   sudo apt-get purge openssh-server\n   ```\n\n   然后，重新安装SSH服务器：\n\n   ```shell\n   sudo apt-get install openssh-server\n   ```\n\n   最后，尝试重新启动SSH服务。\n\n如果问题仍然存在，请提供更多详细信息，例如错误消息的完整内容和任何相关的日志文件，以便我们能够更好地帮助您解决问题。\n\n---\nLearn more:\n\n1. [Failed to restart ssh.service: Unit not found.-CSDN博客](https://blog.csdn.net/u010433704/article/details/120057040)\n2. [Failed to start ssh.service: Unit not found. - 等不到的口琴 - 博客园](https://www.cnblogs.com/Courage129/p/14073162.html)\n3. [ssh - Cannot start sshd service: Failed to start openssh.service: Unit not found - Server Fault](https://serverfault.com/questions/904430/cannot-start-sshd-service-failed-to-start-openssh-service-unit-not-found)\n","source":"_posts/docker/doc/material/ai/os/为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?.md","raw":"---\nlayout: default\ntitle: 为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?\nnav_order: 15\ndescription: 为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?\nparent: Os\nhas_children: false\npermalink: \"/docker/doc/material/ai/os/为什么通过ssh -r转发端口后, 只能通过127.0.0.1的ip访问, 不能通过外网ip访问?\n  要怎么做才能通过外网ip访问呢?/\"\ngrand_parent: Ai\n---\n\n# 为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?\n\n通过ssh -R转发端口后，只能通过127.0.0.1的IP访问，而不能通过外网IP访问的原因是默认情况下，SSH服务器只会监听本地回环地址（127.0.0.1）上的转发端口。这是为了安全考虑，防止未经授权的访问。\n\n要通过外网IP访问转发的端口，需要进行以下步骤：\n\n1. 在SSH服务器上修改配置文件：打开SSH服务器的配置文件（通常是/etc/ssh/sshd_config），找到并修改以下行：\n\n   ```shell\n   GatewayPorts yes\n   ```\n\n   这将允许SSH服务器监听所有网络接口上的转发端口，而不仅仅是本地回环地址。\n\n2. 重启SSH服务器：保存配置文件修改后，重启SSH服务器以使修改生效。可以使用以下命令重启SSH服务器：\n\n   ```shell\n   sudo service ssh restart\n   # 或者\n   systemctl restart sshd\n   ```\n\n3. 在客户端使用外网IP访问：现在，你可以使用SSH客户端通过外网IP访问转发的端口。例如，如果你将端口转发到SSH服务器的端口2222，并且SSH服务器的外网IP是203.0.113.1，你可以使用以下命令连接到转发的端口：\n\n   ```shell\n   ssh -p 2222 user@203.0.113.1\n   ```\n\n   这将连接到SSH服务器，并将流量转发到转发的端口。\n\n请注意，修改SSH服务器的配置文件可能需要管理员权限。此外，开放SSH服务器的转发端口可能会带来安全风险，请确保只允许受信任的主机访问转发的端口。\n\n---\nLearn more:\n\n1. [ssh如何实现内网访问外网? - 知乎](https://www.zhihu.com/question/398993211)\n2. [SSH的三种端口转发 - jeremy的技术点滴](https://jeremyxu2010.github.io/2018/12/ssh%E7%9A%84%E4%B8%89%E7%A7%8D%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/)\n3. [通过ssh反向连接内网主机的方法(防火墙的主机) - memphise - 博客园](https://www.cnblogs.com/memphise/articles/6472207.html)\n\n## 相关问题\n\n> sudo service ssh restart\n这句命令执行失败了, 并且已经安装了ssh, 怎么解决\nFailed to restart ssh.service: Unit not found.\n\n根据搜索结果，\"Failed to restart ssh.service: Unit not found\"错误可能是由于使用了错误的命令或系统版本不同导致的。以下是解决此问题的几种可能方法：\n\n1. 使用正确的命令：根据您的系统版本，尝试使用适当的命令来重启SSH服务。在CentOS 7及更高版本中，应使用以下命令：\n\n   ```shell\n   sudo systemctl restart sshd\n   ```\n\n   在Ubuntu 16.04及更高版本中，应使用以下命令：\n\n   ```shell\n   sudo systemctl restart ssh\n   ```\n\n   如果仍然出现相同的错误，请继续以下步骤。\n\n2. 检查SSH服务的状态：使用以下命令检查SSH服务的状态，确保它已正确安装并正在运行：\n\n   ```shell\n   sudo systemctl status sshd\n   ```\n\n   如果SSH服务未安装或未运行，请尝试重新安装SSH服务器并启动服务。\n\n3. 重新安装SSH服务器：如果SSH服务已正确安装但仍无法启动，请尝试重新安装SSH服务器。首先，卸载现有的SSH服务器：\n\n   ```shell\n   sudo apt-get purge openssh-server\n   ```\n\n   然后，重新安装SSH服务器：\n\n   ```shell\n   sudo apt-get install openssh-server\n   ```\n\n   最后，尝试重新启动SSH服务。\n\n如果问题仍然存在，请提供更多详细信息，例如错误消息的完整内容和任何相关的日志文件，以便我们能够更好地帮助您解决问题。\n\n---\nLearn more:\n\n1. [Failed to restart ssh.service: Unit not found.-CSDN博客](https://blog.csdn.net/u010433704/article/details/120057040)\n2. [Failed to start ssh.service: Unit not found. - 等不到的口琴 - 博客园](https://www.cnblogs.com/Courage129/p/14073162.html)\n3. [ssh - Cannot start sshd service: Failed to start openssh.service: Unit not found - Server Fault](https://serverfault.com/questions/904430/cannot-start-sshd-service-failed-to-start-openssh-service-unit-not-found)\n","slug":"docker/doc/material/ai/os/为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?","published":1,"date":"2025-02-23T07:43:31.439Z","updated":"2025-02-23T07:43:31.445Z","__permalink":"/docker/doc/material/ai/os/为什么通过ssh -r转发端口后, 只能通过127.0.0.1的ip访问, 不能通过外网ip访问? 要怎么做才能通过外网ip访问呢?/","comments":1,"photos":[],"_id":"cm7k5rwbc00armswse2d5g7sp","content":"<h1 id=\"为什么通过ssh-R转发端口后-只能通过127-0-0-1的IP访问-不能通过外网IP访问-要怎么做才能通过外网IP访问呢\"><a href=\"#为什么通过ssh-R转发端口后-只能通过127-0-0-1的IP访问-不能通过外网IP访问-要怎么做才能通过外网IP访问呢\" class=\"headerlink\" title=\"为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?\"></a>为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?</h1><p>通过ssh -R转发端口后，只能通过127.0.0.1的IP访问，而不能通过外网IP访问的原因是默认情况下，SSH服务器只会监听本地回环地址（127.0.0.1）上的转发端口。这是为了安全考虑，防止未经授权的访问。</p>\n<p>要通过外网IP访问转发的端口，需要进行以下步骤：</p>\n<ol>\n<li><p>在SSH服务器上修改配置文件：打开SSH服务器的配置文件（通常是&#x2F;etc&#x2F;ssh&#x2F;sshd_config），找到并修改以下行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GatewayPorts yes</span><br></pre></td></tr></table></figure>\n\n<p>这将允许SSH服务器监听所有网络接口上的转发端口，而不仅仅是本地回环地址。</p>\n</li>\n<li><p>重启SSH服务器：保存配置文件修改后，重启SSH服务器以使修改生效。可以使用以下命令重启SSH服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service ssh restart</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者</span></span><br><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在客户端使用外网IP访问：现在，你可以使用SSH客户端通过外网IP访问转发的端口。例如，如果你将端口转发到SSH服务器的端口2222，并且SSH服务器的外网IP是203.0.113.1，你可以使用以下命令连接到转发的端口：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 2222 user@203.0.113.1</span><br></pre></td></tr></table></figure>\n\n<p>这将连接到SSH服务器，并将流量转发到转发的端口。</p>\n</li>\n</ol>\n<p>请注意，修改SSH服务器的配置文件可能需要管理员权限。此外，开放SSH服务器的转发端口可能会带来安全风险，请确保只允许受信任的主机访问转发的端口。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://www.zhihu.com/question/398993211\">ssh如何实现内网访问外网? - 知乎</a></li>\n<li><a href=\"https://jeremyxu2010.github.io/2018/12/ssh%E7%9A%84%E4%B8%89%E7%A7%8D%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/\">SSH的三种端口转发 - jeremy的技术点滴</a></li>\n<li><a href=\"https://www.cnblogs.com/memphise/articles/6472207.html\">通过ssh反向连接内网主机的方法(防火墙的主机) - memphise - 博客园</a></li>\n</ol>\n<h2 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h2><blockquote>\n<p>sudo service ssh restart<br>这句命令执行失败了, 并且已经安装了ssh, 怎么解决<br>Failed to restart ssh.service: Unit not found.</p>\n</blockquote>\n<p>根据搜索结果，”Failed to restart ssh.service: Unit not found”错误可能是由于使用了错误的命令或系统版本不同导致的。以下是解决此问题的几种可能方法：</p>\n<ol>\n<li><p>使用正确的命令：根据您的系统版本，尝试使用适当的命令来重启SSH服务。在CentOS 7及更高版本中，应使用以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<p>在Ubuntu 16.04及更高版本中，应使用以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure>\n\n<p>如果仍然出现相同的错误，请继续以下步骤。</p>\n</li>\n<li><p>检查SSH服务的状态：使用以下命令检查SSH服务的状态，确保它已正确安装并正在运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status sshd</span><br></pre></td></tr></table></figure>\n\n<p>如果SSH服务未安装或未运行，请尝试重新安装SSH服务器并启动服务。</p>\n</li>\n<li><p>重新安装SSH服务器：如果SSH服务已正确安装但仍无法启动，请尝试重新安装SSH服务器。首先，卸载现有的SSH服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>然后，重新安装SSH服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>最后，尝试重新启动SSH服务。</p>\n</li>\n</ol>\n<p>如果问题仍然存在，请提供更多详细信息，例如错误消息的完整内容和任何相关的日志文件，以便我们能够更好地帮助您解决问题。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/u010433704/article/details/120057040\">Failed to restart ssh.service: Unit not found.-CSDN博客</a></li>\n<li><a href=\"https://www.cnblogs.com/Courage129/p/14073162.html\">Failed to start ssh.service: Unit not found. - 等不到的口琴 - 博客园</a></li>\n<li><a href=\"https://serverfault.com/questions/904430/cannot-start-sshd-service-failed-to-start-openssh-service-unit-not-found\">ssh - Cannot start sshd service: Failed to start openssh.service: Unit not found - Server Fault</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"为什么通过ssh-R转发端口后-只能通过127-0-0-1的IP访问-不能通过外网IP访问-要怎么做才能通过外网IP访问呢\"><a href=\"#为什么通过ssh-R转发端口后-只能通过127-0-0-1的IP访问-不能通过外网IP访问-要怎么做才能通过外网IP访问呢\" class=\"headerlink\" title=\"为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?\"></a>为什么通过ssh -R转发端口后, 只能通过127.0.0.1的IP访问, 不能通过外网IP访问? 要怎么做才能通过外网IP访问呢?</h1><p>通过ssh -R转发端口后，只能通过127.0.0.1的IP访问，而不能通过外网IP访问的原因是默认情况下，SSH服务器只会监听本地回环地址（127.0.0.1）上的转发端口。这是为了安全考虑，防止未经授权的访问。</p>\n<p>要通过外网IP访问转发的端口，需要进行以下步骤：</p>\n<ol>\n<li><p>在SSH服务器上修改配置文件：打开SSH服务器的配置文件（通常是&#x2F;etc&#x2F;ssh&#x2F;sshd_config），找到并修改以下行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GatewayPorts yes</span><br></pre></td></tr></table></figure>\n\n<p>这将允许SSH服务器监听所有网络接口上的转发端口，而不仅仅是本地回环地址。</p>\n</li>\n<li><p>重启SSH服务器：保存配置文件修改后，重启SSH服务器以使修改生效。可以使用以下命令重启SSH服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service ssh restart</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者</span></span><br><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在客户端使用外网IP访问：现在，你可以使用SSH客户端通过外网IP访问转发的端口。例如，如果你将端口转发到SSH服务器的端口2222，并且SSH服务器的外网IP是203.0.113.1，你可以使用以下命令连接到转发的端口：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 2222 user@203.0.113.1</span><br></pre></td></tr></table></figure>\n\n<p>这将连接到SSH服务器，并将流量转发到转发的端口。</p>\n</li>\n</ol>\n<p>请注意，修改SSH服务器的配置文件可能需要管理员权限。此外，开放SSH服务器的转发端口可能会带来安全风险，请确保只允许受信任的主机访问转发的端口。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://www.zhihu.com/question/398993211\">ssh如何实现内网访问外网? - 知乎</a></li>\n<li><a href=\"https://jeremyxu2010.github.io/2018/12/ssh%E7%9A%84%E4%B8%89%E7%A7%8D%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/\">SSH的三种端口转发 - jeremy的技术点滴</a></li>\n<li><a href=\"https://www.cnblogs.com/memphise/articles/6472207.html\">通过ssh反向连接内网主机的方法(防火墙的主机) - memphise - 博客园</a></li>\n</ol>\n<h2 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h2><blockquote>\n<p>sudo service ssh restart<br>这句命令执行失败了, 并且已经安装了ssh, 怎么解决<br>Failed to restart ssh.service: Unit not found.</p>\n</blockquote>\n<p>根据搜索结果，”Failed to restart ssh.service: Unit not found”错误可能是由于使用了错误的命令或系统版本不同导致的。以下是解决此问题的几种可能方法：</p>\n<ol>\n<li><p>使用正确的命令：根据您的系统版本，尝试使用适当的命令来重启SSH服务。在CentOS 7及更高版本中，应使用以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<p>在Ubuntu 16.04及更高版本中，应使用以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure>\n\n<p>如果仍然出现相同的错误，请继续以下步骤。</p>\n</li>\n<li><p>检查SSH服务的状态：使用以下命令检查SSH服务的状态，确保它已正确安装并正在运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status sshd</span><br></pre></td></tr></table></figure>\n\n<p>如果SSH服务未安装或未运行，请尝试重新安装SSH服务器并启动服务。</p>\n</li>\n<li><p>重新安装SSH服务器：如果SSH服务已正确安装但仍无法启动，请尝试重新安装SSH服务器。首先，卸载现有的SSH服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>然后，重新安装SSH服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>最后，尝试重新启动SSH服务。</p>\n</li>\n</ol>\n<p>如果问题仍然存在，请提供更多详细信息，例如错误消息的完整内容和任何相关的日志文件，以便我们能够更好地帮助您解决问题。</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/u010433704/article/details/120057040\">Failed to restart ssh.service: Unit not found.-CSDN博客</a></li>\n<li><a href=\"https://www.cnblogs.com/Courage129/p/14073162.html\">Failed to start ssh.service: Unit not found. - 等不到的口琴 - 博客园</a></li>\n<li><a href=\"https://serverfault.com/questions/904430/cannot-start-sshd-service-failed-to-start-openssh-service-unit-not-found\">ssh - Cannot start sshd service: Failed to start openssh.service: Unit not found - Server Fault</a></li>\n</ol>\n"},{"layout":"default","title":"Article","nav_order":5,"has_children":true,"parent":"Article","_content":"\n# Article\n","source":"_posts/docker/doc/material/manual/article/index.md","raw":"---\nlayout: default\ntitle: Article\nnav_order: 5\nhas_children: true\nparent: Article\npermalink: \"/docker/doc/material/manual/article/\"\n---\n\n# Article\n","slug":"docker/doc/material/manual/article/index","published":1,"date":"2025-02-23T07:43:31.244Z","updated":"2025-02-23T07:43:31.245Z","__permalink":"/docker/doc/material/manual/article/","comments":1,"photos":[],"_id":"cm7k5rwbd00asmswsgo7dfjmj","content":"<h1 id=\"Article\"><a href=\"#Article\" class=\"headerlink\" title=\"Article\"></a>Article</h1>","excerpt":"","more":"<h1 id=\"Article\"><a href=\"#Article\" class=\"headerlink\" title=\"Article\"></a>Article</h1>"},{"layout":"default","title":"ssh","nav_order":15,"description":"ssh","parent":"Article","has_children":false,"grand_parent":"Manual","_content":"\n# ssh\n\n- [SSH 隧道简明教程](https://www.lixueduan.com/posts/linux/07-ssh-tunnel/)\n  - 动态转发\n    - 请求地址为192.168.1.100:3000，则通过 SSH 转发的请求地址也是192.168.1.100:3000。\n    - ssh -N -D localhost:2000 root@192.168.10.85\n    - 我们只需要在本地配置上 socks 代理，localhost:2000 即可把所有请求通过 ssh 2000 端口转发到 192.168.10.85 这台机器上去了。\n  - 本地转发\n    - 我们需要在 ServerA 上执行以下命令开启 ssh 隧道：\n    - ssh -N -L 8888:192.168.10.134:8888 root@192.168.10.85\n    - 执行后 serverA 上已经开始监听 8888 端口了，默认是在本地回环地址上，需要其他机器访问的话可以指定 ip 或者增加 -g 参数开启网关模式。\n\n- socks5 代理\n\n- [参考文章](https://wlwang41.github.io/content/ops/ssh%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86.html)\n- [参考文章1](https://blog.bug-maker.com/archives/47.html)\n- [参考文章2](https://www.cnblogs.com/memphise/articles/6420019.html)\n  - 可以使用一个叫做Sockscap的软件，把应用扔进去就能以代理的方式上网了。（部分需要调用多个进程的应用可能不行）\n  - 如果你想把socks代理转换成http代理，可以用privoxy这个东东。\n\n```bash\n# 上传密钥~/.ssh/id_ed25519_ljf\nchmod 400 ~/.ssh/id_ed25519_ljf\n\n# ~/.ssh/config\nHost mac.intranet.company\n  HostName 10.0.1.251\n  User ssy\n  IdentityFile ~/.ssh/id_ed25519_ljf\n  # PasswordAuthentication 123456\n\n# ssh mac.intranet.company 看是否联通\n```\n\n- [ssh动态代理](ssh动态代理)\n\n```bash\n# 登录服务器10.0.1.233\n# 后台启动ssh动态转发\nssh -o GatewayPorts=yes -D 2000 mac.intranet.company -NTfCg\n\n# 在本机中配置socks代理, 网络流量则会通过ssh转发到服务器上, 然后在访问互联网\n# 配置地址: 10.0.1.233:2000\n\n# PS: 可以配合clash一起使用, 实现通过ssh让中间机器去连接指定或多个VPN, 本机不连多余的VPN(其实是不想下载一堆的VPN相关软件), 只用clash就能透传流量过去\nport: 7890\nsocks-port: 7891\nallow-lan: false\nmode: Rule\nlog-level: info\nexternal-controller: 127.0.0.1:9090\nproxies:\n  - name: ssy_bpDev_mac\n    type: socks5\n    server: 10.0.1.233\n    port: 2000\nproxy-groups:\n  - name: ssh_g\n    type: select\n    proxies:\n      - ssy_bpDev_mac\nrules:\n # 乐橘nacos所在服务器\n - IP-CIDR,10.0.10.180/32,ssh_g\n - DOMAIN-SUFFIX,yelomall.cn,ssh_g\n \n```\n","source":"_posts/docker/doc/material/manual/article/ssh.md","raw":"---\nlayout: default\ntitle: ssh\nnav_order: 15\ndescription: ssh\nparent: Article\nhas_children: false\npermalink: \"/docker/doc/material/manual/article/ssh/\"\ngrand_parent: Manual\n---\n\n# ssh\n\n- [SSH 隧道简明教程](https://www.lixueduan.com/posts/linux/07-ssh-tunnel/)\n  - 动态转发\n    - 请求地址为192.168.1.100:3000，则通过 SSH 转发的请求地址也是192.168.1.100:3000。\n    - ssh -N -D localhost:2000 root@192.168.10.85\n    - 我们只需要在本地配置上 socks 代理，localhost:2000 即可把所有请求通过 ssh 2000 端口转发到 192.168.10.85 这台机器上去了。\n  - 本地转发\n    - 我们需要在 ServerA 上执行以下命令开启 ssh 隧道：\n    - ssh -N -L 8888:192.168.10.134:8888 root@192.168.10.85\n    - 执行后 serverA 上已经开始监听 8888 端口了，默认是在本地回环地址上，需要其他机器访问的话可以指定 ip 或者增加 -g 参数开启网关模式。\n\n- socks5 代理\n\n- [参考文章](https://wlwang41.github.io/content/ops/ssh%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86.html)\n- [参考文章1](https://blog.bug-maker.com/archives/47.html)\n- [参考文章2](https://www.cnblogs.com/memphise/articles/6420019.html)\n  - 可以使用一个叫做Sockscap的软件，把应用扔进去就能以代理的方式上网了。（部分需要调用多个进程的应用可能不行）\n  - 如果你想把socks代理转换成http代理，可以用privoxy这个东东。\n\n```bash\n# 上传密钥~/.ssh/id_ed25519_ljf\nchmod 400 ~/.ssh/id_ed25519_ljf\n\n# ~/.ssh/config\nHost mac.intranet.company\n  HostName 10.0.1.251\n  User ssy\n  IdentityFile ~/.ssh/id_ed25519_ljf\n  # PasswordAuthentication 123456\n\n# ssh mac.intranet.company 看是否联通\n```\n\n- [ssh动态代理](ssh动态代理)\n\n```bash\n# 登录服务器10.0.1.233\n# 后台启动ssh动态转发\nssh -o GatewayPorts=yes -D 2000 mac.intranet.company -NTfCg\n\n# 在本机中配置socks代理, 网络流量则会通过ssh转发到服务器上, 然后在访问互联网\n# 配置地址: 10.0.1.233:2000\n\n# PS: 可以配合clash一起使用, 实现通过ssh让中间机器去连接指定或多个VPN, 本机不连多余的VPN(其实是不想下载一堆的VPN相关软件), 只用clash就能透传流量过去\nport: 7890\nsocks-port: 7891\nallow-lan: false\nmode: Rule\nlog-level: info\nexternal-controller: 127.0.0.1:9090\nproxies:\n  - name: ssy_bpDev_mac\n    type: socks5\n    server: 10.0.1.233\n    port: 2000\nproxy-groups:\n  - name: ssh_g\n    type: select\n    proxies:\n      - ssy_bpDev_mac\nrules:\n # 乐橘nacos所在服务器\n - IP-CIDR,10.0.10.180/32,ssh_g\n - DOMAIN-SUFFIX,yelomall.cn,ssh_g\n \n```\n","slug":"docker/doc/material/manual/article/ssh","published":1,"date":"2025-02-23T07:43:31.244Z","updated":"2025-02-23T07:43:31.244Z","__permalink":"/docker/doc/material/manual/article/ssh/","comments":1,"photos":[],"_id":"cm7k5rwbd00atmsws2a4n0wo1","content":"<h1 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h1><ul>\n<li><p><a href=\"https://www.lixueduan.com/posts/linux/07-ssh-tunnel/\">SSH 隧道简明教程</a></p>\n<ul>\n<li>动态转发<ul>\n<li>请求地址为192.168.1.100:3000，则通过 SSH 转发的请求地址也是192.168.1.100:3000。</li>\n<li>ssh -N -D localhost:2000 <a href=\"mailto:&#114;&#x6f;&#x6f;&#x74;&#64;&#x31;&#57;&#50;&#46;&#49;&#54;&#56;&#x2e;&#49;&#x30;&#46;&#56;&#x35;\">&#114;&#x6f;&#x6f;&#x74;&#64;&#x31;&#57;&#50;&#46;&#49;&#54;&#56;&#x2e;&#49;&#x30;&#46;&#56;&#x35;</a></li>\n<li>我们只需要在本地配置上 socks 代理，localhost:2000 即可把所有请求通过 ssh 2000 端口转发到 192.168.10.85 这台机器上去了。</li>\n</ul>\n</li>\n<li>本地转发<ul>\n<li>我们需要在 ServerA 上执行以下命令开启 ssh 隧道：</li>\n<li>ssh -N -L 8888:192.168.10.134:8888 <a href=\"mailto:&#114;&#x6f;&#111;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#56;&#46;&#49;&#48;&#46;&#x38;&#53;\">&#114;&#x6f;&#111;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#56;&#46;&#49;&#48;&#46;&#x38;&#53;</a></li>\n<li>执行后 serverA 上已经开始监听 8888 端口了，默认是在本地回环地址上，需要其他机器访问的话可以指定 ip 或者增加 -g 参数开启网关模式。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>socks5 代理</p>\n</li>\n<li><p><a href=\"https://wlwang41.github.io/content/ops/ssh%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86.html\">参考文章</a></p>\n</li>\n<li><p><a href=\"https://blog.bug-maker.com/archives/47.html\">参考文章1</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/memphise/articles/6420019.html\">参考文章2</a></p>\n<ul>\n<li>可以使用一个叫做Sockscap的软件，把应用扔进去就能以代理的方式上网了。（部分需要调用多个进程的应用可能不行）</li>\n<li>如果你想把socks代理转换成http代理，可以用privoxy这个东东。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 上传密钥~/.ssh/id_ed25519_ljf</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 400 ~/.ssh/id_ed25519_ljf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ~/.ssh/config</span></span><br><span class=\"line\">Host mac.intranet.company</span><br><span class=\"line\">  HostName 10.0.1.251</span><br><span class=\"line\">  User ssy</span><br><span class=\"line\">  IdentityFile ~/.ssh/id_ed25519_ljf</span><br><span class=\"line\">  <span class=\"comment\"># PasswordAuthentication 123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ssh mac.intranet.company 看是否联通</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"ssh%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\">ssh动态代理</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录服务器10.0.1.233</span></span><br><span class=\"line\"><span class=\"comment\"># 后台启动ssh动态转发</span></span><br><span class=\"line\">ssh -o GatewayPorts=<span class=\"built_in\">yes</span> -D 2000 mac.intranet.company -NTfCg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在本机中配置socks代理, 网络流量则会通过ssh转发到服务器上, 然后在访问互联网</span></span><br><span class=\"line\"><span class=\"comment\"># 配置地址: 10.0.1.233:2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PS: 可以配合clash一起使用, 实现通过ssh让中间机器去连接指定或多个VPN, 本机不连多余的VPN(其实是不想下载一堆的VPN相关软件), 只用clash就能透传流量过去</span></span><br><span class=\"line\">port: 7890</span><br><span class=\"line\">socks-port: 7891</span><br><span class=\"line\">allow-lan: <span class=\"literal\">false</span></span><br><span class=\"line\">mode: Rule</span><br><span class=\"line\">log-level: info</span><br><span class=\"line\">external-controller: 127.0.0.1:9090</span><br><span class=\"line\">proxies:</span><br><span class=\"line\">  - name: ssy_bpDev_mac</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: socks5</span><br><span class=\"line\">    server: 10.0.1.233</span><br><span class=\"line\">    port: 2000</span><br><span class=\"line\">proxy-groups:</span><br><span class=\"line\">  - name: ssh_g</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"keyword\">select</span></span><br><span class=\"line\">    proxies:</span><br><span class=\"line\">      - ssy_bpDev_mac</span><br><span class=\"line\">rules:</span><br><span class=\"line\"> <span class=\"comment\"># 乐橘nacos所在服务器</span></span><br><span class=\"line\"> - IP-CIDR,10.0.10.180/32,ssh_g</span><br><span class=\"line\"> - DOMAIN-SUFFIX,yelomall.cn,ssh_g</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h1><ul>\n<li><p><a href=\"https://www.lixueduan.com/posts/linux/07-ssh-tunnel/\">SSH 隧道简明教程</a></p>\n<ul>\n<li>动态转发<ul>\n<li>请求地址为192.168.1.100:3000，则通过 SSH 转发的请求地址也是192.168.1.100:3000。</li>\n<li>ssh -N -D localhost:2000 <a href=\"mailto:&#114;&#x6f;&#x6f;&#x74;&#64;&#x31;&#57;&#50;&#46;&#49;&#54;&#56;&#x2e;&#49;&#x30;&#46;&#56;&#x35;\">&#114;&#x6f;&#x6f;&#x74;&#64;&#x31;&#57;&#50;&#46;&#49;&#54;&#56;&#x2e;&#49;&#x30;&#46;&#56;&#x35;</a></li>\n<li>我们只需要在本地配置上 socks 代理，localhost:2000 即可把所有请求通过 ssh 2000 端口转发到 192.168.10.85 这台机器上去了。</li>\n</ul>\n</li>\n<li>本地转发<ul>\n<li>我们需要在 ServerA 上执行以下命令开启 ssh 隧道：</li>\n<li>ssh -N -L 8888:192.168.10.134:8888 <a href=\"mailto:&#114;&#x6f;&#111;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#56;&#46;&#49;&#48;&#46;&#x38;&#53;\">&#114;&#x6f;&#111;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#56;&#46;&#49;&#48;&#46;&#x38;&#53;</a></li>\n<li>执行后 serverA 上已经开始监听 8888 端口了，默认是在本地回环地址上，需要其他机器访问的话可以指定 ip 或者增加 -g 参数开启网关模式。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>socks5 代理</p>\n</li>\n<li><p><a href=\"https://wlwang41.github.io/content/ops/ssh%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86.html\">参考文章</a></p>\n</li>\n<li><p><a href=\"https://blog.bug-maker.com/archives/47.html\">参考文章1</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/memphise/articles/6420019.html\">参考文章2</a></p>\n<ul>\n<li>可以使用一个叫做Sockscap的软件，把应用扔进去就能以代理的方式上网了。（部分需要调用多个进程的应用可能不行）</li>\n<li>如果你想把socks代理转换成http代理，可以用privoxy这个东东。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 上传密钥~/.ssh/id_ed25519_ljf</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 400 ~/.ssh/id_ed25519_ljf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ~/.ssh/config</span></span><br><span class=\"line\">Host mac.intranet.company</span><br><span class=\"line\">  HostName 10.0.1.251</span><br><span class=\"line\">  User ssy</span><br><span class=\"line\">  IdentityFile ~/.ssh/id_ed25519_ljf</span><br><span class=\"line\">  <span class=\"comment\"># PasswordAuthentication 123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ssh mac.intranet.company 看是否联通</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"ssh%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\">ssh动态代理</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录服务器10.0.1.233</span></span><br><span class=\"line\"><span class=\"comment\"># 后台启动ssh动态转发</span></span><br><span class=\"line\">ssh -o GatewayPorts=<span class=\"built_in\">yes</span> -D 2000 mac.intranet.company -NTfCg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在本机中配置socks代理, 网络流量则会通过ssh转发到服务器上, 然后在访问互联网</span></span><br><span class=\"line\"><span class=\"comment\"># 配置地址: 10.0.1.233:2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PS: 可以配合clash一起使用, 实现通过ssh让中间机器去连接指定或多个VPN, 本机不连多余的VPN(其实是不想下载一堆的VPN相关软件), 只用clash就能透传流量过去</span></span><br><span class=\"line\">port: 7890</span><br><span class=\"line\">socks-port: 7891</span><br><span class=\"line\">allow-lan: <span class=\"literal\">false</span></span><br><span class=\"line\">mode: Rule</span><br><span class=\"line\">log-level: info</span><br><span class=\"line\">external-controller: 127.0.0.1:9090</span><br><span class=\"line\">proxies:</span><br><span class=\"line\">  - name: ssy_bpDev_mac</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: socks5</span><br><span class=\"line\">    server: 10.0.1.233</span><br><span class=\"line\">    port: 2000</span><br><span class=\"line\">proxy-groups:</span><br><span class=\"line\">  - name: ssh_g</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"keyword\">select</span></span><br><span class=\"line\">    proxies:</span><br><span class=\"line\">      - ssy_bpDev_mac</span><br><span class=\"line\">rules:</span><br><span class=\"line\"> <span class=\"comment\"># 乐橘nacos所在服务器</span></span><br><span class=\"line\"> - IP-CIDR,10.0.10.180/32,ssh_g</span><br><span class=\"line\"> - DOMAIN-SUFFIX,yelomall.cn,ssh_g</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"centos时间相关操作","nav_order":15,"description":"centos时间相关操作","parent":"Os","has_children":false,"grand_parent":"Manual","_content":"\n# centos时间相关操作\n\n设置时区（CentOS 7）\n先执行命令timedatectl status|grep 'Time zone'查看当前时区，如果不是中国时区（Asia/Shanghai），则需要先设置为中国时区，否则时区不同会存在时差。\n\n```shell\n#已经是Asia/Shanghai，则无需设置\n[root@xiaoz shadowsocks]# timedatectl status|grep 'Time zone'\n       Time zone: Asia/Shanghai (CST, +0800)\n```\n\n执行下面的命令设置时区\n\n```shell\n#设置硬件时钟调整为与本地时钟一致\ntimedatectl set-local-rtc 1\n#设置时区为上海\ntimedatectl set-timezone Asia/Shanghai\n```\n\n使用ntpdate同步时间\n目前比较常用的做法就是使用ntpdate命令来同步时间，使用方法如下：\n\n```shell\n#安装ntpdate\nyum -y install ntpdate\n#同步时间\nntpdate -u  pool.ntp.org\n#同步完成后,date命令查看时间是否正确\ndate\n```\n\n另外再分享下几个常用的ntp server，如果需要更多可以前往：<http://www.ntp.org.cn>获取\n\n```shell\n#中国\ncn.ntp.org.cn\n#中国香港\nhk.ntp.org.cn\n#美国\nus.ntp.org.cn\n```\n\n同步时间后可能部分服务器过一段时间又会出现偏差，因此最好设置crontab来定时同步时间，方法如下：\n\n```shell\n#安装crontab\nyum -y install crontab\n#创建crontab任务\ncrontab -e\n#添加定时任务\n*/20 * * * * /usr/sbin/ntpdate pool.ntp.org > /dev/null 2>&1\n#重启crontab\nservice crond reload\n```\n\n上面的计划任务会在每20分钟进行一次时间同步，注意/usr/sbin/ntpdate为ntpdate命令所在的绝对路径，不同的服务器可能路径不一样，可以使用which命令来找到绝对路径，方法如下：\n\n```shell\n[root@xiaoz ~]# which ntpdate\n/usr/sbin/ntpdate\n```\n\n使用rdate同步时间\nntpdate服务需要使用udp/123端口，但是某些服务商禁止了所有UDP协议，所以你会发现无论如何ntpdate总是同步出错。\n\n```shell\n#下方是ntpdate同步时间报错的一个列子\n[root@sharktech ~]# ntpdate -u  pool.ntp.org\n 1 Jun 16:13:46 ntpdate[8389]: no server suitable for synchronization found\n```\n\n这个时候我们可以改用rdate命令来同步时间，方法如下：\n\n```shell\n#安装rdate\nyum -y install rdate\n#同步时间\nrdate -s time-b.nist.gov\n#查看时间是否正确\ndate\n```\n\n和上面一样，我们最好是加入定时任务来定期同步时间，方法如下：\n\n```shell\n#安装crontab\nyum -y install crontab\n#创建crontab任务\ncrontab -e\n#添加定时任务\n*/20 * * * * /usr/bin/rdate -s time-b.nist.gov > /dev/null 2>&1\n#重启crontab\nservice crond reload\n```\n\n还有一些其它的rdate时间服务器如下：\n\n```shell\ns1d.time.edu.cn #东南大学\ns1e.time.edu.cn #清华大学\ns2a.time.edu.cn #清华大学\ns2b.time.edu.cn #清华大学\ns2c.time.edu.cn #北京邮电大学\nntp.sjtu.edu.cn 202.120.2.101 #(上海交通大学网络中心NTP服务器地址）\ns1a.time.edu.cn #北京邮电大学\ns1b.time.edu.cn #清华大学\ns1c.time.edu.cn #北京大学\nclock.cuhk.edu.hk #香港中文大学授时中心\n```\n\n总结\n无论是使用ntpdate还是rdate来同步时间，方法都比较简单，大致流程就是“设置时区” -> “同步时间” -> “设置定时任务”。在实际的测试中，xiaoz发现部分服务商屏蔽UDP端口的情况下，ntpdate命令无法同步，但使用rdate命令却可以，有类似情况的童鞋不妨试一下。\n","source":"_posts/docker/doc/material/manual/os/centos时间相关操作.md","raw":"---\nlayout: default\ntitle: centos时间相关操作\nnav_order: 15\ndescription: centos时间相关操作\nparent: Os\nhas_children: false\npermalink: \"/docker/doc/material/manual/os/centos时间相关操作/\"\ngrand_parent: Manual\n---\n\n# centos时间相关操作\n\n设置时区（CentOS 7）\n先执行命令timedatectl status|grep 'Time zone'查看当前时区，如果不是中国时区（Asia/Shanghai），则需要先设置为中国时区，否则时区不同会存在时差。\n\n```shell\n#已经是Asia/Shanghai，则无需设置\n[root@xiaoz shadowsocks]# timedatectl status|grep 'Time zone'\n       Time zone: Asia/Shanghai (CST, +0800)\n```\n\n执行下面的命令设置时区\n\n```shell\n#设置硬件时钟调整为与本地时钟一致\ntimedatectl set-local-rtc 1\n#设置时区为上海\ntimedatectl set-timezone Asia/Shanghai\n```\n\n使用ntpdate同步时间\n目前比较常用的做法就是使用ntpdate命令来同步时间，使用方法如下：\n\n```shell\n#安装ntpdate\nyum -y install ntpdate\n#同步时间\nntpdate -u  pool.ntp.org\n#同步完成后,date命令查看时间是否正确\ndate\n```\n\n另外再分享下几个常用的ntp server，如果需要更多可以前往：<http://www.ntp.org.cn>获取\n\n```shell\n#中国\ncn.ntp.org.cn\n#中国香港\nhk.ntp.org.cn\n#美国\nus.ntp.org.cn\n```\n\n同步时间后可能部分服务器过一段时间又会出现偏差，因此最好设置crontab来定时同步时间，方法如下：\n\n```shell\n#安装crontab\nyum -y install crontab\n#创建crontab任务\ncrontab -e\n#添加定时任务\n*/20 * * * * /usr/sbin/ntpdate pool.ntp.org > /dev/null 2>&1\n#重启crontab\nservice crond reload\n```\n\n上面的计划任务会在每20分钟进行一次时间同步，注意/usr/sbin/ntpdate为ntpdate命令所在的绝对路径，不同的服务器可能路径不一样，可以使用which命令来找到绝对路径，方法如下：\n\n```shell\n[root@xiaoz ~]# which ntpdate\n/usr/sbin/ntpdate\n```\n\n使用rdate同步时间\nntpdate服务需要使用udp/123端口，但是某些服务商禁止了所有UDP协议，所以你会发现无论如何ntpdate总是同步出错。\n\n```shell\n#下方是ntpdate同步时间报错的一个列子\n[root@sharktech ~]# ntpdate -u  pool.ntp.org\n 1 Jun 16:13:46 ntpdate[8389]: no server suitable for synchronization found\n```\n\n这个时候我们可以改用rdate命令来同步时间，方法如下：\n\n```shell\n#安装rdate\nyum -y install rdate\n#同步时间\nrdate -s time-b.nist.gov\n#查看时间是否正确\ndate\n```\n\n和上面一样，我们最好是加入定时任务来定期同步时间，方法如下：\n\n```shell\n#安装crontab\nyum -y install crontab\n#创建crontab任务\ncrontab -e\n#添加定时任务\n*/20 * * * * /usr/bin/rdate -s time-b.nist.gov > /dev/null 2>&1\n#重启crontab\nservice crond reload\n```\n\n还有一些其它的rdate时间服务器如下：\n\n```shell\ns1d.time.edu.cn #东南大学\ns1e.time.edu.cn #清华大学\ns2a.time.edu.cn #清华大学\ns2b.time.edu.cn #清华大学\ns2c.time.edu.cn #北京邮电大学\nntp.sjtu.edu.cn 202.120.2.101 #(上海交通大学网络中心NTP服务器地址）\ns1a.time.edu.cn #北京邮电大学\ns1b.time.edu.cn #清华大学\ns1c.time.edu.cn #北京大学\nclock.cuhk.edu.hk #香港中文大学授时中心\n```\n\n总结\n无论是使用ntpdate还是rdate来同步时间，方法都比较简单，大致流程就是“设置时区” -> “同步时间” -> “设置定时任务”。在实际的测试中，xiaoz发现部分服务商屏蔽UDP端口的情况下，ntpdate命令无法同步，但使用rdate命令却可以，有类似情况的童鞋不妨试一下。\n","slug":"docker/doc/material/manual/os/centos时间相关操作","published":1,"date":"2025-02-23T07:43:31.243Z","updated":"2025-02-23T07:43:31.243Z","__permalink":"/docker/doc/material/manual/os/centos时间相关操作/","comments":1,"photos":[],"_id":"cm7k5rwbd00aumswsaei045sh","content":"<h1 id=\"centos时间相关操作\"><a href=\"#centos时间相关操作\" class=\"headerlink\" title=\"centos时间相关操作\"></a>centos时间相关操作</h1><p>设置时区（CentOS 7）<br>先执行命令timedatectl status|grep ‘Time zone’查看当前时区，如果不是中国时区（Asia&#x2F;Shanghai），则需要先设置为中国时区，否则时区不同会存在时差。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">已经是Asia/Shanghai，则无需设置</span></span><br><span class=\"line\">[root@xiaoz shadowsocks]# timedatectl status|grep &#x27;Time zone&#x27;</span><br><span class=\"line\">       Time zone: Asia/Shanghai (CST, +0800)</span><br></pre></td></tr></table></figure>\n\n<p>执行下面的命令设置时区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置硬件时钟调整为与本地时钟一致</span></span><br><span class=\"line\">timedatectl set-local-rtc 1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置时区为上海</span></span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>\n\n<p>使用ntpdate同步时间<br>目前比较常用的做法就是使用ntpdate命令来同步时间，使用方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装ntpdate</span></span><br><span class=\"line\">yum -y install ntpdate</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">同步时间</span></span><br><span class=\"line\">ntpdate -u  pool.ntp.org</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">同步完成后,<span class=\"built_in\">date</span>命令查看时间是否正确</span></span><br><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n\n<p>另外再分享下几个常用的ntp server，如果需要更多可以前往：<a href=\"http://www.ntp.org.cn/\">http://www.ntp.org.cn</a>获取</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">中国</span></span><br><span class=\"line\">cn.ntp.org.cn</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">中国香港</span></span><br><span class=\"line\">hk.ntp.org.cn</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">美国</span></span><br><span class=\"line\">us.ntp.org.cn</span><br></pre></td></tr></table></figure>\n\n<p>同步时间后可能部分服务器过一段时间又会出现偏差，因此最好设置crontab来定时同步时间，方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装crontab</span></span><br><span class=\"line\">yum -y install crontab</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建crontab任务</span></span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加定时任务</span></span><br><span class=\"line\">*/20 * * * * /usr/sbin/ntpdate pool.ntp.org &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重启crontab</span></span><br><span class=\"line\">service crond reload</span><br></pre></td></tr></table></figure>\n\n<p>上面的计划任务会在每20分钟进行一次时间同步，注意&#x2F;usr&#x2F;sbin&#x2F;ntpdate为ntpdate命令所在的绝对路径，不同的服务器可能路径不一样，可以使用which命令来找到绝对路径，方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@xiaoz ~]# which ntpdate</span><br><span class=\"line\">/usr/sbin/ntpdate</span><br></pre></td></tr></table></figure>\n\n<p>使用rdate同步时间<br>ntpdate服务需要使用udp&#x2F;123端口，但是某些服务商禁止了所有UDP协议，所以你会发现无论如何ntpdate总是同步出错。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下方是ntpdate同步时间报错的一个列子</span></span><br><span class=\"line\">[root@sharktech ~]# ntpdate -u  pool.ntp.org</span><br><span class=\"line\"> 1 Jun 16:13:46 ntpdate[8389]: no server suitable for synchronization found</span><br></pre></td></tr></table></figure>\n\n<p>这个时候我们可以改用rdate命令来同步时间，方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装rdate</span></span><br><span class=\"line\">yum -y install rdate</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">同步时间</span></span><br><span class=\"line\">rdate -s time-b.nist.gov</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看时间是否正确</span></span><br><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n\n<p>和上面一样，我们最好是加入定时任务来定期同步时间，方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装crontab</span></span><br><span class=\"line\">yum -y install crontab</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建crontab任务</span></span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加定时任务</span></span><br><span class=\"line\">*/20 * * * * /usr/bin/rdate -s time-b.nist.gov &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重启crontab</span></span><br><span class=\"line\">service crond reload</span><br></pre></td></tr></table></figure>\n\n<p>还有一些其它的rdate时间服务器如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1d.time.edu.cn #东南大学</span><br><span class=\"line\">s1e.time.edu.cn #清华大学</span><br><span class=\"line\">s2a.time.edu.cn #清华大学</span><br><span class=\"line\">s2b.time.edu.cn #清华大学</span><br><span class=\"line\">s2c.time.edu.cn #北京邮电大学</span><br><span class=\"line\">ntp.sjtu.edu.cn 202.120.2.101 #(上海交通大学网络中心NTP服务器地址）</span><br><span class=\"line\">s1a.time.edu.cn #北京邮电大学</span><br><span class=\"line\">s1b.time.edu.cn #清华大学</span><br><span class=\"line\">s1c.time.edu.cn #北京大学</span><br><span class=\"line\">clock.cuhk.edu.hk #香港中文大学授时中心</span><br></pre></td></tr></table></figure>\n\n<p>总结<br>无论是使用ntpdate还是rdate来同步时间，方法都比较简单，大致流程就是“设置时区” -&gt; “同步时间” -&gt; “设置定时任务”。在实际的测试中，xiaoz发现部分服务商屏蔽UDP端口的情况下，ntpdate命令无法同步，但使用rdate命令却可以，有类似情况的童鞋不妨试一下。</p>\n","excerpt":"","more":"<h1 id=\"centos时间相关操作\"><a href=\"#centos时间相关操作\" class=\"headerlink\" title=\"centos时间相关操作\"></a>centos时间相关操作</h1><p>设置时区（CentOS 7）<br>先执行命令timedatectl status|grep ‘Time zone’查看当前时区，如果不是中国时区（Asia&#x2F;Shanghai），则需要先设置为中国时区，否则时区不同会存在时差。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">已经是Asia/Shanghai，则无需设置</span></span><br><span class=\"line\">[root@xiaoz shadowsocks]# timedatectl status|grep &#x27;Time zone&#x27;</span><br><span class=\"line\">       Time zone: Asia/Shanghai (CST, +0800)</span><br></pre></td></tr></table></figure>\n\n<p>执行下面的命令设置时区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置硬件时钟调整为与本地时钟一致</span></span><br><span class=\"line\">timedatectl set-local-rtc 1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置时区为上海</span></span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>\n\n<p>使用ntpdate同步时间<br>目前比较常用的做法就是使用ntpdate命令来同步时间，使用方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装ntpdate</span></span><br><span class=\"line\">yum -y install ntpdate</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">同步时间</span></span><br><span class=\"line\">ntpdate -u  pool.ntp.org</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">同步完成后,<span class=\"built_in\">date</span>命令查看时间是否正确</span></span><br><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n\n<p>另外再分享下几个常用的ntp server，如果需要更多可以前往：<a href=\"http://www.ntp.org.cn/\">http://www.ntp.org.cn</a>获取</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">中国</span></span><br><span class=\"line\">cn.ntp.org.cn</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">中国香港</span></span><br><span class=\"line\">hk.ntp.org.cn</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">美国</span></span><br><span class=\"line\">us.ntp.org.cn</span><br></pre></td></tr></table></figure>\n\n<p>同步时间后可能部分服务器过一段时间又会出现偏差，因此最好设置crontab来定时同步时间，方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装crontab</span></span><br><span class=\"line\">yum -y install crontab</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建crontab任务</span></span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加定时任务</span></span><br><span class=\"line\">*/20 * * * * /usr/sbin/ntpdate pool.ntp.org &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重启crontab</span></span><br><span class=\"line\">service crond reload</span><br></pre></td></tr></table></figure>\n\n<p>上面的计划任务会在每20分钟进行一次时间同步，注意&#x2F;usr&#x2F;sbin&#x2F;ntpdate为ntpdate命令所在的绝对路径，不同的服务器可能路径不一样，可以使用which命令来找到绝对路径，方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@xiaoz ~]# which ntpdate</span><br><span class=\"line\">/usr/sbin/ntpdate</span><br></pre></td></tr></table></figure>\n\n<p>使用rdate同步时间<br>ntpdate服务需要使用udp&#x2F;123端口，但是某些服务商禁止了所有UDP协议，所以你会发现无论如何ntpdate总是同步出错。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下方是ntpdate同步时间报错的一个列子</span></span><br><span class=\"line\">[root@sharktech ~]# ntpdate -u  pool.ntp.org</span><br><span class=\"line\"> 1 Jun 16:13:46 ntpdate[8389]: no server suitable for synchronization found</span><br></pre></td></tr></table></figure>\n\n<p>这个时候我们可以改用rdate命令来同步时间，方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装rdate</span></span><br><span class=\"line\">yum -y install rdate</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">同步时间</span></span><br><span class=\"line\">rdate -s time-b.nist.gov</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看时间是否正确</span></span><br><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n\n<p>和上面一样，我们最好是加入定时任务来定期同步时间，方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装crontab</span></span><br><span class=\"line\">yum -y install crontab</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建crontab任务</span></span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加定时任务</span></span><br><span class=\"line\">*/20 * * * * /usr/bin/rdate -s time-b.nist.gov &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重启crontab</span></span><br><span class=\"line\">service crond reload</span><br></pre></td></tr></table></figure>\n\n<p>还有一些其它的rdate时间服务器如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1d.time.edu.cn #东南大学</span><br><span class=\"line\">s1e.time.edu.cn #清华大学</span><br><span class=\"line\">s2a.time.edu.cn #清华大学</span><br><span class=\"line\">s2b.time.edu.cn #清华大学</span><br><span class=\"line\">s2c.time.edu.cn #北京邮电大学</span><br><span class=\"line\">ntp.sjtu.edu.cn 202.120.2.101 #(上海交通大学网络中心NTP服务器地址）</span><br><span class=\"line\">s1a.time.edu.cn #北京邮电大学</span><br><span class=\"line\">s1b.time.edu.cn #清华大学</span><br><span class=\"line\">s1c.time.edu.cn #北京大学</span><br><span class=\"line\">clock.cuhk.edu.hk #香港中文大学授时中心</span><br></pre></td></tr></table></figure>\n\n<p>总结<br>无论是使用ntpdate还是rdate来同步时间，方法都比较简单，大致流程就是“设置时区” -&gt; “同步时间” -&gt; “设置定时任务”。在实际的测试中，xiaoz发现部分服务商屏蔽UDP端口的情况下，ntpdate命令无法同步，但使用rdate命令却可以，有类似情况的童鞋不妨试一下。</p>\n"},{"layout":"default","title":"Os","nav_order":5,"has_children":true,"parent":"Os","_content":"\n# Os\n","source":"_posts/docker/doc/material/manual/os/index.md","raw":"---\nlayout: default\ntitle: Os\nnav_order: 5\nhas_children: true\nparent: Os\npermalink: \"/docker/doc/material/manual/os/\"\n---\n\n# Os\n","slug":"docker/doc/material/manual/os/index","published":1,"date":"2025-02-23T07:43:31.244Z","updated":"2025-02-23T07:43:31.244Z","__permalink":"/docker/doc/material/manual/os/","comments":1,"photos":[],"_id":"cm7k5rwbd00avmswsgi0mbqav","content":"<h1 id=\"Os\"><a href=\"#Os\" class=\"headerlink\" title=\"Os\"></a>Os</h1>","excerpt":"","more":"<h1 id=\"Os\"><a href=\"#Os\" class=\"headerlink\" title=\"Os\"></a>Os</h1>"},{"layout":"default","title":"K8s","nav_order":5,"has_children":true,"parent":"K8s","_content":"\n# K8s\n","source":"_posts/kubernetes/app/skywalking/java/k8s/index.md","raw":"---\nlayout: default\ntitle: K8s\nnav_order: 5\nhas_children: true\nparent: K8s\npermalink: \"/kubernetes/app/skywalking/java/k8s/\"\n---\n\n# K8s\n","slug":"kubernetes/app/skywalking/java/k8s/index","published":1,"date":"2025-02-23T07:43:31.681Z","updated":"2025-02-23T07:43:31.682Z","__permalink":"/kubernetes/app/skywalking/java/k8s/","comments":1,"photos":[],"_id":"cm7k5rwbd00awmswsdzhra6tv","content":"<h1 id=\"K8s\"><a href=\"#K8s\" class=\"headerlink\" title=\"K8s\"></a>K8s</h1>","excerpt":"","more":"<h1 id=\"K8s\"><a href=\"#K8s\" class=\"headerlink\" title=\"K8s\"></a>K8s</h1>"},{"layout":"default","title":"优化版","nav_order":5,"has_children":true,"parent":"优化版","_content":"\n# 优化版\n","source":"_posts/materiel/ai/prompts/html+产品/优化版/index.md","raw":"---\nlayout: default\ntitle: 优化版\nnav_order: 5\nhas_children: true\nparent: 优化版\npermalink: \"/materiel/ai/prompts/html+产品/优化版/\"\n---\n\n# 优化版\n","slug":"materiel/ai/prompts/html+产品/优化版/index","published":1,"date":"2025-02-23T07:43:31.733Z","updated":"2025-02-23T07:43:31.733Z","__permalink":"/materiel/ai/prompts/html+产品/优化版/","comments":1,"photos":[],"_id":"cm7k5rwbd00axmswscc4p5ojy","content":"<h1 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h1>","excerpt":"","more":"<h1 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h1>"},{"layout":"default","title":"doc","nav_order":15,"description":"优化版","parent":"优化版","has_children":false,"grand_parent":"Html+产品","_content":"\n# 优化版\n\n## prompt\n\n```text\n帮忙优化下 @.cursorrules , 优化的方向是, 我需要你能具备更强大的原型理解能力, 以及html理解能力, 以便能够更好的帮我整理需求, 找到我需要的原型页面, 因为这个项目是通过axure导出的, 所以, 也不需要你去帮我敲代码, 你只需要产品能力, 以及整理梳理需求的能力, 你的职责更多的是, 帮助一个初级程序员能够更好更快速的理解需求原型\n```\n","source":"_posts/materiel/ai/prompts/html+产品/优化版/优化版.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 15\ndescription: 优化版\nparent: 优化版\nhas_children: false\npermalink: \"/materiel/ai/prompts/html+产品/优化版/优化版/\"\ngrand_parent: Html+产品\n---\n\n# 优化版\n\n## prompt\n\n```text\n帮忙优化下 @.cursorrules , 优化的方向是, 我需要你能具备更强大的原型理解能力, 以及html理解能力, 以便能够更好的帮我整理需求, 找到我需要的原型页面, 因为这个项目是通过axure导出的, 所以, 也不需要你去帮我敲代码, 你只需要产品能力, 以及整理梳理需求的能力, 你的职责更多的是, 帮助一个初级程序员能够更好更快速的理解需求原型\n```\n","slug":"materiel/ai/prompts/html+产品/优化版/优化版","published":1,"date":"2025-02-23T07:43:31.733Z","updated":"2025-02-23T07:43:31.733Z","__permalink":"/materiel/ai/prompts/html+产品/优化版/优化版/","comments":1,"photos":[],"_id":"cm7k5rwbd00aymsws1jk11djy","content":"<h1 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h1><h2 id=\"prompt\"><a href=\"#prompt\" class=\"headerlink\" title=\"prompt\"></a>prompt</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">帮忙优化下 @.cursorrules , 优化的方向是, 我需要你能具备更强大的原型理解能力, 以及html理解能力, 以便能够更好的帮我整理需求, 找到我需要的原型页面, 因为这个项目是通过axure导出的, 所以, 也不需要你去帮我敲代码, 你只需要产品能力, 以及整理梳理需求的能力, 你的职责更多的是, 帮助一个初级程序员能够更好更快速的理解需求原型</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h1><h2 id=\"prompt\"><a href=\"#prompt\" class=\"headerlink\" title=\"prompt\"></a>prompt</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">帮忙优化下 @.cursorrules , 优化的方向是, 我需要你能具备更强大的原型理解能力, 以及html理解能力, 以便能够更好的帮我整理需求, 找到我需要的原型页面, 因为这个项目是通过axure导出的, 所以, 也不需要你去帮我敲代码, 你只需要产品能力, 以及整理梳理需求的能力, 你的职责更多的是, 帮助一个初级程序员能够更好更快速的理解需求原型</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"deploy","nav_order":16,"description":"参考> https://blog.csdn.net/u011104991/article/details/81735960","parent":"Doc","has_children":false,"grand_parent":"Mongodb","_content":"\n## 参考\n> https://blog.csdn.net/u011104991/article/details/81735960\n","source":"_posts/docker/app/devs/data/MongoDB/doc/deploy.md","raw":"---\nlayout: default\ntitle: deploy\nnav_order: 16\ndescription: 参考> https://blog.csdn.net/u011104991/article/details/81735960\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/data/mongodb/doc/deploy/\"\ngrand_parent: Mongodb\n---\n\n## 参考\n> https://blog.csdn.net/u011104991/article/details/81735960\n","slug":"docker/app/devs/data/MongoDB/doc/deploy","published":1,"date":"2025-02-23T07:43:31.045Z","updated":"2025-02-23T07:43:31.045Z","__permalink":"/docker/app/devs/data/mongodb/doc/deploy/","comments":1,"photos":[],"_id":"cm7k5rwbd00azmswsdi1saxqz","content":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/u011104991/article/details/81735960\">https://blog.csdn.net/u011104991/article/details/81735960</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/u011104991/article/details/81735960\">https://blog.csdn.net/u011104991/article/details/81735960</a></p>\n</blockquote>\n"},{"layout":"default","title":"Doc","nav_order":6,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/app/devs/data/MongoDB/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 6\nhas_children: true\nparent: Doc\npermalink: \"/docker/app/devs/data/mongodb/doc/\"\n---\n\n# Doc\n","slug":"docker/app/devs/data/MongoDB/doc/index","published":1,"date":"2025-02-23T07:43:31.045Z","updated":"2025-02-23T07:43:31.045Z","__permalink":"/docker/app/devs/data/mongodb/doc/","comments":1,"photos":[],"_id":"cm7k5rwbd00b0msws9gzz4ia6","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"V1","nav_order":6,"has_children":true,"parent":"V1","_content":"\n# V1\n","source":"_posts/docker/app/devs/data/TiDB/v1/index.md","raw":"---\nlayout: default\ntitle: V1\nnav_order: 6\nhas_children: true\nparent: V1\npermalink: \"/docker/app/devs/data/tidb/v1/\"\n---\n\n# V1\n","slug":"docker/app/devs/data/TiDB/v1/index","published":1,"date":"2025-02-23T07:43:31.054Z","updated":"2025-02-23T07:43:31.054Z","__permalink":"/docker/app/devs/data/tidb/v1/","comments":1,"photos":[],"_id":"cm7k5rwbd00b1msws5d4s8287","content":"<h1 id=\"V1\"><a href=\"#V1\" class=\"headerlink\" title=\"V1\"></a>V1</h1>","excerpt":"","more":"<h1 id=\"V1\"><a href=\"#V1\" class=\"headerlink\" title=\"V1\"></a>V1</h1>"},{"layout":"default","title":"Problems","nav_order":6,"has_children":true,"parent":"Problems","_content":"\n# Problems\n","source":"_posts/docker/app/devs/data/elasticsearch/problems/index.md","raw":"---\nlayout: default\ntitle: Problems\nnav_order: 6\nhas_children: true\nparent: Problems\npermalink: \"/docker/app/devs/data/elasticsearch/problems/\"\n---\n\n# Problems\n","slug":"docker/app/devs/data/elasticsearch/problems/index","published":1,"date":"2025-02-23T07:43:31.070Z","updated":"2025-02-23T07:43:31.070Z","__permalink":"/docker/app/devs/data/elasticsearch/problems/","comments":1,"photos":[],"_id":"cm7k5rwbd00b2msws8hyt6nd6","content":"<h1 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h1>","excerpt":"","more":"<h1 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"问题记录","parent":"Problems","has_children":false,"grand_parent":"Elasticsearch","_content":"\n# 问题记录\n\n```md\n{\"@timestamp\":\"2024-05-25T06:33:04.830Z\", \"log.level\":\"ERROR\", \"message\":\"node validation exception\\n[1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch. For more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.11/bootstrap-checks.html]\\nbootstrap check failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]; for more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.11/_maximum_map_count_check.html]\", \"ecs.version\": \"1.2.0\",\"service.name\":\"ES_ECS\",\"event.dataset\":\"elasticsearch.server\",\"process.thread.name\":\"main\",\"log.logger\":\"org.elasticsearch.bootstrap.Elasticsearch\",\"elasticsearch.node.name\":\"es01\",\"elasticsearch.cluster.name\":\"es-docker-cluster\"}\n\n我用docker-compose启动es, 报错了\n\nAI答:\n\n根据您提供的错误日志和之前的笔记，您在使用Docker Compose启动Elasticsearch时遇到了\"max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\"的错误。这是一个常见的问题，通常是因为Elasticsearch需要较高的`vm.max_map_count`设置来正常运行，而默认值通常不足以满足其需求。\n\n要解决这个问题，您需要在宿主机上增加`vm.max_map_count`的值。这里有两种方法可以做到这一点：\n\n1. **临时设置**（重启后失效）：\n   执行以下命令：\n   ```shell\n   sudo sysctl -w vm.max_map_count=262144\n   ```\n\n   这将立即生效，但如果宿主机重启，您需要重新执行此命令。\n\n2. **永久设置**：\n\n   编辑`/etc/sysctl.conf`文件，在文件末尾添加以下行：\n\n    ```shell\n    vm.max_map_count=262144\n    ```\n\n   然后执行`sysctl -p`命令使更改生效。这种方法的好处是，即使宿主机重启，设置也会保持。\n\n请注意，如果您使用的是Docker Desktop的WSL2后端或其他虚拟化环境，可能需要在不同的地方进行设置。例如，在WSL2中，您可能需要在Windows的命令提示符或PowerShell中执行以下命令来调整WSL2虚拟机的设置：\n    ```shell\n    wsl -d docker-desktop sysctl -w vm.max_map_count=262144\n    ```\n或者，根据您的环境，可能需要查找特定于环境的设置方法。\n\n完成这些设置后，重新启动您的Elasticsearch容器，应该能够解决启动时遇到的`vm.max_map_count`错误。\n\n```\n","source":"_posts/docker/app/devs/data/elasticsearch/problems/problems.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: 问题记录\nparent: Problems\nhas_children: false\npermalink: \"/docker/app/devs/data/elasticsearch/problems/problems/\"\ngrand_parent: Elasticsearch\n---\n\n# 问题记录\n\n```md\n{\"@timestamp\":\"2024-05-25T06:33:04.830Z\", \"log.level\":\"ERROR\", \"message\":\"node validation exception\\n[1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch. For more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.11/bootstrap-checks.html]\\nbootstrap check failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]; for more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.11/_maximum_map_count_check.html]\", \"ecs.version\": \"1.2.0\",\"service.name\":\"ES_ECS\",\"event.dataset\":\"elasticsearch.server\",\"process.thread.name\":\"main\",\"log.logger\":\"org.elasticsearch.bootstrap.Elasticsearch\",\"elasticsearch.node.name\":\"es01\",\"elasticsearch.cluster.name\":\"es-docker-cluster\"}\n\n我用docker-compose启动es, 报错了\n\nAI答:\n\n根据您提供的错误日志和之前的笔记，您在使用Docker Compose启动Elasticsearch时遇到了\"max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\"的错误。这是一个常见的问题，通常是因为Elasticsearch需要较高的`vm.max_map_count`设置来正常运行，而默认值通常不足以满足其需求。\n\n要解决这个问题，您需要在宿主机上增加`vm.max_map_count`的值。这里有两种方法可以做到这一点：\n\n1. **临时设置**（重启后失效）：\n   执行以下命令：\n   ```shell\n   sudo sysctl -w vm.max_map_count=262144\n   ```\n\n   这将立即生效，但如果宿主机重启，您需要重新执行此命令。\n\n2. **永久设置**：\n\n   编辑`/etc/sysctl.conf`文件，在文件末尾添加以下行：\n\n    ```shell\n    vm.max_map_count=262144\n    ```\n\n   然后执行`sysctl -p`命令使更改生效。这种方法的好处是，即使宿主机重启，设置也会保持。\n\n请注意，如果您使用的是Docker Desktop的WSL2后端或其他虚拟化环境，可能需要在不同的地方进行设置。例如，在WSL2中，您可能需要在Windows的命令提示符或PowerShell中执行以下命令来调整WSL2虚拟机的设置：\n    ```shell\n    wsl -d docker-desktop sysctl -w vm.max_map_count=262144\n    ```\n或者，根据您的环境，可能需要查找特定于环境的设置方法。\n\n完成这些设置后，重新启动您的Elasticsearch容器，应该能够解决启动时遇到的`vm.max_map_count`错误。\n\n```\n","slug":"docker/app/devs/data/elasticsearch/problems/problems","published":1,"date":"2025-02-23T07:43:31.069Z","updated":"2025-02-23T07:43:31.069Z","__permalink":"/docker/app/devs/data/elasticsearch/problems/problems/","comments":1,"photos":[],"_id":"cm7k5rwbe00b3mswsdgru0xj6","content":"<h1 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;@timestamp&quot;:&quot;2024-05-25T06:33:04.830Z&quot;, &quot;log.level&quot;:&quot;ERROR&quot;, &quot;message&quot;:&quot;node validation exception\\n[1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch. For more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.11/bootstrap-checks.html]\\nbootstrap check failure [1] of [1]: max virtual memory areas vm.max<span class=\"emphasis\">_map_</span>count [65530] is too low, increase to at least [262144]; for more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.11/<span class=\"emphasis\">_maximum_</span>map<span class=\"emphasis\">_count_</span>check.html]&quot;, &quot;ecs.version&quot;: &quot;1.2.0&quot;,&quot;service.name&quot;:&quot;ES<span class=\"emphasis\">_ECS&quot;,&quot;event.dataset&quot;:&quot;elasticsearch.server&quot;,&quot;process.thread.name&quot;:&quot;main&quot;,&quot;log.logger&quot;:&quot;org.elasticsearch.bootstrap.Elasticsearch&quot;,&quot;elasticsearch.node.name&quot;:&quot;es01&quot;,&quot;elasticsearch.cluster.name&quot;:&quot;es-docker-cluster&quot;&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">我用docker-compose启动es, 报错了</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">AI答:</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">根据您提供的错误日志和之前的笔记，您在使用Docker Compose启动Elasticsearch时遇到了&quot;max virtual memory areas vm.max_</span>map<span class=\"emphasis\">_count [65530] is too low, increase to at least [262144]&quot;的错误。这是一个常见的问题，通常是因为Elasticsearch需要较高的`vm.max_</span>map<span class=\"emphasis\">_count`设置来正常运行，而默认值通常不足以满足其需求。</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">要解决这个问题，您需要在宿主机上增加`vm.max_</span>map<span class=\"emphasis\">_count`的值。这里有两种方法可以做到这一点：</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">1. <span class=\"strong\">**临时设置**</span>（重启后失效）：</span></span><br><span class=\"line\"><span class=\"emphasis\">   执行以下命令：</span></span><br><span class=\"line\"><span class=\"emphasis\">   ```shell</span></span><br><span class=\"line\"><span class=\"emphasis\">   sudo sysctl -w vm.max_</span>map<span class=\"emphasis\">_count=262144</span></span><br></pre></td></tr></table></figure>\n\n<p>   这将立即生效，但如果宿主机重启，您需要重新执行此命令。</p>\n<ol start=\"2\">\n<li><p><strong>永久设置</strong>：</p>\n<p>编辑<code>/etc/sysctl.conf</code>文件，在文件末尾添加以下行：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n\n<p>然后执行<code>sysctl -p</code>命令使更改生效。这种方法的好处是，即使宿主机重启，设置也会保持。</p>\n</li>\n</ol>\n<p>请注意，如果您使用的是Docker Desktop的WSL2后端或其他虚拟化环境，可能需要在不同的地方进行设置。例如，在WSL2中，您可能需要在Windows的命令提示符或PowerShell中执行以下命令来调整WSL2虚拟机的设置：<br>    <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl -d docker-desktop sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><br>或者，根据您的环境，可能需要查找特定于环境的设置方法。</p>\n<p>完成这些设置后，重新启动您的Elasticsearch容器，应该能够解决启动时遇到的<code>vm.max_map_count</code>错误。</p>\n<pre><code>\n</code></pre>\n","excerpt":"","more":"<h1 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;@timestamp&quot;:&quot;2024-05-25T06:33:04.830Z&quot;, &quot;log.level&quot;:&quot;ERROR&quot;, &quot;message&quot;:&quot;node validation exception\\n[1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch. For more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.11/bootstrap-checks.html]\\nbootstrap check failure [1] of [1]: max virtual memory areas vm.max<span class=\"emphasis\">_map_</span>count [65530] is too low, increase to at least [262144]; for more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.11/<span class=\"emphasis\">_maximum_</span>map<span class=\"emphasis\">_count_</span>check.html]&quot;, &quot;ecs.version&quot;: &quot;1.2.0&quot;,&quot;service.name&quot;:&quot;ES<span class=\"emphasis\">_ECS&quot;,&quot;event.dataset&quot;:&quot;elasticsearch.server&quot;,&quot;process.thread.name&quot;:&quot;main&quot;,&quot;log.logger&quot;:&quot;org.elasticsearch.bootstrap.Elasticsearch&quot;,&quot;elasticsearch.node.name&quot;:&quot;es01&quot;,&quot;elasticsearch.cluster.name&quot;:&quot;es-docker-cluster&quot;&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">我用docker-compose启动es, 报错了</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">AI答:</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">根据您提供的错误日志和之前的笔记，您在使用Docker Compose启动Elasticsearch时遇到了&quot;max virtual memory areas vm.max_</span>map<span class=\"emphasis\">_count [65530] is too low, increase to at least [262144]&quot;的错误。这是一个常见的问题，通常是因为Elasticsearch需要较高的`vm.max_</span>map<span class=\"emphasis\">_count`设置来正常运行，而默认值通常不足以满足其需求。</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">要解决这个问题，您需要在宿主机上增加`vm.max_</span>map<span class=\"emphasis\">_count`的值。这里有两种方法可以做到这一点：</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">1. <span class=\"strong\">**临时设置**</span>（重启后失效）：</span></span><br><span class=\"line\"><span class=\"emphasis\">   执行以下命令：</span></span><br><span class=\"line\"><span class=\"emphasis\">   ```shell</span></span><br><span class=\"line\"><span class=\"emphasis\">   sudo sysctl -w vm.max_</span>map<span class=\"emphasis\">_count=262144</span></span><br></pre></td></tr></table></figure>\n\n<p>   这将立即生效，但如果宿主机重启，您需要重新执行此命令。</p>\n<ol start=\"2\">\n<li><p><strong>永久设置</strong>：</p>\n<p>编辑<code>/etc/sysctl.conf</code>文件，在文件末尾添加以下行：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n\n<p>然后执行<code>sysctl -p</code>命令使更改生效。这种方法的好处是，即使宿主机重启，设置也会保持。</p>\n</li>\n</ol>\n<p>请注意，如果您使用的是Docker Desktop的WSL2后端或其他虚拟化环境，可能需要在不同的地方进行设置。例如，在WSL2中，您可能需要在Windows的命令提示符或PowerShell中执行以下命令来调整WSL2虚拟机的设置：<br>    <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl -d docker-desktop sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><br>或者，根据您的环境，可能需要查找特定于环境的设置方法。</p>\n<p>完成这些设置后，重新启动您的Elasticsearch容器，应该能够解决启动时遇到的<code>vm.max_map_count</code>错误。</p>\n<pre><code>\n</code></pre>\n"},{"layout":"default","title":"doc","nav_order":16,"description":"以下是使用Docker Swarm部署Elasticsearch集群的步骤：","parent":"Bak","has_children":false,"grand_parent":"Elasticsearch","_content":"\n以下是使用Docker Swarm部署Elasticsearch集群的步骤：\n\n1. 环境准备：\n   - 修改系统配置：在所有主机中，编辑`/etc/sysctl.conf`文件，并追加以下内容：`vm.max_map_count=262144`。保存后执行`sysctl -p`命令。\n   - 创建专用网络：使用以下命令创建一个名为`elastic`的overlay网络：`docker network create --driver overlay elastic` [[1]](https://www.cnblogs.com/JentZhang/p/17047797.html)。\n\n2. 准备docker-compose文件：\n   - 创建一个名为`docker-compose-es-cluster.yml`的文件，内容如下：\n\n```yaml\nversion: '3.3'\nservices:\n  kibana:\n    image: kibana:7.10.1\n    environment:\n      - ELASTICSEARCH_URL=http://es01:9200\n      - ELASTICSEARCH_HOSTS=http://es01:9200\n      - ELASTICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=vsUZGKNvjWRtTKPmDG\n    ports:\n      - \"5601:5601\"\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          memory: 800M\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es01:\n    image: elasticsearch:7.10.1\n    hostname: es01\n    environment:\n      - network.publish_host=es01\n      - network.host=0.0.0.0\n      - node.name=es01\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es02,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n      - xpack.security.enabled=false\n      - xpack.security.audit.enabled=false\n      - xpack.security.transport.ssl.enabled=false\n      - ELASTIC_PASSWORD=vsUZGKNvjWRtTKPmDG\n    volumes:\n      - es01_data:/usr/share/elasticsearch/data\n      - es01_logs:/usr/share/elasticsearch/logs\n    ports:\n      - \"9200:9200\"\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es02:\n    image: elasticsearch:7.10.1\n    hostname: es02\n    environment:\n      - network.publish_host=es02\n      - network.host=0.0.0.0\n      - node.name=es02\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es02_data:/usr/share/elasticsearch/data\n      - es02_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==2\n  es03:\n    image: elasticsearch:7.10.1\n    hostname: es03\n    environment:\n      - network.publish_host=es03\n      - network.host=0.0.0.0\n      - node.name=es03\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es02\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es03_data:/usr/share/elasticsearch/data\n      - es03_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.以下是使用Docker Swarm部署Elasticsearch集群的步骤：\n\n1. 环境准备：\n   - 修改系统配置：在所有主机中，编辑`/etc/sysctl.conf`文件，并追加以下内容：`vm.max_map_count=262144`。保存后执行`sysctl -p`命令。\n   - 创建专用网络：使用以下命令创建一个名为`elastic`的overlay网络：`docker network create --driver overlay elastic`。\n\n2. 准备docker-compose文件：\n   - 创建一个名为`docker-compose-es-cluster.yml`的文件，内容如下：\n\n```yaml\nversion: '3.3'\nservices:\n  kibana:\n    image: kibana:7.10.1\n    environment:\n      - ELASTICSEARCH_URL=http://es01:9200\n      - ELASTICSEARCH_HOSTS=http://es01:9200\n      - ELASTICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=vsUZGKNvjWRtTKPmDG\n    ports:\n      - \"5601:5601\"\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          memory: 800M\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es01:\n    image: elasticsearch:7.10.1\n    hostname: es01\n    environment:\n      - network.publish_host=es01\n      - network.host=0.0.0.0\n      - node.name=es01\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es02,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n      - xpack.security.enabled=false\n      - xpack.security.audit.enabled=false\n      - xpack.security.transport.ssl.enabled=false\n      - ELASTIC_PASSWORD=vsUZGKNvjWRtTKPmDG\n    volumes:\n      - es01_data:/usr/share/elasticsearch/data\n      - es01_logs:/usr/share/elasticsearch/logs\n    ports:\n      - \"9200:9200\"\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es02:\n    image: elasticsearch:7.10.1\n    hostname: es02\n    environment:\n      - network.publish_host=es02\n      - network.host=0.0.0.0\n      - node.name=es02\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es02_data:/usr/share/elasticsearch/data\n      - es02_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==2\n  es03:\n    image: elasticsearch:7.10.1\n    hostname: es03\n    environment:\n      - network.publish_host=es03\n      - network.host=0.0.0.0\n      - node.name=es03\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es02\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es03_data:/usr/share/elasticsearch/data\n      - es03_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n\n---\nLearn more:\n1. [docker swarm 搭建ES集群 - JentZhang - 博客园](https://www.cnblogs.com/JentZhang/p/17047797.html)\n2. [docker swarm 搭建ES集群（TLS版） - JentZhang - 博客园](https://www.cnblogs.com/JentZhang/p/17227129.html)\n3. [docker swarm es 集群-掘金](https://juejin.cn/s/docker%20swarm%20es%20%E9%9B%86%E7%BE%A4)\n","source":"_posts/docker/app/devs/data/elasticsearch/bak/bak.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: 以下是使用Docker Swarm部署Elasticsearch集群的步骤：\nparent: Bak\nhas_children: false\npermalink: \"/docker/app/devs/data/elasticsearch/bak/bak/\"\ngrand_parent: Elasticsearch\n---\n\n以下是使用Docker Swarm部署Elasticsearch集群的步骤：\n\n1. 环境准备：\n   - 修改系统配置：在所有主机中，编辑`/etc/sysctl.conf`文件，并追加以下内容：`vm.max_map_count=262144`。保存后执行`sysctl -p`命令。\n   - 创建专用网络：使用以下命令创建一个名为`elastic`的overlay网络：`docker network create --driver overlay elastic` [[1]](https://www.cnblogs.com/JentZhang/p/17047797.html)。\n\n2. 准备docker-compose文件：\n   - 创建一个名为`docker-compose-es-cluster.yml`的文件，内容如下：\n\n```yaml\nversion: '3.3'\nservices:\n  kibana:\n    image: kibana:7.10.1\n    environment:\n      - ELASTICSEARCH_URL=http://es01:9200\n      - ELASTICSEARCH_HOSTS=http://es01:9200\n      - ELASTICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=vsUZGKNvjWRtTKPmDG\n    ports:\n      - \"5601:5601\"\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          memory: 800M\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es01:\n    image: elasticsearch:7.10.1\n    hostname: es01\n    environment:\n      - network.publish_host=es01\n      - network.host=0.0.0.0\n      - node.name=es01\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es02,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n      - xpack.security.enabled=false\n      - xpack.security.audit.enabled=false\n      - xpack.security.transport.ssl.enabled=false\n      - ELASTIC_PASSWORD=vsUZGKNvjWRtTKPmDG\n    volumes:\n      - es01_data:/usr/share/elasticsearch/data\n      - es01_logs:/usr/share/elasticsearch/logs\n    ports:\n      - \"9200:9200\"\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es02:\n    image: elasticsearch:7.10.1\n    hostname: es02\n    environment:\n      - network.publish_host=es02\n      - network.host=0.0.0.0\n      - node.name=es02\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es02_data:/usr/share/elasticsearch/data\n      - es02_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==2\n  es03:\n    image: elasticsearch:7.10.1\n    hostname: es03\n    environment:\n      - network.publish_host=es03\n      - network.host=0.0.0.0\n      - node.name=es03\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es02\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es03_data:/usr/share/elasticsearch/data\n      - es03_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.以下是使用Docker Swarm部署Elasticsearch集群的步骤：\n\n1. 环境准备：\n   - 修改系统配置：在所有主机中，编辑`/etc/sysctl.conf`文件，并追加以下内容：`vm.max_map_count=262144`。保存后执行`sysctl -p`命令。\n   - 创建专用网络：使用以下命令创建一个名为`elastic`的overlay网络：`docker network create --driver overlay elastic`。\n\n2. 准备docker-compose文件：\n   - 创建一个名为`docker-compose-es-cluster.yml`的文件，内容如下：\n\n```yaml\nversion: '3.3'\nservices:\n  kibana:\n    image: kibana:7.10.1\n    environment:\n      - ELASTICSEARCH_URL=http://es01:9200\n      - ELASTICSEARCH_HOSTS=http://es01:9200\n      - ELASTICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=vsUZGKNvjWRtTKPmDG\n    ports:\n      - \"5601:5601\"\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          memory: 800M\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es01:\n    image: elasticsearch:7.10.1\n    hostname: es01\n    environment:\n      - network.publish_host=es01\n      - network.host=0.0.0.0\n      - node.name=es01\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es02,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n      - xpack.security.enabled=false\n      - xpack.security.audit.enabled=false\n      - xpack.security.transport.ssl.enabled=false\n      - ELASTIC_PASSWORD=vsUZGKNvjWRtTKPmDG\n    volumes:\n      - es01_data:/usr/share/elasticsearch/data\n      - es01_logs:/usr/share/elasticsearch/logs\n    ports:\n      - \"9200:9200\"\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es02:\n    image: elasticsearch:7.10.1\n    hostname: es02\n    environment:\n      - network.publish_host=es02\n      - network.host=0.0.0.0\n      - node.name=es02\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es02_data:/usr/share/elasticsearch/data\n      - es02_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==2\n  es03:\n    image: elasticsearch:7.10.1\n    hostname: es03\n    environment:\n      - network.publish_host=es03\n      - network.host=0.0.0.0\n      - node.name=es03\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es02\n      - cluster.initial_master_nodes=es01,es02,es03\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es03_data:/usr/share/elasticsearch/data\n      - es03_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: \"0.50\"\n          memory: 1G\n        reservations:\n          cpus: \"0.25\"\n\n---\nLearn more:\n1. [docker swarm 搭建ES集群 - JentZhang - 博客园](https://www.cnblogs.com/JentZhang/p/17047797.html)\n2. [docker swarm 搭建ES集群（TLS版） - JentZhang - 博客园](https://www.cnblogs.com/JentZhang/p/17227129.html)\n3. [docker swarm es 集群-掘金](https://juejin.cn/s/docker%20swarm%20es%20%E9%9B%86%E7%BE%A4)\n","slug":"docker/app/devs/data/elasticsearch/bak/bak","published":1,"date":"2025-02-23T07:43:31.068Z","updated":"2025-02-23T07:43:31.069Z","__permalink":"/docker/app/devs/data/elasticsearch/bak/bak/","comments":1,"photos":[],"_id":"cm7k5rwbe00b4mswsgti34u19","content":"<p>以下是使用Docker Swarm部署Elasticsearch集群的步骤：</p>\n<ol>\n<li><p>环境准备：</p>\n<ul>\n<li>修改系统配置：在所有主机中，编辑<code>/etc/sysctl.conf</code>文件，并追加以下内容：<code>vm.max_map_count=262144</code>。保存后执行<code>sysctl -p</code>命令。</li>\n<li>创建专用网络：使用以下命令创建一个名为<code>elastic</code>的overlay网络：<code>docker network create --driver overlay elastic</code> <a href=\"https://www.cnblogs.com/JentZhang/p/17047797.html\">[1]</a>。</li>\n</ul>\n</li>\n<li><p>准备docker-compose文件：</p>\n<ul>\n<li>创建一个名为<code>docker-compose-es-cluster.yml</code>的文件，内容如下：</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"yaml\">version: &#39;3.3&#39;\nservices:\n  kibana:\n    image: kibana:7.10.1\n    environment:\n      - ELASTICSEARCH_URL=http://es01:9200\n      - ELASTICSEARCH_HOSTS=http://es01:9200\n      - ELASTICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=vsUZGKNvjWRtTKPmDG\n    ports:\n      - &quot;5601:5601&quot;\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          memory: 800M\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es01:\n    image: elasticsearch:7.10.1\n    hostname: es01\n    environment:\n      - network.publish_host=es01\n      - network.host=0.0.0.0\n      - node.name=es01\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es02,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n      - xpack.security.enabled=false\n      - xpack.security.audit.enabled=false\n      - xpack.security.transport.ssl.enabled=false\n      - ELASTIC_PASSWORD=vsUZGKNvjWRtTKPmDG\n    volumes:\n      - es01_data:/usr/share/elasticsearch/data\n      - es01_logs:/usr/share/elasticsearch/logs\n    ports:\n      - &quot;9200:9200&quot;\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es02:\n    image: elasticsearch:7.10.1\n    hostname: es02\n    environment:\n      - network.publish_host=es02\n      - network.host=0.0.0.0\n      - node.name=es02\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es02_data:/usr/share/elasticsearch/data\n      - es02_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==2\n  es03:\n    image: elasticsearch:7.10.1\n    hostname: es03\n    environment:\n      - network.publish_host=es03\n      - network.host=0.0.0.0\n      - node.name=es03\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es02\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es03_data:/usr/share/elasticsearch/data\n      - es03_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.以下是使用Docker Swarm部署Elasticsearch集群的步骤：\n\n1. 环境准备：\n   - 修改系统配置：在所有主机中，编辑`/etc/sysctl.conf`文件，并追加以下内容：`vm.max_map_count=262144`。保存后执行`sysctl -p`命令。\n   - 创建专用网络：使用以下命令创建一个名为`elastic`的overlay网络：`docker network create --driver overlay elastic`。\n\n2. 准备docker-compose文件：\n   - 创建一个名为`docker-compose-es-cluster.yml`的文件，内容如下：\n\n```yaml\nversion: &#39;3.3&#39;\nservices:\n  kibana:\n    image: kibana:7.10.1\n    environment:\n      - ELASTICSEARCH_URL=http://es01:9200\n      - ELASTICSEARCH_HOSTS=http://es01:9200\n      - ELASTICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=vsUZGKNvjWRtTKPmDG\n    ports:\n      - &quot;5601:5601&quot;\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          memory: 800M\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es01:\n    image: elasticsearch:7.10.1\n    hostname: es01\n    environment:\n      - network.publish_host=es01\n      - network.host=0.0.0.0\n      - node.name=es01\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es02,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n      - xpack.security.enabled=false\n      - xpack.security.audit.enabled=false\n      - xpack.security.transport.ssl.enabled=false\n      - ELASTIC_PASSWORD=vsUZGKNvjWRtTKPmDG\n    volumes:\n      - es01_data:/usr/share/elasticsearch/data\n      - es01_logs:/usr/share/elasticsearch/logs\n    ports:\n      - &quot;9200:9200&quot;\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es02:\n    image: elasticsearch:7.10.1\n    hostname: es02\n    environment:\n      - network.publish_host=es02\n      - network.host=0.0.0.0\n      - node.name=es02\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es02_data:/usr/share/elasticsearch/data\n      - es02_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==2\n  es03:\n    image: elasticsearch:7.10.1\n    hostname: es03\n    environment:\n      - network.publish_host=es03\n      - network.host=0.0.0.0\n      - node.name=es03\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es02\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es03_data:/usr/share/elasticsearch/data\n      - es03_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n\n---\nLearn more:\n1. [docker swarm 搭建ES集群 - JentZhang - 博客园](https://www.cnblogs.com/JentZhang/p/17047797.html)\n2. [docker swarm 搭建ES集群（TLS版） - JentZhang - 博客园](https://www.cnblogs.com/JentZhang/p/17227129.html)\n3. [docker swarm es 集群-掘金](https://juejin.cn/s/docker%20swarm%20es%20%E9%9B%86%E7%BE%A4)\n</code></pre>\n","excerpt":"","more":"<p>以下是使用Docker Swarm部署Elasticsearch集群的步骤：</p>\n<ol>\n<li><p>环境准备：</p>\n<ul>\n<li>修改系统配置：在所有主机中，编辑<code>/etc/sysctl.conf</code>文件，并追加以下内容：<code>vm.max_map_count=262144</code>。保存后执行<code>sysctl -p</code>命令。</li>\n<li>创建专用网络：使用以下命令创建一个名为<code>elastic</code>的overlay网络：<code>docker network create --driver overlay elastic</code> <a href=\"https://www.cnblogs.com/JentZhang/p/17047797.html\">[1]</a>。</li>\n</ul>\n</li>\n<li><p>准备docker-compose文件：</p>\n<ul>\n<li>创建一个名为<code>docker-compose-es-cluster.yml</code>的文件，内容如下：</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"yaml\">version: &#39;3.3&#39;\nservices:\n  kibana:\n    image: kibana:7.10.1\n    environment:\n      - ELASTICSEARCH_URL=http://es01:9200\n      - ELASTICSEARCH_HOSTS=http://es01:9200\n      - ELASTICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=vsUZGKNvjWRtTKPmDG\n    ports:\n      - &quot;5601:5601&quot;\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          memory: 800M\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es01:\n    image: elasticsearch:7.10.1\n    hostname: es01\n    environment:\n      - network.publish_host=es01\n      - network.host=0.0.0.0\n      - node.name=es01\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es02,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n      - xpack.security.enabled=false\n      - xpack.security.audit.enabled=false\n      - xpack.security.transport.ssl.enabled=false\n      - ELASTIC_PASSWORD=vsUZGKNvjWRtTKPmDG\n    volumes:\n      - es01_data:/usr/share/elasticsearch/data\n      - es01_logs:/usr/share/elasticsearch/logs\n    ports:\n      - &quot;9200:9200&quot;\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es02:\n    image: elasticsearch:7.10.1\n    hostname: es02\n    environment:\n      - network.publish_host=es02\n      - network.host=0.0.0.0\n      - node.name=es02\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es02_data:/usr/share/elasticsearch/data\n      - es02_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==2\n  es03:\n    image: elasticsearch:7.10.1\n    hostname: es03\n    environment:\n      - network.publish_host=es03\n      - network.host=0.0.0.0\n      - node.name=es03\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es02\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es03_data:/usr/share/elasticsearch/data\n      - es03_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.以下是使用Docker Swarm部署Elasticsearch集群的步骤：\n\n1. 环境准备：\n   - 修改系统配置：在所有主机中，编辑`/etc/sysctl.conf`文件，并追加以下内容：`vm.max_map_count=262144`。保存后执行`sysctl -p`命令。\n   - 创建专用网络：使用以下命令创建一个名为`elastic`的overlay网络：`docker network create --driver overlay elastic`。\n\n2. 准备docker-compose文件：\n   - 创建一个名为`docker-compose-es-cluster.yml`的文件，内容如下：\n\n```yaml\nversion: &#39;3.3&#39;\nservices:\n  kibana:\n    image: kibana:7.10.1\n    environment:\n      - ELASTICSEARCH_URL=http://es01:9200\n      - ELASTICSEARCH_HOSTS=http://es01:9200\n      - ELASTICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=vsUZGKNvjWRtTKPmDG\n    ports:\n      - &quot;5601:5601&quot;\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          memory: 800M\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es01:\n    image: elasticsearch:7.10.1\n    hostname: es01\n    environment:\n      - network.publish_host=es01\n      - network.host=0.0.0.0\n      - node.name=es01\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es02,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n      - xpack.security.enabled=false\n      - xpack.security.audit.enabled=false\n      - xpack.security.transport.ssl.enabled=false\n      - ELASTIC_PASSWORD=vsUZGKNvjWRtTKPmDG\n    volumes:\n      - es01_data:/usr/share/elasticsearch/data\n      - es01_logs:/usr/share/elasticsearch/logs\n    ports:\n      - &quot;9200:9200&quot;\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==1\n  es02:\n    image: elasticsearch:7.10.1\n    hostname: es02\n    environment:\n      - network.publish_host=es02\n      - network.host=0.0.0.0\n      - node.name=es02\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es03\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es02_data:/usr/share/elasticsearch/data\n      - es02_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n          memory: 1G\n      placement:\n        constraints:\n          - node.labels.es.replica==2\n  es03:\n    image: elasticsearch:7.10.1\n    hostname: es03\n    environment:\n      - network.publish_host=es03\n      - network.host=0.0.0.0\n      - node.name=es03\n      - cluster.name=es-docker-cluster\n      - discovery.seed_hosts=es01,es02\n      - cluster.initial_master_nodes=es01,es02,es03\n      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;\n      - path.repo=/usr/share/elasticsearch/backups\n    volumes:\n      - es03_data:/usr/share/elasticsearch/data\n      - es03_logs:/usr/share/elasticsearch/logs\n    networks:\n      - elastic\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        limits:\n          cpus: &quot;0.50&quot;\n          memory: 1G\n        reservations:\n          cpus: &quot;0.25&quot;\n\n---\nLearn more:\n1. [docker swarm 搭建ES集群 - JentZhang - 博客园](https://www.cnblogs.com/JentZhang/p/17047797.html)\n2. [docker swarm 搭建ES集群（TLS版） - JentZhang - 博客园](https://www.cnblogs.com/JentZhang/p/17227129.html)\n3. [docker swarm es 集群-掘金](https://juejin.cn/s/docker%20swarm%20es%20%E9%9B%86%E7%BE%A4)\n</code></pre>\n"},{"layout":"default","title":"Bak","nav_order":6,"has_children":true,"parent":"Bak","_content":"\n# Bak\n","source":"_posts/docker/app/devs/data/elasticsearch/bak/index.md","raw":"---\nlayout: default\ntitle: Bak\nnav_order: 6\nhas_children: true\nparent: Bak\npermalink: \"/docker/app/devs/data/elasticsearch/bak/\"\n---\n\n# Bak\n","slug":"docker/app/devs/data/elasticsearch/bak/index","published":1,"date":"2025-02-23T07:43:31.069Z","updated":"2025-02-23T07:43:31.069Z","__permalink":"/docker/app/devs/data/elasticsearch/bak/","comments":1,"photos":[],"_id":"cm7k5rwbe00b5mswsb98bce6a","content":"<h1 id=\"Bak\"><a href=\"#Bak\" class=\"headerlink\" title=\"Bak\"></a>Bak</h1>","excerpt":"","more":"<h1 id=\"Bak\"><a href=\"#Bak\" class=\"headerlink\" title=\"Bak\"></a>Bak</h1>"},{"layout":"default","title":"V1","nav_order":6,"has_children":true,"parent":"V1","_content":"\n# V1\n","source":"_posts/docker/app/devs/data/elasticsearch/v1/index.md","raw":"---\nlayout: default\ntitle: V1\nnav_order: 6\nhas_children: true\nparent: V1\npermalink: \"/docker/app/devs/data/elasticsearch/v1/\"\n---\n\n# V1\n","slug":"docker/app/devs/data/elasticsearch/v1/index","published":1,"date":"2025-02-23T07:43:31.067Z","updated":"2025-02-23T07:43:31.067Z","__permalink":"/docker/app/devs/data/elasticsearch/v1/","comments":1,"photos":[],"_id":"cm7k5rwbe00b6msws1rbb1z3l","content":"<h1 id=\"V1\"><a href=\"#V1\" class=\"headerlink\" title=\"V1\"></a>V1</h1>","excerpt":"","more":"<h1 id=\"V1\"><a href=\"#V1\" class=\"headerlink\" title=\"V1\"></a>V1</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"文档记录","parent":"V1","has_children":false,"grand_parent":"Elasticsearch","_content":"\n# 文档记录\n\n## 问题点\n\n- es使用docker部署报错\n\nes使用docker部署报错 max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n\n怎么解决\n\n---\n\n您好！根据您的搜索结果，我为您提供以下解决方案来解决Elasticsearch使用Docker部署时出现\"max virtual memory areas vm.max_map_count is too low\"错误。\n\n解决方案如下：\n\n1. 编辑 /etc/sysctl.conf 文件，追加以下内容：\n\n   ````shell\n   vm.max_map_count=262144\n   ```\n   \n   保存文件后，执行以下命令使修改生效：\n\n   ```shell\n   sysctl -p\n   ```\n\n   最后重新启动Elasticsearch服务即可成功解决问题 [[1]](https://blog.csdn.net/BigData_Mining/article/details/108927120)。\n\n请注意，如果您是在Docker容器中部署Elasticsearch，您需要在宿主机上修改该参数，而不是在容器镜像中修改。\n\n希望这些信息对您有所帮助！\n\n---\nLearn more:\n\n1. [docker下安装elasticSearch报错：[1]: max virtual memory areas vm.max_map_count [65530] is too low-CSDN博客](https://blog.csdn.net/BigData_Mining/article/details/108927120)\n2. [elasticsearch启动报错max virtual memory areas解决办法 - minseo - 博客园](https://www.cnblogs.com/minseo/p/12978561.html)\n3. [草履虫也能看懂的ELK搭建流程 - 真正的大英雄 - 博客园](https://www.cnblogs.com/zhangdali/p/15671538.html)\n","source":"_posts/docker/app/devs/data/elasticsearch/v1/v1.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: 文档记录\nparent: V1\nhas_children: false\npermalink: \"/docker/app/devs/data/elasticsearch/v1/v1/\"\ngrand_parent: Elasticsearch\n---\n\n# 文档记录\n\n## 问题点\n\n- es使用docker部署报错\n\nes使用docker部署报错 max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n\n怎么解决\n\n---\n\n您好！根据您的搜索结果，我为您提供以下解决方案来解决Elasticsearch使用Docker部署时出现\"max virtual memory areas vm.max_map_count is too low\"错误。\n\n解决方案如下：\n\n1. 编辑 /etc/sysctl.conf 文件，追加以下内容：\n\n   ````shell\n   vm.max_map_count=262144\n   ```\n   \n   保存文件后，执行以下命令使修改生效：\n\n   ```shell\n   sysctl -p\n   ```\n\n   最后重新启动Elasticsearch服务即可成功解决问题 [[1]](https://blog.csdn.net/BigData_Mining/article/details/108927120)。\n\n请注意，如果您是在Docker容器中部署Elasticsearch，您需要在宿主机上修改该参数，而不是在容器镜像中修改。\n\n希望这些信息对您有所帮助！\n\n---\nLearn more:\n\n1. [docker下安装elasticSearch报错：[1]: max virtual memory areas vm.max_map_count [65530] is too low-CSDN博客](https://blog.csdn.net/BigData_Mining/article/details/108927120)\n2. [elasticsearch启动报错max virtual memory areas解决办法 - minseo - 博客园](https://www.cnblogs.com/minseo/p/12978561.html)\n3. [草履虫也能看懂的ELK搭建流程 - 真正的大英雄 - 博客园](https://www.cnblogs.com/zhangdali/p/15671538.html)\n","slug":"docker/app/devs/data/elasticsearch/v1/v1","published":1,"date":"2025-02-23T07:43:31.066Z","updated":"2025-02-23T07:43:31.067Z","__permalink":"/docker/app/devs/data/elasticsearch/v1/v1/","comments":1,"photos":[],"_id":"cm7k5rwbe00b7mswsauhn66sw","content":"<h1 id=\"文档记录\"><a href=\"#文档记录\" class=\"headerlink\" title=\"文档记录\"></a>文档记录</h1><h2 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h2><ul>\n<li>es使用docker部署报错</li>\n</ul>\n<p>es使用docker部署报错 max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>\n<p>怎么解决</p>\n<hr>\n<p>您好！根据您的搜索结果，我为您提供以下解决方案来解决Elasticsearch使用Docker部署时出现”max virtual memory areas vm.max_map_count is too low”错误。</p>\n<p>解决方案如下：</p>\n<ol>\n<li><p>编辑 &#x2F;etc&#x2F;sysctl.conf 文件，追加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n\n<p>保存文件后，执行以下命令使修改生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n\n<p>最后重新启动Elasticsearch服务即可成功解决问题 <a href=\"https://blog.csdn.net/BigData_Mining/article/details/108927120\">[1]</a>。</p>\n</li>\n</ol>\n<p>请注意，如果您是在Docker容器中部署Elasticsearch，您需要在宿主机上修改该参数，而不是在容器镜像中修改。</p>\n<p>希望这些信息对您有所帮助！</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/BigData_Mining/article/details/108927120\">docker下安装elasticSearch报错：[1]: max virtual memory areas vm.max_map_count [65530] is too low-CSDN博客</a></li>\n<li><a href=\"https://www.cnblogs.com/minseo/p/12978561.html\">elasticsearch启动报错max virtual memory areas解决办法 - minseo - 博客园</a></li>\n<li><a href=\"https://www.cnblogs.com/zhangdali/p/15671538.html\">草履虫也能看懂的ELK搭建流程 - 真正的大英雄 - 博客园</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"文档记录\"><a href=\"#文档记录\" class=\"headerlink\" title=\"文档记录\"></a>文档记录</h1><h2 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h2><ul>\n<li>es使用docker部署报错</li>\n</ul>\n<p>es使用docker部署报错 max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>\n<p>怎么解决</p>\n<hr>\n<p>您好！根据您的搜索结果，我为您提供以下解决方案来解决Elasticsearch使用Docker部署时出现”max virtual memory areas vm.max_map_count is too low”错误。</p>\n<p>解决方案如下：</p>\n<ol>\n<li><p>编辑 &#x2F;etc&#x2F;sysctl.conf 文件，追加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n\n<p>保存文件后，执行以下命令使修改生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n\n<p>最后重新启动Elasticsearch服务即可成功解决问题 <a href=\"https://blog.csdn.net/BigData_Mining/article/details/108927120\">[1]</a>。</p>\n</li>\n</ol>\n<p>请注意，如果您是在Docker容器中部署Elasticsearch，您需要在宿主机上修改该参数，而不是在容器镜像中修改。</p>\n<p>希望这些信息对您有所帮助！</p>\n<hr>\n<p>Learn more:</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/BigData_Mining/article/details/108927120\">docker下安装elasticSearch报错：[1]: max virtual memory areas vm.max_map_count [65530] is too low-CSDN博客</a></li>\n<li><a href=\"https://www.cnblogs.com/minseo/p/12978561.html\">elasticsearch启动报错max virtual memory areas解决办法 - minseo - 博客园</a></li>\n<li><a href=\"https://www.cnblogs.com/zhangdali/p/15671538.html\">草履虫也能看懂的ELK搭建流程 - 真正的大英雄 - 博客园</a></li>\n</ol>\n"},{"layout":"default","title":"doc","nav_order":16,"description":"配置docker镜像私服hosts```shellwhereis hostsvi /etc/hosts","parent":"Doc","has_children":false,"grand_parent":"Docker Registry","_content":"\n## 配置docker镜像私服hosts\n```shell\nwhereis hosts\nvi /etc/hosts\n\n10.0.0.73 registry.docker.com\n```\n## 配置不安全域名访问\n```shell\nvi /etc/docker/daemon.json\n\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\"\n  ],\n  \"insecure-registries\": [\n    \"registry.docker.com:5000\"   （ip 为server端的ip）\n  ]\n}\n# 重启服务\nsystemctl daemon-reload\nsystemctl restart docker\n```\n## 上传镜像到私服\n```shell\n## 拉取一个镜像\ndocker pull nginx\n \n## 查看全部镜像\ndocker images\n \n## 标记本地镜像并指向目标仓库（ip:port/image_name:tag，该格式为标记版本号）\ndocker tag nginx registry.docker.com:5000/nginx\n \n## 提交镜像到仓库\ndocker push registry.docker.com:5000/nginx\n\n## 查看全部镜像\ncurl -XGET http://registry.docker.com:5000/v2/_catalog\n\n## 查看指定镜像 \ncurl -XGET http://registry.docker.com:5000/v2/nginx/tags/list\n```\n","source":"_posts/docker/app/devs/data/docker_registry/doc/doc.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: 配置docker镜像私服hosts```shellwhereis hostsvi /etc/hosts\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/data/docker_registry/doc/doc/\"\ngrand_parent: Docker Registry\n---\n\n## 配置docker镜像私服hosts\n```shell\nwhereis hosts\nvi /etc/hosts\n\n10.0.0.73 registry.docker.com\n```\n## 配置不安全域名访问\n```shell\nvi /etc/docker/daemon.json\n\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\"\n  ],\n  \"insecure-registries\": [\n    \"registry.docker.com:5000\"   （ip 为server端的ip）\n  ]\n}\n# 重启服务\nsystemctl daemon-reload\nsystemctl restart docker\n```\n## 上传镜像到私服\n```shell\n## 拉取一个镜像\ndocker pull nginx\n \n## 查看全部镜像\ndocker images\n \n## 标记本地镜像并指向目标仓库（ip:port/image_name:tag，该格式为标记版本号）\ndocker tag nginx registry.docker.com:5000/nginx\n \n## 提交镜像到仓库\ndocker push registry.docker.com:5000/nginx\n\n## 查看全部镜像\ncurl -XGET http://registry.docker.com:5000/v2/_catalog\n\n## 查看指定镜像 \ncurl -XGET http://registry.docker.com:5000/v2/nginx/tags/list\n```\n","slug":"docker/app/devs/data/docker_registry/doc/doc","published":1,"date":"2025-02-23T07:43:31.020Z","updated":"2025-02-23T07:43:31.020Z","__permalink":"/docker/app/devs/data/docker_registry/doc/doc/","comments":1,"photos":[],"_id":"cm7k5rwbe00b8msws4zwyayqh","content":"<h2 id=\"配置docker镜像私服hosts\"><a href=\"#配置docker镜像私服hosts\" class=\"headerlink\" title=\"配置docker镜像私服hosts\"></a>配置docker镜像私服hosts</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis hosts</span><br><span class=\"line\">vi /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.0.73 registry.docker.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置不安全域名访问\"><a href=\"#配置不安全域名访问\" class=\"headerlink\" title=\"配置不安全域名访问\"></a>配置不安全域名访问</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    &quot;https://registry.docker-cn.com&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;insecure-registries&quot;: [</span><br><span class=\"line\">    &quot;registry.docker.com:5000&quot;   （ip 为server端的ip）</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启服务</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"上传镜像到私服\"><a href=\"#上传镜像到私服\" class=\"headerlink\" title=\"上传镜像到私服\"></a>上传镜像到私服</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 拉取一个镜像</span></span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看全部镜像</span></span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 标记本地镜像并指向目标仓库（ip:port/image_name:tag，该格式为标记版本号）</span></span></span><br><span class=\"line\">docker tag nginx registry.docker.com:5000/nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 提交镜像到仓库</span></span></span><br><span class=\"line\">docker push registry.docker.com:5000/nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看全部镜像</span></span></span><br><span class=\"line\">curl -XGET http://registry.docker.com:5000/v2/_catalog</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看指定镜像</span></span> </span><br><span class=\"line\">curl -XGET http://registry.docker.com:5000/v2/nginx/tags/list</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"配置docker镜像私服hosts\"><a href=\"#配置docker镜像私服hosts\" class=\"headerlink\" title=\"配置docker镜像私服hosts\"></a>配置docker镜像私服hosts</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis hosts</span><br><span class=\"line\">vi /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.0.73 registry.docker.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置不安全域名访问\"><a href=\"#配置不安全域名访问\" class=\"headerlink\" title=\"配置不安全域名访问\"></a>配置不安全域名访问</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    &quot;https://registry.docker-cn.com&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;insecure-registries&quot;: [</span><br><span class=\"line\">    &quot;registry.docker.com:5000&quot;   （ip 为server端的ip）</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启服务</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"上传镜像到私服\"><a href=\"#上传镜像到私服\" class=\"headerlink\" title=\"上传镜像到私服\"></a>上传镜像到私服</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 拉取一个镜像</span></span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看全部镜像</span></span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 标记本地镜像并指向目标仓库（ip:port/image_name:tag，该格式为标记版本号）</span></span></span><br><span class=\"line\">docker tag nginx registry.docker.com:5000/nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 提交镜像到仓库</span></span></span><br><span class=\"line\">docker push registry.docker.com:5000/nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看全部镜像</span></span></span><br><span class=\"line\">curl -XGET http://registry.docker.com:5000/v2/_catalog</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看指定镜像</span></span> </span><br><span class=\"line\">curl -XGET http://registry.docker.com:5000/v2/nginx/tags/list</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Doc","nav_order":6,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/app/devs/data/docker_registry/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 6\nhas_children: true\nparent: Doc\npermalink: \"/docker/app/devs/data/docker_registry/doc/\"\n---\n\n# Doc\n","slug":"docker/app/devs/data/docker_registry/doc/index","published":1,"date":"2025-02-23T07:43:31.020Z","updated":"2025-02-23T07:43:31.020Z","__permalink":"/docker/app/devs/data/docker_registry/doc/","comments":1,"photos":[],"_id":"cm7k5rwbe00b9mswseajb6mok","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"Doc","nav_order":6,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/app/devs/data/hadoop/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 6\nhas_children: true\nparent: Doc\npermalink: \"/docker/app/devs/data/hadoop/doc/\"\n---\n\n# Doc\n","slug":"docker/app/devs/data/hadoop/doc/index","published":1,"date":"2025-02-23T07:43:31.056Z","updated":"2025-02-23T07:43:31.057Z","__permalink":"/docker/app/devs/data/hadoop/doc/","comments":1,"photos":[],"_id":"cm7k5rwbe00bamsws867gh95m","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"dec","nav_order":16,"description":"docker-compose部署hadoop集群","parent":"Doc","has_children":false,"grand_parent":"Hadoop","_content":"\n# docker-compose部署hadoop集群\n\n## 创建网络\n\n```shell\ndocker network create --driver overlay --attachable --subnet 10.11.0.0/24 sg-hadoop\n```\n\n## 创建标签\n\n```shell\ndocker node update --label-add hadoop-datanode=datanode sangang\n```\n\n---\n\n## 部署启动与查看\n\n### docker stack部署启动\n\n```shell\ndocker stack deploy -c docker-compose.yml hadoop\n```\n\n### 查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\n\n```shell\nwatch -n 1 docker stack services hadoop\n```\n\n### 查看服务所在node节点\n\n```shell\ndocker stack ps hadoop\n```\n\n### 停止删除hadoop服务\n\n```shell\ndocker stack rm hadoop\n```\n","source":"_posts/docker/app/devs/data/hadoop/doc/dec.md","raw":"---\nlayout: default\ntitle: dec\nnav_order: 16\ndescription: docker-compose部署hadoop集群\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/data/hadoop/doc/dec/\"\ngrand_parent: Hadoop\n---\n\n# docker-compose部署hadoop集群\n\n## 创建网络\n\n```shell\ndocker network create --driver overlay --attachable --subnet 10.11.0.0/24 sg-hadoop\n```\n\n## 创建标签\n\n```shell\ndocker node update --label-add hadoop-datanode=datanode sangang\n```\n\n---\n\n## 部署启动与查看\n\n### docker stack部署启动\n\n```shell\ndocker stack deploy -c docker-compose.yml hadoop\n```\n\n### 查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\n\n```shell\nwatch -n 1 docker stack services hadoop\n```\n\n### 查看服务所在node节点\n\n```shell\ndocker stack ps hadoop\n```\n\n### 停止删除hadoop服务\n\n```shell\ndocker stack rm hadoop\n```\n","slug":"docker/app/devs/data/hadoop/doc/dec","published":1,"date":"2025-02-23T07:43:31.057Z","updated":"2025-02-23T07:43:31.057Z","__permalink":"/docker/app/devs/data/hadoop/doc/dec/","comments":1,"photos":[],"_id":"cm7k5rwbe00bbmsws27gecwsx","content":"<h1 id=\"docker-compose部署hadoop集群\"><a href=\"#docker-compose部署hadoop集群\" class=\"headerlink\" title=\"docker-compose部署hadoop集群\"></a>docker-compose部署hadoop集群</h1><h2 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create --driver overlay --attachable --subnet 10.11.0.0/24 sg-hadoop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-add hadoop-datanode=datanode sangang</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"部署启动与查看\"><a href=\"#部署启动与查看\" class=\"headerlink\" title=\"部署启动与查看\"></a>部署启动与查看</h2><h3 id=\"docker-stack部署启动\"><a href=\"#docker-stack部署启动\" class=\"headerlink\" title=\"docker stack部署启动\"></a>docker stack部署启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml hadoop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\"><a href=\"#查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\" class=\"headerlink\" title=\"查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\"></a>查看服务状态，一秒一次，启动之后可通过IP：端口访问界面</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch -n 1 docker stack services hadoop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务所在node节点\"><a href=\"#查看服务所在node节点\" class=\"headerlink\" title=\"查看服务所在node节点\"></a>查看服务所在node节点</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack ps hadoop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止删除hadoop服务\"><a href=\"#停止删除hadoop服务\" class=\"headerlink\" title=\"停止删除hadoop服务\"></a>停止删除hadoop服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack rm hadoop</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"docker-compose部署hadoop集群\"><a href=\"#docker-compose部署hadoop集群\" class=\"headerlink\" title=\"docker-compose部署hadoop集群\"></a>docker-compose部署hadoop集群</h1><h2 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create --driver overlay --attachable --subnet 10.11.0.0/24 sg-hadoop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --label-add hadoop-datanode=datanode sangang</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"部署启动与查看\"><a href=\"#部署启动与查看\" class=\"headerlink\" title=\"部署启动与查看\"></a>部署启动与查看</h2><h3 id=\"docker-stack部署启动\"><a href=\"#docker-stack部署启动\" class=\"headerlink\" title=\"docker stack部署启动\"></a>docker stack部署启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml hadoop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\"><a href=\"#查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\" class=\"headerlink\" title=\"查看服务状态，一秒一次，启动之后可通过IP：端口访问界面\"></a>查看服务状态，一秒一次，启动之后可通过IP：端口访问界面</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch -n 1 docker stack services hadoop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务所在node节点\"><a href=\"#查看服务所在node节点\" class=\"headerlink\" title=\"查看服务所在node节点\"></a>查看服务所在node节点</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack ps hadoop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止删除hadoop服务\"><a href=\"#停止删除hadoop服务\" class=\"headerlink\" title=\"停止删除hadoop服务\"></a>停止删除hadoop服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack rm hadoop</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":16,"description":"mysql ndb cluster相关文档","parent":"Mysql Ndb Cluster","has_children":false,"grand_parent":"Mysql","_content":"\n# mysql ndb cluster相关文档\n\n## 相关链接\n\n- [MySQL NDB Cluster使用docker compose一键部署](https://blog.csdn.net/User287/article/details/130110900)\n  \n","source":"_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/MySQL_NDB_Cluster.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: mysql ndb cluster相关文档\nparent: Mysql Ndb Cluster\nhas_children: false\npermalink: \"/docker/app/devs/data/mysql/mysql_ndb_cluster/mysql_ndb_cluster/\"\ngrand_parent: Mysql\n---\n\n# mysql ndb cluster相关文档\n\n## 相关链接\n\n- [MySQL NDB Cluster使用docker compose一键部署](https://blog.csdn.net/User287/article/details/130110900)\n  \n","slug":"docker/app/devs/data/mysql/MySQL_NDB_Cluster/MySQL_NDB_Cluster","published":1,"date":"2025-02-23T07:43:31.063Z","updated":"2025-02-23T07:43:31.063Z","__permalink":"/docker/app/devs/data/mysql/mysql_ndb_cluster/mysql_ndb_cluster/","comments":1,"photos":[],"_id":"cm7k5rwbe00bcmswsbwbueslp","content":"<h1 id=\"mysql-ndb-cluster相关文档\"><a href=\"#mysql-ndb-cluster相关文档\" class=\"headerlink\" title=\"mysql ndb cluster相关文档\"></a>mysql ndb cluster相关文档</h1><h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/User287/article/details/130110900\">MySQL NDB Cluster使用docker compose一键部署</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"mysql-ndb-cluster相关文档\"><a href=\"#mysql-ndb-cluster相关文档\" class=\"headerlink\" title=\"mysql ndb cluster相关文档\"></a>mysql ndb cluster相关文档</h1><h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/User287/article/details/130110900\">MySQL NDB Cluster使用docker compose一键部署</a></li>\n</ul>\n"},{"layout":"default","title":"Mysql Ndb Cluster","nav_order":6,"has_children":true,"parent":"Mysql Ndb Cluster","_content":"\n# Mysql Ndb Cluster\n","source":"_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/index.md","raw":"---\nlayout: default\ntitle: Mysql Ndb Cluster\nnav_order: 6\nhas_children: true\nparent: Mysql Ndb Cluster\npermalink: \"/docker/app/devs/data/mysql/mysql_ndb_cluster/\"\n---\n\n# Mysql Ndb Cluster\n","slug":"docker/app/devs/data/mysql/MySQL_NDB_Cluster/index","published":1,"date":"2025-02-23T07:43:31.063Z","updated":"2025-02-23T07:43:31.064Z","__permalink":"/docker/app/devs/data/mysql/mysql_ndb_cluster/","comments":1,"photos":[],"_id":"cm7k5rwbe00bdmswsaolofx7e","content":"<h1 id=\"Mysql-Ndb-Cluster\"><a href=\"#Mysql-Ndb-Cluster\" class=\"headerlink\" title=\"Mysql Ndb Cluster\"></a>Mysql Ndb Cluster</h1>","excerpt":"","more":"<h1 id=\"Mysql-Ndb-Cluster\"><a href=\"#Mysql-Ndb-Cluster\" class=\"headerlink\" title=\"Mysql Ndb Cluster\"></a>Mysql Ndb Cluster</h1>"},{"layout":"default","title":"deploy","nav_order":16,"description":"单机部署","parent":"Doc","has_children":false,"grand_parent":"Mysql","_content":"\n## 单机部署\n\n```shell script\ndocker run \\\n-p 3306:3306 --name mymysql  \\\n-v $PWD/conf:/etc/mysql/conf.d  \\\n-v $PWD/logs:/logs  \\\n-v $PWD/data:/var/lib/mysql  \\\n-e MYSQL_ROOT_PASSWORD=123456 -d mysql\n\n# 一次性的\ndocker run -p 3306:3306 --name mymysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql\n```\n\n```text\n-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。\n-v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。\n-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。\n-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。\n-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。\n```\n","source":"_posts/docker/app/devs/data/mysql/doc/deploy.md","raw":"---\nlayout: default\ntitle: deploy\nnav_order: 16\ndescription: 单机部署\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/data/mysql/doc/deploy/\"\ngrand_parent: Mysql\n---\n\n## 单机部署\n\n```shell script\ndocker run \\\n-p 3306:3306 --name mymysql  \\\n-v $PWD/conf:/etc/mysql/conf.d  \\\n-v $PWD/logs:/logs  \\\n-v $PWD/data:/var/lib/mysql  \\\n-e MYSQL_ROOT_PASSWORD=123456 -d mysql\n\n# 一次性的\ndocker run -p 3306:3306 --name mymysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql\n```\n\n```text\n-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。\n-v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。\n-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。\n-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。\n-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。\n```\n","slug":"docker/app/devs/data/mysql/doc/deploy","published":1,"date":"2025-02-23T07:43:31.059Z","updated":"2025-02-23T07:43:31.059Z","__permalink":"/docker/app/devs/data/mysql/doc/deploy/","comments":1,"photos":[],"_id":"cm7k5rwbe00bemswsd7i21a7g","content":"<h2 id=\"单机部署\"><a href=\"#单机部署\" class=\"headerlink\" title=\"单机部署\"></a>单机部署</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">-p 3306:3306 --name mymysql  \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql/conf.d  \\</span><br><span class=\"line\">-v $PWD/logs:/logs  \\</span><br><span class=\"line\">-v $PWD/data:/var/lib/mysql  \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">一次性的</span></span><br><span class=\"line\">docker run -p 3306:3306 --name mymysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。</span><br><span class=\"line\">-v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。</span><br><span class=\"line\">-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。</span><br><span class=\"line\">-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"单机部署\"><a href=\"#单机部署\" class=\"headerlink\" title=\"单机部署\"></a>单机部署</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">-p 3306:3306 --name mymysql  \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql/conf.d  \\</span><br><span class=\"line\">-v $PWD/logs:/logs  \\</span><br><span class=\"line\">-v $PWD/data:/var/lib/mysql  \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">一次性的</span></span><br><span class=\"line\">docker run -p 3306:3306 --name mymysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。</span><br><span class=\"line\">-v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。</span><br><span class=\"line\">-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。</span><br><span class=\"line\">-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":16,"description":"mysql相关记录","parent":"Doc","has_children":false,"grand_parent":"Mysql","_content":"\n# mysql相关记录\n\n## 连接数据库\n\n```bash\n# 方式一：直接在宿主机中执行命令\nmysql -h $hostname -u $username -p\n```\n\n## 备份数据(包含表数据和ddl结构)\n\n```bash\n# 方式一：进入容器中执行命令，将结果写入到控制台中\nmysqldump -h $hostname -u $username -p $database $table\n\n# 方式二：宿主机中执行命令，并将结果写入到指定文件中\necho \"$password\" | docker exec -i $container_id mysqldump -h $hostname -u $username -p $database $table > $table.sql\n\n# 方式三：运行一次性容器执行命令，并将结果写入到指定文件中\necho \"$password\" | docker run -i --rm mysql:5.7 mysqldump -h $hostname -u $username -p $database $table > $table.sql\n```\n\n```bash\n# 导出整个库\necho \"$password\" | docker run -i --rm mysql:5.7 mysqldump -h $hostname -u $username -p $database > ./backup/$database.sql\n\n```\n\n## 导出数据(指定sql)\n\n```bash\n# 方式一: 进入容器中执行命令，将结果写入到控制台中\nmysql -h <host> -u <username> -p<password> -e \"<sql_query>\" <database_name> > <output_file>\n\n# 方式二: 宿主机中执行命令，并将结果写入到指定文件中\ndocker exec -i <containerId> mysql -h <host> -u <username> -p<password> -e \"<sql_query>\" <database_name> > <output_file>\n\n# 方式三：运行一次性容器执行命令，并将结果写入到指定文件中\ndocker run -i --rm mysql:5.7 mysql -h <host> -u <username> -p<password> -e \"<sql_query>\" <database_name> > <output_file>\n\n# 方式四: 用方式二的命令，导出数据到csv文件中\ndocker exec -i <containerId> mysql -h <host> -u <username> -p<password> -e \"<sql_query>\" <database_name> | sed 's/\\t/\",\"/g;s/^/\"/;s/$/\"/' > <output_file>\n\n\n```\n","source":"_posts/docker/app/devs/data/mysql/doc/doc.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: mysql相关记录\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/data/mysql/doc/doc/\"\ngrand_parent: Mysql\n---\n\n# mysql相关记录\n\n## 连接数据库\n\n```bash\n# 方式一：直接在宿主机中执行命令\nmysql -h $hostname -u $username -p\n```\n\n## 备份数据(包含表数据和ddl结构)\n\n```bash\n# 方式一：进入容器中执行命令，将结果写入到控制台中\nmysqldump -h $hostname -u $username -p $database $table\n\n# 方式二：宿主机中执行命令，并将结果写入到指定文件中\necho \"$password\" | docker exec -i $container_id mysqldump -h $hostname -u $username -p $database $table > $table.sql\n\n# 方式三：运行一次性容器执行命令，并将结果写入到指定文件中\necho \"$password\" | docker run -i --rm mysql:5.7 mysqldump -h $hostname -u $username -p $database $table > $table.sql\n```\n\n```bash\n# 导出整个库\necho \"$password\" | docker run -i --rm mysql:5.7 mysqldump -h $hostname -u $username -p $database > ./backup/$database.sql\n\n```\n\n## 导出数据(指定sql)\n\n```bash\n# 方式一: 进入容器中执行命令，将结果写入到控制台中\nmysql -h <host> -u <username> -p<password> -e \"<sql_query>\" <database_name> > <output_file>\n\n# 方式二: 宿主机中执行命令，并将结果写入到指定文件中\ndocker exec -i <containerId> mysql -h <host> -u <username> -p<password> -e \"<sql_query>\" <database_name> > <output_file>\n\n# 方式三：运行一次性容器执行命令，并将结果写入到指定文件中\ndocker run -i --rm mysql:5.7 mysql -h <host> -u <username> -p<password> -e \"<sql_query>\" <database_name> > <output_file>\n\n# 方式四: 用方式二的命令，导出数据到csv文件中\ndocker exec -i <containerId> mysql -h <host> -u <username> -p<password> -e \"<sql_query>\" <database_name> | sed 's/\\t/\",\"/g;s/^/\"/;s/$/\"/' > <output_file>\n\n\n```\n","slug":"docker/app/devs/data/mysql/doc/doc","published":1,"date":"2025-02-23T07:43:31.058Z","updated":"2025-02-23T07:43:31.058Z","__permalink":"/docker/app/devs/data/mysql/doc/doc/","comments":1,"photos":[],"_id":"cm7k5rwbf00bfmsws4jlcbqok","content":"<h1 id=\"mysql相关记录\"><a href=\"#mysql相关记录\" class=\"headerlink\" title=\"mysql相关记录\"></a>mysql相关记录</h1><h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：直接在宿主机中执行命令</span></span><br><span class=\"line\">mysql -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备份数据-包含表数据和ddl结构\"><a href=\"#备份数据-包含表数据和ddl结构\" class=\"headerlink\" title=\"备份数据(包含表数据和ddl结构)\"></a>备份数据(包含表数据和ddl结构)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：进入容器中执行命令，将结果写入到控制台中</span></span><br><span class=\"line\">mysqldump -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p <span class=\"variable\">$database</span> <span class=\"variable\">$table</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二：宿主机中执行命令，并将结果写入到指定文件中</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$password</span>&quot;</span> | docker <span class=\"built_in\">exec</span> -i <span class=\"variable\">$container_id</span> mysqldump -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p <span class=\"variable\">$database</span> <span class=\"variable\">$table</span> &gt; <span class=\"variable\">$table</span>.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式三：运行一次性容器执行命令，并将结果写入到指定文件中</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$password</span>&quot;</span> | docker run -i --<span class=\"built_in\">rm</span> mysql:5.7 mysqldump -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p <span class=\"variable\">$database</span> <span class=\"variable\">$table</span> &gt; <span class=\"variable\">$table</span>.sql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出整个库</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$password</span>&quot;</span> | docker run -i --<span class=\"built_in\">rm</span> mysql:5.7 mysqldump -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p <span class=\"variable\">$database</span> &gt; ./backup/<span class=\"variable\">$database</span>.sql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导出数据-指定sql\"><a href=\"#导出数据-指定sql\" class=\"headerlink\" title=\"导出数据(指定sql)\"></a>导出数据(指定sql)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一: 进入容器中执行命令，将结果写入到控制台中</span></span><br><span class=\"line\">mysql -h &lt;host&gt; -u &lt;username&gt; -p&lt;password&gt; -e <span class=\"string\">&quot;&lt;sql_query&gt;&quot;</span> &lt;database_name&gt; &gt; &lt;output_file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二: 宿主机中执行命令，并将结果写入到指定文件中</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -i &lt;containerId&gt; mysql -h &lt;host&gt; -u &lt;username&gt; -p&lt;password&gt; -e <span class=\"string\">&quot;&lt;sql_query&gt;&quot;</span> &lt;database_name&gt; &gt; &lt;output_file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式三：运行一次性容器执行命令，并将结果写入到指定文件中</span></span><br><span class=\"line\">docker run -i --<span class=\"built_in\">rm</span> mysql:5.7 mysql -h &lt;host&gt; -u &lt;username&gt; -p&lt;password&gt; -e <span class=\"string\">&quot;&lt;sql_query&gt;&quot;</span> &lt;database_name&gt; &gt; &lt;output_file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式四: 用方式二的命令，导出数据到csv文件中</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -i &lt;containerId&gt; mysql -h &lt;host&gt; -u &lt;username&gt; -p&lt;password&gt; -e <span class=\"string\">&quot;&lt;sql_query&gt;&quot;</span> &lt;database_name&gt; | sed <span class=\"string\">&#x27;s/\\t/&quot;,&quot;/g;s/^/&quot;/;s/$/&quot;/&#x27;</span> &gt; &lt;output_file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"mysql相关记录\"><a href=\"#mysql相关记录\" class=\"headerlink\" title=\"mysql相关记录\"></a>mysql相关记录</h1><h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：直接在宿主机中执行命令</span></span><br><span class=\"line\">mysql -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备份数据-包含表数据和ddl结构\"><a href=\"#备份数据-包含表数据和ddl结构\" class=\"headerlink\" title=\"备份数据(包含表数据和ddl结构)\"></a>备份数据(包含表数据和ddl结构)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：进入容器中执行命令，将结果写入到控制台中</span></span><br><span class=\"line\">mysqldump -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p <span class=\"variable\">$database</span> <span class=\"variable\">$table</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二：宿主机中执行命令，并将结果写入到指定文件中</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$password</span>&quot;</span> | docker <span class=\"built_in\">exec</span> -i <span class=\"variable\">$container_id</span> mysqldump -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p <span class=\"variable\">$database</span> <span class=\"variable\">$table</span> &gt; <span class=\"variable\">$table</span>.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式三：运行一次性容器执行命令，并将结果写入到指定文件中</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$password</span>&quot;</span> | docker run -i --<span class=\"built_in\">rm</span> mysql:5.7 mysqldump -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p <span class=\"variable\">$database</span> <span class=\"variable\">$table</span> &gt; <span class=\"variable\">$table</span>.sql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出整个库</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$password</span>&quot;</span> | docker run -i --<span class=\"built_in\">rm</span> mysql:5.7 mysqldump -h <span class=\"variable\">$hostname</span> -u <span class=\"variable\">$username</span> -p <span class=\"variable\">$database</span> &gt; ./backup/<span class=\"variable\">$database</span>.sql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导出数据-指定sql\"><a href=\"#导出数据-指定sql\" class=\"headerlink\" title=\"导出数据(指定sql)\"></a>导出数据(指定sql)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一: 进入容器中执行命令，将结果写入到控制台中</span></span><br><span class=\"line\">mysql -h &lt;host&gt; -u &lt;username&gt; -p&lt;password&gt; -e <span class=\"string\">&quot;&lt;sql_query&gt;&quot;</span> &lt;database_name&gt; &gt; &lt;output_file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二: 宿主机中执行命令，并将结果写入到指定文件中</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -i &lt;containerId&gt; mysql -h &lt;host&gt; -u &lt;username&gt; -p&lt;password&gt; -e <span class=\"string\">&quot;&lt;sql_query&gt;&quot;</span> &lt;database_name&gt; &gt; &lt;output_file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式三：运行一次性容器执行命令，并将结果写入到指定文件中</span></span><br><span class=\"line\">docker run -i --<span class=\"built_in\">rm</span> mysql:5.7 mysql -h &lt;host&gt; -u &lt;username&gt; -p&lt;password&gt; -e <span class=\"string\">&quot;&lt;sql_query&gt;&quot;</span> &lt;database_name&gt; &gt; &lt;output_file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式四: 用方式二的命令，导出数据到csv文件中</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -i &lt;containerId&gt; mysql -h &lt;host&gt; -u &lt;username&gt; -p&lt;password&gt; -e <span class=\"string\">&quot;&lt;sql_query&gt;&quot;</span> &lt;database_name&gt; | sed <span class=\"string\">&#x27;s/\\t/&quot;,&quot;/g;s/^/&quot;/;s/$/&quot;/&#x27;</span> &gt; &lt;output_file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Doc","nav_order":6,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/app/devs/data/mysql/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 6\nhas_children: true\nparent: Doc\npermalink: \"/docker/app/devs/data/mysql/doc/\"\n---\n\n# Doc\n","slug":"docker/app/devs/data/mysql/doc/index","published":1,"date":"2025-02-23T07:43:31.059Z","updated":"2025-02-23T07:43:31.060Z","__permalink":"/docker/app/devs/data/mysql/doc/","comments":1,"photos":[],"_id":"cm7k5rwbf00bgmswsh0fm9n17","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"部署记录","parent":"Cluster","has_children":false,"grand_parent":"Redis","_content":"\n# 部署记录\n\n## todo\n\n- 测试这个配置的IP调整为服务名，看看是否可行\n  - 相关配置文件[redis.yml](./simple/v2/redis.yml)\n\n```shell\necho 'cluster-announce-ip 10.0.16.27' >> redis.conf  &&\n# echo 'cluster-announce-ip redis1' >> redis.conf  &&\n```\n","source":"_posts/docker/app/devs/data/redis/cluster/cluster.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: 部署记录\nparent: Cluster\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/cluster/cluster/\"\ngrand_parent: Redis\n---\n\n# 部署记录\n\n## todo\n\n- 测试这个配置的IP调整为服务名，看看是否可行\n  - 相关配置文件[redis.yml](./simple/v2/redis.yml)\n\n```shell\necho 'cluster-announce-ip 10.0.16.27' >> redis.conf  &&\n# echo 'cluster-announce-ip redis1' >> redis.conf  &&\n```\n","slug":"docker/app/devs/data/redis/cluster/cluster","published":1,"date":"2025-02-23T07:43:31.023Z","updated":"2025-02-23T07:43:31.023Z","__permalink":"/docker/app/devs/data/redis/cluster/cluster/","comments":1,"photos":[],"_id":"cm7k5rwbf00bhmswsbv8oab60","content":"<h1 id=\"部署记录\"><a href=\"#部署记录\" class=\"headerlink\" title=\"部署记录\"></a>部署记录</h1><h2 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h2><ul>\n<li>测试这个配置的IP调整为服务名，看看是否可行<ul>\n<li>相关配置文件<a href=\"./simple/v2/redis.yml\">redis.yml</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;cluster-announce-ip 10.0.16.27&#x27; &gt;&gt; redis.conf  &amp;&amp;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;cluster-announce-ip redis1&#x27;</span> &gt;&gt; redis.conf  &amp;&amp;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"部署记录\"><a href=\"#部署记录\" class=\"headerlink\" title=\"部署记录\"></a>部署记录</h1><h2 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h2><ul>\n<li>测试这个配置的IP调整为服务名，看看是否可行<ul>\n<li>相关配置文件<a href=\"./simple/v2/redis.yml\">redis.yml</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;cluster-announce-ip 10.0.16.27&#x27; &gt;&gt; redis.conf  &amp;&amp;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;cluster-announce-ip redis1&#x27;</span> &gt;&gt; redis.conf  &amp;&amp;</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Cluster","nav_order":6,"has_children":true,"parent":"Cluster","_content":"\n# Cluster\n","source":"_posts/docker/app/devs/data/redis/cluster/index.md","raw":"---\nlayout: default\ntitle: Cluster\nnav_order: 6\nhas_children: true\nparent: Cluster\npermalink: \"/docker/app/devs/data/redis/cluster/\"\n---\n\n# Cluster\n","slug":"docker/app/devs/data/redis/cluster/index","published":1,"date":"2025-02-23T07:43:31.029Z","updated":"2025-02-23T07:43:31.029Z","__permalink":"/docker/app/devs/data/redis/cluster/","comments":1,"photos":[],"_id":"cm7k5rwbf00bimsws9ddmb6x7","content":"<h1 id=\"Cluster\"><a href=\"#Cluster\" class=\"headerlink\" title=\"Cluster\"></a>Cluster</h1>","excerpt":"","more":"<h1 id=\"Cluster\"><a href=\"#Cluster\" class=\"headerlink\" title=\"Cluster\"></a>Cluster</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"redis 官方客户端","parent":"Client","has_children":false,"grand_parent":"Redis","_content":"\n# redis 官方客户端\n\n```shell\n# 使用docker部署客户端页面\ndocker run -v redisinsight:/db -p 8001:8001 redislabs/redisinsight:latest\n# ps: 也许可能起不起来，但没关系，可以尝试手动起下，也许就可以了[docker start ${containerId}]\n```\n","source":"_posts/docker/app/devs/data/redis/client/client.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: redis 官方客户端\nparent: Client\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/client/client/\"\ngrand_parent: Redis\n---\n\n# redis 官方客户端\n\n```shell\n# 使用docker部署客户端页面\ndocker run -v redisinsight:/db -p 8001:8001 redislabs/redisinsight:latest\n# ps: 也许可能起不起来，但没关系，可以尝试手动起下，也许就可以了[docker start ${containerId}]\n```\n","slug":"docker/app/devs/data/redis/client/client","published":1,"date":"2025-02-23T07:43:31.040Z","updated":"2025-02-23T07:43:31.040Z","__permalink":"/docker/app/devs/data/redis/client/client/","comments":1,"photos":[],"_id":"cm7k5rwbf00bjmsws7c542j6n","content":"<h1 id=\"redis-官方客户端\"><a href=\"#redis-官方客户端\" class=\"headerlink\" title=\"redis 官方客户端\"></a>redis 官方客户端</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用docker部署客户端页面</span></span><br><span class=\"line\">docker run -v redisinsight:/db -p 8001:8001 redislabs/redisinsight:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ps: 也许可能起不起来，但没关系，可以尝试手动起下，也许就可以了[docker start <span class=\"variable\">$&#123;containerId&#125;</span>]</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"redis-官方客户端\"><a href=\"#redis-官方客户端\" class=\"headerlink\" title=\"redis 官方客户端\"></a>redis 官方客户端</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用docker部署客户端页面</span></span><br><span class=\"line\">docker run -v redisinsight:/db -p 8001:8001 redislabs/redisinsight:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ps: 也许可能起不起来，但没关系，可以尝试手动起下，也许就可以了[docker start <span class=\"variable\">$&#123;containerId&#125;</span>]</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Client","nav_order":6,"has_children":true,"parent":"Client","_content":"\n# Client\n","source":"_posts/docker/app/devs/data/redis/client/index.md","raw":"---\nlayout: default\ntitle: Client\nnav_order: 6\nhas_children: true\nparent: Client\npermalink: \"/docker/app/devs/data/redis/client/\"\n---\n\n# Client\n","slug":"docker/app/devs/data/redis/client/index","published":1,"date":"2025-02-23T07:43:31.039Z","updated":"2025-02-23T07:43:31.040Z","__permalink":"/docker/app/devs/data/redis/client/","comments":1,"photos":[],"_id":"cm7k5rwbf00bkmswscxx40xxi","content":"<h1 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h1>","excerpt":"","more":"<h1 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h1>"},{"layout":"default","title":"deploy-single","nav_order":16,"parent":"Doc","has_children":false,"grand_parent":"Redis","_content":"\n### 单机部署\n```shell script\ndocker run -p 6379:6379 --name redis -v /data/docker/redis/config/redis.conf:/etc/redis/redis.conf -v /data/docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass \"foobared\"\n```\n","source":"_posts/docker/app/devs/data/redis/doc/deploy-single.md","raw":"---\nlayout: default\ntitle: deploy-single\nnav_order: 16\nparent: Doc\npermalink: \"/docker/app/devs/data/redis/doc/deploy-single/\"\nhas_children: false\ngrand_parent: Redis\n---\n\n### 单机部署\n```shell script\ndocker run -p 6379:6379 --name redis -v /data/docker/redis/config/redis.conf:/etc/redis/redis.conf -v /data/docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass \"foobared\"\n```\n","slug":"docker/app/devs/data/redis/doc/deploy-single","published":1,"date":"2025-02-23T07:43:31.038Z","updated":"2025-02-23T07:43:31.038Z","__permalink":"/docker/app/devs/data/redis/doc/deploy-single/","comments":1,"photos":[],"_id":"cm7k5rwbf00blmsws1f3marbo","content":"<h3 id=\"单机部署\"><a href=\"#单机部署\" class=\"headerlink\" title=\"单机部署\"></a>单机部署</h3><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 6379:6379 --name redis -v /data/docker/redis/config/redis.conf:/etc/redis/redis.conf -v /data/docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass &quot;foobared&quot;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"单机部署\"><a href=\"#单机部署\" class=\"headerlink\" title=\"单机部署\"></a>单机部署</h3><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 6379:6379 --name redis -v /data/docker/redis/config/redis.conf:/etc/redis/redis.conf -v /data/docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass &quot;foobared&quot;</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"deploy","nav_order":16,"description":"主redis服务配置```/path/to/redis/config/master.conf 自定义配置```","parent":"Doc","has_children":false,"grand_parent":"Redis","_content":"\n### 主redis服务配置\n```\n/path/to/redis/config/master.conf\n## 自定义配置\n```\n\n### 从redis服务配置\n```\n/path/to/redis/config/slave.conf\n## 自定义配置\nslaveof master 6379\n```\n","source":"_posts/docker/app/devs/data/redis/doc/deploy.md","raw":"---\nlayout: default\ntitle: deploy\nnav_order: 16\ndescription: 主redis服务配置```/path/to/redis/config/master.conf 自定义配置```\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/doc/deploy/\"\ngrand_parent: Redis\n---\n\n### 主redis服务配置\n```\n/path/to/redis/config/master.conf\n## 自定义配置\n```\n\n### 从redis服务配置\n```\n/path/to/redis/config/slave.conf\n## 自定义配置\nslaveof master 6379\n```\n","slug":"docker/app/devs/data/redis/doc/deploy","published":1,"date":"2025-02-23T07:43:31.037Z","updated":"2025-02-23T07:43:31.037Z","__permalink":"/docker/app/devs/data/redis/doc/deploy/","comments":1,"photos":[],"_id":"cm7k5rwbf00bmmswsgwvz8ari","content":"<h3 id=\"主redis服务配置\"><a href=\"#主redis服务配置\" class=\"headerlink\" title=\"主redis服务配置\"></a>主redis服务配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/path/to/redis/config/master.conf</span><br><span class=\"line\">## 自定义配置</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从redis服务配置\"><a href=\"#从redis服务配置\" class=\"headerlink\" title=\"从redis服务配置\"></a>从redis服务配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/path/to/redis/config/slave.conf</span><br><span class=\"line\">## 自定义配置</span><br><span class=\"line\">slaveof master 6379</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"主redis服务配置\"><a href=\"#主redis服务配置\" class=\"headerlink\" title=\"主redis服务配置\"></a>主redis服务配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/path/to/redis/config/master.conf</span><br><span class=\"line\">## 自定义配置</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从redis服务配置\"><a href=\"#从redis服务配置\" class=\"headerlink\" title=\"从redis服务配置\"></a>从redis服务配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/path/to/redis/config/slave.conf</span><br><span class=\"line\">## 自定义配置</span><br><span class=\"line\">slaveof master 6379</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"docker-deploy","nav_order":16,"description":"创建 6 个 Redis 容器```shelldocker create --name redis-node1 --net host -v /data/redis-data/node1:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-1.conf --port 6379","parent":"Doc","has_children":false,"grand_parent":"Redis","_content":"\n## 创建 6 个 Redis 容器\n```shell\ndocker create --name redis-node1 --net host -v /data/redis-data/node1:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-1.conf --port 6379\n\ndocker create --name redis-node2 --net host -v /data/redis-data/node2:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-2.conf --port 6380\n\ndocker create --name redis-node3 --net host -v /data/redis-data/node3:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-3.conf --port 6381\n\ndocker create --name redis-node4 --net host -v /data/redis-data/node4:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-4.conf --port 6382\n\ndocker create --name redis-node5 --net host -v /data/redis-data/node5:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-5.conf --port 6383\n\ndocker create --name redis-node6 --net host -v /data/redis-data/node6:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-6.conf --port 6384\n```\n- 部分参数解释：\n```\n--cluster-enabled：是否启动集群，选值：yes 、no\n--cluster-config-file 配置文件.conf ：指定节点信息，自动生成\n--cluster-node-timeout 毫秒值： 配置节点连接超时时间\n--appendonly：是否开启持久化，选值：yes、no\n```\n## 启动 Redis 容器\n```shell\ndocker start redis-node1 redis-node2 redis-node3 redis-node4 redis-node5 redis-node6\n```\n## 组建 Redis 集群\n```shell\n# 这里以 redis-node1 实例为例\ndocker exec -it redis-node1 /bin/bash\n# 组建集群,10.211.55.4为当前物理机的ip地址\nredis-cli --cluster create 10.211.55.4:6379 10.211.55.4:6380 10.211.55.4:6381 10.211.55.4:6382 10.211.55.4:6383 10.211.55.4:6384 --cluster-replicas 1\n# 创建成功后，通过 redis-cli 查看一下集群节点信息：\nroot@CentOS7:/data# redis-cli\n127.0.0.1:6379> cluster nodes\n```\n## 关于Redis集群搭建\n```shell\n# 手动添加节点\nredis-cli --cluster add-node 10.211.55.4:6383 10.211.55.4:6379  --cluster-slave --cluster-master-id b0c32b1dae9e7b7f7f4b74354c59bdfcaa46f30a\n\nredis-cli --cluster add-node 10.211.55.4:6384 10.211.55.4:6379  --cluster-slave --cluster-master-id 111de8bed5772585cef5280c4b5225ecb15a582e\n```\n","source":"_posts/docker/app/devs/data/redis/doc/docker-deploy.md","raw":"---\nlayout: default\ntitle: docker-deploy\nnav_order: 16\ndescription: 创建 6 个 Redis 容器```shelldocker create --name redis-node1 --net host -v\n  /data/redis-data/node1:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file\n  nodes-node-1.conf --port 6379\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/doc/docker-deploy/\"\ngrand_parent: Redis\n---\n\n## 创建 6 个 Redis 容器\n```shell\ndocker create --name redis-node1 --net host -v /data/redis-data/node1:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-1.conf --port 6379\n\ndocker create --name redis-node2 --net host -v /data/redis-data/node2:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-2.conf --port 6380\n\ndocker create --name redis-node3 --net host -v /data/redis-data/node3:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-3.conf --port 6381\n\ndocker create --name redis-node4 --net host -v /data/redis-data/node4:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-4.conf --port 6382\n\ndocker create --name redis-node5 --net host -v /data/redis-data/node5:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-5.conf --port 6383\n\ndocker create --name redis-node6 --net host -v /data/redis-data/node6:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-6.conf --port 6384\n```\n- 部分参数解释：\n```\n--cluster-enabled：是否启动集群，选值：yes 、no\n--cluster-config-file 配置文件.conf ：指定节点信息，自动生成\n--cluster-node-timeout 毫秒值： 配置节点连接超时时间\n--appendonly：是否开启持久化，选值：yes、no\n```\n## 启动 Redis 容器\n```shell\ndocker start redis-node1 redis-node2 redis-node3 redis-node4 redis-node5 redis-node6\n```\n## 组建 Redis 集群\n```shell\n# 这里以 redis-node1 实例为例\ndocker exec -it redis-node1 /bin/bash\n# 组建集群,10.211.55.4为当前物理机的ip地址\nredis-cli --cluster create 10.211.55.4:6379 10.211.55.4:6380 10.211.55.4:6381 10.211.55.4:6382 10.211.55.4:6383 10.211.55.4:6384 --cluster-replicas 1\n# 创建成功后，通过 redis-cli 查看一下集群节点信息：\nroot@CentOS7:/data# redis-cli\n127.0.0.1:6379> cluster nodes\n```\n## 关于Redis集群搭建\n```shell\n# 手动添加节点\nredis-cli --cluster add-node 10.211.55.4:6383 10.211.55.4:6379  --cluster-slave --cluster-master-id b0c32b1dae9e7b7f7f4b74354c59bdfcaa46f30a\n\nredis-cli --cluster add-node 10.211.55.4:6384 10.211.55.4:6379  --cluster-slave --cluster-master-id 111de8bed5772585cef5280c4b5225ecb15a582e\n```\n","slug":"docker/app/devs/data/redis/doc/docker-deploy","published":1,"date":"2025-02-23T07:43:31.037Z","updated":"2025-02-23T07:43:31.037Z","__permalink":"/docker/app/devs/data/redis/doc/docker-deploy/","comments":1,"photos":[],"_id":"cm7k5rwbf00bnmswsf7bd2omw","content":"<h2 id=\"创建-6-个-Redis-容器\"><a href=\"#创建-6-个-Redis-容器\" class=\"headerlink\" title=\"创建 6 个 Redis 容器\"></a>创建 6 个 Redis 容器</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker create --name redis-node1 --net host -v /data/redis-data/node1:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-1.conf --port 6379</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node2 --net host -v /data/redis-data/node2:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-2.conf --port 6380</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node3 --net host -v /data/redis-data/node3:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-3.conf --port 6381</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node4 --net host -v /data/redis-data/node4:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-4.conf --port 6382</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node5 --net host -v /data/redis-data/node5:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-5.conf --port 6383</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node6 --net host -v /data/redis-data/node6:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-6.conf --port 6384</span><br></pre></td></tr></table></figure>\n<ul>\n<li>部分参数解释：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--cluster-enabled：是否启动集群，选值：yes 、no</span><br><span class=\"line\">--cluster-config-file 配置文件.conf ：指定节点信息，自动生成</span><br><span class=\"line\">--cluster-node-timeout 毫秒值： 配置节点连接超时时间</span><br><span class=\"line\">--appendonly：是否开启持久化，选值：yes、no</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"启动-Redis-容器\"><a href=\"#启动-Redis-容器\" class=\"headerlink\" title=\"启动 Redis 容器\"></a>启动 Redis 容器</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start redis-node1 redis-node2 redis-node3 redis-node4 redis-node5 redis-node6</span><br></pre></td></tr></table></figure>\n<h2 id=\"组建-Redis-集群\"><a href=\"#组建-Redis-集群\" class=\"headerlink\" title=\"组建 Redis 集群\"></a>组建 Redis 集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里以 redis-node1 实例为例</span></span><br><span class=\"line\">docker exec -it redis-node1 /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">组建集群,10.211.55.4为当前物理机的ip地址</span></span><br><span class=\"line\">redis-cli --cluster create 10.211.55.4:6379 10.211.55.4:6380 10.211.55.4:6381 10.211.55.4:6382 10.211.55.4:6383 10.211.55.4:6384 --cluster-replicas 1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建成功后，通过 redis-cli 查看一下集群节点信息：</span></span><br><span class=\"line\">root@CentOS7:/data# redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; cluster nodes</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于Redis集群搭建\"><a href=\"#关于Redis集群搭建\" class=\"headerlink\" title=\"关于Redis集群搭建\"></a>关于Redis集群搭建</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">手动添加节点</span></span><br><span class=\"line\">redis-cli --cluster add-node 10.211.55.4:6383 10.211.55.4:6379  --cluster-slave --cluster-master-id b0c32b1dae9e7b7f7f4b74354c59bdfcaa46f30a</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster add-node 10.211.55.4:6384 10.211.55.4:6379  --cluster-slave --cluster-master-id 111de8bed5772585cef5280c4b5225ecb15a582e</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"创建-6-个-Redis-容器\"><a href=\"#创建-6-个-Redis-容器\" class=\"headerlink\" title=\"创建 6 个 Redis 容器\"></a>创建 6 个 Redis 容器</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker create --name redis-node1 --net host -v /data/redis-data/node1:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-1.conf --port 6379</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node2 --net host -v /data/redis-data/node2:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-2.conf --port 6380</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node3 --net host -v /data/redis-data/node3:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-3.conf --port 6381</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node4 --net host -v /data/redis-data/node4:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-4.conf --port 6382</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node5 --net host -v /data/redis-data/node5:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-5.conf --port 6383</span><br><span class=\"line\"></span><br><span class=\"line\">docker create --name redis-node6 --net host -v /data/redis-data/node6:/data redis:5.0.5 --cluster-enabled yes --cluster-config-file nodes-node-6.conf --port 6384</span><br></pre></td></tr></table></figure>\n<ul>\n<li>部分参数解释：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--cluster-enabled：是否启动集群，选值：yes 、no</span><br><span class=\"line\">--cluster-config-file 配置文件.conf ：指定节点信息，自动生成</span><br><span class=\"line\">--cluster-node-timeout 毫秒值： 配置节点连接超时时间</span><br><span class=\"line\">--appendonly：是否开启持久化，选值：yes、no</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"启动-Redis-容器\"><a href=\"#启动-Redis-容器\" class=\"headerlink\" title=\"启动 Redis 容器\"></a>启动 Redis 容器</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start redis-node1 redis-node2 redis-node3 redis-node4 redis-node5 redis-node6</span><br></pre></td></tr></table></figure>\n<h2 id=\"组建-Redis-集群\"><a href=\"#组建-Redis-集群\" class=\"headerlink\" title=\"组建 Redis 集群\"></a>组建 Redis 集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里以 redis-node1 实例为例</span></span><br><span class=\"line\">docker exec -it redis-node1 /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">组建集群,10.211.55.4为当前物理机的ip地址</span></span><br><span class=\"line\">redis-cli --cluster create 10.211.55.4:6379 10.211.55.4:6380 10.211.55.4:6381 10.211.55.4:6382 10.211.55.4:6383 10.211.55.4:6384 --cluster-replicas 1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建成功后，通过 redis-cli 查看一下集群节点信息：</span></span><br><span class=\"line\">root@CentOS7:/data# redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; cluster nodes</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于Redis集群搭建\"><a href=\"#关于Redis集群搭建\" class=\"headerlink\" title=\"关于Redis集群搭建\"></a>关于Redis集群搭建</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">手动添加节点</span></span><br><span class=\"line\">redis-cli --cluster add-node 10.211.55.4:6383 10.211.55.4:6379  --cluster-slave --cluster-master-id b0c32b1dae9e7b7f7f4b74354c59bdfcaa46f30a</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster add-node 10.211.55.4:6384 10.211.55.4:6379  --cluster-slave --cluster-master-id 111de8bed5772585cef5280c4b5225ecb15a582e</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Doc","nav_order":6,"has_children":true,"parent":"Doc","_content":"\n# Doc\n","source":"_posts/docker/app/devs/data/redis/doc/index.md","raw":"---\nlayout: default\ntitle: Doc\nnav_order: 6\nhas_children: true\nparent: Doc\npermalink: \"/docker/app/devs/data/redis/doc/\"\n---\n\n# Doc\n","slug":"docker/app/devs/data/redis/doc/index","published":1,"date":"2025-02-23T07:43:31.037Z","updated":"2025-02-23T07:43:31.037Z","__permalink":"/docker/app/devs/data/redis/doc/","comments":1,"photos":[],"_id":"cm7k5rwbf00bomsws1zvz4xe0","content":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>","excerpt":"","more":"<h1 id=\"Doc\"><a href=\"#Doc\" class=\"headerlink\" title=\"Doc\"></a>Doc</h1>"},{"layout":"default","title":"refer","nav_order":16,"description":"参考- [docker安装redis(单机)](https://www.cnblogs.com/marshhu/p/12636536.html)","parent":"Doc","has_children":false,"grand_parent":"Redis","_content":"\n## 参考\n- [docker安装redis(单机)](https://www.cnblogs.com/marshhu/p/12636536.html)\n\n## test\n> 127.0.0.1:26379> sentinel failover mymaster\n","source":"_posts/docker/app/devs/data/redis/doc/refer.md","raw":"---\nlayout: default\ntitle: refer\nnav_order: 16\ndescription: 参考- [docker安装redis(单机)](https://www.cnblogs.com/marshhu/p/12636536.html)\nparent: Doc\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/doc/refer/\"\ngrand_parent: Redis\n---\n\n## 参考\n- [docker安装redis(单机)](https://www.cnblogs.com/marshhu/p/12636536.html)\n\n## test\n> 127.0.0.1:26379> sentinel failover mymaster\n","slug":"docker/app/devs/data/redis/doc/refer","published":1,"date":"2025-02-23T07:43:31.036Z","updated":"2025-02-23T07:43:31.037Z","__permalink":"/docker/app/devs/data/redis/doc/refer/","comments":1,"photos":[],"_id":"cm7k5rwbf00bpmsws5ob555x0","content":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/marshhu/p/12636536.html\">docker安装redis(单机)</a></li>\n</ul>\n<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><blockquote>\n<p>127.0.0.1:26379&gt; sentinel failover mymaster</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/marshhu/p/12636536.html\">docker安装redis(单机)</a></li>\n</ul>\n<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><blockquote>\n<p>127.0.0.1:26379&gt; sentinel failover mymaster</p>\n</blockquote>\n"},{"layout":"default","title":"V2","nav_order":6,"has_children":true,"parent":"V2","_content":"\n# V2\n","source":"_posts/docker/app/devs/jenkins/simple/v2/index.md","raw":"---\nlayout: default\ntitle: V2\nnav_order: 6\nhas_children: true\nparent: V2\npermalink: \"/docker/app/devs/jenkins/simple/v2/\"\n---\n\n# V2\n","slug":"docker/app/devs/jenkins/simple/v2/index","published":1,"date":"2025-02-23T07:43:31.002Z","updated":"2025-02-23T07:43:31.002Z","__permalink":"/docker/app/devs/jenkins/simple/v2/","comments":1,"photos":[],"_id":"cm7k5rwbf00bqmsws81dph5yh","content":"<h1 id=\"V2\"><a href=\"#V2\" class=\"headerlink\" title=\"V2\"></a>V2</h1>","excerpt":"","more":"<h1 id=\"V2\"><a href=\"#V2\" class=\"headerlink\" title=\"V2\"></a>V2</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"v2版jenkins部署","parent":"V2","has_children":false,"grand_parent":"Simple","_content":"\n# v2版jenkins部署\n\n主要添加了代理环境变量配置\n","source":"_posts/docker/app/devs/jenkins/simple/v2/v2.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: v2版jenkins部署\nparent: V2\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/simple/v2/v2/\"\ngrand_parent: Simple\n---\n\n# v2版jenkins部署\n\n主要添加了代理环境变量配置\n","slug":"docker/app/devs/jenkins/simple/v2/v2","published":1,"date":"2025-02-23T07:43:31.002Z","updated":"2025-02-23T07:43:31.002Z","__permalink":"/docker/app/devs/jenkins/simple/v2/v2/","comments":1,"photos":[],"_id":"cm7k5rwbf00brmsws8vdbek5f","content":"<h1 id=\"v2版jenkins部署\"><a href=\"#v2版jenkins部署\" class=\"headerlink\" title=\"v2版jenkins部署\"></a>v2版jenkins部署</h1><p>主要添加了代理环境变量配置</p>\n","excerpt":"","more":"<h1 id=\"v2版jenkins部署\"><a href=\"#v2版jenkins部署\" class=\"headerlink\" title=\"v2版jenkins部署\"></a>v2版jenkins部署</h1><p>主要添加了代理环境变量配置</p>\n"},{"layout":"default","title":"Jdk","nav_order":6,"has_children":true,"parent":"Jdk","_content":"\n# Jdk\n","source":"_posts/docker/app/devs/jenkins/doc/jdk/index.md","raw":"---\nlayout: default\ntitle: Jdk\nnav_order: 6\nhas_children: true\nparent: Jdk\npermalink: \"/docker/app/devs/jenkins/doc/jdk/\"\n---\n\n# Jdk\n","slug":"docker/app/devs/jenkins/doc/jdk/index","published":1,"date":"2025-02-23T07:43:31.005Z","updated":"2025-02-23T07:43:31.005Z","__permalink":"/docker/app/devs/jenkins/doc/jdk/","comments":1,"photos":[],"_id":"cm7k5rwbg00bsmsws5ew3cnf6","content":"<h1 id=\"Jdk\"><a href=\"#Jdk\" class=\"headerlink\" title=\"Jdk\"></a>Jdk</h1>","excerpt":"","more":"<h1 id=\"Jdk\"><a href=\"#Jdk\" class=\"headerlink\" title=\"Jdk\"></a>Jdk</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"jenkins中使用jdk","parent":"Jdk","has_children":false,"grand_parent":"Doc","_content":"\n# jenkins中使用jdk\n\n- 下载到指定位置\n\n```bash\ncd /var/lib/docker/volumes/web_jenkins_home/_data/\nmkdir -p ./soft/jdk\ncd /var/lib/docker/volumes/web_jenkins_home/_data/soft/jdk\n\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\ntar  -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz\n\n```\n\n- 对应Jenkins中的配置\n\n```bash\n# jdk安装路径配置\n/var/jenkins_home/soft/jdk\n```\n","source":"_posts/docker/app/devs/jenkins/doc/jdk/jdk.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: jenkins中使用jdk\nparent: Jdk\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/jdk/jdk/\"\ngrand_parent: Doc\n---\n\n# jenkins中使用jdk\n\n- 下载到指定位置\n\n```bash\ncd /var/lib/docker/volumes/web_jenkins_home/_data/\nmkdir -p ./soft/jdk\ncd /var/lib/docker/volumes/web_jenkins_home/_data/soft/jdk\n\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\ntar  -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz\n\n```\n\n- 对应Jenkins中的配置\n\n```bash\n# jdk安装路径配置\n/var/jenkins_home/soft/jdk\n```\n","slug":"docker/app/devs/jenkins/doc/jdk/jdk","published":1,"date":"2025-02-23T07:43:31.005Z","updated":"2025-02-23T07:43:31.005Z","__permalink":"/docker/app/devs/jenkins/doc/jdk/jdk/","comments":1,"photos":[],"_id":"cm7k5rwbg00btmsws4q3t5pkf","content":"<h1 id=\"jenkins中使用jdk\"><a href=\"#jenkins中使用jdk\" class=\"headerlink\" title=\"jenkins中使用jdk\"></a>jenkins中使用jdk</h1><ul>\n<li>下载到指定位置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/docker/volumes/web_jenkins_home/_data/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ./soft/jdk</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/docker/volumes/web_jenkins_home/_data/soft/jdk</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">tar  -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对应Jenkins中的配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jdk安装路径配置</span></span><br><span class=\"line\">/var/jenkins_home/soft/jdk</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"jenkins中使用jdk\"><a href=\"#jenkins中使用jdk\" class=\"headerlink\" title=\"jenkins中使用jdk\"></a>jenkins中使用jdk</h1><ul>\n<li>下载到指定位置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/docker/volumes/web_jenkins_home/_data/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ./soft/jdk</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/docker/volumes/web_jenkins_home/_data/soft/jdk</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">tar  -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对应Jenkins中的配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jdk安装路径配置</span></span><br><span class=\"line\">/var/jenkins_home/soft/jdk</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Maven","nav_order":6,"has_children":true,"parent":"Maven","_content":"\n# Maven\n","source":"_posts/docker/app/devs/jenkins/doc/maven/index.md","raw":"---\nlayout: default\ntitle: Maven\nnav_order: 6\nhas_children: true\nparent: Maven\npermalink: \"/docker/app/devs/jenkins/doc/maven/\"\n---\n\n# Maven\n","slug":"docker/app/devs/jenkins/doc/maven/index","published":1,"date":"2025-02-23T07:43:31.006Z","updated":"2025-02-23T07:43:31.006Z","__permalink":"/docker/app/devs/jenkins/doc/maven/","comments":1,"photos":[],"_id":"cm7k5rwbg00bumsws7ypl0fyp","content":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1>","excerpt":"","more":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"Jenkins使用maven","parent":"Maven","has_children":false,"grand_parent":"Doc","_content":"\n# Jenkins使用maven\n\n- 下载到指定位置\n  \n```bash\ncd /var/lib/docker/volumes/web_jenkins_home/_data/\nmkdir -p ./soft/maven\ncd /var/lib/docker/volumes/web_jenkins_home/_data/soft/maven\n\nwget https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.zip\nunzip apache-maven-3.8.4-bin.zip\n\n```\n\n- 对应jenkins中的配置\n\n```bash\n# maven安装路径配置\n/var/jenkins_home/soft/maven\n```\n","source":"_posts/docker/app/devs/jenkins/doc/maven/maven.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: Jenkins使用maven\nparent: Maven\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/doc/maven/maven/\"\ngrand_parent: Doc\n---\n\n# Jenkins使用maven\n\n- 下载到指定位置\n  \n```bash\ncd /var/lib/docker/volumes/web_jenkins_home/_data/\nmkdir -p ./soft/maven\ncd /var/lib/docker/volumes/web_jenkins_home/_data/soft/maven\n\nwget https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.zip\nunzip apache-maven-3.8.4-bin.zip\n\n```\n\n- 对应jenkins中的配置\n\n```bash\n# maven安装路径配置\n/var/jenkins_home/soft/maven\n```\n","slug":"docker/app/devs/jenkins/doc/maven/maven","published":1,"date":"2025-02-23T07:43:31.006Z","updated":"2025-02-23T07:43:31.006Z","__permalink":"/docker/app/devs/jenkins/doc/maven/maven/","comments":1,"photos":[],"_id":"cm7k5rwbg00bvmsws3kez53u4","content":"<h1 id=\"Jenkins使用maven\"><a href=\"#Jenkins使用maven\" class=\"headerlink\" title=\"Jenkins使用maven\"></a>Jenkins使用maven</h1><ul>\n<li>下载到指定位置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/docker/volumes/web_jenkins_home/_data/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ./soft/maven</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/docker/volumes/web_jenkins_home/_data/soft/maven</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.zip</span><br><span class=\"line\">unzip apache-maven-3.8.4-bin.zip</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对应jenkins中的配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># maven安装路径配置</span></span><br><span class=\"line\">/var/jenkins_home/soft/maven</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Jenkins使用maven\"><a href=\"#Jenkins使用maven\" class=\"headerlink\" title=\"Jenkins使用maven\"></a>Jenkins使用maven</h1><ul>\n<li>下载到指定位置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/docker/volumes/web_jenkins_home/_data/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ./soft/maven</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/docker/volumes/web_jenkins_home/_data/soft/maven</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.zip</span><br><span class=\"line\">unzip apache-maven-3.8.4-bin.zip</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对应jenkins中的配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># maven安装路径配置</span></span><br><span class=\"line\">/var/jenkins_home/soft/maven</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Simple","nav_order":6,"has_children":true,"parent":"Simple","_content":"\n# Simple\n","source":"_posts/docker/app/devs/jenkins/springboot/simple/index.md","raw":"---\nlayout: default\ntitle: Simple\nnav_order: 6\nhas_children: true\nparent: Simple\npermalink: \"/docker/app/devs/jenkins/springboot/simple/\"\n---\n\n# Simple\n","slug":"docker/app/devs/jenkins/springboot/simple/index","published":1,"date":"2025-02-23T07:43:30.900Z","updated":"2025-02-23T07:43:30.900Z","__permalink":"/docker/app/devs/jenkins/springboot/simple/","comments":1,"photos":[],"_id":"cm7k5rwbg00bwmswsd09k8qhg","content":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>","excerpt":"","more":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"maven使用dockerfile插件构建项目- 参考项目[https://gitee.com/LFa/demo-test.git]   Jenkins配置- 创建maven项目- Build[Goals and options -> clean install -Dmaven.test.skip=true]- Post Steps[Run only if build succeeds]- add post-build step[Send files or execute commands over SSH]```shell","parent":"Simple","has_children":false,"grand_parent":"Springboot","_content":"\n## maven使用dockerfile插件构建项目\n- 参考项目[https://gitee.com/LFa/demo-test.git]\n  \n#### Jenkins配置\n- 创建maven项目\n- Build[Goals and options -> clean install -Dmaven.test.skip=true]\n- Post Steps[Run only if build succeeds]\n- add post-build step[Send files or execute commands over SSH]\n```shell\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\nexport app_version='1.0'\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\n\nFROM hub.c.163.com/dwyane/openjdk:8\nWORKDIR /workdir\nADD target/$JOB_NAME.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"app.jar\"]\nEXPOSE 8080\n\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 8880\n        published: 8880\n        mode: host\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动app容器 \ndocker stack up -c $JOB_NAME.yml app\n\n```\n","source":"_posts/docker/app/devs/jenkins/springboot/simple/simple.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: maven使用dockerfile插件构建项目- 参考项目[https://gitee.com/LFa/demo-test.git]   Jenkins配置-\n  创建maven项目- Build[Goals and options -> clean install -Dmaven.test.skip=true]- Post\n  Steps[Run only if build succeeds]- add post-build step[Send files or execute commands\n  over SSH]```shell\nparent: Simple\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/springboot/simple/simple/\"\ngrand_parent: Springboot\n---\n\n## maven使用dockerfile插件构建项目\n- 参考项目[https://gitee.com/LFa/demo-test.git]\n  \n#### Jenkins配置\n- 创建maven项目\n- Build[Goals and options -> clean install -Dmaven.test.skip=true]\n- Post Steps[Run only if build succeeds]\n- add post-build step[Send files or execute commands over SSH]\n```shell\n\ncd $DOCKER_WORKSPACE/$JOB_NAME\n\nexport app_version='1.0'\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\n\nFROM hub.c.163.com/dwyane/openjdk:8\nWORKDIR /workdir\nADD target/$JOB_NAME.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"app.jar\"]\nEXPOSE 8080\n\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version\ndocker push registry.docker.com:5000/$JOB_NAME:$app_version\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.docker.com:5000/$JOB_NAME:${app_version}\n    ports:\n      - target: 8880\n        published: 8880\n        mode: host\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\n# 启动app容器 \ndocker stack up -c $JOB_NAME.yml app\n\n```\n","slug":"docker/app/devs/jenkins/springboot/simple/simple","published":1,"date":"2025-02-23T07:43:30.899Z","updated":"2025-02-23T07:43:30.899Z","__permalink":"/docker/app/devs/jenkins/springboot/simple/simple/","comments":1,"photos":[],"_id":"cm7k5rwbg00bxmswscu3cdav1","content":"<h2 id=\"maven使用dockerfile插件构建项目\"><a href=\"#maven使用dockerfile插件构建项目\" class=\"headerlink\" title=\"maven使用dockerfile插件构建项目\"></a>maven使用dockerfile插件构建项目</h2><ul>\n<li>参考项目[<a href=\"https://gitee.com/LFa/demo-test.git]\">https://gitee.com/LFa/demo-test.git]</a></li>\n</ul>\n<h4 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h4><ul>\n<li>创建maven项目</li>\n<li>Build[Goals and options -&gt; clean install -Dmaven.test.skip&#x3D;true]</li>\n<li>Post Steps[Run only if build succeeds]</li>\n<li>add post-build step[Send files or execute commands over SSH]<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">FROM hub.c.163.com/dwyane/openjdk:8</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD target/$JOB_NAME.jar app.jar</span><br><span class=\"line\">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8880</span><br><span class=\"line\">        published: 8880</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动app容器</span> </span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"maven使用dockerfile插件构建项目\"><a href=\"#maven使用dockerfile插件构建项目\" class=\"headerlink\" title=\"maven使用dockerfile插件构建项目\"></a>maven使用dockerfile插件构建项目</h2><ul>\n<li>参考项目[<a href=\"https://gitee.com/LFa/demo-test.git]\">https://gitee.com/LFa/demo-test.git]</a></li>\n</ul>\n<h4 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h4><ul>\n<li>创建maven项目</li>\n<li>Build[Goals and options -&gt; clean install -Dmaven.test.skip&#x3D;true]</li>\n<li>Post Steps[Run only if build succeeds]</li>\n<li>add post-build step[Send files or execute commands over SSH]<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">FROM hub.c.163.com/dwyane/openjdk:8</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD target/$JOB_NAME.jar app.jar</span><br><span class=\"line\">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.docker.com:5000/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.docker.com:5000/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - target: 8880</span><br><span class=\"line\">        published: 8880</span><br><span class=\"line\">        mode: host</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动app容器</span> </span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"layout":"default","title":"Projects","nav_order":6,"has_children":true,"parent":"Projects","_content":"\n# Projects\n","source":"_posts/docker/app/devs/jenkins/deploy/projects/index.md","raw":"---\nlayout: default\ntitle: Projects\nnav_order: 6\nhas_children: true\nparent: Projects\npermalink: \"/docker/app/devs/jenkins/deploy/projects/\"\n---\n\n# Projects\n","slug":"docker/app/devs/jenkins/deploy/projects/index","published":1,"date":"2025-02-23T07:43:30.931Z","updated":"2025-02-23T07:43:30.968Z","__permalink":"/docker/app/devs/jenkins/deploy/projects/","comments":1,"photos":[],"_id":"cm7k5rwbg00bymsws5ejiglte","content":"<h1 id=\"Projects\"><a href=\"#Projects\" class=\"headerlink\" title=\"Projects\"></a>Projects</h1>","excerpt":"","more":"<h1 id=\"Projects\"><a href=\"#Projects\" class=\"headerlink\" title=\"Projects\"></a>Projects</h1>"},{"layout":"default","title":"java-server-jar","nav_order":16,"description":"构建tomcat应用的相关记录","parent":"Projects","has_children":false,"grand_parent":"Deploy","_content":"\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM openjdk:11-jre-slim\nWORKDIR /workdir\nADD ./*-server/target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n      SPRING_PROFILES_ACTIVE: \"prod\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/projects/java-server-jar.md","raw":"---\nlayout: default\ntitle: java-server-jar\nnav_order: 16\ndescription: 构建tomcat应用的相关记录\nparent: Projects\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/projects/java-server-jar/\"\ngrand_parent: Deploy\n---\n\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM openjdk:11-jre-slim\nWORKDIR /workdir\nADD ./*-server/target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n      SPRING_PROFILES_ACTIVE: \"prod\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","slug":"docker/app/devs/jenkins/deploy/projects/java-server-jar","published":1,"date":"2025-02-23T07:43:30.921Z","updated":"2025-02-23T07:43:30.925Z","__permalink":"/docker/app/devs/jenkins/deploy/projects/java-server-jar/","comments":1,"photos":[],"_id":"cm7k5rwbg00bzmsws79xd1xxz","content":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM openjdk:11-jre-slim</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./*-server/target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">      SPRING_PROFILES_ACTIVE: &quot;prod&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM openjdk:11-jre-slim</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./*-server/target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">      SPRING_PROFILES_ACTIVE: &quot;prod&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Remote","nav_order":6,"has_children":true,"parent":"Remote","_content":"\n# Remote\n","source":"_posts/docker/app/devs/jenkins/deploy/remote/index.md","raw":"---\nlayout: default\ntitle: Remote\nnav_order: 6\nhas_children: true\nparent: Remote\npermalink: \"/docker/app/devs/jenkins/deploy/remote/\"\n---\n\n# Remote\n","slug":"docker/app/devs/jenkins/deploy/remote/index","published":1,"date":"2025-02-23T07:43:31.000Z","updated":"2025-02-23T07:43:31.000Z","__permalink":"/docker/app/devs/jenkins/deploy/remote/","comments":1,"photos":[],"_id":"cm7k5rwbg00c0msws0hpdci7u","content":"<h1 id=\"Remote\"><a href=\"#Remote\" class=\"headerlink\" title=\"Remote\"></a>Remote</h1>","excerpt":"","more":"<h1 id=\"Remote\"><a href=\"#Remote\" class=\"headerlink\" title=\"Remote\"></a>Remote</h1>"},{"layout":"default","title":"java-jar","nav_order":16,"description":"构建tomcat应用的相关记录","parent":"Remote","has_children":false,"grand_parent":"Deploy","_content":"\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n```\n\n- 执行 shell\n- 将镜像上传到私仓\n- PS: Jenkins的部署需要使用remote/jenkins.yml文件部署(主要是需要在容器内使用docker命令)\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\ncd $WORKSPACE\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM openjdk:11-jre-slim\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar\nEXPOSE 8080\nEOF\n\n# 登录阿里云私仓 todo <username>和<password>需要手动替换成真实的数据\necho <password> | docker login -u <username> --password-stdin registry.cn-zhangjiakou.aliyuncs.com\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 退出阿里云私仓\ndocker logout\n\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n- 选择远程ssh server，在远程服务器上启动docker容器\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\n# 创建工作目录\nmkdir -p /www/temp/jenkins/docker\ncd /www/temp/jenkins/docker\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/remote/java-jar.md","raw":"---\nlayout: default\ntitle: java-jar\nnav_order: 16\ndescription: 构建tomcat应用的相关记录\nparent: Remote\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/remote/java-jar/\"\ngrand_parent: Deploy\n---\n\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n```\n\n- 执行 shell\n- 将镜像上传到私仓\n- PS: Jenkins的部署需要使用remote/jenkins.yml文件部署(主要是需要在容器内使用docker命令)\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\ncd $WORKSPACE\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM openjdk:11-jre-slim\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar\nEXPOSE 8080\nEOF\n\n# 登录阿里云私仓 todo <username>和<password>需要手动替换成真实的数据\necho <password> | docker login -u <username> --password-stdin registry.cn-zhangjiakou.aliyuncs.com\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 退出阿里云私仓\ndocker logout\n\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n- 选择远程ssh server，在远程服务器上启动docker容器\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\n# 创建工作目录\nmkdir -p /www/temp/jenkins/docker\ncd /www/temp/jenkins/docker\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","slug":"docker/app/devs/jenkins/deploy/remote/java-jar","published":1,"date":"2025-02-23T07:43:31.000Z","updated":"2025-02-23T07:43:31.000Z","__permalink":"/docker/app/devs/jenkins/deploy/remote/java-jar/","comments":1,"photos":[],"_id":"cm7k5rwbg00c1mswsg4pk7ia7","content":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行 shell</li>\n<li>将镜像上传到私仓</li>\n<li>PS: Jenkins的部署需要使用remote&#x2F;jenkins.yml文件部署(主要是需要在容器内使用docker命令)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $WORKSPACE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM openjdk:11-jre-slim</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录阿里云私仓 todo &lt;username&gt;和&lt;password&gt;需要手动替换成真实的数据</span></span><br><span class=\"line\">echo &lt;password&gt; | docker login -u &lt;username&gt; --password-stdin registry.cn-zhangjiakou.aliyuncs.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出阿里云私仓</span></span><br><span class=\"line\">docker logout</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n<li>选择远程ssh server，在远程服务器上启动docker容器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建工作目录</span></span><br><span class=\"line\">mkdir -p /www/temp/jenkins/docker</span><br><span class=\"line\">cd /www/temp/jenkins/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行 shell</li>\n<li>将镜像上传到私仓</li>\n<li>PS: Jenkins的部署需要使用remote&#x2F;jenkins.yml文件部署(主要是需要在容器内使用docker命令)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $WORKSPACE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM openjdk:11-jre-slim</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录阿里云私仓 todo &lt;username&gt;和&lt;password&gt;需要手动替换成真实的数据</span></span><br><span class=\"line\">echo &lt;password&gt; | docker login -u &lt;username&gt; --password-stdin registry.cn-zhangjiakou.aliyuncs.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出阿里云私仓</span></span><br><span class=\"line\">docker logout</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n<li>选择远程ssh server，在远程服务器上启动docker容器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建工作目录</span></span><br><span class=\"line\">mkdir -p /www/temp/jenkins/docker</span><br><span class=\"line\">cd /www/temp/jenkins/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"java-jar-remote-deploy","nav_order":16,"description":"构建tomcat应用的相关记录","parent":"Remote","has_children":false,"grand_parent":"Deploy","_content":"\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n```\n\n- 执行 shell\n- 将镜像上传到私仓\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\ncd $WORKSPACE\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM openjdk:11-jre-slim\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar\nEXPOSE 8080\nEOF\n\n# 登录阿里云私仓 todo <username>和<password>需要手动替换成真实的数据\necho <password> | docker login -u <username> --password-stdin registry.cn-zhangjiakou.aliyuncs.com\n\n# 构建镜像\ndocker -H tcp://172.17.0.1:2375 build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker -H tcp://172.17.0.1:2375 tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker -H tcp://172.17.0.1:2375 push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker -H tcp://172.17.0.1:2375 rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 退出阿里云私仓\ndocker logout\n\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n- 选择远程ssh server，在远程服务器上启动docker容器\n- 或者，直接使用远程访问docker的方式部署\n  - PS: 服务器docker需要开启远程访问(通过这种方式验证：docker -H tcp://172.17.0.1:2375 version)。\n  - [参考文章](https://segmentfault.com/a/1190000024563734)\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\n# 创建工作目录\nmkdir -p /www/temp/jenkins/docker\ncd /www/temp/jenkins/docker\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker -H tcp://172.17.0.1:2375 stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/remote/java-jar-remote-deploy.md","raw":"---\nlayout: default\ntitle: java-jar-remote-deploy\nnav_order: 16\ndescription: 构建tomcat应用的相关记录\nparent: Remote\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/remote/java-jar-remote-deploy/\"\ngrand_parent: Deploy\n---\n\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n```\n\n- 执行 shell\n- 将镜像上传到私仓\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\ncd $WORKSPACE\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM openjdk:11-jre-slim\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar\nEXPOSE 8080\nEOF\n\n# 登录阿里云私仓 todo <username>和<password>需要手动替换成真实的数据\necho <password> | docker login -u <username> --password-stdin registry.cn-zhangjiakou.aliyuncs.com\n\n# 构建镜像\ndocker -H tcp://172.17.0.1:2375 build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker -H tcp://172.17.0.1:2375 tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker -H tcp://172.17.0.1:2375 push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker -H tcp://172.17.0.1:2375 rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 退出阿里云私仓\ndocker logout\n\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n- 选择远程ssh server，在远程服务器上启动docker容器\n- 或者，直接使用远程访问docker的方式部署\n  - PS: 服务器docker需要开启远程访问(通过这种方式验证：docker -H tcp://172.17.0.1:2375 version)。\n  - [参考文章](https://segmentfault.com/a/1190000024563734)\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\n# 创建工作目录\nmkdir -p /www/temp/jenkins/docker\ncd /www/temp/jenkins/docker\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker -H tcp://172.17.0.1:2375 stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","slug":"docker/app/devs/jenkins/deploy/remote/java-jar-remote-deploy","published":1,"date":"2025-02-23T07:43:30.999Z","updated":"2025-02-23T07:43:31.000Z","__permalink":"/docker/app/devs/jenkins/deploy/remote/java-jar-remote-deploy/","comments":1,"photos":[],"_id":"cm7k5rwbg00c2msws7l7m3v96","content":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行 shell</li>\n<li>将镜像上传到私仓</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $WORKSPACE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM openjdk:11-jre-slim</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录阿里云私仓 todo &lt;username&gt;和&lt;password&gt;需要手动替换成真实的数据</span></span><br><span class=\"line\">echo &lt;password&gt; | docker login -u &lt;username&gt; --password-stdin registry.cn-zhangjiakou.aliyuncs.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出阿里云私仓</span></span><br><span class=\"line\">docker logout</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n<li>选择远程ssh server，在远程服务器上启动docker容器</li>\n<li>或者，直接使用远程访问docker的方式部署<ul>\n<li>PS: 服务器docker需要开启远程访问(通过这种方式验证：docker -H tcp:&#x2F;&#x2F;172.17.0.1:2375 version)。</li>\n<li><a href=\"https://segmentfault.com/a/1190000024563734\">参考文章</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建工作目录</span></span><br><span class=\"line\">mkdir -p /www/temp/jenkins/docker</span><br><span class=\"line\">cd /www/temp/jenkins/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行 shell</li>\n<li>将镜像上传到私仓</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $WORKSPACE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM openjdk:11-jre-slim</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENTRYPOINT java -jar -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录阿里云私仓 todo &lt;username&gt;和&lt;password&gt;需要手动替换成真实的数据</span></span><br><span class=\"line\">echo &lt;password&gt; | docker login -u &lt;username&gt; --password-stdin registry.cn-zhangjiakou.aliyuncs.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出阿里云私仓</span></span><br><span class=\"line\">docker logout</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n<li>选择远程ssh server，在远程服务器上启动docker容器</li>\n<li>或者，直接使用远程访问docker的方式部署<ul>\n<li>PS: 服务器docker需要开启远程访问(通过这种方式验证：docker -H tcp:&#x2F;&#x2F;172.17.0.1:2375 version)。</li>\n<li><a href=\"https://segmentfault.com/a/1190000024563734\">参考文章</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建工作目录</span></span><br><span class=\"line\">mkdir -p /www/temp/jenkins/docker</span><br><span class=\"line\">cd /www/temp/jenkins/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker -H tcp://172.17.0.1:2375 stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"nginx-nodejs","nav_order":16,"description":"使用Jenkins构建node项目","parent":"Remote","has_children":false,"grand_parent":"Deploy","_content":"\n# 使用Jenkins构建node项目\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## NodeJS配置\n\n```shell\n# 下载NodeJS插件\n# 调整[系统管理 -> 全局工具配置 -> nodeJS 配置]\n# nodejs 14.15.0\n```\n\n## Jenkins配置\n\n- 创建一个自由风格的项目\n- 使用gitee作为代码源\n- 在 [构建环境] 步骤 添加 [Provide Node & npm bin/ folder to PATH]\n- 在[构建]步骤中添加[执行 shell]步骤\n\n```shell\n\npwd\n\n# 删除 dist 的所有内容\nrm -rf dist\n\n# 安装依赖(非必须)\nnpm install --registry https://registry.npm.taobao.org\n# 构建项目\nnpm run build:prod\n\n# 删除除 node_modules和dist 以外的所有内容\nls | grep -v 'node_modules\\|dist' | xargs  rm -rf\n\n```\n\n- 执行 shell\n- 将镜像上传到私仓\n- PS: Jenkins的部署需要使用remote/jenkins.yml文件部署(主要是需要在容器内使用docker命令)\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\ncd $WORKSPACE\n\nmkdir -p ./nginx/conf.d/\n\n# 添加default.conf文件\ntee ./nginx/conf.d/default.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n    }\n\n}\nEOF\n\n# 编辑Dockerfile文件\necho \"FROM nginx:stable-alpine\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/share/nginx/html\" >> Dockerfile\necho \"RUN rm -rf *\" >> Dockerfile\necho \"ADD ./dist .\" >> Dockerfile\necho \"ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/\" >> Dockerfile\necho \"EXPOSE 80\" >> Dockerfile\n\n# 登录阿里云私仓 todo <username>和<password>需要手动替换成真实的数据\necho <password> | docker login -u <username> --password-stdin registry.cn-zhangjiakou.aliyuncs.com\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 退出阿里云私仓\ndocker logout\n\n```\n\n- 在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell命令)]步骤\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\n# 创建工作目录\nmkdir -p /www/temp/jenkins/docker\ncd /www/temp/jenkins/docker\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\nnetworks:\n  middleware:\n    external: true\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/remote/nginx-nodejs.md","raw":"---\nlayout: default\ntitle: nginx-nodejs\nnav_order: 16\ndescription: 使用Jenkins构建node项目\nparent: Remote\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/remote/nginx-nodejs/\"\ngrand_parent: Deploy\n---\n\n# 使用Jenkins构建node项目\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## NodeJS配置\n\n```shell\n# 下载NodeJS插件\n# 调整[系统管理 -> 全局工具配置 -> nodeJS 配置]\n# nodejs 14.15.0\n```\n\n## Jenkins配置\n\n- 创建一个自由风格的项目\n- 使用gitee作为代码源\n- 在 [构建环境] 步骤 添加 [Provide Node & npm bin/ folder to PATH]\n- 在[构建]步骤中添加[执行 shell]步骤\n\n```shell\n\npwd\n\n# 删除 dist 的所有内容\nrm -rf dist\n\n# 安装依赖(非必须)\nnpm install --registry https://registry.npm.taobao.org\n# 构建项目\nnpm run build:prod\n\n# 删除除 node_modules和dist 以外的所有内容\nls | grep -v 'node_modules\\|dist' | xargs  rm -rf\n\n```\n\n- 执行 shell\n- 将镜像上传到私仓\n- PS: Jenkins的部署需要使用remote/jenkins.yml文件部署(主要是需要在容器内使用docker命令)\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\ncd $WORKSPACE\n\nmkdir -p ./nginx/conf.d/\n\n# 添加default.conf文件\ntee ./nginx/conf.d/default.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n    }\n\n}\nEOF\n\n# 编辑Dockerfile文件\necho \"FROM nginx:stable-alpine\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/share/nginx/html\" >> Dockerfile\necho \"RUN rm -rf *\" >> Dockerfile\necho \"ADD ./dist .\" >> Dockerfile\necho \"ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/\" >> Dockerfile\necho \"EXPOSE 80\" >> Dockerfile\n\n# 登录阿里云私仓 todo <username>和<password>需要手动替换成真实的数据\necho <password> | docker login -u <username> --password-stdin registry.cn-zhangjiakou.aliyuncs.com\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 退出阿里云私仓\ndocker logout\n\n```\n\n- 在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell命令)]步骤\n\n```shell\n\nexport app_version=${BUILD_NUMBER}\n\n# 创建工作目录\nmkdir -p /www/temp/jenkins/docker\ncd /www/temp/jenkins/docker\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\nnetworks:\n  middleware:\n    external: true\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","slug":"docker/app/devs/jenkins/deploy/remote/nginx-nodejs","published":1,"date":"2025-02-23T07:43:31.000Z","updated":"2025-02-23T07:43:31.000Z","__permalink":"/docker/app/devs/jenkins/deploy/remote/nginx-nodejs/","comments":1,"photos":[],"_id":"cm7k5rwbg00c3mswscrjgeob4","content":"<h1 id=\"使用Jenkins构建node项目\"><a href=\"#使用Jenkins构建node项目\" class=\"headerlink\" title=\"使用Jenkins构建node项目\"></a>使用Jenkins构建node项目</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"NodeJS配置\"><a href=\"#NodeJS配置\" class=\"headerlink\" title=\"NodeJS配置\"></a>NodeJS配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载NodeJS插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; nodeJS 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nodejs 14.15.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><ul>\n<li>创建一个自由风格的项目</li>\n<li>使用gitee作为代码源</li>\n<li>在 [构建环境] 步骤 添加 [Provide Node &amp; npm bin&#x2F; folder to PATH]</li>\n<li>在[构建]步骤中添加[执行 shell]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除 dist 的所有内容</span></span><br><span class=\"line\">rm -rf dist</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖(非必须)</span></span><br><span class=\"line\">npm install --registry https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建项目</span></span><br><span class=\"line\">npm run build:prod</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules和dist 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules\\|dist&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行 shell</li>\n<li>将镜像上传到私仓</li>\n<li>PS: Jenkins的部署需要使用remote&#x2F;jenkins.yml文件部署(主要是需要在容器内使用docker命令)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $WORKSPACE</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./nginx/conf.d/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加default.conf文件</span></span><br><span class=\"line\">tee ./nginx/conf.d/default.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM nginx:stable-alpine&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/share/nginx/html&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf *&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./dist .&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 80&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录阿里云私仓 todo &lt;username&gt;和&lt;password&gt;需要手动替换成真实的数据</span></span><br><span class=\"line\">echo &lt;password&gt; | docker login -u &lt;username&gt; --password-stdin registry.cn-zhangjiakou.aliyuncs.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出阿里云私仓</span></span><br><span class=\"line\">docker logout</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell命令)]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建工作目录</span></span><br><span class=\"line\">mkdir -p /www/temp/jenkins/docker</span><br><span class=\"line\">cd /www/temp/jenkins/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"使用Jenkins构建node项目\"><a href=\"#使用Jenkins构建node项目\" class=\"headerlink\" title=\"使用Jenkins构建node项目\"></a>使用Jenkins构建node项目</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"NodeJS配置\"><a href=\"#NodeJS配置\" class=\"headerlink\" title=\"NodeJS配置\"></a>NodeJS配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载NodeJS插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; nodeJS 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nodejs 14.15.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><ul>\n<li>创建一个自由风格的项目</li>\n<li>使用gitee作为代码源</li>\n<li>在 [构建环境] 步骤 添加 [Provide Node &amp; npm bin&#x2F; folder to PATH]</li>\n<li>在[构建]步骤中添加[执行 shell]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除 dist 的所有内容</span></span><br><span class=\"line\">rm -rf dist</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖(非必须)</span></span><br><span class=\"line\">npm install --registry https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建项目</span></span><br><span class=\"line\">npm run build:prod</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules和dist 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules\\|dist&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行 shell</li>\n<li>将镜像上传到私仓</li>\n<li>PS: Jenkins的部署需要使用remote&#x2F;jenkins.yml文件部署(主要是需要在容器内使用docker命令)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $WORKSPACE</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./nginx/conf.d/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加default.conf文件</span></span><br><span class=\"line\">tee ./nginx/conf.d/default.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM nginx:stable-alpine&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/share/nginx/html&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf *&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./dist .&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 80&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录阿里云私仓 todo &lt;username&gt;和&lt;password&gt;需要手动替换成真实的数据</span></span><br><span class=\"line\">echo &lt;password&gt; | docker login -u &lt;username&gt; --password-stdin registry.cn-zhangjiakou.aliyuncs.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出阿里云私仓</span></span><br><span class=\"line\">docker logout</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell命令)]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=$&#123;BUILD_NUMBER&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建工作目录</span></span><br><span class=\"line\">mkdir -p /www/temp/jenkins/docker</span><br><span class=\"line\">cd /www/temp/jenkins/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Simple","nav_order":6,"has_children":true,"parent":"Simple","_content":"\n# Simple\n","source":"_posts/docker/app/devs/jenkins/deploy/simple/index.md","raw":"---\nlayout: default\ntitle: Simple\nnav_order: 6\nhas_children: true\nparent: Simple\npermalink: \"/docker/app/devs/jenkins/deploy/simple/\"\n---\n\n# Simple\n","slug":"docker/app/devs/jenkins/deploy/simple/index","published":1,"date":"2025-02-23T07:43:30.984Z","updated":"2025-02-23T07:43:30.984Z","__permalink":"/docker/app/devs/jenkins/deploy/simple/","comments":1,"photos":[],"_id":"cm7k5rwbg00c4mswsaxfi0wdi","content":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>","excerpt":"","more":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>"},{"layout":"default","title":"java-jar-alpine","nav_order":16,"description":"构建tomcat应用的相关记录","parent":"Simple","has_children":false,"grand_parent":"Deploy","_content":"\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n\n# 或使用\nclean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM eclipse-temurin:11-jre-alpine\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENV JAVA_OPTS=\"-Xms512m -Xmx512m\"\nENTRYPOINT java ${JAVA_OPTS} -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/simple/java-jar-alpine.md","raw":"---\nlayout: default\ntitle: java-jar-alpine\nnav_order: 16\ndescription: 构建tomcat应用的相关记录\nparent: Simple\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/simple/java-jar-alpine/\"\ngrand_parent: Deploy\n---\n\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n\n# 或使用\nclean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM eclipse-temurin:11-jre-alpine\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENV JAVA_OPTS=\"-Xms512m -Xmx512m\"\nENTRYPOINT java ${JAVA_OPTS} -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","slug":"docker/app/devs/jenkins/deploy/simple/java-jar-alpine","published":1,"date":"2025-02-23T07:43:30.983Z","updated":"2025-02-23T07:43:30.984Z","__permalink":"/docker/app/devs/jenkins/deploy/simple/java-jar-alpine/","comments":1,"photos":[],"_id":"cm7k5rwbg00c5mswsak2w3iu0","content":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或使用</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM eclipse-temurin:11-jre-alpine</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENV JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span><br><span class=\"line\">ENTRYPOINT java $&#123;JAVA_OPTS&#125; -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或使用</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM eclipse-temurin:11-jre-alpine</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENV JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span><br><span class=\"line\">ENTRYPOINT java $&#123;JAVA_OPTS&#125; -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"nginx-nodejs","nav_order":16,"description":"使用Jenkins构建node项目","parent":"Simple","has_children":false,"grand_parent":"Deploy","_content":"\n# 使用Jenkins构建node项目\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## NodeJS配置\n\n```shell\n# 下载NodeJS插件\n# 调整[系统管理 -> 全局工具配置 -> nodeJS 配置]\n# nodejs 14.15.0\n```\n\n## Jenkins配置\n\n- 创建一个自由风格的项目\n- 使用gitee作为代码源\n- 在 [构建环境] 步骤 添加 [Provide Node & npm bin/ folder to PATH]\n- 在[构建]步骤中添加[执行 shell]步骤\n\n```shell\n\npwd\n\n# 删除 dist 的所有内容\nrm -rf dist\n\n# 安装依赖(非必须)\nnpm install --registry https://registry.npm.taobao.org\n# 构建项目\nnpm run build:prod\n\n# 删除除 node_modules和dist 以外的所有内容\nls | grep -v 'node_modules\\|dist' | xargs  rm -rf\n\n```\n\n- 在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell)]步骤\n\n```shell\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\nmkdir -p ./nginx/conf.d/\n# todo 按需调整用户名和组\nchown -R 1000:1000 ./nginx\n\n# 添加default.conf文件\ntee ./nginx/conf.d/default.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n    }\n\n}\nEOF\n\n# 编辑Dockerfile文件\necho \"FROM nginx:stable-alpine\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/share/nginx/html\" >> Dockerfile\necho \"RUN rm -rf *\" >> Dockerfile\necho \"ADD ./dist .\" >> Dockerfile\necho \"ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/\" >> Dockerfile\necho \"EXPOSE 80\" >> Dockerfile\n\n# 构建镜像\ndocker build --no-cache -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\nnetworks:\n  middleware:\n    external: true\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n\n- Nginx添加代理配置\n\n- 在conf.d目录中添加mall-admin-web-demo.conf文件\n\n```shell\nserver {\n    listen      80;\n    server_name mall-admin-web-demo.iuin.xyz iuin.xyz;\n\n    access_log /var/log/mall-admin-web-demo_access.log;\n    error_log /var/log/mall-admin-web-demo_error.log;\n\n    location / {\n        include cors.conf;\n        proxy_set_header Host $host;\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://mall-admin-web-demo;\n    }\n\n}\n\n```\n\n## 部署\n\n```shell\n# 镜像下载问题，可试这添加--with-registry-auth看看\ndocker stack up -c $JOB_NAME.yml --with-registry-auth app\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/simple/nginx-nodejs.md","raw":"---\nlayout: default\ntitle: nginx-nodejs\nnav_order: 16\ndescription: 使用Jenkins构建node项目\nparent: Simple\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/simple/nginx-nodejs/\"\ngrand_parent: Deploy\n---\n\n# 使用Jenkins构建node项目\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## NodeJS配置\n\n```shell\n# 下载NodeJS插件\n# 调整[系统管理 -> 全局工具配置 -> nodeJS 配置]\n# nodejs 14.15.0\n```\n\n## Jenkins配置\n\n- 创建一个自由风格的项目\n- 使用gitee作为代码源\n- 在 [构建环境] 步骤 添加 [Provide Node & npm bin/ folder to PATH]\n- 在[构建]步骤中添加[执行 shell]步骤\n\n```shell\n\npwd\n\n# 删除 dist 的所有内容\nrm -rf dist\n\n# 安装依赖(非必须)\nnpm install --registry https://registry.npm.taobao.org\n# 构建项目\nnpm run build:prod\n\n# 删除除 node_modules和dist 以外的所有内容\nls | grep -v 'node_modules\\|dist' | xargs  rm -rf\n\n```\n\n- 在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell)]步骤\n\n```shell\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\nmkdir -p ./nginx/conf.d/\n# todo 按需调整用户名和组\nchown -R 1000:1000 ./nginx\n\n# 添加default.conf文件\ntee ./nginx/conf.d/default.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题\n    }\n\n}\nEOF\n\n# 编辑Dockerfile文件\necho \"FROM nginx:stable-alpine\" > Dockerfile\necho \"MAINTAINER Fa\" >> Dockerfile\necho \"WORKDIR /usr/share/nginx/html\" >> Dockerfile\necho \"RUN rm -rf *\" >> Dockerfile\necho \"ADD ./dist .\" >> Dockerfile\necho \"ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/\" >> Dockerfile\necho \"EXPOSE 80\" >> Dockerfile\n\n# 构建镜像\ndocker build --no-cache -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\nnetworks:\n  middleware:\n    external: true\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n\n- Nginx添加代理配置\n\n- 在conf.d目录中添加mall-admin-web-demo.conf文件\n\n```shell\nserver {\n    listen      80;\n    server_name mall-admin-web-demo.iuin.xyz iuin.xyz;\n\n    access_log /var/log/mall-admin-web-demo_access.log;\n    error_log /var/log/mall-admin-web-demo_error.log;\n\n    location / {\n        include cors.conf;\n        proxy_set_header Host $host;\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://mall-admin-web-demo;\n    }\n\n}\n\n```\n\n## 部署\n\n```shell\n# 镜像下载问题，可试这添加--with-registry-auth看看\ndocker stack up -c $JOB_NAME.yml --with-registry-auth app\n\n```\n","slug":"docker/app/devs/jenkins/deploy/simple/nginx-nodejs","published":1,"date":"2025-02-23T07:43:30.982Z","updated":"2025-02-23T07:43:30.983Z","__permalink":"/docker/app/devs/jenkins/deploy/simple/nginx-nodejs/","comments":1,"photos":[],"_id":"cm7k5rwbh00c6mswsgdeh3gcc","content":"<h1 id=\"使用Jenkins构建node项目\"><a href=\"#使用Jenkins构建node项目\" class=\"headerlink\" title=\"使用Jenkins构建node项目\"></a>使用Jenkins构建node项目</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"NodeJS配置\"><a href=\"#NodeJS配置\" class=\"headerlink\" title=\"NodeJS配置\"></a>NodeJS配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载NodeJS插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; nodeJS 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nodejs 14.15.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><ul>\n<li>创建一个自由风格的项目</li>\n<li>使用gitee作为代码源</li>\n<li>在 [构建环境] 步骤 添加 [Provide Node &amp; npm bin&#x2F; folder to PATH]</li>\n<li>在[构建]步骤中添加[执行 shell]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除 dist 的所有内容</span></span><br><span class=\"line\">rm -rf dist</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖(非必须)</span></span><br><span class=\"line\">npm install --registry https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建项目</span></span><br><span class=\"line\">npm run build:prod</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules和dist 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules\\|dist&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell)]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./nginx/conf.d/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">todo 按需调整用户名和组</span></span><br><span class=\"line\">chown -R 1000:1000 ./nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加default.conf文件</span></span><br><span class=\"line\">tee ./nginx/conf.d/default.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM nginx:stable-alpine&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/share/nginx/html&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf *&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./dist .&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 80&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build --no-cache -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Nginx添加代理配置</p>\n</li>\n<li><p>在conf.d目录中添加mall-admin-web-demo.conf文件</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name mall-admin-web-demo.iuin.xyz iuin.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /var/log/mall-admin-web-demo_access.log;</span><br><span class=\"line\">    error_log /var/log/mall-admin-web-demo_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        include cors.conf;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://mall-admin-web-demo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">镜像下载问题，可试这添加--with-registry-auth看看</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml --with-registry-auth app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"使用Jenkins构建node项目\"><a href=\"#使用Jenkins构建node项目\" class=\"headerlink\" title=\"使用Jenkins构建node项目\"></a>使用Jenkins构建node项目</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"NodeJS配置\"><a href=\"#NodeJS配置\" class=\"headerlink\" title=\"NodeJS配置\"></a>NodeJS配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载NodeJS插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; nodeJS 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nodejs 14.15.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><ul>\n<li>创建一个自由风格的项目</li>\n<li>使用gitee作为代码源</li>\n<li>在 [构建环境] 步骤 添加 [Provide Node &amp; npm bin&#x2F; folder to PATH]</li>\n<li>在[构建]步骤中添加[执行 shell]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除 dist 的所有内容</span></span><br><span class=\"line\">rm -rf dist</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖(非必须)</span></span><br><span class=\"line\">npm install --registry https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建项目</span></span><br><span class=\"line\">npm run build:prod</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除除 node_modules和dist 以外的所有内容</span></span><br><span class=\"line\">ls | grep -v &#x27;node_modules\\|dist&#x27; | xargs  rm -rf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在构建步骤中添加[Send files or execute commands over SSH(通过ssh远程执行shell)]步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./nginx/conf.d/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">todo 按需调整用户名和组</span></span><br><span class=\"line\">chown -R 1000:1000 ./nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加default.conf文件</span></span><br><span class=\"line\">tee ./nginx/conf.d/default.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 用于解决刷新页面后，显示404的问题</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">echo &quot;FROM nginx:stable-alpine&quot; &gt; Dockerfile</span><br><span class=\"line\">echo &quot;MAINTAINER Fa&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;WORKDIR /usr/share/nginx/html&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;RUN rm -rf *&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./dist .&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;ADD ./nginx/conf.d/default.conf /etc/nginx/conf.d/&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\">echo &quot;EXPOSE 80&quot; &gt;&gt; Dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build --no-cache -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Nginx添加代理配置</p>\n</li>\n<li><p>在conf.d目录中添加mall-admin-web-demo.conf文件</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name mall-admin-web-demo.iuin.xyz iuin.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /var/log/mall-admin-web-demo_access.log;</span><br><span class=\"line\">    error_log /var/log/mall-admin-web-demo_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        include cors.conf;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-real-ip $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://mall-admin-web-demo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">镜像下载问题，可试这添加--with-registry-auth看看</span></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml --with-registry-auth app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"tomcat-java","nav_order":16,"description":"构建tomcat应用的相关记录","parent":"Simple","has_children":false,"grand_parent":"Deploy","_content":"\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n\n```shell\n# Goals and options\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM tomcat:jre8-alpine\nMAINTAINER Fa\nWORKDIR /usr/local/tomcat\nRUN rm -rf webapps/*\nADD ./target/*$JOB_NAME webapps/$JOB_NAME\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/simple/tomcat-java.md","raw":"---\nlayout: default\ntitle: tomcat-java\nnav_order: 16\ndescription: 构建tomcat应用的相关记录\nparent: Simple\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/simple/tomcat-java/\"\ngrand_parent: Deploy\n---\n\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n\n```shell\n# Goals and options\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM tomcat:jre8-alpine\nMAINTAINER Fa\nWORKDIR /usr/local/tomcat\nRUN rm -rf webapps/*\nADD ./target/*$JOB_NAME webapps/$JOB_NAME\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除空镜像\ndocker images | awk '{if($1==\"<none>\")print $3}' | xargs docker rmi &> /dev/null\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","slug":"docker/app/devs/jenkins/deploy/simple/tomcat-java","published":1,"date":"2025-02-23T07:43:30.995Z","updated":"2025-02-23T07:43:30.995Z","__permalink":"/docker/app/devs/jenkins/deploy/simple/tomcat-java/","comments":1,"photos":[],"_id":"cm7k5rwbh00c7mswsaxx1b7ox","content":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Goals and options</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM tomcat:jre8-alpine</span><br><span class=\"line\">MAINTAINER Fa</span><br><span class=\"line\">WORKDIR /usr/local/tomcat</span><br><span class=\"line\">RUN rm -rf webapps/*</span><br><span class=\"line\">ADD ./target/*$JOB_NAME webapps/$JOB_NAME</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Goals and options</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM tomcat:jre8-alpine</span><br><span class=\"line\">MAINTAINER Fa</span><br><span class=\"line\">WORKDIR /usr/local/tomcat</span><br><span class=\"line\">RUN rm -rf webapps/*</span><br><span class=\"line\">ADD ./target/*$JOB_NAME webapps/$JOB_NAME</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除空镜像</span></span><br><span class=\"line\">docker images | awk &#x27;&#123;if($1==&quot;&lt;none&gt;&quot;)print $3&#125;&#x27; | xargs docker rmi &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"java-jar","nav_order":16,"description":"构建tomcat应用的相关记录","parent":"Simple","has_children":false,"grand_parent":"Deploy","_content":"\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n\n# 或使用\nclean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM eclipse-temurin:11-jre\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENV JAVA_OPTS=\"-Xms512m -Xmx512m\"\nENTRYPOINT java ${JAVA_OPTS} -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/simple/java-jar.md","raw":"---\nlayout: default\ntitle: java-jar\nnav_order: 16\ndescription: 构建tomcat应用的相关记录\nparent: Simple\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/simple/java-jar/\"\ngrand_parent: Deploy\n---\n\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n\n# 或使用\nclean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM eclipse-temurin:11-jre\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENV JAVA_OPTS=\"-Xms512m -Xmx512m\"\nENTRYPOINT java ${JAVA_OPTS} -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","slug":"docker/app/devs/jenkins/deploy/simple/java-jar","published":1,"date":"2025-02-23T07:43:30.997Z","updated":"2025-02-23T07:43:30.997Z","__permalink":"/docker/app/devs/jenkins/deploy/simple/java-jar/","comments":1,"photos":[],"_id":"cm7k5rwbh00c8mswsba9s2gcv","content":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或使用</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM eclipse-temurin:11-jre</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENV JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span><br><span class=\"line\">ENTRYPOINT java $&#123;JAVA_OPTS&#125; -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或使用</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM eclipse-temurin:11-jre</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENV JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span><br><span class=\"line\">ENTRYPOINT java $&#123;JAVA_OPTS&#125; -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Docker","nav_order":6,"has_children":true,"parent":"Docker","_content":"\n# Docker\n","source":"_posts/docker/app/networks/vpn/openvpn/docker/index.md","raw":"---\nlayout: default\ntitle: Docker\nnav_order: 6\nhas_children: true\nparent: Docker\npermalink: \"/docker/app/networks/vpn/openvpn/docker/\"\n---\n\n# Docker\n","slug":"docker/app/networks/vpn/openvpn/docker/index","published":1,"date":"2025-02-23T07:43:31.073Z","updated":"2025-02-23T07:43:31.073Z","__permalink":"/docker/app/networks/vpn/openvpn/docker/","comments":1,"photos":[],"_id":"cm7k5rwbh00c9msws7ay866fa","content":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1>","excerpt":"","more":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"tomcat部署war包相关文档","parent":"Tomcat-war","has_children":false,"grand_parent":"Backend","_content":"\n# tomcat部署war包相关文档\n\n## 缺少字体的问题\n\n- [对应的Dockerfile](./has-font/Dockerfile)\n\n```bash\n# 只需要在项目的docker部署文件Dockerfile里添加一行代码（在生成镜像需要外网）\nRUN apk add --update font-adobe-100dpi ttf-dejavu fontconfig\n```\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/tomcat-war.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: tomcat部署war包相关文档\nparent: Tomcat-war\nhas_children: false\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/tomcat-war/\"\ngrand_parent: Backend\n---\n\n# tomcat部署war包相关文档\n\n## 缺少字体的问题\n\n- [对应的Dockerfile](./has-font/Dockerfile)\n\n```bash\n# 只需要在项目的docker部署文件Dockerfile里添加一行代码（在生成镜像需要外网）\nRUN apk add --update font-adobe-100dpi ttf-dejavu fontconfig\n```\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/tomcat-war","published":1,"date":"2025-02-23T07:43:31.155Z","updated":"2025-02-23T07:43:31.155Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/tomcat-war/","comments":1,"photos":[],"_id":"cm7k5rwbh00camsws96tb9rqh","content":"<h1 id=\"tomcat部署war包相关文档\"><a href=\"#tomcat部署war包相关文档\" class=\"headerlink\" title=\"tomcat部署war包相关文档\"></a>tomcat部署war包相关文档</h1><h2 id=\"缺少字体的问题\"><a href=\"#缺少字体的问题\" class=\"headerlink\" title=\"缺少字体的问题\"></a>缺少字体的问题</h2><ul>\n<li><a href=\"./has-font/Dockerfile\">对应的Dockerfile</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只需要在项目的docker部署文件Dockerfile里添加一行代码（在生成镜像需要外网）</span></span><br><span class=\"line\">RUN apk add --update font-adobe-100dpi ttf-dejavu fontconfig</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"tomcat部署war包相关文档\"><a href=\"#tomcat部署war包相关文档\" class=\"headerlink\" title=\"tomcat部署war包相关文档\"></a>tomcat部署war包相关文档</h1><h2 id=\"缺少字体的问题\"><a href=\"#缺少字体的问题\" class=\"headerlink\" title=\"缺少字体的问题\"></a>缺少字体的问题</h2><ul>\n<li><a href=\"./has-font/Dockerfile\">对应的Dockerfile</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只需要在项目的docker部署文件Dockerfile里添加一行代码（在生成镜像需要外网）</span></span><br><span class=\"line\">RUN apk add --update font-adobe-100dpi ttf-dejavu fontconfig</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Nginx","nav_order":6,"has_children":true,"parent":"Nginx","_content":"\n# Nginx\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/index.md","raw":"---\nlayout: default\ntitle: Nginx\nnav_order: 6\nhas_children: true\nparent: Nginx\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/\"\n---\n\n# Nginx\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/index","published":1,"date":"2025-02-23T07:43:31.141Z","updated":"2025-02-23T07:43:31.141Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/","comments":1,"photos":[],"_id":"cm7k5rwbh00cbmsws8vi6cbl8","content":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1>","excerpt":"","more":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1>"},{"layout":"default","title":"Tomcat-war","nav_order":6,"has_children":true,"parent":"Tomcat-war","_content":"\n# Tomcat-war\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/index.md","raw":"---\nlayout: default\ntitle: Tomcat-war\nnav_order: 6\nhas_children: true\nparent: Tomcat-war\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/\"\n---\n\n# Tomcat-war\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/index","published":1,"date":"2025-02-23T07:43:31.154Z","updated":"2025-02-23T07:43:31.155Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/","comments":1,"photos":[],"_id":"cm7k5rwbh00ccmswsfcxha9xl","content":"<h1 id=\"Tomcat-war\"><a href=\"#Tomcat-war\" class=\"headerlink\" title=\"Tomcat-war\"></a>Tomcat-war</h1>","excerpt":"","more":"<h1 id=\"Tomcat-war\"><a href=\"#Tomcat-war\" class=\"headerlink\" title=\"Tomcat-war\"></a>Tomcat-war</h1>"},{"layout":"default","title":"doc","nav_order":16,"description":"nginx相关文档  - [参考文章](https://hub.docker.com/_/nginx)","parent":"Nginx","has_children":false,"grand_parent":"Middleware","_content":"\n# nginx相关文档\n  \n- [参考文章](https://hub.docker.com/_/nginx)\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/nginx.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: nginx相关文档  - [参考文章](https://hub.docker.com/_/nginx)\nparent: Nginx\nhas_children: false\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/nginx/\"\ngrand_parent: Middleware\n---\n\n# nginx相关文档\n  \n- [参考文章](https://hub.docker.com/_/nginx)\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/nginx","published":1,"date":"2025-02-23T07:43:31.141Z","updated":"2025-02-23T07:43:31.141Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/nginx/","comments":1,"photos":[],"_id":"cm7k5rwbh00cdmsws67togwoo","content":"<h1 id=\"nginx相关文档\"><a href=\"#nginx相关文档\" class=\"headerlink\" title=\"nginx相关文档\"></a>nginx相关文档</h1><ul>\n<li><a href=\"https://hub.docker.com/_/nginx\">参考文章</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"nginx相关文档\"><a href=\"#nginx相关文档\" class=\"headerlink\" title=\"nginx相关文档\"></a>nginx相关文档</h1><ul>\n<li><a href=\"https://hub.docker.com/_/nginx\">参考文章</a></li>\n</ul>\n"},{"layout":"default","title":"README","nav_order":16,"description":"deploy","parent":"Deploy","has_children":false,"grand_parent":"Projects","_content":"\n# deploy\n\n## deploy_to_docker.sh使用方式\n\n```bash\n# 需要打包并部署指定服务\nsh deploy_to_docker.sh package web\n# 无需打包仅部署指定服务\nsh deploy_to_docker.sh web\n# 部署所有服务\nsh deploy_to_docker.sh\n```\n\n## 拉取位置\n\n- 放到和项目同级目录，所有需要部署的项目都放到同级目录\n\n## docker compose 命令\n\n```bash\n# 部署某个服务\ndocker compose -f ./docker-compose.yml -p ma-compose up -d --build $service_name\n# 重启某个服务\ndocker compose -p ma-compose restart nginx\n```\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/README.md","raw":"---\nlayout: default\ntitle: README\nnav_order: 16\ndescription: deploy\nparent: Deploy\nhas_children: false\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/readme/\"\ngrand_parent: Projects\n---\n\n# deploy\n\n## deploy_to_docker.sh使用方式\n\n```bash\n# 需要打包并部署指定服务\nsh deploy_to_docker.sh package web\n# 无需打包仅部署指定服务\nsh deploy_to_docker.sh web\n# 部署所有服务\nsh deploy_to_docker.sh\n```\n\n## 拉取位置\n\n- 放到和项目同级目录，所有需要部署的项目都放到同级目录\n\n## docker compose 命令\n\n```bash\n# 部署某个服务\ndocker compose -f ./docker-compose.yml -p ma-compose up -d --build $service_name\n# 重启某个服务\ndocker compose -p ma-compose restart nginx\n```\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/README","published":1,"date":"2025-02-23T07:43:31.147Z","updated":"2025-02-23T07:43:31.147Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/readme/","comments":1,"photos":[],"_id":"cm7k5rwbi00cemswscdu5e4gn","content":"<h1 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h1><h2 id=\"deploy-to-docker-sh使用方式\"><a href=\"#deploy-to-docker-sh使用方式\" class=\"headerlink\" title=\"deploy_to_docker.sh使用方式\"></a>deploy_to_docker.sh使用方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要打包并部署指定服务</span></span><br><span class=\"line\">sh deploy_to_docker.sh package web</span><br><span class=\"line\"><span class=\"comment\"># 无需打包仅部署指定服务</span></span><br><span class=\"line\">sh deploy_to_docker.sh web</span><br><span class=\"line\"><span class=\"comment\"># 部署所有服务</span></span><br><span class=\"line\">sh deploy_to_docker.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拉取位置\"><a href=\"#拉取位置\" class=\"headerlink\" title=\"拉取位置\"></a>拉取位置</h2><ul>\n<li>放到和项目同级目录，所有需要部署的项目都放到同级目录</li>\n</ul>\n<h2 id=\"docker-compose-命令\"><a href=\"#docker-compose-命令\" class=\"headerlink\" title=\"docker compose 命令\"></a>docker compose 命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署某个服务</span></span><br><span class=\"line\">docker compose -f ./docker-compose.yml -p ma-compose up -d --build <span class=\"variable\">$service_name</span></span><br><span class=\"line\"><span class=\"comment\"># 重启某个服务</span></span><br><span class=\"line\">docker compose -p ma-compose restart nginx</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h1><h2 id=\"deploy-to-docker-sh使用方式\"><a href=\"#deploy-to-docker-sh使用方式\" class=\"headerlink\" title=\"deploy_to_docker.sh使用方式\"></a>deploy_to_docker.sh使用方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要打包并部署指定服务</span></span><br><span class=\"line\">sh deploy_to_docker.sh package web</span><br><span class=\"line\"><span class=\"comment\"># 无需打包仅部署指定服务</span></span><br><span class=\"line\">sh deploy_to_docker.sh web</span><br><span class=\"line\"><span class=\"comment\"># 部署所有服务</span></span><br><span class=\"line\">sh deploy_to_docker.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拉取位置\"><a href=\"#拉取位置\" class=\"headerlink\" title=\"拉取位置\"></a>拉取位置</h2><ul>\n<li>放到和项目同级目录，所有需要部署的项目都放到同级目录</li>\n</ul>\n<h2 id=\"docker-compose-命令\"><a href=\"#docker-compose-命令\" class=\"headerlink\" title=\"docker compose 命令\"></a>docker compose 命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署某个服务</span></span><br><span class=\"line\">docker compose -f ./docker-compose.yml -p ma-compose up -d --build <span class=\"variable\">$service_name</span></span><br><span class=\"line\"><span class=\"comment\"># 重启某个服务</span></span><br><span class=\"line\">docker compose -p ma-compose restart nginx</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Deploy","nav_order":6,"has_children":true,"parent":"Deploy","_content":"\n# Deploy\n","source":"_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/index.md","raw":"---\nlayout: default\ntitle: Deploy\nnav_order: 6\nhas_children: true\nparent: Deploy\npermalink: \"/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/\"\n---\n\n# Deploy\n","slug":"docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/index","published":1,"date":"2025-02-23T07:43:31.148Z","updated":"2025-02-23T07:43:31.148Z","__permalink":"/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/","comments":1,"photos":[],"_id":"cm7k5rwbi00cfmsws9vgl3i12","content":"<h1 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h1>","excerpt":"","more":"<h1 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h1>"},{"layout":"default","title":"Proxy","nav_order":6,"has_children":true,"parent":"Proxy","_content":"\n# Proxy\n","source":"_posts/docker/doc/material/ai/os/proxy/index.md","raw":"---\nlayout: default\ntitle: Proxy\nnav_order: 6\nhas_children: true\nparent: Proxy\npermalink: \"/docker/doc/material/ai/os/proxy/\"\n---\n\n# Proxy\n","slug":"docker/doc/material/ai/os/proxy/index","published":1,"date":"2025-02-23T07:43:31.438Z","updated":"2025-02-23T07:43:31.438Z","__permalink":"/docker/doc/material/ai/os/proxy/","comments":1,"photos":[],"_id":"cm7k5rwbi00cgmswsd7nlfkkf","content":"<h1 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h1>","excerpt":"","more":"<h1 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h1>"},{"layout":"default","title":"Inject","nav_order":6,"has_children":true,"parent":"Inject","_content":"\n# Inject\n","source":"_posts/kubernetes/app/skywalking/java/k8s/inject/index.md","raw":"---\nlayout: default\ntitle: Inject\nnav_order: 6\nhas_children: true\nparent: Inject\npermalink: \"/kubernetes/app/skywalking/java/k8s/inject/\"\n---\n\n# Inject\n","slug":"kubernetes/app/skywalking/java/k8s/inject/index","published":1,"date":"2025-02-23T07:43:31.672Z","updated":"2025-02-23T07:43:31.674Z","__permalink":"/kubernetes/app/skywalking/java/k8s/inject/","comments":1,"photos":[],"_id":"cm7k5rwbi00chmsws788q78cw","content":"<h1 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"Inject\"></a>Inject</h1>","excerpt":"","more":"<h1 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"Inject\"></a>Inject</h1>"},{"layout":"default","title":"ssh加nginx实现内网穿透","nav_order":16,"description":"ssh加nginx实现内网穿透","parent":"Proxy","has_children":false,"grand_parent":"Os","_content":"\n# ssh加nginx实现内网穿透\n\n- 外网服务器nginx配置\n\n```shell\n# 创建配置文件\ntee /etc/nginx/conf.d/ssh.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  127.0.0.1 localhost 210.21.48.11;\n\n    access_log  /var/log/nginx/ssh_access.log  main;\n\n    location /8888 {\n        proxy_pass http://127.0.0.1:8888;\n    }\n\n}\nEOF\n\n# 重载nginx配置\nnginx -s reload\n\n## 如果没有安装nginx\n# 方式一\ndocker run --network=host -v /etc/nginx/conf.d/ssh.conf:/etc/nginx/conf.d/ssh.conf -i --rm nginx\n\n# 方式二\n# 安装nginx(docker安装nginx)\ndocker run --network=host -it --rm nginx bash\n# 执行命令\nnohup /docker-entrypoint.sh nginx -g 'daemon off;' &\n```\n\n- 内网服务器ssh配置\n\n```shell\n# 默认是在本地回环地址上，需要其他机器访问的话可以指定 ip 或者增加 -g 参数开启网关模式\nssh -N -R 210.21.48.69:8888:192.168.3.14:8888 ljf@210.21.48.69 -p 10086\n```\n","source":"_posts/docker/doc/material/ai/os/proxy/ssh加nginx实现内网穿透.md","raw":"---\nlayout: default\ntitle: ssh加nginx实现内网穿透\nnav_order: 16\ndescription: ssh加nginx实现内网穿透\nparent: Proxy\nhas_children: false\npermalink: \"/docker/doc/material/ai/os/proxy/ssh加nginx实现内网穿透/\"\ngrand_parent: Os\n---\n\n# ssh加nginx实现内网穿透\n\n- 外网服务器nginx配置\n\n```shell\n# 创建配置文件\ntee /etc/nginx/conf.d/ssh.conf <<-'EOF'\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  127.0.0.1 localhost 210.21.48.11;\n\n    access_log  /var/log/nginx/ssh_access.log  main;\n\n    location /8888 {\n        proxy_pass http://127.0.0.1:8888;\n    }\n\n}\nEOF\n\n# 重载nginx配置\nnginx -s reload\n\n## 如果没有安装nginx\n# 方式一\ndocker run --network=host -v /etc/nginx/conf.d/ssh.conf:/etc/nginx/conf.d/ssh.conf -i --rm nginx\n\n# 方式二\n# 安装nginx(docker安装nginx)\ndocker run --network=host -it --rm nginx bash\n# 执行命令\nnohup /docker-entrypoint.sh nginx -g 'daemon off;' &\n```\n\n- 内网服务器ssh配置\n\n```shell\n# 默认是在本地回环地址上，需要其他机器访问的话可以指定 ip 或者增加 -g 参数开启网关模式\nssh -N -R 210.21.48.69:8888:192.168.3.14:8888 ljf@210.21.48.69 -p 10086\n```\n","slug":"docker/doc/material/ai/os/proxy/ssh加nginx实现内网穿透","published":1,"date":"2025-02-23T07:43:31.430Z","updated":"2025-02-23T07:43:31.437Z","__permalink":"/docker/doc/material/ai/os/proxy/ssh加nginx实现内网穿透/","comments":1,"photos":[],"_id":"cm7k5rwbi00cimsws9u00euaz","content":"<h1 id=\"ssh加nginx实现内网穿透\"><a href=\"#ssh加nginx实现内网穿透\" class=\"headerlink\" title=\"ssh加nginx实现内网穿透\"></a>ssh加nginx实现内网穿透</h1><ul>\n<li>外网服务器nginx配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建配置文件</span></span><br><span class=\"line\">tee /etc/nginx/conf.d/ssh.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  127.0.0.1 localhost 210.21.48.11;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/ssh_access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /8888 &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8888;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重载nginx配置</span></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 如果没有安装nginx</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">方式一</span></span><br><span class=\"line\">docker run --network=host -v /etc/nginx/conf.d/ssh.conf:/etc/nginx/conf.d/ssh.conf -i --rm nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">方式二</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装nginx(docker安装nginx)</span></span><br><span class=\"line\">docker run --network=host -it --rm nginx bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行命令</span></span><br><span class=\"line\">nohup /docker-entrypoint.sh nginx -g &#x27;daemon off;&#x27; &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>内网服务器ssh配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认是在本地回环地址上，需要其他机器访问的话可以指定 ip 或者增加 -g 参数开启网关模式</span></span><br><span class=\"line\">ssh -N -R 210.21.48.69:8888:192.168.3.14:8888 ljf@210.21.48.69 -p 10086</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"ssh加nginx实现内网穿透\"><a href=\"#ssh加nginx实现内网穿透\" class=\"headerlink\" title=\"ssh加nginx实现内网穿透\"></a>ssh加nginx实现内网穿透</h1><ul>\n<li>外网服务器nginx配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建配置文件</span></span><br><span class=\"line\">tee /etc/nginx/conf.d/ssh.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    listen  [::]:80;</span><br><span class=\"line\">    server_name  127.0.0.1 localhost 210.21.48.11;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/ssh_access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /8888 &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8888;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重载nginx配置</span></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 如果没有安装nginx</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">方式一</span></span><br><span class=\"line\">docker run --network=host -v /etc/nginx/conf.d/ssh.conf:/etc/nginx/conf.d/ssh.conf -i --rm nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">方式二</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装nginx(docker安装nginx)</span></span><br><span class=\"line\">docker run --network=host -it --rm nginx bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行命令</span></span><br><span class=\"line\">nohup /docker-entrypoint.sh nginx -g &#x27;daemon off;&#x27; &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>内网服务器ssh配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认是在本地回环地址上，需要其他机器访问的话可以指定 ip 或者增加 -g 参数开启网关模式</span></span><br><span class=\"line\">ssh -N -R 210.21.48.69:8888:192.168.3.14:8888 ljf@210.21.48.69 -p 10086</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":16,"description":"注入代理相关文档","parent":"Inject","has_children":false,"grand_parent":"K8s","_content":"\n# 注入代理相关文档\n\n## 前置条件\n\n已经安装了[cert-manager](https://github.com/183461750/doc-record/blob/4ed197082e57f368c4eebf6b91e9c1260f6ae8c5/k8s/docs/cert-manager/doc.md)\n\n## 安装skywalking-swck-operator\n\n[参考文档](https://github.com/apache/skywalking-swck/blob/master/docs/operator.md)\n\n```bash\n# 使用下载的配置(需先解压)(./skywalking-swck)(推荐使用)\nkubectl apply -f skywalking-swck-<SWCK_VERSION>-bin/config/operator-bundle.yaml\nkubectl apply -f skywalking-swck/skywalking-swck-0.9.0-bin/config/operator-bundle.yaml\n\n# 下面这个方式貌似有问题\nkubectl apply -k \"github.com/apache/skywalking-swck/operator/config/default\"\n# or\nkubectl apply -k \"github.com/apache/skywalking-swck/operator/config/default?ref=v0.8.0\"\n```\n\n- `gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0`镜像拉不下来的问题处理\n\n[参考文章](https://juejin.cn/post/7099354856078442509)\n\n可以使用`kubesphere/kube-rbac-proxy:v0.8.0`进行替代\n\n```bash\ndocker pull kubesphere/kube-rbac-proxy:v0.8.0\ndocker tag kubesphere/kube-rbac-proxy:v0.8.0 gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0\n# 或者修改部署配置文件, 改变拉取的镜像\n```\n\n## 安装Custom Metrics Adapter\n\n[参考文档](https://github.com/apache/skywalking-swck/blob/master/docs/custom-metrics-adapter.md)\n在 skywalking-swck 中，Custom Metrics Adapter 是一个可选组件，用于扩展 SkyWalking 的监控能力。它允许你使用 Kubernetes 的 Custom Metrics API 来收集和展示自定义的监控指标。\n\n```bash\nkubectl apply -k \"github.com/apache/skywalking-swck/adapter/config\"\n# or\nkubectl apply -k \"github.com/apache/skywalking-swck/adapter/config?ref=v0.8.0\"\n```\n\n## 安装注入代理\n\n```bash\n# 启动测试demo应用\nkubectl apply -f demo1.yaml\n# Label the namespace with swck-injection=enabled\nkubectl label namespace skywalking swck-injection=enabled\nkubectl -n skywalking patch deployment demo1 --patch '{\n    \"spec\": {\n        \"template\": {\n            \"metadata\": {\n                \"labels\": {\n                    \"swck-java-agent-injected\": \"true\"\n                }\n            }\n        }\n    }\n}'\n# 查看被打标的pods\nkubectl get pod -l swck-java-agent-injected=true\n# 查看javaagent\nkubectl get javaagent\n# 查看javaagent详情\nkubectl get javaagent app-demo1-javaagent -o yaml\n# Use SwAgent CR to setup override default configuration\nkubectl -n skywalking apply -f swagent.yaml\n# 查看\nkubectl -n skywalking get SwAgent\n# 查看并重启\n# verify pods to be delete \nkubectl -n skywalking get pods -l app=demo1\n# delete pods\nkubectl -n skywalking delete pods -l app=demo1\n# 到skywalking上应该就能看到这个服务了\n```\n","source":"_posts/kubernetes/app/skywalking/java/k8s/inject/inject.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 16\ndescription: 注入代理相关文档\nparent: Inject\nhas_children: false\npermalink: \"/kubernetes/app/skywalking/java/k8s/inject/inject/\"\ngrand_parent: K8s\n---\n\n# 注入代理相关文档\n\n## 前置条件\n\n已经安装了[cert-manager](https://github.com/183461750/doc-record/blob/4ed197082e57f368c4eebf6b91e9c1260f6ae8c5/k8s/docs/cert-manager/doc.md)\n\n## 安装skywalking-swck-operator\n\n[参考文档](https://github.com/apache/skywalking-swck/blob/master/docs/operator.md)\n\n```bash\n# 使用下载的配置(需先解压)(./skywalking-swck)(推荐使用)\nkubectl apply -f skywalking-swck-<SWCK_VERSION>-bin/config/operator-bundle.yaml\nkubectl apply -f skywalking-swck/skywalking-swck-0.9.0-bin/config/operator-bundle.yaml\n\n# 下面这个方式貌似有问题\nkubectl apply -k \"github.com/apache/skywalking-swck/operator/config/default\"\n# or\nkubectl apply -k \"github.com/apache/skywalking-swck/operator/config/default?ref=v0.8.0\"\n```\n\n- `gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0`镜像拉不下来的问题处理\n\n[参考文章](https://juejin.cn/post/7099354856078442509)\n\n可以使用`kubesphere/kube-rbac-proxy:v0.8.0`进行替代\n\n```bash\ndocker pull kubesphere/kube-rbac-proxy:v0.8.0\ndocker tag kubesphere/kube-rbac-proxy:v0.8.0 gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0\n# 或者修改部署配置文件, 改变拉取的镜像\n```\n\n## 安装Custom Metrics Adapter\n\n[参考文档](https://github.com/apache/skywalking-swck/blob/master/docs/custom-metrics-adapter.md)\n在 skywalking-swck 中，Custom Metrics Adapter 是一个可选组件，用于扩展 SkyWalking 的监控能力。它允许你使用 Kubernetes 的 Custom Metrics API 来收集和展示自定义的监控指标。\n\n```bash\nkubectl apply -k \"github.com/apache/skywalking-swck/adapter/config\"\n# or\nkubectl apply -k \"github.com/apache/skywalking-swck/adapter/config?ref=v0.8.0\"\n```\n\n## 安装注入代理\n\n```bash\n# 启动测试demo应用\nkubectl apply -f demo1.yaml\n# Label the namespace with swck-injection=enabled\nkubectl label namespace skywalking swck-injection=enabled\nkubectl -n skywalking patch deployment demo1 --patch '{\n    \"spec\": {\n        \"template\": {\n            \"metadata\": {\n                \"labels\": {\n                    \"swck-java-agent-injected\": \"true\"\n                }\n            }\n        }\n    }\n}'\n# 查看被打标的pods\nkubectl get pod -l swck-java-agent-injected=true\n# 查看javaagent\nkubectl get javaagent\n# 查看javaagent详情\nkubectl get javaagent app-demo1-javaagent -o yaml\n# Use SwAgent CR to setup override default configuration\nkubectl -n skywalking apply -f swagent.yaml\n# 查看\nkubectl -n skywalking get SwAgent\n# 查看并重启\n# verify pods to be delete \nkubectl -n skywalking get pods -l app=demo1\n# delete pods\nkubectl -n skywalking delete pods -l app=demo1\n# 到skywalking上应该就能看到这个服务了\n```\n","slug":"kubernetes/app/skywalking/java/k8s/inject/inject","published":1,"date":"2025-02-23T07:43:31.611Z","updated":"2025-02-23T07:43:31.611Z","__permalink":"/kubernetes/app/skywalking/java/k8s/inject/inject/","comments":1,"photos":[],"_id":"cm7k5rwbi00cjmswse48d88nx","content":"<h1 id=\"注入代理相关文档\"><a href=\"#注入代理相关文档\" class=\"headerlink\" title=\"注入代理相关文档\"></a>注入代理相关文档</h1><h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><p>已经安装了<a href=\"https://github.com/183461750/doc-record/blob/4ed197082e57f368c4eebf6b91e9c1260f6ae8c5/k8s/docs/cert-manager/doc.md\">cert-manager</a></p>\n<h2 id=\"安装skywalking-swck-operator\"><a href=\"#安装skywalking-swck-operator\" class=\"headerlink\" title=\"安装skywalking-swck-operator\"></a>安装skywalking-swck-operator</h2><p><a href=\"https://github.com/apache/skywalking-swck/blob/master/docs/operator.md\">参考文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用下载的配置(需先解压)(./skywalking-swck)(推荐使用)</span></span><br><span class=\"line\">kubectl apply -f skywalking-swck-&lt;SWCK_VERSION&gt;-bin/config/operator-bundle.yaml</span><br><span class=\"line\">kubectl apply -f skywalking-swck/skywalking-swck-0.9.0-bin/config/operator-bundle.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下面这个方式貌似有问题</span></span><br><span class=\"line\">kubectl apply -k <span class=\"string\">&quot;github.com/apache/skywalking-swck/operator/config/default&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">kubectl apply -k <span class=\"string\">&quot;github.com/apache/skywalking-swck/operator/config/default?ref=v0.8.0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0</code>镜像拉不下来的问题处理</li>\n</ul>\n<p><a href=\"https://juejin.cn/post/7099354856078442509\">参考文章</a></p>\n<p>可以使用<code>kubesphere/kube-rbac-proxy:v0.8.0</code>进行替代</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull kubesphere/kube-rbac-proxy:v0.8.0</span><br><span class=\"line\">docker tag kubesphere/kube-rbac-proxy:v0.8.0 gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0</span><br><span class=\"line\"><span class=\"comment\"># 或者修改部署配置文件, 改变拉取的镜像</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Custom-Metrics-Adapter\"><a href=\"#安装Custom-Metrics-Adapter\" class=\"headerlink\" title=\"安装Custom Metrics Adapter\"></a>安装Custom Metrics Adapter</h2><p><a href=\"https://github.com/apache/skywalking-swck/blob/master/docs/custom-metrics-adapter.md\">参考文档</a><br>在 skywalking-swck 中，Custom Metrics Adapter 是一个可选组件，用于扩展 SkyWalking 的监控能力。它允许你使用 Kubernetes 的 Custom Metrics API 来收集和展示自定义的监控指标。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -k <span class=\"string\">&quot;github.com/apache/skywalking-swck/adapter/config&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">kubectl apply -k <span class=\"string\">&quot;github.com/apache/skywalking-swck/adapter/config?ref=v0.8.0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装注入代理\"><a href=\"#安装注入代理\" class=\"headerlink\" title=\"安装注入代理\"></a>安装注入代理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动测试demo应用</span></span><br><span class=\"line\">kubectl apply -f demo1.yaml</span><br><span class=\"line\"><span class=\"comment\"># Label the namespace with swck-injection=enabled</span></span><br><span class=\"line\">kubectl label namespace skywalking swck-injection=enabled</span><br><span class=\"line\">kubectl -n skywalking patch deployment demo1 --patch <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;spec&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;template&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;metadata&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;labels&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;swck-java-agent-injected&quot;: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看被打标的pods</span></span><br><span class=\"line\">kubectl get pod -l swck-java-agent-injected=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 查看javaagent</span></span><br><span class=\"line\">kubectl get javaagent</span><br><span class=\"line\"><span class=\"comment\"># 查看javaagent详情</span></span><br><span class=\"line\">kubectl get javaagent app-demo1-javaagent -o yaml</span><br><span class=\"line\"><span class=\"comment\"># Use SwAgent CR to setup override default configuration</span></span><br><span class=\"line\">kubectl -n skywalking apply -f swagent.yaml</span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">kubectl -n skywalking get SwAgent</span><br><span class=\"line\"><span class=\"comment\"># 查看并重启</span></span><br><span class=\"line\"><span class=\"comment\"># verify pods to be delete </span></span><br><span class=\"line\">kubectl -n skywalking get pods -l app=demo1</span><br><span class=\"line\"><span class=\"comment\"># delete pods</span></span><br><span class=\"line\">kubectl -n skywalking delete pods -l app=demo1</span><br><span class=\"line\"><span class=\"comment\"># 到skywalking上应该就能看到这个服务了</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"注入代理相关文档\"><a href=\"#注入代理相关文档\" class=\"headerlink\" title=\"注入代理相关文档\"></a>注入代理相关文档</h1><h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><p>已经安装了<a href=\"https://github.com/183461750/doc-record/blob/4ed197082e57f368c4eebf6b91e9c1260f6ae8c5/k8s/docs/cert-manager/doc.md\">cert-manager</a></p>\n<h2 id=\"安装skywalking-swck-operator\"><a href=\"#安装skywalking-swck-operator\" class=\"headerlink\" title=\"安装skywalking-swck-operator\"></a>安装skywalking-swck-operator</h2><p><a href=\"https://github.com/apache/skywalking-swck/blob/master/docs/operator.md\">参考文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用下载的配置(需先解压)(./skywalking-swck)(推荐使用)</span></span><br><span class=\"line\">kubectl apply -f skywalking-swck-&lt;SWCK_VERSION&gt;-bin/config/operator-bundle.yaml</span><br><span class=\"line\">kubectl apply -f skywalking-swck/skywalking-swck-0.9.0-bin/config/operator-bundle.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下面这个方式貌似有问题</span></span><br><span class=\"line\">kubectl apply -k <span class=\"string\">&quot;github.com/apache/skywalking-swck/operator/config/default&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">kubectl apply -k <span class=\"string\">&quot;github.com/apache/skywalking-swck/operator/config/default?ref=v0.8.0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0</code>镜像拉不下来的问题处理</li>\n</ul>\n<p><a href=\"https://juejin.cn/post/7099354856078442509\">参考文章</a></p>\n<p>可以使用<code>kubesphere/kube-rbac-proxy:v0.8.0</code>进行替代</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull kubesphere/kube-rbac-proxy:v0.8.0</span><br><span class=\"line\">docker tag kubesphere/kube-rbac-proxy:v0.8.0 gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0</span><br><span class=\"line\"><span class=\"comment\"># 或者修改部署配置文件, 改变拉取的镜像</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Custom-Metrics-Adapter\"><a href=\"#安装Custom-Metrics-Adapter\" class=\"headerlink\" title=\"安装Custom Metrics Adapter\"></a>安装Custom Metrics Adapter</h2><p><a href=\"https://github.com/apache/skywalking-swck/blob/master/docs/custom-metrics-adapter.md\">参考文档</a><br>在 skywalking-swck 中，Custom Metrics Adapter 是一个可选组件，用于扩展 SkyWalking 的监控能力。它允许你使用 Kubernetes 的 Custom Metrics API 来收集和展示自定义的监控指标。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -k <span class=\"string\">&quot;github.com/apache/skywalking-swck/adapter/config&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">kubectl apply -k <span class=\"string\">&quot;github.com/apache/skywalking-swck/adapter/config?ref=v0.8.0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装注入代理\"><a href=\"#安装注入代理\" class=\"headerlink\" title=\"安装注入代理\"></a>安装注入代理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动测试demo应用</span></span><br><span class=\"line\">kubectl apply -f demo1.yaml</span><br><span class=\"line\"><span class=\"comment\"># Label the namespace with swck-injection=enabled</span></span><br><span class=\"line\">kubectl label namespace skywalking swck-injection=enabled</span><br><span class=\"line\">kubectl -n skywalking patch deployment demo1 --patch <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;spec&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;template&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;metadata&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;labels&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;swck-java-agent-injected&quot;: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看被打标的pods</span></span><br><span class=\"line\">kubectl get pod -l swck-java-agent-injected=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 查看javaagent</span></span><br><span class=\"line\">kubectl get javaagent</span><br><span class=\"line\"><span class=\"comment\"># 查看javaagent详情</span></span><br><span class=\"line\">kubectl get javaagent app-demo1-javaagent -o yaml</span><br><span class=\"line\"><span class=\"comment\"># Use SwAgent CR to setup override default configuration</span></span><br><span class=\"line\">kubectl -n skywalking apply -f swagent.yaml</span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">kubectl -n skywalking get SwAgent</span><br><span class=\"line\"><span class=\"comment\"># 查看并重启</span></span><br><span class=\"line\"><span class=\"comment\"># verify pods to be delete </span></span><br><span class=\"line\">kubectl -n skywalking get pods -l app=demo1</span><br><span class=\"line\"><span class=\"comment\"># delete pods</span></span><br><span class=\"line\">kubectl -n skywalking delete pods -l app=demo1</span><br><span class=\"line\"><span class=\"comment\"># 到skywalking上应该就能看到这个服务了</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Config","nav_order":7,"has_children":true,"parent":"Config","_content":"\n# Config\n","source":"_posts/docker/app/devs/data/TiDB/v1/config/index.md","raw":"---\nlayout: default\ntitle: Config\nnav_order: 7\nhas_children: true\nparent: Config\npermalink: \"/docker/app/devs/data/tidb/v1/config/\"\n---\n\n# Config\n","slug":"docker/app/devs/data/TiDB/v1/config/index","published":1,"date":"2025-02-23T07:43:31.049Z","updated":"2025-02-23T07:43:31.049Z","__permalink":"/docker/app/devs/data/tidb/v1/config/","comments":1,"photos":[],"_id":"cm7k5rwbi00ckmswsea2m6199","content":"<h1 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h1>","excerpt":"","more":"<h1 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h1>"},{"layout":"default","title":"Test","nav_order":7,"has_children":true,"parent":"Test","_content":"\n# Test\n","source":"_posts/docker/app/devs/data/elasticsearch/v1/test/index.md","raw":"---\nlayout: default\ntitle: Test\nnav_order: 7\nhas_children: true\nparent: Test\npermalink: \"/docker/app/devs/data/elasticsearch/v1/test/\"\n---\n\n# Test\n","slug":"docker/app/devs/data/elasticsearch/v1/test/index","published":1,"date":"2025-02-23T07:43:31.065Z","updated":"2025-02-23T07:43:31.065Z","__permalink":"/docker/app/devs/data/elasticsearch/v1/test/","comments":1,"photos":[],"_id":"cm7k5rwbi00clmswsbuy8cm2c","content":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>","excerpt":"","more":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>"},{"layout":"default","title":"doc","nav_order":17,"description":"es部署文档","parent":"Test","has_children":false,"grand_parent":"V1","_content":"\n# es部署文档\n\n## 启动命令\n\n```shell\ndocker stack deploy -c docker-compose-es-cluster-tls.yml es\n```\n\n## 检查集群部署是否正常\n\n```shell\n在kibana的Dev Tools中访问：GET /_cat/nodes,显示如下结果：\n\n10.0.1.64 20 54 12 0.98 1.87 4.47 cdhilmrstw - es03\n10.0.1.62 51 54 12 0.98 1.87 4.47 cdhilmrstw - es02\n10.0.1.60 57 54 12 0.98 1.87 4.47 cdhilmrstw * es01\n```\n\n## 参考文章\n\n- [docker swarm 搭建ES集群（TLS版）](https://www.cnblogs.com/JentZhang/p/17227129.html)\n","source":"_posts/docker/app/devs/data/elasticsearch/v1/test/test.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 17\ndescription: es部署文档\nparent: Test\nhas_children: false\npermalink: \"/docker/app/devs/data/elasticsearch/v1/test/test/\"\ngrand_parent: V1\n---\n\n# es部署文档\n\n## 启动命令\n\n```shell\ndocker stack deploy -c docker-compose-es-cluster-tls.yml es\n```\n\n## 检查集群部署是否正常\n\n```shell\n在kibana的Dev Tools中访问：GET /_cat/nodes,显示如下结果：\n\n10.0.1.64 20 54 12 0.98 1.87 4.47 cdhilmrstw - es03\n10.0.1.62 51 54 12 0.98 1.87 4.47 cdhilmrstw - es02\n10.0.1.60 57 54 12 0.98 1.87 4.47 cdhilmrstw * es01\n```\n\n## 参考文章\n\n- [docker swarm 搭建ES集群（TLS版）](https://www.cnblogs.com/JentZhang/p/17227129.html)\n","slug":"docker/app/devs/data/elasticsearch/v1/test/test","published":1,"date":"2025-02-23T07:43:31.065Z","updated":"2025-02-23T07:43:31.065Z","__permalink":"/docker/app/devs/data/elasticsearch/v1/test/test/","comments":1,"photos":[],"_id":"cm7k5rwbi00cmmswsd9hj01iq","content":"<h1 id=\"es部署文档\"><a href=\"#es部署文档\" class=\"headerlink\" title=\"es部署文档\"></a>es部署文档</h1><h2 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose-es-cluster-tls.yml es</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检查集群部署是否正常\"><a href=\"#检查集群部署是否正常\" class=\"headerlink\" title=\"检查集群部署是否正常\"></a>检查集群部署是否正常</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在kibana的Dev Tools中访问：GET /_cat/nodes,显示如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.1.64 20 54 12 0.98 1.87 4.47 cdhilmrstw - es03</span><br><span class=\"line\">10.0.1.62 51 54 12 0.98 1.87 4.47 cdhilmrstw - es02</span><br><span class=\"line\">10.0.1.60 57 54 12 0.98 1.87 4.47 cdhilmrstw * es01</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.cnblogs.com/JentZhang/p/17227129.html\">docker swarm 搭建ES集群（TLS版）</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"es部署文档\"><a href=\"#es部署文档\" class=\"headerlink\" title=\"es部署文档\"></a>es部署文档</h1><h2 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose-es-cluster-tls.yml es</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检查集群部署是否正常\"><a href=\"#检查集群部署是否正常\" class=\"headerlink\" title=\"检查集群部署是否正常\"></a>检查集群部署是否正常</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在kibana的Dev Tools中访问：GET /_cat/nodes,显示如下结果：</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.1.64 20 54 12 0.98 1.87 4.47 cdhilmrstw - es03</span><br><span class=\"line\">10.0.1.62 51 54 12 0.98 1.87 4.47 cdhilmrstw - es02</span><br><span class=\"line\">10.0.1.60 57 54 12 0.98 1.87 4.47 cdhilmrstw * es01</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.cnblogs.com/JentZhang/p/17227129.html\">docker swarm 搭建ES集群（TLS版）</a></li>\n</ul>\n"},{"layout":"default","title":"Swarm","nav_order":7,"has_children":true,"parent":"Swarm","_content":"\n# Swarm\n","source":"_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/index.md","raw":"---\nlayout: default\ntitle: Swarm\nnav_order: 7\nhas_children: true\nparent: Swarm\npermalink: \"/docker/app/devs/data/mysql/mysql_ndb_cluster/swarm/\"\n---\n\n# Swarm\n","slug":"docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/index","published":1,"date":"2025-02-23T07:43:31.062Z","updated":"2025-02-23T07:43:31.063Z","__permalink":"/docker/app/devs/data/mysql/mysql_ndb_cluster/swarm/","comments":1,"photos":[],"_id":"cm7k5rwbi00cnmswscpzf15jj","content":"<h1 id=\"Swarm\"><a href=\"#Swarm\" class=\"headerlink\" title=\"Swarm\"></a>Swarm</h1>","excerpt":"","more":"<h1 id=\"Swarm\"><a href=\"#Swarm\" class=\"headerlink\" title=\"Swarm\"></a>Swarm</h1>"},{"layout":"default","title":"doc","nav_order":17,"description":"docker swarm版部署文档","parent":"Swarm","has_children":false,"grand_parent":"Mysql Ndb Cluster","_content":"\n# docker swarm版部署文档\n\n## 创建网络\n\n```shell\n# 初始化swarm\n# docker swarm init\n# 这里网络可以不创建，需要的话可以通过以下命令创建\n# docker network create -d  overlay --attachable middleware\n```\n\n## 启动集群\n\n```shell\ndocker stack deploy -c docker-compose.yml mysqlCluster\n```\n\n## 参考资料\n\n- [docker环境安装MySQL-Cluster](http://t.csdnimg.cn/9KmNs)\n","source":"_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/swarm.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 17\ndescription: docker swarm版部署文档\nparent: Swarm\nhas_children: false\npermalink: \"/docker/app/devs/data/mysql/mysql_ndb_cluster/swarm/swarm/\"\ngrand_parent: Mysql Ndb Cluster\n---\n\n# docker swarm版部署文档\n\n## 创建网络\n\n```shell\n# 初始化swarm\n# docker swarm init\n# 这里网络可以不创建，需要的话可以通过以下命令创建\n# docker network create -d  overlay --attachable middleware\n```\n\n## 启动集群\n\n```shell\ndocker stack deploy -c docker-compose.yml mysqlCluster\n```\n\n## 参考资料\n\n- [docker环境安装MySQL-Cluster](http://t.csdnimg.cn/9KmNs)\n","slug":"docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/swarm","published":1,"date":"2025-02-23T07:43:31.063Z","updated":"2025-02-23T07:43:31.063Z","__permalink":"/docker/app/devs/data/mysql/mysql_ndb_cluster/swarm/swarm/","comments":1,"photos":[],"_id":"cm7k5rwbi00comswsepoqez1o","content":"<h1 id=\"docker-swarm版部署文档\"><a href=\"#docker-swarm版部署文档\" class=\"headerlink\" title=\"docker swarm版部署文档\"></a>docker swarm版部署文档</h1><h2 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化swarm</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker swarm init</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里网络可以不创建，需要的话可以通过以下命令创建</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker network create -d  overlay --attachable middleware</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml mysqlCluster</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://t.csdnimg.cn/9KmNs\">docker环境安装MySQL-Cluster</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"docker-swarm版部署文档\"><a href=\"#docker-swarm版部署文档\" class=\"headerlink\" title=\"docker swarm版部署文档\"></a>docker swarm版部署文档</h1><h2 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化swarm</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker swarm init</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里网络可以不创建，需要的话可以通过以下命令创建</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker network create -d  overlay --attachable middleware</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack deploy -c docker-compose.yml mysqlCluster</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://t.csdnimg.cn/9KmNs\">docker环境安装MySQL-Cluster</a></li>\n</ul>\n"},{"layout":"default","title":"Simple","nav_order":7,"has_children":true,"parent":"Simple","_content":"\n# Simple\n","source":"_posts/docker/app/devs/data/redis/cluster/simple/index.md","raw":"---\nlayout: default\ntitle: Simple\nnav_order: 7\nhas_children: true\nparent: Simple\npermalink: \"/docker/app/devs/data/redis/cluster/simple/\"\n---\n\n# Simple\n","slug":"docker/app/devs/data/redis/cluster/simple/index","published":1,"date":"2025-02-23T07:43:31.026Z","updated":"2025-02-23T07:43:31.026Z","__permalink":"/docker/app/devs/data/redis/cluster/simple/","comments":1,"photos":[],"_id":"cm7k5rwbi00cpmswsd7bnd2hy","content":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>","excerpt":"","more":"<h1 id=\"Simple\"><a href=\"#Simple\" class=\"headerlink\" title=\"Simple\"></a>Simple</h1>"},{"layout":"default","title":"Include-nothing","nav_order":7,"has_children":true,"parent":"Include-nothing","_content":"\n# Include-nothing\n","source":"_posts/docker/app/devs/jenkins/deploy/simple/include-nothing/index.md","raw":"---\nlayout: default\ntitle: Include-nothing\nnav_order: 7\nhas_children: true\nparent: Include-nothing\npermalink: \"/docker/app/devs/jenkins/deploy/simple/include-nothing/\"\n---\n\n# Include-nothing\n","slug":"docker/app/devs/jenkins/deploy/simple/include-nothing/index","published":1,"date":"2025-02-23T07:43:30.993Z","updated":"2025-02-23T07:43:30.993Z","__permalink":"/docker/app/devs/jenkins/deploy/simple/include-nothing/","comments":1,"photos":[],"_id":"cm7k5rwbj00cqmswsccd9b8yo","content":"<h1 id=\"Include-nothing\"><a href=\"#Include-nothing\" class=\"headerlink\" title=\"Include-nothing\"></a>Include-nothing</h1>","excerpt":"","more":"<h1 id=\"Include-nothing\"><a href=\"#Include-nothing\" class=\"headerlink\" title=\"Include-nothing\"></a>Include-nothing</h1>"},{"layout":"default","title":"Client","nav_order":7,"has_children":true,"parent":"Client","_content":"\n# Client\n","source":"_posts/docker/app/networks/vpn/openvpn/docker/client/index.md","raw":"---\nlayout: default\ntitle: Client\nnav_order: 7\nhas_children: true\nparent: Client\npermalink: \"/docker/app/networks/vpn/openvpn/docker/client/\"\n---\n\n# Client\n","slug":"docker/app/networks/vpn/openvpn/docker/client/index","published":1,"date":"2025-02-23T07:43:31.073Z","updated":"2025-02-23T07:43:31.073Z","__permalink":"/docker/app/networks/vpn/openvpn/docker/client/","comments":1,"photos":[],"_id":"cm7k5rwbj00crmsws9sajd8bl","content":"<h1 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h1>","excerpt":"","more":"<h1 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h1>"},{"layout":"default","title":"java-jar","nav_order":17,"description":"构建tomcat应用的相关记录","parent":"Include-nothing","has_children":false,"grand_parent":"Simple","_content":"\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n\n# 或使用\nclean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM eclipse-temurin:11-jre-alpine\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENV JAVA_OPTS=\"-Xms512m -Xmx512m\"\nENTRYPOINT java ${JAVA_OPTS} -Dloader.path=\"/www/java/lib\" -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    volumes:\n      - \"/www/temp/java/lib:/www/java/lib\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","source":"_posts/docker/app/devs/jenkins/deploy/simple/include-nothing/java-jar.md","raw":"---\nlayout: default\ntitle: java-jar\nnav_order: 17\ndescription: 构建tomcat应用的相关记录\nparent: Include-nothing\nhas_children: false\npermalink: \"/docker/app/devs/jenkins/deploy/simple/include-nothing/java-jar/\"\ngrand_parent: Simple\n---\n\n# 构建tomcat应用的相关记录\n\n## 环境变量\n\n- 系统管理 -> 系统配置 -> 全局属性 -> 环境变量 -> 新增键值对\n- DOCKER_JENKINS_WORKSPACE : /var/lib/docker/volumes/soft_jenkins_home/_data/workspace\n\n## jdk配置\n\n```shell\n# 新建目录\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/jdks\n# 下载jdk\nwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz\nwget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz\n# 解压\ntar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz\n\n# 系统管理 -> 全局工具配置 -> JDK\n# JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)\n```\n\n## maven配置\n\n```shell\n# 下载Maven Integration插件\n\n# 自定义settings.xml的配置\ncd /var/lib/docker/volumes/soft_jenkins_home/_data && mkdir -p ./soft/maven\ncode settings.xml\n# 复制./conf/settings.xml文件内容\n# 修改标签<localRepository>内容\n# 调整[系统管理 -> 全局工具配置 -> Maven 配置]\n# 默认(和全局) settings 提供 -> 文件系统中的 settings 文件 -> 文件路径(/var/jenkins_home/soft/maven/settings.xml)\n# maven v3.6.3\n```\n\n---\n\n## 构建脚本\n\n- maven 构建\n- 构建 -> 添加构建步骤 -> 调用顶层 maven 目标\n\n```shell\n# 目标\nclean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true\n\n# 也可替换为以下命令\nclean package -D maven.test.skip=true -P prod help:active-profiles\n\n# 或使用\nclean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am\n```\n\n- send build artifacts over SSH (Transfers Set -> Exec command)\n\n```shell\n# 第四版(swarm+私服)\n# docker images | awk '{if($1==\"$JOB_NAME\") print $3}' | xargs docker rmi\n\nexport app_version='1.0'\n\nif [ -z $DOCKER_JENKINS_WORKSPACE ]; then\n  echo \"环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)\"\n  exit -1\nfi\n\ncd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME\n\n# 编辑Dockerfile文件\ntee Dockerfile <<-'EOF'\nFROM eclipse-temurin:11-jre-alpine\nWORKDIR /workdir\nADD ./target/*.jar app.jar\nENV SPRING_PROFILES_ACTIVE=prod\nENV SERVER_PORT=8080\nENV JAVA_OPTS=\"-Xms512m -Xmx512m\"\nENTRYPOINT java ${JAVA_OPTS} -Dloader.path=\"/www/java/lib\" -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar\nEXPOSE 8080\nEOF\n\n# 构建镜像\ndocker build -t $JOB_NAME:$app_version .\n\n# 上传镜像到私服\ndocker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\ndocker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 删除本地镜像\ndocker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version\n\n# 编辑stack yml文件\ntee $JOB_NAME.yml <<-'EOF'\nversion: '3.5'\nservices:\n  $JOB_NAME:\n    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:${app_version}\n    environment:\n      TZ: \"Asia/Shanghai\"\n    volumes:\n      - \"/www/temp/java/lib:/www/java/lib\"\n    networks:\n      - middleware\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 1\n      restart_policy:\n        condition: on-failure\n\nnetworks:\n  middleware:\n    external: true\n\nEOF\n\ndocker stack up -c $JOB_NAME.yml app --with-registry-auth\n\n```\n","slug":"docker/app/devs/jenkins/deploy/simple/include-nothing/java-jar","published":1,"date":"2025-02-23T07:43:30.994Z","updated":"2025-02-23T07:43:30.994Z","__permalink":"/docker/app/devs/jenkins/deploy/simple/include-nothing/java-jar/","comments":1,"photos":[],"_id":"cm7k5rwbj00csmsws15wc66kl","content":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或使用</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM eclipse-temurin:11-jre-alpine</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENV JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span><br><span class=\"line\">ENTRYPOINT java $&#123;JAVA_OPTS&#125; -Dloader.path=&quot;/www/java/lib&quot; -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &quot;/www/temp/java/lib:/www/java/lib&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"构建tomcat应用的相关记录\"><a href=\"#构建tomcat应用的相关记录\" class=\"headerlink\" title=\"构建tomcat应用的相关记录\"></a>构建tomcat应用的相关记录</h1><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>系统管理 -&gt; 系统配置 -&gt; 全局属性 -&gt; 环境变量 -&gt; 新增键值对</li>\n<li>DOCKER_JENKINS_WORKSPACE : &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;soft_jenkins_home&#x2F;_data&#x2F;workspace</li>\n</ul>\n<h2 id=\"jdk配置\"><a href=\"#jdk配置\" class=\"headerlink\" title=\"jdk配置\"></a>jdk配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建目录</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/jdks</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载jdk</span></span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\">wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统管理 -&gt; 全局工具配置 -&gt; JDK</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JAVA_HOME(/var/jenkins_home/soft/jdks/amazon-corretto-8.332.08.1-linux-x64)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载Maven Integration插件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义settings.xml的配置</span></span><br><span class=\"line\">cd /var/lib/docker/volumes/soft_jenkins_home/_data &amp;&amp; mkdir -p ./soft/maven</span><br><span class=\"line\">code settings.xml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制./conf/settings.xml文件内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签&lt;localRepository&gt;内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整[系统管理 -&gt; 全局工具配置 -&gt; Maven 配置]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认(和全局) settings 提供 -&gt; 文件系统中的 settings 文件 -&gt; 文件路径(/var/jenkins_home/soft/maven/settings.xml)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">maven v3.6.3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h2><ul>\n<li>maven 构建</li>\n<li>构建 -&gt; 添加构建步骤 -&gt; 调用顶层 maven 目标</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标</span></span><br><span class=\"line\">clean install -Dmaven.test.skip=true -Pprivate -Djava.awt.headless=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可替换为以下命令</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod help:active-profiles</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或使用</span></span><br><span class=\"line\">clean package -D maven.test.skip=true -P prod -pl cn.facoder:mall-server -am</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>send build artifacts over SSH (Transfers Set -&gt; Exec command)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第四版(swarm+私服)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker images | awk <span class=\"string\">&#x27;&#123;if($1==&quot;$JOB_NAME&quot;) print $3&#125;&#x27;</span> | xargs docker rmi</span></span><br><span class=\"line\"></span><br><span class=\"line\">export app_version=&#x27;1.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $DOCKER_JENKINS_WORKSPACE ]; then</span><br><span class=\"line\">  echo &quot;环境变量 DOCKER_JENKINS_WORKSPACE:[$DOCKER_JENKINS_WORKSPACE] 缺失，需配置 DOCKER_JENKINS_WORKSPACE 环境变量(exit -1)&quot;</span><br><span class=\"line\">  exit -1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $DOCKER_JENKINS_WORKSPACE/$JOB_NAME</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑Dockerfile文件</span></span><br><span class=\"line\">tee Dockerfile &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">FROM eclipse-temurin:11-jre-alpine</span><br><span class=\"line\">WORKDIR /workdir</span><br><span class=\"line\">ADD ./target/*.jar app.jar</span><br><span class=\"line\">ENV SPRING_PROFILES_ACTIVE=prod</span><br><span class=\"line\">ENV SERVER_PORT=8080</span><br><span class=\"line\">ENV JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span><br><span class=\"line\">ENTRYPOINT java $&#123;JAVA_OPTS&#125; -Dloader.path=&quot;/www/java/lib&quot; -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建镜像</span></span><br><span class=\"line\">docker build -t $JOB_NAME:$app_version .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传镜像到私服</span></span><br><span class=\"line\">docker tag $JOB_NAME:$app_version registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\">docker push registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除本地镜像</span></span><br><span class=\"line\">docker rmi registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$app_version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑stack yml文件</span></span><br><span class=\"line\">tee $JOB_NAME.yml &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">JOB_NAME:</span></span><br><span class=\"line\">    image: registry.cn-zhangjiakou.aliyuncs.com/fa/$JOB_NAME:$&#123;app_version&#125;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &quot;/www/temp/java/lib:/www/java/lib&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - middleware</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 1</span><br><span class=\"line\">      update_config:</span><br><span class=\"line\">        parallelism: 1</span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  middleware:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">docker stack up -c $JOB_NAME.yml app --with-registry-auth</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":18,"description":"部署内网redis","parent":"Intranet","has_children":false,"grand_parent":"Simple","_content":"\n# 部署内网redis\n\n## 相关执行命令\n\n```bash\n\n# 启动集群节点\ndocker stack up -c redis.yml rds-cluster\n\n# 打印创建集群的命令\necho docker exec -it $(docker ps -qf \"name=rds-cluster_redis1.1\") redis-cli --cluster create $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}:{{range $p, $conf := .NetworkSettings.Ports}}{{if eq (index (split $p \"/\") 0 | printf \"%.3s\") \"800\"}}{{(index (split $p \"/\") 0)}}{{end}}{{end}}' $(docker ps -qf \"name=rds-cluster_redis\")) --cluster-replicas 0 -a foobared\n\n```\n","source":"_posts/docker/app/devs/data/redis/cluster/simple/intranet/intranet.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 18\ndescription: 部署内网redis\nparent: Intranet\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/cluster/simple/intranet/intranet/\"\ngrand_parent: Simple\n---\n\n# 部署内网redis\n\n## 相关执行命令\n\n```bash\n\n# 启动集群节点\ndocker stack up -c redis.yml rds-cluster\n\n# 打印创建集群的命令\necho docker exec -it $(docker ps -qf \"name=rds-cluster_redis1.1\") redis-cli --cluster create $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}:{{range $p, $conf := .NetworkSettings.Ports}}{{if eq (index (split $p \"/\") 0 | printf \"%.3s\") \"800\"}}{{(index (split $p \"/\") 0)}}{{end}}{{end}}' $(docker ps -qf \"name=rds-cluster_redis\")) --cluster-replicas 0 -a foobared\n\n```\n","slug":"docker/app/devs/data/redis/cluster/simple/intranet/intranet","published":1,"date":"2025-02-23T07:43:31.028Z","updated":"2025-02-23T07:43:31.028Z","__permalink":"/docker/app/devs/data/redis/cluster/simple/intranet/intranet/","comments":1,"photos":[],"_id":"cm7k5rwbj00ctmsws8cuv4llz","content":"<h1 id=\"部署内网redis\"><a href=\"#部署内网redis\" class=\"headerlink\" title=\"部署内网redis\"></a>部署内网redis</h1><h2 id=\"相关执行命令\"><a href=\"#相关执行命令\" class=\"headerlink\" title=\"相关执行命令\"></a>相关执行命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动集群节点</span></span><br><span class=\"line\">docker stack up -c redis.yml rds-cluster</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印创建集群的命令</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> docker <span class=\"built_in\">exec</span> -it $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis1.1&quot;</span>) redis-cli --cluster create $(docker inspect -f <span class=\"string\">&#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;:&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125;&#123;&#123;if eq (index (split $p &quot;/&quot;) 0 | printf &quot;%.3s&quot;) &quot;800&quot;&#125;&#125;&#123;&#123;(index (split $p &quot;/&quot;) 0)&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis&quot;</span>)) --cluster-replicas 0 -a foobared</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"部署内网redis\"><a href=\"#部署内网redis\" class=\"headerlink\" title=\"部署内网redis\"></a>部署内网redis</h1><h2 id=\"相关执行命令\"><a href=\"#相关执行命令\" class=\"headerlink\" title=\"相关执行命令\"></a>相关执行命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动集群节点</span></span><br><span class=\"line\">docker stack up -c redis.yml rds-cluster</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印创建集群的命令</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> docker <span class=\"built_in\">exec</span> -it $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis1.1&quot;</span>) redis-cli --cluster create $(docker inspect -f <span class=\"string\">&#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;:&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125;&#123;&#123;if eq (index (split $p &quot;/&quot;) 0 | printf &quot;%.3s&quot;) &quot;800&quot;&#125;&#125;&#123;&#123;(index (split $p &quot;/&quot;) 0)&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis&quot;</span>)) --cluster-replicas 0 -a foobared</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":17,"description":"openvpn客户端","parent":"Client","has_children":false,"grand_parent":"Docker","_content":"\n# openvpn客户端\n\n[科学上网与VPN办公的完美结合](https://blog.long2ice.io/2023/03/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B8%8Evpn%E5%8A%9E%E5%85%AC%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/)\n\n```bash\n# Then on your host machine test it with curl:\ncurl ifconfig.co/json -x socks5h://myuser:mypass@127.0.0.1:7777\n```\n","source":"_posts/docker/app/networks/vpn/openvpn/docker/client/client.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 17\ndescription: openvpn客户端\nparent: Client\nhas_children: false\npermalink: \"/docker/app/networks/vpn/openvpn/docker/client/client/\"\ngrand_parent: Docker\n---\n\n# openvpn客户端\n\n[科学上网与VPN办公的完美结合](https://blog.long2ice.io/2023/03/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B8%8Evpn%E5%8A%9E%E5%85%AC%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/)\n\n```bash\n# Then on your host machine test it with curl:\ncurl ifconfig.co/json -x socks5h://myuser:mypass@127.0.0.1:7777\n```\n","slug":"docker/app/networks/vpn/openvpn/docker/client/client","published":1,"date":"2025-02-23T07:43:31.074Z","updated":"2025-02-23T07:43:31.074Z","__permalink":"/docker/app/networks/vpn/openvpn/docker/client/client/","comments":1,"photos":[],"_id":"cm7k5rwbj00cumsws62m625qy","content":"<h1 id=\"openvpn客户端\"><a href=\"#openvpn客户端\" class=\"headerlink\" title=\"openvpn客户端\"></a>openvpn客户端</h1><p><a href=\"https://blog.long2ice.io/2023/03/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B8%8Evpn%E5%8A%9E%E5%85%AC%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/\">科学上网与VPN办公的完美结合</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Then on your host machine test it with curl:</span></span><br><span class=\"line\">curl ifconfig.co/json -x socks5h://myuser:mypass@127.0.0.1:7777</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"openvpn客户端\"><a href=\"#openvpn客户端\" class=\"headerlink\" title=\"openvpn客户端\"></a>openvpn客户端</h1><p><a href=\"https://blog.long2ice.io/2023/03/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B8%8Evpn%E5%8A%9E%E5%85%AC%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/\">科学上网与VPN办公的完美结合</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Then on your host machine test it with curl:</span></span><br><span class=\"line\">curl ifconfig.co/json -x socks5h://myuser:mypass@127.0.0.1:7777</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"Intranet","nav_order":8,"has_children":true,"parent":"Intranet","_content":"\n# Intranet\n","source":"_posts/docker/app/devs/data/redis/cluster/simple/intranet/index.md","raw":"---\nlayout: default\ntitle: Intranet\nnav_order: 8\nhas_children: true\nparent: Intranet\npermalink: \"/docker/app/devs/data/redis/cluster/simple/intranet/\"\n---\n\n# Intranet\n","slug":"docker/app/devs/data/redis/cluster/simple/intranet/index","published":1,"date":"2025-02-23T07:43:31.028Z","updated":"2025-02-23T07:43:31.028Z","__permalink":"/docker/app/devs/data/redis/cluster/simple/intranet/","comments":1,"photos":[],"_id":"cm7k5rwbj00cvmswsbpgs0er5","content":"<h1 id=\"Intranet\"><a href=\"#Intranet\" class=\"headerlink\" title=\"Intranet\"></a>Intranet</h1>","excerpt":"","more":"<h1 id=\"Intranet\"><a href=\"#Intranet\" class=\"headerlink\" title=\"Intranet\"></a>Intranet</h1>"},{"layout":"default","title":"README","nav_order":18,"description":"TiDB dashboard With Grafana v5.x or later, we can use provisioning feature to statically provision datasources and dashboards. No need to use scripts to configure Grafana.","parent":"Dashboards","has_children":false,"grand_parent":"Config","_content":"\n# TiDB dashboard \nWith Grafana v5.x or later, we can use provisioning feature to statically provision datasources and dashboards. No need to use scripts to configure Grafana.\n\nThe JSON files in dashboards are copied from [tidb-ansible](https://github.com/pingcap/tidb-ansible/tree/master/scripts), and need to replace variables in the json file(It was did by python file before).\n\nIt is used in [tidb-docker-compose](https://github.com/pingcap/tidb-docker-compose) and [tidb-operator](https://github.com/pingcap/tidb-operator). \n","source":"_posts/docker/app/devs/data/TiDB/v1/config/dashboards/README.md","raw":"---\nlayout: default\ntitle: README\nnav_order: 18\ndescription: TiDB dashboard With Grafana v5.x or later, we can use provisioning feature\n  to statically provision datasources and dashboards. No need to use scripts to configure\n  Grafana.\nparent: Dashboards\nhas_children: false\npermalink: \"/docker/app/devs/data/tidb/v1/config/dashboards/readme/\"\ngrand_parent: Config\n---\n\n# TiDB dashboard \nWith Grafana v5.x or later, we can use provisioning feature to statically provision datasources and dashboards. No need to use scripts to configure Grafana.\n\nThe JSON files in dashboards are copied from [tidb-ansible](https://github.com/pingcap/tidb-ansible/tree/master/scripts), and need to replace variables in the json file(It was did by python file before).\n\nIt is used in [tidb-docker-compose](https://github.com/pingcap/tidb-docker-compose) and [tidb-operator](https://github.com/pingcap/tidb-operator). \n","slug":"docker/app/devs/data/TiDB/v1/config/dashboards/README","published":1,"date":"2025-02-23T07:43:31.050Z","updated":"2025-02-23T07:43:31.050Z","__permalink":"/docker/app/devs/data/tidb/v1/config/dashboards/readme/","comments":1,"photos":[],"_id":"cm7k5rwbj00cwmsws9pg0hfuo","content":"<h1 id=\"TiDB-dashboard\"><a href=\"#TiDB-dashboard\" class=\"headerlink\" title=\"TiDB dashboard\"></a>TiDB dashboard</h1><p>With Grafana v5.x or later, we can use provisioning feature to statically provision datasources and dashboards. No need to use scripts to configure Grafana.</p>\n<p>The JSON files in dashboards are copied from <a href=\"https://github.com/pingcap/tidb-ansible/tree/master/scripts\">tidb-ansible</a>, and need to replace variables in the json file(It was did by python file before).</p>\n<p>It is used in <a href=\"https://github.com/pingcap/tidb-docker-compose\">tidb-docker-compose</a> and <a href=\"https://github.com/pingcap/tidb-operator\">tidb-operator</a>. </p>\n","excerpt":"","more":"<h1 id=\"TiDB-dashboard\"><a href=\"#TiDB-dashboard\" class=\"headerlink\" title=\"TiDB dashboard\"></a>TiDB dashboard</h1><p>With Grafana v5.x or later, we can use provisioning feature to statically provision datasources and dashboards. No need to use scripts to configure Grafana.</p>\n<p>The JSON files in dashboards are copied from <a href=\"https://github.com/pingcap/tidb-ansible/tree/master/scripts\">tidb-ansible</a>, and need to replace variables in the json file(It was did by python file before).</p>\n<p>It is used in <a href=\"https://github.com/pingcap/tidb-docker-compose\">tidb-docker-compose</a> and <a href=\"https://github.com/pingcap/tidb-operator\">tidb-operator</a>. </p>\n"},{"layout":"default","title":"Dashboards","nav_order":8,"has_children":true,"parent":"Dashboards","_content":"\n# Dashboards\n","source":"_posts/docker/app/devs/data/TiDB/v1/config/dashboards/index.md","raw":"---\nlayout: default\ntitle: Dashboards\nnav_order: 8\nhas_children: true\nparent: Dashboards\npermalink: \"/docker/app/devs/data/tidb/v1/config/dashboards/\"\n---\n\n# Dashboards\n","slug":"docker/app/devs/data/TiDB/v1/config/dashboards/index","published":1,"date":"2025-02-23T07:43:31.052Z","updated":"2025-02-23T07:43:31.052Z","__permalink":"/docker/app/devs/data/tidb/v1/config/dashboards/","comments":1,"photos":[],"_id":"cm7k5rwbj00cxmsws4jf8drdm","content":"<h1 id=\"Dashboards\"><a href=\"#Dashboards\" class=\"headerlink\" title=\"Dashboards\"></a>Dashboards</h1>","excerpt":"","more":"<h1 id=\"Dashboards\"><a href=\"#Dashboards\" class=\"headerlink\" title=\"Dashboards\"></a>Dashboards</h1>"},{"layout":"default","title":"V11","nav_order":8,"has_children":true,"parent":"V11","_content":"\n# V11\n","source":"_posts/docker/app/devs/data/redis/cluster/simple/v11/index.md","raw":"---\nlayout: default\ntitle: V11\nnav_order: 8\nhas_children: true\nparent: V11\npermalink: \"/docker/app/devs/data/redis/cluster/simple/v11/\"\n---\n\n# V11\n","slug":"docker/app/devs/data/redis/cluster/simple/v11/index","published":1,"date":"2025-02-23T07:43:31.027Z","updated":"2025-02-23T07:43:31.028Z","__permalink":"/docker/app/devs/data/redis/cluster/simple/v11/","comments":1,"photos":[],"_id":"cm7k5rwbm00cymsws93zg4uck","content":"<h1 id=\"V11\"><a href=\"#V11\" class=\"headerlink\" title=\"V11\"></a>V11</h1>","excerpt":"","more":"<h1 id=\"V11\"><a href=\"#V11\" class=\"headerlink\" title=\"V11\"></a>V11</h1>"},{"layout":"default","title":"doc","nav_order":18,"description":"说明文档","parent":"V2","has_children":false,"grand_parent":"Simple","_content":"\n# 说明文档\n\n```shell\n\n# 需创建网络，看/doc/docker-networks.md文件\ndocker network create -d overlay --attachable middleware\n\n# 启动节点\ndocker stack deploy -c redis.yml redis-cluster\n\n# 部署集群的命令，通过echo打印出具体命令，再修改成对应的端口\necho docker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli --cluster create $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}:700' $(docker ps -qf \"name=redis-cluster_redis\")) --cluster-replicas 1 -a foobared\n\n# 修改端口后的部署集群命令(可用docker ps查看端口的顺序)(PS: 所有的IP都需要应用能够正常访问才行(PS: 放弃了这个做法，还是用docker内网IP，应用部署到同一docker network即可))\ndocker exec -it 9f11d0bda1a1 redis-cli --cluster create 10.0.1.225:7001 10.0.1.223:7006 10.0.1.221:7005 10.0.1.219:7004 10.0.1.217:7003 10.0.1.215:7002 --cluster-replicas 1 -a foobared\n\n# 10.0.1.144:7001,10.0.1.142:7006,10.0.1.140:7005,10.0.1.138:7004,10.0.1.136:7003,10.0.1.134:7002\n\n# 查看集群是否健康\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -p 7001 -a foobared cluster info\n\n### 测试执行命令\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -c -p 7001 -a foobared info Replication\n\n####################################################################################################################################\n\n## 示例\n# 自动拼接端口的方式\necho docker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli --cluster create $(index=1; for ip in $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}' $(docker ps -qf \"name=redis-cluster_redis\")); do echo \"${ip}:700${index}\"; ((index++)); done) --cluster-replicas 1 -a foobared\n\n```\n\n## 参考文章\n\n- [参考文章](https://blog.csdn.net/chinasun2015/article/details/122474365)\n- [参考文章(官方)](https://raw.githubusercontent.com/redis/redis/5.0/redis.conf)\n","source":"_posts/docker/app/devs/data/redis/cluster/simple/v2/v2.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 18\ndescription: 说明文档\nparent: V2\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/cluster/simple/v2/v2/\"\ngrand_parent: Simple\n---\n\n# 说明文档\n\n```shell\n\n# 需创建网络，看/doc/docker-networks.md文件\ndocker network create -d overlay --attachable middleware\n\n# 启动节点\ndocker stack deploy -c redis.yml redis-cluster\n\n# 部署集群的命令，通过echo打印出具体命令，再修改成对应的端口\necho docker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli --cluster create $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}:700' $(docker ps -qf \"name=redis-cluster_redis\")) --cluster-replicas 1 -a foobared\n\n# 修改端口后的部署集群命令(可用docker ps查看端口的顺序)(PS: 所有的IP都需要应用能够正常访问才行(PS: 放弃了这个做法，还是用docker内网IP，应用部署到同一docker network即可))\ndocker exec -it 9f11d0bda1a1 redis-cli --cluster create 10.0.1.225:7001 10.0.1.223:7006 10.0.1.221:7005 10.0.1.219:7004 10.0.1.217:7003 10.0.1.215:7002 --cluster-replicas 1 -a foobared\n\n# 10.0.1.144:7001,10.0.1.142:7006,10.0.1.140:7005,10.0.1.138:7004,10.0.1.136:7003,10.0.1.134:7002\n\n# 查看集群是否健康\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -p 7001 -a foobared cluster info\n\n### 测试执行命令\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -c -p 7001 -a foobared info Replication\n\n####################################################################################################################################\n\n## 示例\n# 自动拼接端口的方式\necho docker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli --cluster create $(index=1; for ip in $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}' $(docker ps -qf \"name=redis-cluster_redis\")); do echo \"${ip}:700${index}\"; ((index++)); done) --cluster-replicas 1 -a foobared\n\n```\n\n## 参考文章\n\n- [参考文章](https://blog.csdn.net/chinasun2015/article/details/122474365)\n- [参考文章(官方)](https://raw.githubusercontent.com/redis/redis/5.0/redis.conf)\n","slug":"docker/app/devs/data/redis/cluster/simple/v2/v2","published":1,"date":"2025-02-23T07:43:31.025Z","updated":"2025-02-23T07:43:31.025Z","__permalink":"/docker/app/devs/data/redis/cluster/simple/v2/v2/","comments":1,"photos":[],"_id":"cm7k5rwbm00czmswsazn0fjiv","content":"<h1 id=\"说明文档\"><a href=\"#说明文档\" class=\"headerlink\" title=\"说明文档\"></a>说明文档</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需创建网络，看/doc/docker-networks.md文件</span></span><br><span class=\"line\">docker network create -d overlay --attachable middleware</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动节点</span></span><br><span class=\"line\">docker stack deploy -c redis.yml redis-cluster</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署集群的命令，通过<span class=\"built_in\">echo</span>打印出具体命令，再修改成对应的端口</span></span><br><span class=\"line\">echo docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli --cluster create $(docker inspect -f &#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;:700&#x27; $(docker ps -qf &quot;name=redis-cluster_redis&quot;)) --cluster-replicas 1 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改端口后的部署集群命令(可用docker ps查看端口的顺序)(PS: 所有的IP都需要应用能够正常访问才行(PS: 放弃了这个做法，还是用docker内网IP，应用部署到同一docker network即可))</span></span><br><span class=\"line\">docker exec -it 9f11d0bda1a1 redis-cli --cluster create 10.0.1.225:7001 10.0.1.223:7006 10.0.1.221:7005 10.0.1.219:7004 10.0.1.217:7003 10.0.1.215:7002 --cluster-replicas 1 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.0.1.144:7001,10.0.1.142:7006,10.0.1.140:7005,10.0.1.138:7004,10.0.1.136:7003,10.0.1.134:7002</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看集群是否健康</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -p 7001 -a foobared cluster info</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 测试执行命令</span></span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -c -p 7001 -a foobared info Replication</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">###################################################################################################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 示例</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自动拼接端口的方式</span></span><br><span class=\"line\">echo docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli --cluster create $(index=1; for ip in $(docker inspect -f &#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;&#x27; $(docker ps -qf &quot;name=redis-cluster_redis&quot;)); do echo &quot;$&#123;ip&#125;:700$&#123;index&#125;&quot;; ((index++)); done) --cluster-replicas 1 -a foobared</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://blog.csdn.net/chinasun2015/article/details/122474365\">参考文章</a></li>\n<li><a href=\"https://raw.githubusercontent.com/redis/redis/5.0/redis.conf\">参考文章(官方)</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"说明文档\"><a href=\"#说明文档\" class=\"headerlink\" title=\"说明文档\"></a>说明文档</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需创建网络，看/doc/docker-networks.md文件</span></span><br><span class=\"line\">docker network create -d overlay --attachable middleware</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动节点</span></span><br><span class=\"line\">docker stack deploy -c redis.yml redis-cluster</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署集群的命令，通过<span class=\"built_in\">echo</span>打印出具体命令，再修改成对应的端口</span></span><br><span class=\"line\">echo docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli --cluster create $(docker inspect -f &#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;:700&#x27; $(docker ps -qf &quot;name=redis-cluster_redis&quot;)) --cluster-replicas 1 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改端口后的部署集群命令(可用docker ps查看端口的顺序)(PS: 所有的IP都需要应用能够正常访问才行(PS: 放弃了这个做法，还是用docker内网IP，应用部署到同一docker network即可))</span></span><br><span class=\"line\">docker exec -it 9f11d0bda1a1 redis-cli --cluster create 10.0.1.225:7001 10.0.1.223:7006 10.0.1.221:7005 10.0.1.219:7004 10.0.1.217:7003 10.0.1.215:7002 --cluster-replicas 1 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.0.1.144:7001,10.0.1.142:7006,10.0.1.140:7005,10.0.1.138:7004,10.0.1.136:7003,10.0.1.134:7002</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看集群是否健康</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -p 7001 -a foobared cluster info</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 测试执行命令</span></span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -c -p 7001 -a foobared info Replication</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">###################################################################################################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 示例</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自动拼接端口的方式</span></span><br><span class=\"line\">echo docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli --cluster create $(index=1; for ip in $(docker inspect -f &#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;&#x27; $(docker ps -qf &quot;name=redis-cluster_redis&quot;)); do echo &quot;$&#123;ip&#125;:700$&#123;index&#125;&quot;; ((index++)); done) --cluster-replicas 1 -a foobared</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://blog.csdn.net/chinasun2015/article/details/122474365\">参考文章</a></li>\n<li><a href=\"https://raw.githubusercontent.com/redis/redis/5.0/redis.conf\">参考文章(官方)</a></li>\n</ul>\n"},{"layout":"default","title":"V2","nav_order":8,"has_children":true,"parent":"V2","_content":"\n# V2\n","source":"_posts/docker/app/devs/data/redis/cluster/simple/v2/index.md","raw":"---\nlayout: default\ntitle: V2\nnav_order: 8\nhas_children: true\nparent: V2\npermalink: \"/docker/app/devs/data/redis/cluster/simple/v2/\"\n---\n\n# V2\n","slug":"docker/app/devs/data/redis/cluster/simple/v2/index","published":1,"date":"2025-02-23T07:43:31.025Z","updated":"2025-02-23T07:43:31.026Z","__permalink":"/docker/app/devs/data/redis/cluster/simple/v2/","comments":1,"photos":[],"_id":"cm7k5rwbn00d0msws3grg8ub4","content":"<h1 id=\"V2\"><a href=\"#V2\" class=\"headerlink\" title=\"V2\"></a>V2</h1>","excerpt":"","more":"<h1 id=\"V2\"><a href=\"#V2\" class=\"headerlink\" title=\"V2\"></a>V2</h1>"},{"layout":"default","title":"doc","nav_order":18,"description":"说明文档","parent":"V3","has_children":false,"grand_parent":"Simple","_content":"\n# 说明文档\n\n- 简化版流程\n\n```shell\n\n# 启动节点\ndocker stack deploy -c redis.yml redis-cluster\n\n# 搭建集群(自动拼接端口的方式)\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli --cluster create $(for index in {1..6}; do echo \"10.0.16.17:700${index}\"; done) --cluster-replicas 1 -a foobared\n\n# 查看集群是否健康\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -p 7001 -a foobared cluster info\n\n### 测试执行命令\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -c -p 7001 -a foobared info Replication\n\n```\n","source":"_posts/docker/app/devs/data/redis/cluster/simple/v3/v3.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 18\ndescription: 说明文档\nparent: V3\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/cluster/simple/v3/v3/\"\ngrand_parent: Simple\n---\n\n# 说明文档\n\n- 简化版流程\n\n```shell\n\n# 启动节点\ndocker stack deploy -c redis.yml redis-cluster\n\n# 搭建集群(自动拼接端口的方式)\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli --cluster create $(for index in {1..6}; do echo \"10.0.16.17:700${index}\"; done) --cluster-replicas 1 -a foobared\n\n# 查看集群是否健康\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -p 7001 -a foobared cluster info\n\n### 测试执行命令\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -c -p 7001 -a foobared info Replication\n\n```\n","slug":"docker/app/devs/data/redis/cluster/simple/v3/v3","published":1,"date":"2025-02-23T07:43:31.026Z","updated":"2025-02-23T07:43:31.026Z","__permalink":"/docker/app/devs/data/redis/cluster/simple/v3/v3/","comments":1,"photos":[],"_id":"cm7k5rwbn00d1msws29she1ij","content":"<h1 id=\"说明文档\"><a href=\"#说明文档\" class=\"headerlink\" title=\"说明文档\"></a>说明文档</h1><ul>\n<li>简化版流程</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动节点</span></span><br><span class=\"line\">docker stack deploy -c redis.yml redis-cluster</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">搭建集群(自动拼接端口的方式)</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli --cluster create $(for index in &#123;1..6&#125;; do echo &quot;10.0.16.17:700$&#123;index&#125;&quot;; done) --cluster-replicas 1 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看集群是否健康</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -p 7001 -a foobared cluster info</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 测试执行命令</span></span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -c -p 7001 -a foobared info Replication</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"说明文档\"><a href=\"#说明文档\" class=\"headerlink\" title=\"说明文档\"></a>说明文档</h1><ul>\n<li>简化版流程</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动节点</span></span><br><span class=\"line\">docker stack deploy -c redis.yml redis-cluster</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">搭建集群(自动拼接端口的方式)</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli --cluster create $(for index in &#123;1..6&#125;; do echo &quot;10.0.16.17:700$&#123;index&#125;&quot;; done) --cluster-replicas 1 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看集群是否健康</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -p 7001 -a foobared cluster info</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 测试执行命令</span></span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -c -p 7001 -a foobared info Replication</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"doc","nav_order":18,"description":"说明文档","parent":"V11","has_children":false,"grand_parent":"Simple","_content":"\n# 说明文档\n\n- 简化版流程\n  - todo：要记得检查yml文件中的IP是否正确，是否变更过\n\n```shell\n\n# 启动节点\ndocker stack deploy -c redis.yml redis-cluster\n\n# 搭建集群(自动拼接端口的方式)\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli --cluster create $(for index in {1..6}; do echo \"10.0.16.17:700${index}\"; done) --cluster-replicas 1 -a foobared\n\n# 查看集群是否健康\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -p 7001 -a foobared cluster info\n\n### 测试执行命令\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -c -p 7001 -a foobared info Replication\n\n```\n\n- 自动输入yes\n\n```bash\n# 自动拼接并输入yes执行命令\n\n# 方式一\nyes yes | docker exec -i $(docker ps -qf \"name=rds-cluster_redis1.1\") redis-cli --cluster create $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}:{{range $p, $conf := .NetworkSettings.Ports}}{{if eq (index (split $p \"/\") 0 | printf \"%.3s\") \"800\"}}{{(index (split $p \"/\") 0)}}{{end}}{{end}}' $(docker ps -qf \"name=rds-cluster_redis\")) --cluster-replicas 0 -a foobared\n\n# 方式二\ndocker exec -i $(docker ps -qf \"name=rds-cluster_redis1.1\") redis-cli --cluster create $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}:{{range $p, $conf := .NetworkSettings.Ports}}{{if eq (index (split $p \"/\") 0 | printf \"%.3s\") \"800\"}}{{(index (split $p \"/\") 0)}}{{end}}{{end}}' $(docker ps -qf \"name=rds-cluster_redis\")) --cluster-replicas 0 -a foobared << EOF\nyes\nEOF\n\n```\n\n- 删除指定前缀的volume\n  - grep的-o参数为只打印匹配到的字符串\n  - xargs的-r参数为如果没有参数输入，xargs命令将不会执行后面的命令。\n\n```bash\ndocker volume ls | grep -o \"redis-cluster.*\" | xargs -r docker volume rm\n```\n","source":"_posts/docker/app/devs/data/redis/cluster/simple/v11/v11.md","raw":"---\nlayout: default\ntitle: doc\nnav_order: 18\ndescription: 说明文档\nparent: V11\nhas_children: false\npermalink: \"/docker/app/devs/data/redis/cluster/simple/v11/v11/\"\ngrand_parent: Simple\n---\n\n# 说明文档\n\n- 简化版流程\n  - todo：要记得检查yml文件中的IP是否正确，是否变更过\n\n```shell\n\n# 启动节点\ndocker stack deploy -c redis.yml redis-cluster\n\n# 搭建集群(自动拼接端口的方式)\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli --cluster create $(for index in {1..6}; do echo \"10.0.16.17:700${index}\"; done) --cluster-replicas 1 -a foobared\n\n# 查看集群是否健康\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -p 7001 -a foobared cluster info\n\n### 测试执行命令\ndocker exec -it $(docker ps -qf \"name=redis-cluster_redis1.1\") redis-cli -c -p 7001 -a foobared info Replication\n\n```\n\n- 自动输入yes\n\n```bash\n# 自动拼接并输入yes执行命令\n\n# 方式一\nyes yes | docker exec -i $(docker ps -qf \"name=rds-cluster_redis1.1\") redis-cli --cluster create $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}:{{range $p, $conf := .NetworkSettings.Ports}}{{if eq (index (split $p \"/\") 0 | printf \"%.3s\") \"800\"}}{{(index (split $p \"/\") 0)}}{{end}}{{end}}' $(docker ps -qf \"name=rds-cluster_redis\")) --cluster-replicas 0 -a foobared\n\n# 方式二\ndocker exec -i $(docker ps -qf \"name=rds-cluster_redis1.1\") redis-cli --cluster create $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}:{{range $p, $conf := .NetworkSettings.Ports}}{{if eq (index (split $p \"/\") 0 | printf \"%.3s\") \"800\"}}{{(index (split $p \"/\") 0)}}{{end}}{{end}}' $(docker ps -qf \"name=rds-cluster_redis\")) --cluster-replicas 0 -a foobared << EOF\nyes\nEOF\n\n```\n\n- 删除指定前缀的volume\n  - grep的-o参数为只打印匹配到的字符串\n  - xargs的-r参数为如果没有参数输入，xargs命令将不会执行后面的命令。\n\n```bash\ndocker volume ls | grep -o \"redis-cluster.*\" | xargs -r docker volume rm\n```\n","slug":"docker/app/devs/data/redis/cluster/simple/v11/v11","published":1,"date":"2025-02-23T07:43:31.027Z","updated":"2025-02-23T07:43:31.027Z","__permalink":"/docker/app/devs/data/redis/cluster/simple/v11/v11/","comments":1,"photos":[],"_id":"cm7k5rwbn00d2mswsdqjtaehn","content":"<h1 id=\"说明文档\"><a href=\"#说明文档\" class=\"headerlink\" title=\"说明文档\"></a>说明文档</h1><ul>\n<li>简化版流程<ul>\n<li>todo：要记得检查yml文件中的IP是否正确，是否变更过</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动节点</span></span><br><span class=\"line\">docker stack deploy -c redis.yml redis-cluster</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">搭建集群(自动拼接端口的方式)</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli --cluster create $(for index in &#123;1..6&#125;; do echo &quot;10.0.16.17:700$&#123;index&#125;&quot;; done) --cluster-replicas 1 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看集群是否健康</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -p 7001 -a foobared cluster info</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 测试执行命令</span></span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -c -p 7001 -a foobared info Replication</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自动输入yes</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动拼接并输入yes执行命令</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式一</span></span><br><span class=\"line\"><span class=\"built_in\">yes</span> <span class=\"built_in\">yes</span> | docker <span class=\"built_in\">exec</span> -i $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis1.1&quot;</span>) redis-cli --cluster create $(docker inspect -f <span class=\"string\">&#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;:&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125;&#123;&#123;if eq (index (split $p &quot;/&quot;) 0 | printf &quot;%.3s&quot;) &quot;800&quot;&#125;&#125;&#123;&#123;(index (split $p &quot;/&quot;) 0)&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis&quot;</span>)) --cluster-replicas 0 -a foobared</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -i $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis1.1&quot;</span>) redis-cli --cluster create $(docker inspect -f <span class=\"string\">&#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;:&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125;&#123;&#123;if eq (index (split $p &quot;/&quot;) 0 | printf &quot;%.3s&quot;) &quot;800&quot;&#125;&#125;&#123;&#123;(index (split $p &quot;/&quot;) 0)&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis&quot;</span>)) --cluster-replicas 0 -a foobared &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">yes</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除指定前缀的volume<ul>\n<li>grep的-o参数为只打印匹配到的字符串</li>\n<li>xargs的-r参数为如果没有参数输入，xargs命令将不会执行后面的命令。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume <span class=\"built_in\">ls</span> | grep -o <span class=\"string\">&quot;redis-cluster.*&quot;</span> | xargs -r docker volume <span class=\"built_in\">rm</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"说明文档\"><a href=\"#说明文档\" class=\"headerlink\" title=\"说明文档\"></a>说明文档</h1><ul>\n<li>简化版流程<ul>\n<li>todo：要记得检查yml文件中的IP是否正确，是否变更过</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动节点</span></span><br><span class=\"line\">docker stack deploy -c redis.yml redis-cluster</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">搭建集群(自动拼接端口的方式)</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli --cluster create $(for index in &#123;1..6&#125;; do echo &quot;10.0.16.17:700$&#123;index&#125;&quot;; done) --cluster-replicas 1 -a foobared</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看集群是否健康</span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -p 7001 -a foobared cluster info</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 测试执行命令</span></span></span><br><span class=\"line\">docker exec -it $(docker ps -qf &quot;name=redis-cluster_redis1.1&quot;) redis-cli -c -p 7001 -a foobared info Replication</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自动输入yes</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动拼接并输入yes执行命令</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式一</span></span><br><span class=\"line\"><span class=\"built_in\">yes</span> <span class=\"built_in\">yes</span> | docker <span class=\"built_in\">exec</span> -i $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis1.1&quot;</span>) redis-cli --cluster create $(docker inspect -f <span class=\"string\">&#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;:&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125;&#123;&#123;if eq (index (split $p &quot;/&quot;) 0 | printf &quot;%.3s&quot;) &quot;800&quot;&#125;&#125;&#123;&#123;(index (split $p &quot;/&quot;) 0)&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis&quot;</span>)) --cluster-replicas 0 -a foobared</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -i $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis1.1&quot;</span>) redis-cli --cluster create $(docker inspect -f <span class=\"string\">&#x27;&#123;&#123;.NetworkSettings.Networks.middleware.IPAddress&#125;&#125;:&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125;&#123;&#123;if eq (index (split $p &quot;/&quot;) 0 | printf &quot;%.3s&quot;) &quot;800&quot;&#125;&#125;&#123;&#123;(index (split $p &quot;/&quot;) 0)&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -qf <span class=\"string\">&quot;name=rds-cluster_redis&quot;</span>)) --cluster-replicas 0 -a foobared &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">yes</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除指定前缀的volume<ul>\n<li>grep的-o参数为只打印匹配到的字符串</li>\n<li>xargs的-r参数为如果没有参数输入，xargs命令将不会执行后面的命令。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume <span class=\"built_in\">ls</span> | grep -o <span class=\"string\">&quot;redis-cluster.*&quot;</span> | xargs -r docker volume <span class=\"built_in\">rm</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"V3","nav_order":8,"has_children":true,"parent":"V3","_content":"\n# V3\n","source":"_posts/docker/app/devs/data/redis/cluster/simple/v3/index.md","raw":"---\nlayout: default\ntitle: V3\nnav_order: 8\nhas_children: true\nparent: V3\npermalink: \"/docker/app/devs/data/redis/cluster/simple/v3/\"\n---\n\n# V3\n","slug":"docker/app/devs/data/redis/cluster/simple/v3/index","published":1,"date":"2025-02-23T07:43:31.027Z","updated":"2025-02-23T07:43:31.027Z","__permalink":"/docker/app/devs/data/redis/cluster/simple/v3/","comments":1,"photos":[],"_id":"cm7k5rwbn00d3mswsc483a4dv","content":"<h1 id=\"V3\"><a href=\"#V3\" class=\"headerlink\" title=\"V3\"></a>V3</h1>","excerpt":"","more":"<h1 id=\"V3\"><a href=\"#V3\" class=\"headerlink\" title=\"V3\"></a>V3</h1>"}],"PostAsset":[{"_id":"source/_posts/books/失落的百年致富圣经 -- 华勒思·华特斯  & chenjin5_com -- 2008 -- chenjin5_com 万千书友聚集地 -- 280cc84a0da5295c3af6da4fae7174db -- Anna’s Archive.mobi","slug":"百年致富圣经 -- 华勒思·华特斯  & chenjin5_com -- 2008 -- chenjin5_com 万千书友聚集地 -- 280cc84a0da5295c3af6da4fae7174db -- Anna’s Archive.mobi","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/books/富爸爸穷爸爸(20周年修订版) (富爸爸财商教育系列) -- 〔美〕罗伯特·清崎  & chenjin5_com -- 2017 -- chenjin5_com 万千书友聚集地 -- ea6b836618afddb564f15598e7c4be57 -- Anna’s Archive.mobi","slug":"穷爸爸(20周年修订版) (富爸爸财商教育系列) -- 〔美〕罗伯特·清崎  & chenjin5_com -- 2017 -- chenjin5_com 万千书友聚集地 -- ea6b836618afddb564f15598e7c4be57 -- Anna’s Archive.mobi","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/books/小狗钱钱(套装全2册) -- 〔德〕博多·舍费尔 & chenjin5_com -- 2014 -- cj5 -- 182c22dbb05bafcc291300eae36f2335 -- Anna’s Archive.epub","slug":"钱(套装全2册) -- 〔德〕博多·舍费尔 & chenjin5_com -- 2014 -- cj5 -- 182c22dbb05bafcc291300eae36f2335 -- Anna’s Archive.epub","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/AI/fine-tuning/demo1.ipynb","slug":"uning/demo1.ipynb","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/books/蛤蟆先生去看心理医生/# 心灵成长之旅：《蛤蟆先生去看心理医生》快速阅读.pdf","slug":"生去看心理医生/# 心灵成长之旅：《蛤蟆先生去看心理医生》快速阅读.pdf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/books/蛤蟆先生去看心理医生/蛤蟆先生去看心理医生 -- (英)罗伯特•戴博德 -- 2020 -- 天津人民出版社 -- ead7305f6c4ce6426759a49a2c5cfcad -- Anna’s Archive.mobi","slug":"生去看心理医生/蛤蟆先生去看心理医生 -- (英)罗伯特•戴博德 -- 2020 -- 天津人民出版社 -- ead7305f6c4ce6426759a49a2c5cfcad -- Anna’s Archive.mobi","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/app.yml","slug":"p/app.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/storage-config/default-sc.yaml","slug":"s/storage-config/default-sc.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/storage-config/host-path-pv.yaml","slug":"s/storage-config/host-path-pv.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/storage-config/host-path-pv2.yaml","slug":"s/storage-config/host-path-pv2.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/network/iepose/docker-compose.yml","slug":"epose/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/neko/docker-compose.yml","slug":"p/neko/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/HAProxy/haproxy-1.yml","slug":"d/HAProxy/haproxy-1.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/HAProxy/haproxy-2.yml","slug":"d/HAProxy/haproxy-2.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/HAProxy/haproxy.yml","slug":"d/HAProxy/haproxy.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/HAProxy/haproxy-template.yml","slug":"d/HAProxy/haproxy-template.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/HAProxy/my.cnf","slug":"d/HAProxy/my.cnf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-3.yml","slug":"d/kafka/kafka-compose-3.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-2.yml","slug":"d/kafka/kafka-compose-2.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-4.yml","slug":"d/kafka/kafka-compose-4.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-6.yml","slug":"d/kafka/kafka-compose-6.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-5.yml","slug":"d/kafka/kafka-compose-5.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-template.yml","slug":"d/kafka/kafka-compose-template.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-test-2.yml","slug":"d/kafka/kafka-compose-test-2.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-7.yml","slug":"d/kafka/kafka-compose-7.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose-test.yml","slug":"d/kafka/kafka-compose-test.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/kafka-compose.yml","slug":"d/kafka/kafka-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nacos/docker-compose.yml","slug":"d/nacos/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/seata/docker-compose.yml","slug":"d/seata/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/rocketMq/docker-compose-2.yml","slug":"d/rocketMq/docker-compose-2.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/rocketMq/docker-compose.yml","slug":"d/rocketMq/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/nginx-compose-test.yml","slug":"d/nginx/nginx-compose-test.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/nginx-compose.yml","slug":"d/nginx/nginx-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/nginx-single-compose.yml","slug":"d/nginx/nginx-single-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/doc/uat/init.sh","slug":"c/uat/init.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/materiel/draft/temp/doc.txt","slug":"draft/temp/doc.txt","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/docs/temp/index.md","slug":"s/docs/temp/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/docs/temp/yum安装k8s.md","slug":"s/docs/temp/yum安装k8s.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/dashboard/dashboard-ClusterRoleBinding.yaml","slug":"s/app/dashboard/dashboard-ClusterRoleBinding.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/dashboard/dashboard-ServiceAccount.yaml","slug":"s/app/dashboard/dashboard-ServiceAccount.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/metersphere/ms-gateway-nodeport.yaml","slug":"s/app/metersphere/ms-gateway-nodeport.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/middleware/data/clickhouse/clickhouse-install.sh","slug":"e/data/clickhouse/clickhouse-install.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/tools/softs/clash/clash-linux-amd64-v1.18.0.gz","slug":"ts/clash/clash-linux-amd64-v1.18.0.gz","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/network/pgyvpn/temp/temp.md","slug":"gyvpn/temp/temp.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/camunda/camunda.yml","slug":"p/devs/camunda/camunda.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/maven/delLastUpdated.bat","slug":"p/devs/maven/delLastUpdated.bat","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/watch.yml","slug":"p/devs/watch/watch.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/yapi/docker-entrypoint.sh","slug":"p/devs/yapi/docker-entrypoint.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/yapi/setup-2.js","slug":"p/devs/yapi/setup-2.js","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/yapi/yapi.yml","slug":"p/devs/yapi/yapi.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/networks/adguard/adguardhome-all.yml","slug":"p/networks/adguard/adguardhome-all.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/networks/adguard/adguardhome-simple.yml","slug":"p/networks/adguard/adguardhome-simple.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/networks/adguard/adguardhome.yml","slug":"p/networks/adguard/adguardhome.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/os/win/docker-compose.yml","slug":"p/os/win/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/firefox/temp/index.md","slug":"p/firefox/temp/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/firefox/temp/temp.md","slug":"p/firefox/temp/temp.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/Dockerfile","slug":"v_utls/serverless/nocobase/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/exec.sh","slug":"v_utls/serverless/nocobase/exec.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/setup.sh","slug":"v_utls/serverless/nocobase/setup.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/s.yaml.example","slug":"v_utls/serverless/nocobase/s.yaml.example","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/docker-compose.yml","slug":"v_utls/dev-container/dockerfile/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/Dockerfile","slug":"v_utls/dev-container/dockerfile/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/dockerfile.md","slug":"v_utls/dev-container/dockerfile/dockerfile.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/index.md","slug":"v_utls/dev-container/dockerfile/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/ssh/Dockerfile","slug":"v_utls/dev-container/ssh/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/ssh/docker-compose.yml","slug":"v_utls/dev-container/ssh/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/ssh/Dockerfile_docker","slug":"v_utls/dev-container/ssh/Dockerfile_docker","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/HAProxy/simple-doc/haproxy.yml","slug":"d/HAProxy/simple-doc/haproxy.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/RabbitMQ/simple/rabbitmq.yml","slug":"d/RabbitMQ/simple/rabbitmq.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/MyPerf4J/java-agent/MyPerf4J.properties","slug":"d/MyPerf4J/java-agent/MyPerf4J.properties","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/Telegraf/conf/telegraf.conf","slug":"d/Telegraf/conf/telegraf.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/github/actions-runner/Dockerfile","slug":"d/github/actions-runner/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/github/actions-runner/docker-compose.yml","slug":"d/github/actions-runner/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/simple/kafka-compose.yml","slug":"d/kafka/simple/kafka-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/simple/zk.yml","slug":"d/kafka/simple/zk.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/two/kafka-compose.yml","slug":"d/kafka/two/kafka-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nacos/simple-swarm/docker-swarm.yml","slug":"d/nacos/simple-swarm/docker-swarm.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/rocketMq/conf/broker-simple.conf","slug":"d/rocketMq/conf/broker-simple.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/rocketMq/conf/broker.conf","slug":"d/rocketMq/conf/broker.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/rocketMq/simple/docker-compose-inside.yml","slug":"d/rocketMq/simple/docker-compose-inside.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/rocketMq/simple/docker-compose-outside.yml","slug":"d/rocketMq/simple/docker-compose-outside.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/rocketMq/uat/docker-compose.yml","slug":"d/rocketMq/uat/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/conf/nginx.conf","slug":"d/nginx/conf/nginx.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/auto-ssl/docker-compose.yml","slug":"d/nginx/auto-ssl/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/nodeJs/Dockerfile","slug":"d/nginx/nodeJs/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/nodeJs/default.conf","slug":"d/nginx/nodeJs/default.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/Dockerfile","slug":"d/nginx/simple/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/nginx-app.yml","slug":"d/nginx/simple/nginx-app.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/nginx-ui/docker-compose.yml","slug":"d/nginx/nginx-ui/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/Dockerfile","slug":"d/nginx/simple-common/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/nginx-simple.yml","slug":"d/nginx/simple-common/nginx-simple.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/nginx.yml","slug":"d/nginx/simple-common/nginx.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/Dockerfile","slug":"d/nginx/uat/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/entrypoint.sh","slug":"d/nginx/uat/entrypoint.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/nginx-compose-1.yml","slug":"d/nginx/uat/nginx-compose-1.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/nginx-compose.yml","slug":"d/nginx/uat/nginx-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/ClusterIssuer.yaml","slug":"s/docs/cert-manager/ClusterIssuer/ClusterIssuer.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/mid/RabbitMQ/config/rabbitmq.yaml","slug":"s/mid/RabbitMQ/config/rabbitmq.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/devs/kafka/zk.yml","slug":"s/app/devs/kafka/zk.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/harbor/ingress/harbor-helm-nginx.yaml","slug":"s/app/harbor/ingress/harbor-helm-nginx.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/elk/filebeat/filebeat.yml","slug":"s/app/elk/filebeat/filebeat.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/harbor/img/image-1.png","slug":"s/app/harbor/img/image-1.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/harbor/img/image-2.png","slug":"s/app/harbor/img/image-2.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/harbor/img/image.png","slug":"s/app/harbor/img/image.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/harbor/temp/index.md","slug":"s/app/harbor/temp/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/harbor/temp/temp.md","slug":"s/app/harbor/temp/temp.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/dashboard/deploy/mysql.yml","slug":"s/app/dashboard/deploy/mysql.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/network/headscale/local/headscale-all/docker-compose.yml","slug":"eadscale/local/headscale-all/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/MongoDB/mongodb-compose-template.yml","slug":"p/devs/data/MongoDB/mongodb-compose-template.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/MongoDB/mongodb-compose.yml","slug":"p/devs/data/MongoDB/mongodb-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/PostgreSQL/postgresql.yml","slug":"p/devs/data/PostgreSQL/postgresql.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/hadoop/docker-compose.yml","slug":"p/devs/data/hadoop/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/nas/nextCloud.yml","slug":"p/devs/data/nas/nextCloud.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/nas/nextCloud_aio.yml","slug":"p/devs/data/nas/nextCloud_aio.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/docker-compose-template.yml","slug":"p/devs/data/mysql/docker-compose-template.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/nas/jellyfin.yml","slug":"p/devs/data/nas/jellyfin.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/docker-compose.yml","slug":"p/devs/data/mysql/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/Dockerfile","slug":"p/devs/data/redis/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-2-host.yml","slug":"p/devs/data/redis/docker-compose-cluster-2-host.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-2.yml","slug":"p/devs/data/redis/docker-compose-cluster-2.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-3.yml","slug":"p/devs/data/redis/docker-compose-cluster-3.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-4.yml","slug":"p/devs/data/redis/docker-compose-cluster-4.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-6.yml","slug":"p/devs/data/redis/docker-compose-cluster-6.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-5.yml","slug":"p/devs/data/redis/docker-compose-cluster-5.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-template.yml","slug":"p/devs/data/redis/docker-compose-cluster-template.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-test.yml","slug":"p/devs/data/redis/docker-compose-cluster-test.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster.yml","slug":"p/devs/data/redis/docker-compose-cluster.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-single.yml","slug":"p/devs/data/redis/docker-compose-single.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose.yml","slug":"p/devs/data/redis/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-entrypoint.sh","slug":"p/devs/data/redis/docker-entrypoint.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/xxx","slug":"p/devs/data/redis/xxx","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/deploy.sh","slug":"p/devs/jenkins/deploy/deploy.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/simple/jenkins.yml","slug":"p/devs/jenkins/simple/jenkins.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/docker-compose-cluster-7.yml","slug":"p/devs/data/redis/docker-compose-cluster-7.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/tomcat/simple/Dockerfile","slug":"p/devs/tomcat/simple/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/alertmanager/alertmanager.yml.email","slug":"p/devs/watch/alertmanager/alertmanager.yml.email","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/alertmanager/alertmanager.yml.slack","slug":"p/devs/watch/alertmanager/alertmanager.yml.slack","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/tomcat/simple2/Dockerfile","slug":"p/devs/tomcat/simple2/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/tomcat/simple2/start.sh","slug":"p/devs/tomcat/simple2/start.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/grafana/grafana.ini","slug":"p/devs/watch/grafana/grafana.ini","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/prometheus/prometheus.yml","slug":"p/devs/watch/prometheus/prometheus.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/watch.yml","slug":"p/devs/watch/simple/watch.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/networks/adguard/serverless/Dockerfile","slug":"p/networks/adguard/serverless/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/yapi/simpleV2/docker-stack.yml","slug":"p/devs/yapi/simpleV2/docker-stack.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v3/Dockerfile","slug":"v_utls/serverless/nocobase/v3/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v3/s.yaml","slug":"v_utls/serverless/nocobase/v3/s.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/publish.yaml","slug":"v_utls/serverless/nocobase/publish/publish.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/Dockerfile","slug":"v_utls/serverless/nocobase/v2/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/exec.sh","slug":"v_utls/serverless/nocobase/v2/exec.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/s.yaml.example","slug":"v_utls/serverless/nocobase/v2/s.yaml.example","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/v2/setup.sh","slug":"v_utls/serverless/nocobase/v2/setup.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/ssh/test/Dockerfile_docker","slug":"v_utls/dev-container/ssh/test/Dockerfile_docker","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/front-end/Dockerfile","slug":"v_utls/dev-container/local-dev-deploy/front-end/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/front-end/docker-compose.yml","slug":"v_utls/dev-container/local-dev-deploy/front-end/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/github/actions-runner/simple/Dockerfile","slug":"d/github/actions-runner/simple/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/github/actions-runner/simple/docker-compose.yml","slug":"d/github/actions-runner/simple/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/doc/app-jar/Jenkinsfile","slug":"d/kafka/doc/app-jar/Jenkinsfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/doc/app-jar/build-prod.sh","slug":"d/kafka/doc/app-jar/build-prod.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nacos/conf/mysql/my.cnf","slug":"d/nacos/conf/mysql/my.cnf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/rocketMq/simple/test/docker-compose-auto.yml","slug":"d/rocketMq/simple/test/docker-compose-auto.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nacos/conf/nacos/application.properties","slug":"d/nacos/conf/nacos/application.properties","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/doc/app-jar/package-prod.sh","slug":"d/kafka/doc/app-jar/package-prod.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nacos/conf/prometheus/prometheus-standalone.yaml","slug":"d/nacos/conf/prometheus/prometheus-standalone.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/auto-ssl/temp/docker-compose.yml","slug":"d/nginx/auto-ssl/temp/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/rocketMq/uat/conf/broker.conf","slug":"d/rocketMq/uat/conf/broker.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/conf/cors.conf","slug":"d/nginx/simple/conf/cors.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/conf/nginx.conf","slug":"d/nginx/simple/conf/nginx.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/simple/nginx.yml","slug":"d/nginx/simple/simple/nginx.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/cors.conf","slug":"d/nginx/simple-common/conf/cors.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/nginx.conf","slug":"d/nginx/simple-common/conf/nginx.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/conf/cors.conf","slug":"d/nginx/uat/conf/cors.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/conf/nginx.conf","slug":"d/nginx/uat/conf/nginx.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/nginx-common.yml","slug":"d/nginx/simple-common/common/nginx-common.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/admin-api.conf","slug":"d/nginx/uat/template/admin-api.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/admin.conf","slug":"d/nginx/uat/template/admin.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/da.conf","slug":"d/nginx/uat/template/da.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/haproxy.conf","slug":"d/nginx/uat/template/haproxy.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/image.conf","slug":"d/nginx/uat/template/image.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/jssdk.conf","slug":"d/nginx/uat/template/jssdk.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/madata.conf","slug":"d/nginx/uat/template/madata.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/mq.conf","slug":"d/nginx/uat/template/mq.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/static.conf","slug":"d/nginx/uat/template/static.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/wap-api.conf","slug":"d/nginx/uat/template/wap-api.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/wap.conf","slug":"d/nginx/uat/template/wap.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/web-api.conf","slug":"d/nginx/uat/template/web-api.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/web.conf","slug":"d/nginx/uat/template/web.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/template/zk.conf","slug":"d/nginx/uat/template/zk.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/uat/tomcat/Dockerfile","slug":"d/nginx/uat/tomcat/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/elk/logstash/config/6.0.3-values.yaml","slug":"s/app/elk/logstash/config/6.0.3-values.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/elk/logstash/temp/temp.md","slug":"s/app/elk/logstash/temp/temp.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/index.md","slug":"s/docs/cert-manager/ClusterIssuer/temp/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/elk/logstash/temp/index.md","slug":"s/app/elk/logstash/temp/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/docker/docker-compose.yml","slug":"s/app/skywalking/java/docker/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/app-service.yml","slug":"s/app/skywalking/java/k8s/app-service.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/temp.md","slug":"s/docs/cert-manager/ClusterIssuer/temp/temp.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/network/headscale/local/demo1/headscale/docker-compose.yml","slug":"eadscale/local/demo1/headscale/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/MongoDB/dockerfile/Dockerfile","slug":"p/devs/data/MongoDB/dockerfile/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/MongoDB/setup/setup.js","slug":"p/devs/data/MongoDB/setup/setup.js","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/MongoDB/test/docker-compose.yml","slug":"p/devs/data/MongoDB/test/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/PostgreSQL/temp/postgresql-2.yml","slug":"p/devs/data/PostgreSQL/temp/postgresql-2.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/PostgreSQL/temp/postgresql.yml","slug":"p/devs/data/PostgreSQL/temp/postgresql.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/docker-swarm.yml","slug":"p/devs/data/TiDB/v1/docker-swarm.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/docker_registry/simple/docker-registry.yml","slug":"p/devs/data/docker_registry/simple/docker-registry.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/hadoop/env/hadoop.env","slug":"p/devs/data/hadoop/env/hadoop.env","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mariadb/simple/mariadb.yml","slug":"p/devs/data/mariadb/simple/mariadb.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/hadoop/simple/docker-compose.yml","slug":"p/devs/data/hadoop/simple/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/hadoop/simple/hadoop.env","slug":"p/devs/data/hadoop/simple/hadoop.env","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/test/es.yml","slug":"p/devs/data/elasticsearch/test/es.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/conf/maven/settings.xml","slug":"p/devs/jenkins/conf/maven/settings.xml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/conf/redis.conf","slug":"p/devs/data/redis/conf/redis.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/simple/docker-compose.yml","slug":"p/devs/data/mysql/simple/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/docker-compose-cluster-5.yml","slug":"p/devs/data/redis/cluster/docker-compose-cluster-5.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/conf/redis-simple.conf","slug":"p/devs/data/redis/conf/redis-simple.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/simple/docker-compose-single-2.yml","slug":"p/devs/data/redis/simple/docker-compose-single-2.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/uat/redis.yml","slug":"p/devs/data/redis/uat/redis.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/simple/v2/docker-compose.yml","slug":"p/devs/jenkins/simple/v2/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/simple/temp/jenkins.yml","slug":"p/devs/jenkins/simple/temp/jenkins.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/maven/settings.xml","slug":"p/devs/jenkins/doc/maven/settings.xml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/dockerfile/dockerfile.md","slug":"p/devs/jenkins/springboot/dockerfile/dockerfile.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/dockerfile/index.md","slug":"p/devs/jenkins/springboot/dockerfile/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/img/img.png","slug":"p/devs/jenkins/springboot/img/img.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/img/img_2.png","slug":"p/devs/jenkins/springboot/img/img_2.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/img/img_1.png","slug":"p/devs/jenkins/springboot/img/img_1.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/tomcat/simple/type2/Dockerfile","slug":"p/devs/tomcat/simple/type2/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/maven/doc/imgs/img.png","slug":"p/devs/maven/doc/imgs/img.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/alertmanager/template/email.tmpl","slug":"p/devs/watch/alertmanager/template/email.tmpl","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/tomcat/simple2/deploy/docker-start.sh","slug":"p/devs/tomcat/simple2/deploy/docker-start.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/grafana/simple/grafana.ini","slug":"p/devs/watch/grafana/simple/grafana.ini","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/influxdb/conf/run-basic.sh","slug":"p/devs/watch/influxdb/conf/run-basic.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/influxdb/conf/influxdb.conf","slug":"p/devs/watch/influxdb/conf/influxdb.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/other/netdata/netdata.yml","slug":"p/devs/watch/other/netdata/netdata.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/prometheus/rules/example.yml","slug":"p/devs/watch/prometheus/rules/example.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/prometheus/prometheus.yml","slug":"p/devs/watch/simple/prometheus/prometheus.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_0.png","slug":"p/devs/watch/simple/img/img_0.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img.png","slug":"p/devs/watch/simple/img/img.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_1.png","slug":"p/devs/watch/simple/img/img_1.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_11.png","slug":"p/devs/watch/simple/img/img_11.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_2.png","slug":"p/devs/watch/simple/img/img_2.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_10.png","slug":"p/devs/watch/simple/img/img_10.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_4.png","slug":"p/devs/watch/simple/img/img_4.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_3.png","slug":"p/devs/watch/simple/img/img_3.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_6.png","slug":"p/devs/watch/simple/img/img_6.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_8.png","slug":"p/devs/watch/simple/img/img_8.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_7.png","slug":"p/devs/watch/simple/img/img_7.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_9.png","slug":"p/devs/watch/simple/img/img_9.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/watch/simple/img/img_5.png","slug":"p/devs/watch/simple/img/img_5.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/src/Dockerfile","slug":"v_utls/serverless/nocobase/publish/src/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/networks/vpn/openvpn/docker/docker-compose.yml","slug":"p/networks/vpn/openvpn/docker/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/serverless/nocobase/publish/src/s.yaml","slug":"v_utls/serverless/nocobase/publish/src/s.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/docker-compose.yml","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/deploy_to_docker.sh","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/deploy_to_docker.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/temp/goodlink/Dockerfile","slug":"v_utls/dev-container/dockerfile/temp/goodlink/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/temp/goodlink/docker-compose.yml","slug":"v_utls/dev-container/dockerfile/temp/goodlink/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/temp/goodlink/goodlink-linux-arm64-cmd","slug":"v_utls/dev-container/dockerfile/temp/goodlink/goodlink-linux-arm64-cmd","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/dockerfile/temp/goodlink/goodlink-linux-amd64-cmd","slug":"v_utls/dev-container/dockerfile/temp/goodlink/goodlink-linux-amd64-cmd","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/docker-compose.yml","slug":"v_utls/dev-container/local-dev-deploy/middleware/nginx/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/kafka/doc/app-jar/resourse/application.yml","slug":"d/kafka/doc/app-jar/resourse/application.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/conf/conf.d/default.conf","slug":"d/nginx/simple/conf/conf.d/default.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/conf/conf.d/wap.conf","slug":"d/nginx/simple/conf/conf.d/wap.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/conf/conf.d/web.conf","slug":"d/nginx/simple/conf/conf.d/web.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/common.conf","slug":"d/nginx/simple-common/conf/conf.d/common.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/docker-registry.conf","slug":"d/nginx/simple-common/conf/conf.d/docker-registry.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/default.conf","slug":"d/nginx/simple-common/conf/conf.d/default.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/jenkins.conf","slug":"d/nginx/simple-common/conf/conf.d/jenkins.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/conf/conf.d/jenkins-test.conf","slug":"d/nginx/simple-common/conf/conf.d/jenkins-test.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/simple/conf/cors.conf","slug":"d/nginx/simple/simple/conf/cors.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/simple/conf/nginx.conf","slug":"d/nginx/simple/simple/conf/nginx.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/conf/nginx.conf","slug":"d/nginx/simple-common/common/conf/nginx.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/cors.conf.template","slug":"d/nginx/simple-common/common/templates/cors.conf.template","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/default.conf.template","slug":"d/nginx/simple-common/common/templates/default.conf.template","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/jenkins.conf.template","slug":"d/nginx/simple-common/common/templates/jenkins.conf.template","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/mall-admin-web.conf.template","slug":"d/nginx/simple-common/common/templates/mall-admin-web.conf.template","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/ssl.conf.template","slug":"d/nginx/simple-common/common/templates/ssl.conf.template","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/elk/logstash/config/app/logstash.conf","slug":"s/app/elk/logstash/config/app/logstash.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/elk/logstash/config/filebeat/logstash.conf","slug":"s/app/elk/logstash/config/filebeat/logstash.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/zerossl/index.md","slug":"s/docs/cert-manager/ClusterIssuer/temp/zerossl/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/zerossl/ingress.yaml","slug":"s/docs/cert-manager/ClusterIssuer/temp/zerossl/ingress.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/zerossl/zerossl-production.yaml","slug":"s/docs/cert-manager/ClusterIssuer/temp/zerossl/zerossl-production.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/docs/cert-manager/ClusterIssuer/temp/zerossl/zerossl.md","slug":"s/docs/cert-manager/ClusterIssuer/temp/zerossl/zerossl.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/docker/local/Dockerfile","slug":"s/app/skywalking/java/docker/local/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/docker/local/startup.sh","slug":"s/app/skywalking/java/docker/local/startup.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/demo1.yaml","slug":"s/app/skywalking/java/k8s/inject/demo1.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/network/headscale/local/headscale-all/headscale/config/config.yaml","slug":"eadscale/local/headscale-all/headscale/config/config.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/swagent.yaml","slug":"s/app/skywalking/java/k8s/inject/swagent.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/network/headscale/local/demo1/headscale/nginx/nginx.conf","slug":"eadscale/local/demo1/headscale/nginx/nginx.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/network/headscale/local/demo1/headscale/config/config.yaml","slug":"eadscale/local/demo1/headscale/config/config.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/MongoDB/test/setup/setup.js","slug":"p/devs/data/MongoDB/test/setup/setup.js","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/pd.rules.yml","slug":"p/devs/data/TiDB/v1/config/pd.rules.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/pd.toml","slug":"p/devs/data/TiDB/v1/config/pd.toml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/prometheus.yml","slug":"p/devs/data/TiDB/v1/config/prometheus.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/spark-defaults.conf","slug":"p/devs/data/TiDB/v1/config/spark-defaults.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/tidb.rules.yml","slug":"p/devs/data/TiDB/v1/config/tidb.rules.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/tidb.toml","slug":"p/devs/data/TiDB/v1/config/tidb.toml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/tikv.rules.yml","slug":"p/devs/data/TiDB/v1/config/tikv.rules.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/tikv.toml","slug":"p/devs/data/TiDB/v1/config/tikv.toml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/docker-compose-es-cluster-tls.yml","slug":"p/devs/data/elasticsearch/v1/test/docker-compose-es-cluster-tls.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/conf/maven/temp/settings.xml","slug":"p/devs/jenkins/conf/maven/temp/settings.xml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/doc/temp/temp.md","slug":"p/devs/data/mysql/doc/temp/temp.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/v1/docker-compose.yml","slug":"p/devs/data/mysql/MySQL_NDB_Cluster/v1/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/doc/temp/index.md","slug":"p/devs/data/mysql/doc/temp/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/v1/my.cnf","slug":"p/devs/data/mysql/MySQL_NDB_Cluster/v1/my.cnf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test-v2/docker-compose-cluster-6-label-test.yml","slug":"p/devs/data/redis/cluster/test-v2/docker-compose-cluster-6-label-test.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/v1/mysql-cluster.cnf","slug":"p/devs/data/mysql/MySQL_NDB_Cluster/v1/mysql-cluster.cnf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test-v2/redis-cluster.sh","slug":"p/devs/data/redis/cluster/test-v2/redis-cluster.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test/docker-compose-cluster-5-label.yml","slug":"p/devs/data/redis/cluster/test/docker-compose-cluster-5-label.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test/docker-compose-cluster-5.yml","slug":"p/devs/data/redis/cluster/test/docker-compose-cluster-5.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test/docker-compose-cluster-6-label-test.yml","slug":"p/devs/data/redis/cluster/test/docker-compose-cluster-6-label-test.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test/redis-cluster.sh","slug":"p/devs/data/redis/cluster/test/redis-cluster.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/test-v3/redis.yml","slug":"p/devs/data/redis/cluster/test-v3/redis.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/temp/java-jar.md","slug":"p/devs/jenkins/deploy/remote/temp/java-jar.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/temp/nginx-nodejs.md","slug":"p/devs/jenkins/deploy/remote/temp/nginx-nodejs.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/deploy/remote/temp/index.md","slug":"p/devs/jenkins/deploy/remote/temp/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/redis.yml","slug":"p/devs/data/redis/cluster/simple/redis.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/uat/conf/Dockerfile","slug":"p/devs/data/redis/uat/conf/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/uat/conf/docker-entrypoint.sh","slug":"p/devs/data/redis/uat/conf/docker-entrypoint.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/uat/conf/redis.conf","slug":"p/devs/data/redis/uat/conf/redis.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/ssh-git/ssh-username-with-private-key.png","slug":"p/devs/jenkins/doc/img/ssh-git/ssh-username-with-private-key.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/ssh-remote/ssh-service.png","slug":"p/devs/jenkins/doc/img/ssh-remote/ssh-service.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/多分支参数构建/img.png","slug":"p/devs/jenkins/doc/img/多分支参数构建/img.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/多分支参数构建/img_1.png","slug":"p/devs/jenkins/doc/img/多分支参数构建/img_1.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/多分支参数构建/img_2.png","slug":"p/devs/jenkins/doc/img/多分支参数构建/img_2.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/不能下载maven插件依赖/img.png","slug":"p/devs/jenkins/doc/img/不能下载maven插件依赖/img.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/simple/temp/remote/jenkins.yml","slug":"p/devs/jenkins/simple/temp/remote/jenkins.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建nodeJs项目/img.png","slug":"p/devs/jenkins/doc/img/构建nodeJs项目/img.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建nodeJs项目/img_1.png","slug":"p/devs/jenkins/doc/img/构建nodeJs项目/img_1.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建nodeJs项目/img_2.png","slug":"p/devs/jenkins/doc/img/构建nodeJs项目/img_2.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img.png","slug":"p/devs/jenkins/doc/img/构建maven项目/img.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_1.png","slug":"p/devs/jenkins/doc/img/构建maven项目/img_1.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_2.png","slug":"p/devs/jenkins/doc/img/构建maven项目/img_2.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_3.png","slug":"p/devs/jenkins/doc/img/构建maven项目/img_3.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_4.png","slug":"p/devs/jenkins/doc/img/构建maven项目/img_4.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_5.png","slug":"p/devs/jenkins/doc/img/构建maven项目/img_5.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/doc/img/构建maven项目/img_6.png","slug":"p/devs/jenkins/doc/img/构建maven项目/img_6.png","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/jenkins/springboot/dockerfile/libreoffice/Dockerfile","slug":"p/devs/jenkins/springboot/dockerfile/libreoffice/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/networks/vpn/openvpn/docker/client/docker-compose.yml","slug":"p/networks/vpn/openvpn/docker/client/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/wap-api/Dockerfile","slug":"v_utls/dev-container/local-dev-deploy/backend/tomcat-war/wap-api/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/wap-api/docker-compose.yml","slug":"v_utls/dev-container/local-dev-deploy/backend/tomcat-war/wap-api/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/wap/build.sh","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/wap/build.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/wap/Dockerfile","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/wap/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/web/Dockerfile","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/web/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/wap-api/build.sh","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/wap-api/build.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/web/build.sh","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/web/build.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/wap-api/Dockerfile","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/wap-api/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/cors.conf","slug":"v_utls/dev-container/local-dev-deploy/middleware/nginx/conf/cors.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/nginx.conf","slug":"v_utls/dev-container/local-dev-deploy/middleware/nginx/conf/nginx.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/simple/conf/conf.d/jenkins.conf","slug":"d/nginx/simple/simple/conf/conf.d/jenkins.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/back/docker-entrypoint.d/20-envsubst-on-templates.sh","slug":"d/nginx/simple-common/common/back/docker-entrypoint.d/20-envsubst-on-templates.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/cert/7700854_iuin.xyz.key","slug":"d/nginx/simple-common/common/templates/cert/7700854_iuin.xyz.key","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple-common/common/templates/cert/7700854_iuin.xyz.pem","slug":"d/nginx/simple-common/common/templates/cert/7700854_iuin.xyz.pem","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/web-api/Dockerfile","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/web-api/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/mid/nginx/simple/simple/conf/conf.d/default.conf","slug":"d/nginx/simple/simple/conf/conf.d/default.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/web-api/build.sh","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/web-api/build.sh","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/skywalking-swck/skywalking-swck-0.9.0-bin.tgz","slug":"s/app/skywalking/java/k8s/inject/skywalking-swck/skywalking-swck-0.9.0-bin.tgz","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/index.md","slug":"s/app/skywalking/java/k8s/inject/temp/index.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/skywalking-helm-4.5.0.tgz","slug":"s/app/skywalking/java/k8s/inject/temp/skywalking-helm-4.5.0.tgz","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/swagent.yaml","slug":"s/app/skywalking/java/k8s/inject/temp/swagent.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/temp.md","slug":"s/app/skywalking/java/k8s/inject/temp/temp.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/kubernetes/app/skywalking/java/k8s/inject/temp/temp_guide.md","slug":"s/app/skywalking/java/k8s/inject/temp/temp_guide.md","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/network/headscale/local/demo1/headscale/nginx/certs/cert.pem","slug":"eadscale/local/demo1/headscale/nginx/certs/cert.pem","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/grafana/grafana.ini","slug":"p/devs/data/TiDB/v1/config/grafana/grafana.ini","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/overview.json","slug":"p/devs/data/TiDB/v1/config/dashboards/overview.json","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/pd.json","slug":"p/devs/data/TiDB/v1/config/dashboards/pd.json","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/tidb.json","slug":"p/devs/data/TiDB/v1/config/dashboards/tidb.json","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/dashboards/tikv_pull.json","slug":"p/devs/data/TiDB/v1/config/dashboards/tikv_pull.json","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/8.x/singleton/docker-compose.yml","slug":"p/devs/data/elasticsearch/v1/8.x/singleton/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/8.x/docker-compose.yml","slug":"p/devs/data/elasticsearch/v1/test/8.x/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/usable/docker-compose.yml","slug":"p/devs/data/elasticsearch/v1/test/usable/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/v1/docker-compose.yml","slug":"p/devs/data/mysql/MySQL_NDB_Cluster/swarm/v1/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v2/redis.yml","slug":"p/devs/data/redis/cluster/simple/v2/redis.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/intranet/redis.yml","slug":"p/devs/data/redis/cluster/simple/intranet/redis.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v11/redis.yml","slug":"p/devs/data/redis/cluster/simple/v11/redis.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/redis/cluster/simple/v3/redis.yml","slug":"p/devs/data/redis/cluster/simple/v3/redis.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/web-api/has-font/docker-compose.yml","slug":"v_utls/dev-container/local-dev-deploy/backend/tomcat-war/web-api/has-font/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/cors.conf","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/cors.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/nginx.conf","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/nginx.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/conf.d/default.conf","slug":"v_utls/dev-container/local-dev-deploy/middleware/nginx/conf/conf.d/default.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/conf.d/wap.conf","slug":"v_utls/dev-container/local-dev-deploy/middleware/nginx/conf/conf.d/wap.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/middleware/nginx/conf/conf.d/web.conf","slug":"v_utls/dev-container/local-dev-deploy/middleware/nginx/conf/conf.d/web.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/backend/tomcat-war/web-api/has-font/Dockerfile","slug":"v_utls/dev-container/local-dev-deploy/backend/tomcat-war/web-api/has-font/Dockerfile","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/elasticsearch/v1/test/8.x/singleton/docker-compose.yml","slug":"p/devs/data/elasticsearch/v1/test/8.x/singleton/docker-compose.yml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/v1/mysql.conf/my.cnf","slug":"p/devs/data/mysql/MySQL_NDB_Cluster/swarm/v1/mysql.conf/my.cnf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/mysql/MySQL_NDB_Cluster/swarm/v1/mysql.conf/mysql-cluster.cnf","slug":"p/devs/data/mysql/MySQL_NDB_Cluster/swarm/v1/mysql.conf/mysql-cluster.cnf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/conf.d/default.conf","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/conf.d/default.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/conf.d/wap.conf","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/conf.d/wap.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/dev_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/conf.d/web.conf","slug":"v_utls/dev-container/local-dev-deploy/projects/deploy/nginx/conf/conf.d/web.conf","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/grafana/provisioning/dashboards/dashboards.yaml","slug":"p/devs/data/TiDB/v1/config/grafana/provisioning/dashboards/dashboards.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0},{"_id":"source/_posts/docker/app/devs/data/TiDB/v1/config/grafana/provisioning/datasources/datasources.yaml","slug":"p/devs/data/TiDB/v1/config/grafana/provisioning/datasources/datasources.yaml","post":"cm7k5rw9w0000msws53d9aa2h","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cm7k5rwaq0055msws2m682ynp","category_id":"cm7k5rwaq0052msws9mzdhycg","_id":"cm7k5rwav0060msws314uf2sf"},{"post_id":"cm7k5rwaq0055msws2m682ynp","category_id":"cm7k5rwas005bmswshmi28j2h","_id":"cm7k5rwav0063mswsesvg030x"},{"post_id":"cm7k5rwaq0055msws2m682ynp","category_id":"cm7k5rwat005omsws6k716vtd","_id":"cm7k5rwav0066msws0dj9fmur"},{"post_id":"cm7k5rwap0050mswsbq3d8cxh","category_id":"cm7k5rwaq0052msws9mzdhycg","_id":"cm7k5rwav006amsws7evj9hz2"},{"post_id":"cm7k5rwap0050mswsbq3d8cxh","category_id":"cm7k5rwas005bmswshmi28j2h","_id":"cm7k5rwav006dmsws0bwubo9c"},{"post_id":"cm7k5rwap0050mswsbq3d8cxh","category_id":"cm7k5rwat005omsws6k716vtd","_id":"cm7k5rwav006fmsws7mya1ke0"},{"post_id":"cm7k5rwaq0051msws0j2i2bn8","category_id":"cm7k5rwaq0052msws9mzdhycg","_id":"cm7k5rwaw006imsws9z5t7gb6"},{"post_id":"cm7k5rwaq0051msws0j2i2bn8","category_id":"cm7k5rwas005bmswshmi28j2h","_id":"cm7k5rwaw006lmsws3bpc3t7c"},{"post_id":"cm7k5rwaq0051msws0j2i2bn8","category_id":"cm7k5rwat005omsws6k716vtd","_id":"cm7k5rwaw006omsws6amj5uxp"}],"PostTag":[{"post_id":"cm7k5rwa6001emsws7muagexo","tag_id":"cm7k5rwa6001gmswsco47f6rl","_id":"cm7k5rwad001rmswshyfc0z9r"},{"post_id":"cm7k5rwa6001emsws7muagexo","tag_id":"cm7k5rwac001kmsws2llfcn9f","_id":"cm7k5rwad001tmsws3j6o0hs0"},{"post_id":"cm7k5rwa6001emsws7muagexo","tag_id":"cm7k5rwad001nmswshc93h4gm","_id":"cm7k5rwad001vmswsc8501nya"},{"post_id":"cm7k5rwap0050mswsbq3d8cxh","tag_id":"cm7k5rwaq0053msws6m0t1hiw","_id":"cm7k5rwat005mmsws137x53bq"},{"post_id":"cm7k5rwap0050mswsbq3d8cxh","tag_id":"cm7k5rwar0058msws6sxk5q57","_id":"cm7k5rwat005pmswse5cu2u4j"},{"post_id":"cm7k5rwap0050mswsbq3d8cxh","tag_id":"cm7k5rwas005cmsws2njfcrnv","_id":"cm7k5rwau005smswsdvij5097"},{"post_id":"cm7k5rwap0050mswsbq3d8cxh","tag_id":"cm7k5rwas005gmsws9erc9laj","_id":"cm7k5rwau005vmsws7a7w7y79"},{"post_id":"cm7k5rwaq0051msws0j2i2bn8","tag_id":"cm7k5rwaq0053msws6m0t1hiw","_id":"cm7k5rwav0064mswscep7506a"},{"post_id":"cm7k5rwaq0051msws0j2i2bn8","tag_id":"cm7k5rwar0058msws6sxk5q57","_id":"cm7k5rwav0067mswsfnev2agu"},{"post_id":"cm7k5rwaq0051msws0j2i2bn8","tag_id":"cm7k5rwau005wmsws0ay52f3c","_id":"cm7k5rwav006bmswse9ru8d0v"},{"post_id":"cm7k5rwaq0055msws2m682ynp","tag_id":"cm7k5rwaq0053msws6m0t1hiw","_id":"cm7k5rwaw006hmswsc1p352v0"},{"post_id":"cm7k5rwaq0055msws2m682ynp","tag_id":"cm7k5rwar0058msws6sxk5q57","_id":"cm7k5rwaw006kmswsehmmc4pd"},{"post_id":"cm7k5rwaq0055msws2m682ynp","tag_id":"cm7k5rwav0069mswsalrc1n3e","_id":"cm7k5rwaw006nmswset7t6aom"}],"Tag":[{"name":"postgresql","_id":"cm7k5rwa6001gmswsco47f6rl"},{"name":"表死锁","_id":"cm7k5rwac001kmsws2llfcn9f"},{"name":"排查","_id":"cm7k5rwad001nmswshc93h4gm"},{"name":"ssh","_id":"cm7k5rwaq0053msws6m0t1hiw"},{"name":"vpn","_id":"cm7k5rwar0058msws6sxk5q57"},{"name":"tunnel","_id":"cm7k5rwas005cmsws2njfcrnv"},{"name":"configuration","_id":"cm7k5rwas005gmsws9erc9laj"},{"name":"sshuttle","_id":"cm7k5rwau005wmsws0ay52f3c"},{"name":"security","_id":"cm7k5rwav0069mswsalrc1n3e"}]}}