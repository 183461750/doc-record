# 部署多主多从(v2)
version: '3.8'
services:

  redis1:
    image: redis:5.0.4
    networks:
      - middleware
    ports:
      - target: 7001
        published: 7001
        protocol: tcp
        mode: host
      - target: 17001
        published: 17001
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7001' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure

  redis2:
    image: redis:5.0.4
    networks:
      - middleware
    ports:
      - target: 7002
        published: 7002
        protocol: tcp
        mode: host
      - target: 17002
        published: 17002
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7002' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure

  redis3:
    image: redis:5.0.4
    networks:
      - middleware
    ports:
      - target: 7003
        published: 7003
        protocol: tcp
        mode: host
      - target: 17003
        published: 17003
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7003' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure

  redis4:
    image: redis:5.0.4
    networks:
      - middleware
    ports:
      - target: 7004
        published: 7004
        protocol: tcp
        mode: host
      - target: 17004
        published: 17004
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7004' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure

  redis5:
    image: redis:5.0.4
    networks:
      - middleware
    ports:
      - target: 7005
        published: 7005
        protocol: tcp
        mode: host
      - target: 17005
        published: 17005
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7005' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure

  redis6:
    image: redis:5.0.4
    networks:
      - middleware
    ports:
      - target: 7006
        published: 7006
        protocol: tcp
        mode: host
      - target: 17006
        published: 17006
        protocol: tcp
        mode: host
    command:
      bash -c "echo 'port 7006' > redis.conf  &&
      echo 'bind 0.0.0.0' >> redis.conf &&
      echo 'protected-mode no' >> redis.conf &&
      echo 'cluster-enabled yes' >> redis.conf &&
      echo 'appendonly yes' >> redis.conf &&
      echo 'requirepass foobared' >> redis.conf  &&
      echo 'masterauth foobared' >> redis.conf  &&
      cat redis.conf &&
      redis-server redis.conf"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure

networks:
  middleware:
    external: true

# 需创建网络，看/doc/docker-networks.md文件
# docker network create -d overlay --attachable middleware

# 启动节点
# docker stack deploy -c redis.yml redis-cluster

# 部署集群的命令，通过echo打印出具体命令，再修改成对应的端口
# echo docker exec -it $(docker ps -qf "name=redis-cluster_redis1.1") redis-cli --cluster create $(docker inspect -f '{{.NetworkSettings.Networks.middleware.IPAddress}}:700' $(docker ps -qf "name=redis-cluster_redis")) --cluster-replicas 1 -a foobared

# 查看集群是否健康
# docker exec -it $(docker ps -qf "name=redis-cluster_redis1.1") redis-cli -p 7001 -a foobared cluster info

# 修改端口后的部署集群命令(可用docker ps查看端口的顺序)(PS: 所有的IP都需要应用能够正常访问才行(PS: 放弃了这个做法，还是用docker内网IP，应用部署到同一docker network即可))
# docker exec -it 9f11d0bda1a1 redis-cli --cluster create 10.0.1.225:7001 10.0.1.223:7006 10.0.1.221:7005 10.0.1.219:7004 10.0.1.217:7003 10.0.1.215:7002 --cluster-replicas 1 -a foobared

# 10.0.1.144:7001,10.0.1.142:7006,10.0.1.140:7005,10.0.1.138:7004,10.0.1.136:7003,10.0.1.134:7002

### 测试执行命令
# docker exec -it $(docker ps -qf "name=redis-cluster_redis1.1") redis-cli -c -h 10.0.1.144 -p 7001 -a foobared info Replication